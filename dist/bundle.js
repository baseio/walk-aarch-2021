(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
  var __commonJS = (callback, module) => () => {
    if (!module) {
      module = {exports: {}};
      callback(module.exports, module);
    }
    return module.exports;
  };
  var __export = (target, all) => {
    __markAsModule(target);
    for (var name in all)
      __defProp(target, name, {get: all[name], enumerable: true});
  };
  var __exportStar = (target, module, desc) => {
    __markAsModule(target);
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
    }
    return target;
  };
  var __toModule = (module) => {
    if (module && module.__esModule)
      return module;
    return __exportStar(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", {value: module, enumerable: true}), module);
  };

  // node_modules/es6-tween/bundled/Tween.min.js
  var require_Tween_min = __commonJS((exports, module) => {
    !function(t, e) {
      typeof exports == "object" && typeof module != "undefined" ? e(exports) : typeof define == "function" && define.amd ? define(["exports"], e) : e((t = t || self).TWEEN = {});
    }(exports, function(t) {
      "use strict";
      function s(t2) {
        var e2 = u.indexOf(t2);
        -1 < e2 && u.splice(e2, 1), u.push(t2), p = 0, l && !f && (o = c(i), f = true);
      }
      function e(t2) {
        for (var e2 = 0; e2 < u.length; e2++)
          if (t2 === u[e2])
            return u[e2];
        return null;
      }
      function F() {
        return f;
      }
      function x() {
        return d;
      }
      var o, r = typeof self != "undefined" ? self : typeof window != "undefined" ? window : typeof global != "undefined" ? global : this || (t !== void 0 ? t : {}), n = r.requestAnimationFrame || function(t2) {
        return r.setTimeout(t2, 50 / 3);
      }, a = r.cancelAnimationFrame || function(t2) {
        return r.clearTimeout(t2);
      }, C = function() {
        if (typeof process == "undefined" || process.hrtime === void 0 || process.versions && process.versions.electron !== void 0) {
          if (r.performance !== void 0 && r.performance.now !== void 0)
            return r.performance.now.bind(r.performance);
          var t2 = r.performance && r.performance.timing && r.performance.timing.navigationStart ? r.performance.timing.navigationStart : Date.now();
          return function() {
            return Date.now() - t2;
          };
        }
        return function() {
          var t3 = process.hrtime();
          return 1e3 * t3[0] + t3[1] / 1e6;
        };
      }(), u = [], f = false, l = false, h = [], c = n, p = 0, y = 120, d = true, N = function(t2) {
        var e2 = u.indexOf(t2);
        e2 !== -1 && u.splice(e2, 1), u.length === 0 && (a(o), f = false);
      }, i = function t2() {
        var e2 = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : C(), r2 = 1 < arguments.length ? arguments[1] : void 0;
        if (y <= p && d)
          return f = false, p = 0, a(o), false;
        l && f ? o = c(t2) : function() {
          for (var t3 = 0; t3 < h.length; t3++)
            h[t3]();
        }(), u.length || p++;
        for (var n2 = 0, i2 = u.length; n2 < i2; )
          u[n2++].update(e2, r2), i2 > u.length && n2--, i2 = u.length;
        return true;
      }, q = {}, v = {Linear: {None: function(t2) {
        return t2;
      }}, Quadratic: {In: function(t2) {
        return Math.pow(t2, 2);
      }, Out: function(t2) {
        return t2 * (2 - t2);
      }, InOut: function(t2) {
        return (t2 *= 2) < 1 ? 0.5 * Math.pow(t2, 2) : -0.5 * (--t2 * (t2 - 2) - 1);
      }}, Cubic: {In: function(t2) {
        return Math.pow(t2, 3);
      }, Out: function(t2) {
        return --t2 * t2 * t2 + 1;
      }, InOut: function(t2) {
        return (t2 *= 2) < 1 ? 0.5 * Math.pow(t2, 3) : 0.5 * ((t2 -= 2) * t2 * t2 + 2);
      }}, Quartic: {In: function(t2) {
        return Math.pow(t2, 4);
      }, Out: function(t2) {
        return 1 - --t2 * t2 * t2 * t2;
      }, InOut: function(t2) {
        return (t2 *= 2) < 1 ? 0.5 * Math.pow(t2, 4) : -0.5 * ((t2 -= 2) * t2 * t2 * t2 - 2);
      }}, Quintic: {In: function(t2) {
        return Math.pow(t2, 5);
      }, Out: function(t2) {
        return --t2 * t2 * t2 * t2 * t2 + 1;
      }, InOut: function(t2) {
        return (t2 *= 2) < 1 ? 0.5 * Math.pow(t2, 5) : 0.5 * ((t2 -= 2) * t2 * t2 * t2 * t2 + 2);
      }}, Sinusoidal: {In: function(t2) {
        return 1 - Math.cos(t2 * Math.PI / 2);
      }, Out: function(t2) {
        return Math.sin(t2 * Math.PI / 2);
      }, InOut: function(t2) {
        return 0.5 * (1 - Math.cos(Math.PI * t2));
      }}, Exponential: {In: function(t2) {
        return t2 === 0 ? 0 : Math.pow(1024, t2 - 1);
      }, Out: function(t2) {
        return t2 === 1 ? 1 : 1 - Math.pow(2, -10 * t2);
      }, InOut: function(t2) {
        return t2 === 0 ? 0 : t2 === 1 ? 1 : (t2 *= 2) < 1 ? 0.5 * Math.pow(1024, t2 - 1) : 0.5 * (2 - Math.pow(2, -10 * (t2 - 1)));
      }}, Circular: {In: function(t2) {
        return 1 - Math.sqrt(1 - t2 * t2);
      }, Out: function(t2) {
        return Math.sqrt(1 - --t2 * t2);
      }, InOut: function(t2) {
        return (t2 *= 2) < 1 ? -0.5 * (Math.sqrt(1 - t2 * t2) - 1) : 0.5 * (Math.sqrt(1 - (t2 -= 2) * t2) + 1);
      }}, Elastic: {In: function(t2) {
        return t2 === 0 ? 0 : t2 === 1 ? 1 : -Math.pow(2, 10 * (t2 - 1)) * Math.sin(5 * (t2 - 1.1) * Math.PI);
      }, Out: function(t2) {
        return t2 === 0 ? 0 : t2 === 1 ? 1 : Math.pow(2, -10 * t2) * Math.sin(5 * (t2 - 0.1) * Math.PI) + 1;
      }, InOut: function(t2) {
        return t2 === 0 ? 0 : t2 === 1 ? 1 : (t2 *= 2) < 1 ? -0.5 * Math.pow(2, 10 * (t2 - 1)) * Math.sin(5 * (t2 - 1.1) * Math.PI) : 0.5 * Math.pow(2, -10 * (t2 - 1)) * Math.sin(5 * (t2 - 1.1) * Math.PI) + 1;
      }}, Back: {In: function(t2) {
        return t2 * t2 * (2.70158 * t2 - 1.70158);
      }, Out: function(t2) {
        return --t2 * t2 * (2.70158 * t2 + 1.70158) + 1;
      }, InOut: function(t2) {
        var e2 = 2.5949095;
        return (t2 *= 2) < 1 ? t2 * t2 * ((1 + e2) * t2 - e2) * 0.5 : 0.5 * ((t2 -= 2) * t2 * ((1 + e2) * t2 + e2) + 2);
      }}, Bounce: {In: function(t2) {
        return 1 - v.Bounce.Out(1 - t2);
      }, Out: function(t2) {
        var e2 = 2.75, r2 = 7.5625;
        return t2 < 1 / e2 ? r2 * t2 * t2 : t2 < 2 / e2 ? r2 * (t2 -= 1.5 / e2) * t2 + 0.75 : t2 < 2.5 / e2 ? r2 * (t2 -= 2.25 / e2) * t2 + 0.9375 : r2 * (t2 -= 2.625 / e2) * t2 + 0.984375;
      }, InOut: function(t2) {
        return t2 < 0.5 ? 0.5 * v.Bounce.In(2 * t2) : 0.5 * v.Bounce.Out(2 * t2 - 1) + 0.5;
      }}, Stepped: {steps: function(e2) {
        return function(t2) {
          return (t2 * e2 | 0) / e2;
        };
      }}};
      function m(t2) {
        return (m = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t3) {
          return typeof t3;
        } : function(t3) {
          return t3 && typeof Symbol == "function" && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
        })(t2);
      }
      function _(t2, e2) {
        if (!(t2 instanceof e2))
          throw new TypeError("Cannot call a class as a function");
      }
      function g(t2, e2) {
        for (var r2 = 0; r2 < e2.length; r2++) {
          var n2 = e2[r2];
          n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t2, n2.key, n2);
        }
      }
      function b(t2, e2, r2) {
        return e2 && g(t2.prototype, e2), r2 && g(t2, r2), t2;
      }
      function T(e2, t2) {
        var r2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), r2.push.apply(r2, n2);
        }
        return r2;
      }
      function O(i2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var o2 = arguments[t2] != null ? arguments[t2] : {};
          t2 % 2 ? T(Object(o2), true).forEach(function(t3) {
            var e2, r2, n2;
            e2 = i2, n2 = o2[r2 = t3], r2 in e2 ? Object.defineProperty(e2, r2, {value: n2, enumerable: true, configurable: true, writable: true}) : e2[r2] = n2;
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(i2, Object.getOwnPropertyDescriptors(o2)) : T(Object(o2)).forEach(function(t3) {
            Object.defineProperty(i2, t3, Object.getOwnPropertyDescriptor(o2, t3));
          });
        }
        return i2;
      }
      function w(t2) {
        return (w = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
          return t3.__proto__ || Object.getPrototypeOf(t3);
        })(t2);
      }
      function k(t2, e2) {
        return (k = Object.setPrototypeOf || function(t3, e3) {
          return t3.__proto__ = e3, t3;
        })(t2, e2);
      }
      function j(t2) {
        if (t2 === void 0)
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t2;
      }
      function A(t2, e2) {
        return !e2 || typeof e2 != "object" && typeof e2 != "function" ? j(t2) : e2;
      }
      function S(t2, e2) {
        return function(t3) {
          if (Array.isArray(t3))
            return t3;
        }(t2) || function(t3, e3) {
          if (!(Symbol.iterator in Object(t3) || Object.prototype.toString.call(t3) === "[object Arguments]"))
            return;
          var r2 = [], n2 = true, i2 = false, o2 = void 0;
          try {
            for (var s2, a2 = t3[Symbol.iterator](); !(n2 = (s2 = a2.next()).done) && (r2.push(s2.value), !e3 || r2.length !== e3); n2 = true)
              ;
          } catch (t4) {
            i2 = true, o2 = t4;
          } finally {
            try {
              n2 || a2.return == null || a2.return();
            } finally {
              if (i2)
                throw o2;
            }
          }
          return r2;
        }(t2, e2) || function() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }();
      }
      var D = 50 / 3, U = "_chainedTweens", E = "Callback", V = "update", B = "complete", G = "start", z = "repeat", Q = "reverse", P = "restart", M = "STRING_PROP", R = /\s+|([A-Za-z?().,{}:""[\]#%]+)|([-+]=+)?([-+]+)?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]=?\d+)?/g;
      function I(t2) {
        if (t2 && t2.nodeType || t2 === void 0 || m(t2) !== "object")
          return t2;
        if (Array.isArray(t2))
          return [].concat(t2);
        if (m(t2) !== "object")
          return t2;
        var e2 = {};
        for (var r2 in t2)
          e2[r2] = I(t2[r2]);
        return e2;
      }
      var L = function(t2) {
        return isNaN(+t2) || (t2[0] === "+" || t2[0] === "-") && t2[1] === "=" || t2 === "" || t2 === " ";
      }, K = /^#([0-9a-f]{6}|[0-9a-f]{3})$/gi, W = function(t2, e2) {
        var r2, n2, i2;
        e2.length === 3 && (e2 = (r2 = e2[0]) + r2 + (n2 = e2[1]) + n2 + (i2 = e2[2]) + i2);
        var o2 = parseInt(e2, 16);
        return "rgb(" + (r2 = o2 >> 16 & 255) + ", " + (n2 = o2 >> 8 & 255) + ", " + (i2 = 255 & o2) + ")";
      };
      function H(t2) {
        if (t2 && t2.splice && t2.isString)
          return t2;
        if (typeof t2 != "string")
          return t2;
        if (t2.charAt(1) === "=")
          return t2;
        var e2 = t2.replace(K, W).match(R).map(function(t3) {
          return L(t3) ? t3 : +t3;
        });
        return e2.isString = true, e2;
      }
      function X(r2, n2, t2, e2) {
        var i2 = t2[r2], o2 = e2[r2];
        if (i2 === o2)
          return true;
        if (Array.isArray(i2) && Array.isArray(o2) && i2.length === o2.length)
          for (var s2 = 0, a2 = o2.length; s2 < a2; s2++) {
            var u2 = i2[s2], f2 = o2[s2];
            u2 === f2 || typeof u2 == "number" && typeof f2 == "number" || X(s2, n2[r2], i2, o2);
          }
        if (!(typeof i2 == "number" && typeof o2 == "number" || i2 && i2.splice && i2.isString && o2 && o2.splice && o2.isString)) {
          if (typeof i2 == "string" && Array.isArray(o2)) {
            var l2 = H(i2), h2 = o2.map(H);
            return t2[r2] = l2, e2[r2] = h2, true;
          }
          if (typeof i2 == "string" || typeof o2 == "string") {
            var c2 = Array.isArray(i2) && i2[0] === M ? i2 : H(i2), p2 = Array.isArray(o2) && o2[0] === M ? o2 : H(o2);
            if (c2 === void 0)
              return;
            for (var y2 = 1; y2 < c2.length; )
              c2[y2] === p2[y2] && typeof c2[y2 - 1] == "string" ? (c2.splice(y2 - 1, 2, c2[y2 - 1] + c2[y2]), p2.splice(y2 - 1, 2, p2[y2 - 1] + p2[y2])) : y2++;
            return c2[y2 = 0] === M && c2.shift(), p2[0] === M && p2.shift(), t2[r2] = c2, e2[r2] = p2, true;
          }
          if (m(i2) === "object" && m(o2) === "object") {
            if (Array.isArray(i2) && !i2.isString)
              return i2.map(function(t3, e3) {
                return X(e3, n2[r2], i2, o2);
              });
            for (var d2 in o2)
              X(d2, n2[r2], i2, o2);
            return true;
          }
        }
        return false;
      }
      var Y = "rgba(", Z = function(t2, e2, r2) {
        var n2 = 2 < arguments.length && r2 !== void 0 ? r2 : "rgb(";
        return typeof t2[e2] == "number" && (t2[e2 - 1] === n2 || t2[e2 - 3] === n2 || t2[e2 - 5] === n2);
      };
      function $(t2, e2, r2, n2, i2, o2, s2) {
        var a2 = s2 ? r2 : r2[t2], u2 = s2 ? n2 : n2[t2];
        if (u2 === void 0)
          return a2;
        if (a2 === void 0 || typeof a2 == "string" || a2 === u2)
          return u2;
        if (m(a2) === "object" && m(u2) === "object") {
          if (!a2 || !u2)
            return e2[t2];
          if (m(a2) === "object" && a2 && a2.isString && u2 && u2.splice && u2.isString) {
            for (var f2 = "", l2 = 0, h2 = a2.length; l2 < h2; l2++)
              if (a2[l2] !== u2[l2] || typeof a2[l2] != "number" || typeof u2[l2] == "number") {
                var c2 = typeof a2[l2] == "number" && typeof u2[l2] == "string" && u2[l2][1] === "=", p2 = typeof a2[l2] != "number" ? a2[l2] : c2 ? a2[l2] + parseFloat(u2[l2][0] + u2[l2].substr(2)) * i2 : a2[l2] + (u2[l2] - a2[l2]) * i2;
                (Z(a2, l2) || Z(a2, l2, Y)) && (p2 |= 0), f2 += p2, c2 && o2 === 1 && (a2[l2] = a2[l2] + parseFloat(u2[l2][0] + u2[l2].substr(2)));
              } else
                f2 += a2[l2];
            return s2 || (e2[t2] = f2), f2;
          }
          if (Array.isArray(a2) && a2[0] !== M)
            for (var y2 = 0, d2 = a2.length; y2 < d2; y2++)
              a2[y2] !== u2[y2] && typeof e2[t2] != "string" && $(y2, e2[t2], a2, u2, i2, o2);
          else if (m(a2) === "object" && a2 && !a2.isString)
            for (var v2 in a2)
              a2[v2] !== u2[v2] && $(v2, e2[t2], a2, u2, i2, o2);
        } else if (typeof a2 == "number") {
          var _2 = typeof u2 == "string";
          e2[t2] = _2 ? a2 + parseFloat(u2[0] + u2.substr(2)) * i2 : a2 + (u2 - a2) * i2, _2 && o2 === 1 && (r2[t2] = e2[t2]);
        } else
          typeof u2 == "function" && (e2[t2] = u2(i2));
        return e2[t2];
      }
      function J(t2, e2) {
        var i2 = t2[e2], o2 = e2.replace(nt, "").split(rt), s2 = o2.length - 1, a2 = Array.isArray(t2), u2 = m(t2) === "object" && !a2;
        return u2 ? (t2[e2] = null, delete t2[e2]) : a2 && t2.splice(e2, 1), o2.reduce(function(t3, e3, r2) {
          a2 && e3 !== "." && e3 !== "[" && (e3 *= 1);
          var n2 = o2[r2 + 1] === "[";
          if (e3 === "." || e3 === "[")
            return e3 === "." ? a2 = !(u2 = true) : e3 === "[" && (a2 = !(u2 = false)), t3;
          if (t3[e3] === void 0) {
            if (a2 || u2)
              return t3[e3] = r2 === s2 ? i2 : a2 || n2 ? [] : u2 ? {} : null, u2 = a2 = false, t3[e3];
          } else if (t3[e3] !== void 0)
            return r2 === s2 && (t3[e3] = i2), t3[e3];
          return t3;
        }, t2);
      }
      function tt(t2) {
        if (m(t2) === "object" && t2) {
          for (var e2 in t2)
            if (e2.indexOf(".") !== -1 || e2.indexOf("[") !== -1)
              J(t2, e2);
            else if (m(t2[e2]) === "object" && t2[e2]) {
              var r2 = t2[e2];
              for (var n2 in r2)
                if (n2.indexOf(".") !== -1 || n2.indexOf("[") !== -1)
                  J(r2, n2);
                else if (m(r2[n2]) === "object" && r2[n2]) {
                  var i2 = r2[n2];
                  for (var o2 in i2)
                    o2.indexOf(".") === -1 && o2.indexOf("[") === -1 || J(i2, o2);
                }
            }
        }
        return t2;
      }
      var et, rt = /([.[])/g, nt = /\]/g, it = Object.freeze({__proto__: null, FRAME_MS: D, TOO_LONG_FRAME_MS: 250, CHAINED_TWEENS: U, EVENT_CALLBACK: E, EVENT_UPDATE: V, EVENT_COMPLETE: B, EVENT_START: G, EVENT_REPEAT: z, EVENT_REVERSE: Q, EVENT_PAUSE: "pause", EVENT_PLAY: "play", EVENT_RESTART: P, EVENT_STOP: "stop", EVENT_SEEK: "seek", STRING_PROP: M, NUM_REGEX: R, deepCopy: I, decomposeString: H, decompose: X, RGB: "rgb(", RGBA: Y, isRGBColor: Z, recompose: $, SET_NESTED: tt}), ot = {Linear: function(t2, e2, r2) {
        var n2 = t2.length - 1, i2 = n2 * e2, o2 = Math.floor(i2), s2 = ot.Utils.Linear;
        return e2 < 0 ? s2(t2[0], t2[1], i2, r2) : 1 < e2 ? s2(t2[n2], t2[n2 - 1], n2 - i2, r2) : s2(t2[o2], t2[n2 < o2 + 1 ? n2 : o2 + 1], i2 - o2, r2);
      }, Bezier: function(t2, e2, r2) {
        for (var n2 = ot.Utils.Reset(r2), i2 = t2.length - 1, o2 = Math.pow, s2 = ot.Utils.Bernstein, a2 = Array.isArray(n2), u2 = 0; u2 <= i2; u2++)
          if (typeof n2 == "number")
            n2 += o2(1 - e2, i2 - u2) * o2(e2, u2) * t2[u2] * s2(i2, u2);
          else if (a2)
            for (var f2 = 0, l2 = n2.length; f2 < l2; f2++)
              typeof n2[f2] == "number" ? n2[f2] += o2(1 - e2, i2 - u2) * o2(e2, u2) * t2[u2][f2] * s2(i2, u2) : n2[f2] = t2[u2][f2];
          else if (m(n2) === "object")
            for (var h2 in n2)
              typeof n2[h2] == "number" ? n2[h2] += o2(1 - e2, i2 - u2) * o2(e2, u2) * t2[u2][h2] * s2(i2, u2) : n2[h2] = t2[u2][h2];
          else if (typeof n2 == "string") {
            for (var c2 = "", p2 = t2[Math.round(i2 * e2)], y2 = 1, d2 = p2.length; y2 < d2; y2++)
              c2 += p2[y2];
            return c2;
          }
        return n2;
      }, CatmullRom: function(t2, e2, r2) {
        var n2 = t2.length - 1, i2 = n2 * e2, o2 = Math.floor(i2), s2 = ot.Utils.CatmullRom;
        return t2[0] === t2[n2] ? (e2 < 0 && (o2 = Math.floor(i2 = n2 * (1 + e2))), s2(t2[(o2 - 1 + n2) % n2], t2[o2], t2[(o2 + 1) % n2], t2[(o2 + 2) % n2], i2 - o2, r2)) : e2 < 0 ? s2(t2[1], t2[1], t2[0], t2[0], -e2, r2) : 1 < e2 ? s2(t2[n2 - 1], t2[n2 - 1], t2[n2], t2[n2], (0 | e2) - e2, r2) : s2(t2[o2 ? o2 - 1 : 0], t2[o2], t2[n2 < o2 + 1 ? n2 : o2 + 1], t2[n2 < o2 + 2 ? n2 : o2 + 2], i2 - o2, r2);
      }, Utils: {Linear: function(t2, e2, r2, n2) {
        if (t2 === e2 || typeof t2 == "string") {
          if (e2.length && e2.splice && e2.isString) {
            e2 = "";
            for (var i2 = 0, o2 = t2.length; i2 < o2; i2++)
              e2 += t2[i2];
          }
          return e2;
        }
        if (typeof t2 == "number")
          return typeof t2 == "function" ? t2(r2) : t2 + (e2 - t2) * r2;
        if (m(t2) === "object") {
          if (t2.length !== void 0) {
            var s2 = typeof t2[0] == "string" || t2.isString;
            if (s2 || t2[0] === M) {
              for (var a2 = "", u2 = s2 ? 0 : 1, f2 = t2.length; u2 < f2; u2++) {
                var l2 = r2 === 0 ? t2[u2] : r2 !== 1 && typeof t2[u2] == "number" ? t2[u2] + (e2[u2] - t2[u2]) * r2 : e2[u2];
                (0 < r2 && r2 < 1 && Z(t2, u2) || Z(t2, u2, Y)) && (l2 |= 0), a2 += l2;
              }
              return a2;
            }
            if (n2 && n2.length && n2.splice)
              for (var h2 = 0, c2 = n2.length; h2 < c2; h2++)
                n2[h2] = ot.Utils.Linear(t2[h2], e2[h2], r2, n2[h2]);
          } else
            for (var p2 in n2)
              n2[p2] = ot.Utils.Linear(t2[p2], e2[p2], r2, n2[p2]);
          return n2;
        }
      }, Reset: function(t2) {
        if (Array.isArray(t2)) {
          for (var e2 = 0, r2 = t2.length; e2 < r2; e2++)
            t2[e2] = ot.Utils.Reset(t2[e2]);
          return t2;
        }
        if (m(t2) !== "object")
          return typeof t2 == "number" ? 0 : t2;
        for (var n2 in t2)
          t2[n2] = ot.Utils.Reset(t2[n2]);
        return t2;
      }, Bernstein: function(t2, e2) {
        var r2 = ot.Utils.Factorial;
        return r2(t2) / r2(e2) / r2(t2 - e2);
      }, Factorial: (et = [1], function(t2) {
        var e2 = 1;
        if (et[t2])
          return et[t2];
        for (var r2 = t2; 1 < r2; r2--)
          e2 *= r2;
        return et[t2] = e2;
      }), CatmullRom: function(t2, e2, r2, n2, i2, o2) {
        if (typeof t2 == "string")
          return e2;
        if (typeof t2 == "number") {
          var s2 = 0.5 * (r2 - t2), a2 = 0.5 * (n2 - e2), u2 = i2 * i2;
          return (2 * e2 - 2 * r2 + s2 + a2) * (i2 * u2) + (-3 * e2 + 3 * r2 - 2 * s2 - a2) * u2 + s2 * i2 + e2;
        }
        if (m(t2) === "object") {
          if (t2.length !== void 0) {
            if (t2[0] === M) {
              for (var f2 = "", l2 = 1, h2 = t2.length; l2 < h2; l2++) {
                var c2 = typeof t2[l2] == "number" ? ot.Utils.CatmullRom(t2[l2], e2[l2], r2[l2], n2[l2], i2) : n2[l2];
                (Z(t2, l2) || Z(t2, l2, Y)) && (c2 |= 0), f2 += c2;
              }
              return f2;
            }
            for (var p2 = 0, y2 = o2.length; p2 < y2; p2++)
              o2[p2] = ot.Utils.CatmullRom(t2[p2], e2[p2], r2[p2], n2[p2], i2, o2[p2]);
          } else
            for (var d2 in o2)
              o2[d2] = ot.Utils.CatmullRom(t2[d2], e2[d2], r2[d2], n2[d2], i2, o2[d2]);
          return o2;
        }
      }}}, st = {};
      function at(t2, e2, r2) {
        if (!t2 || !t2.nodeType)
          return e2;
        var n2 = t2.queueID || "q_" + Date.now();
        t2.queueID || (t2.queueID = n2);
        var i2 = st[n2];
        if (i2) {
          if (i2.object === e2 && t2 === i2.tween.node && r2._startTime === i2.tween._startTime)
            N(i2.tween);
          else if (m(e2) === "object" && e2 && i2.object) {
            for (var o2 in e2)
              o2 in i2.object && (r2._startTime === i2.tween._startTime ? delete i2.object[o2] : i2.propNormaliseRequired = true);
            Object.assign(i2.object, e2);
          }
          return i2.object;
        }
        return m(e2) === "object" && e2 ? (st[n2] = {tween: r2, object: e2, propNormaliseRequired: false}, st[n2].object) : e2;
      }
      function ut(t2, e2, r2) {
        return e2 ? t2 ? typeof window != "undefined" && t2 === window || typeof document != "undefined" && t2 === document ? [t2] : typeof t2 == "string" ? !!document.querySelectorAll && document.querySelectorAll(t2) : Array.isArray(t2) ? t2 : t2.nodeType ? [t2] : r2 ? t2 : [] : null : t2 ? typeof window != "undefined" && t2 === window || typeof document != "undefined" && t2 === document ? t2 : typeof t2 == "string" ? !!document.querySelector && document.querySelector(t2) : Array.isArray(t2) ? t2[0] : t2.nodeType || r2 ? t2 : null : null;
      }
      var ft = 0, lt = v.Linear.None, ht = function() {
        function L2(t2, e2) {
          return _(this, L2), this.id = ft++, !t2 || m(t2) !== "object" || e2 || t2.nodeType ? t2 && (t2.nodeType || t2.length || typeof t2 == "string") && (t2 = this.node = ut(t2), e2 = this.object = at(t2, e2, this)) : (e2 = this.object = t2, t2 = null), this._valuesEnd = null, this._valuesStart = Array.isArray(e2) ? [] : {}, this._duration = 1e3, this._easingFunction = lt, this._easingReverse = lt, this._interpolationFunction = ot.Linear, this._startTime = 0, this._initTime = 0, this._delayTime = 0, this._repeat = 0, this._r = 0, this._isPlaying = false, this._yoyo = false, this._reversed = false, this._onStartCallbackFired = false, this._pausedTime = null, this._isFinite = true, this._maxListener = 15, this._chainedTweensCount = 0, this._prevTime = null, this;
        }
        return b(L2, null, [{key: "fromTo", value: function(t2, e2, r2, n2) {
          var i2 = 3 < arguments.length && n2 !== void 0 ? n2 : {};
          i2.quickRender = i2.quickRender ? i2.quickRender : !r2;
          var o2 = new L2(t2, e2).to(r2, i2);
          return i2.quickRender && (o2.render().update(o2._startTime), o2._rendered = false, o2._onStartCallbackFired = false), o2;
        }}, {key: "to", value: function(t2, e2, r2) {
          return L2.fromTo(t2, null, e2, r2);
        }}, {key: "from", value: function(t2, e2, r2) {
          return L2.fromTo(t2, e2, null, r2);
        }}]), b(L2, [{key: "setMaxListener", value: function(t2) {
          var e2 = 0 < arguments.length && t2 !== void 0 ? t2 : 15;
          return this._maxListener = e2, this;
        }}, {key: "on", value: function(t2, e2) {
          for (var r2 = this._maxListener, n2 = t2 + E, i2 = 0; i2 < r2; i2++) {
            var o2 = n2 + i2;
            if (!this[o2]) {
              this[o2] = e2;
              break;
            }
          }
          return this;
        }}, {key: "once", value: function(t2, i2) {
          for (var o2 = this, e2 = this._maxListener, r2 = t2 + E, n2 = function(t3) {
            var n3 = r2 + t3;
            if (!o2[n3])
              return o2[n3] = function() {
                for (var t4 = arguments.length, e3 = new Array(t4), r3 = 0; r3 < t4; r3++)
                  e3[r3] = arguments[r3];
                i2.apply(o2, e3), o2[n3] = null;
              }, "break";
          }, s2 = 0; s2 < e2; s2++) {
            if (n2(s2) === "break")
              break;
          }
          return this;
        }}, {key: "off", value: function(t2, e2) {
          for (var r2 = this._maxListener, n2 = t2 + E, i2 = 0; i2 < r2; i2++) {
            var o2 = n2 + i2;
            this[o2] === e2 && (this[o2] = null);
          }
          return this;
        }}, {key: "emit", value: function(t2, e2, r2, n2) {
          var i2 = this._maxListener, o2 = t2 + E;
          if (!this[o2 + 0])
            return this;
          for (var s2 = 0; s2 < i2; s2++) {
            var a2 = o2 + s2;
            this[a2] && this[a2](e2, r2, n2);
          }
          return this;
        }}, {key: "isPlaying", value: function() {
          return this._isPlaying;
        }}, {key: "isStarted", value: function() {
          return this._onStartCallbackFired;
        }}, {key: "reverse", value: function(t2) {
          var e2 = this._reversed;
          return this._reversed = t2 !== void 0 ? t2 : !e2, this;
        }}, {key: "reversed", value: function() {
          return this._reversed;
        }}, {key: "pause", value: function() {
          return this._isPlaying ? (this._isPlaying = false, N(this), this._pausedTime = C(), this.emit("pause", this.object)) : this;
        }}, {key: "play", value: function() {
          return this._isPlaying ? this : (this._isPlaying = true, this._startTime += C() - this._pausedTime, this._initTime = this._startTime, s(this), this._pausedTime = C(), this.emit("play", this.object));
        }}, {key: "restart", value: function() {
          return this._repeat = this._r, this.reassignValues(), s(this), this.emit(P, this.object);
        }}, {key: "seek", value: function(t2, e2) {
          var r2 = this._duration, n2 = this._initTime, i2 = this._startTime, o2 = this._reversed, s2 = n2 + t2;
          return this._isPlaying = true, s2 < i2 && n2 <= i2 && (this._startTime -= r2, this._reversed = !o2), this.update(t2, false), this.emit("seek", t2, this.object), e2 ? this : this.pause();
        }}, {key: "duration", value: function(t2) {
          return this._duration = typeof t2 == "function" ? t2(this._duration) : t2, this;
        }}, {key: "to", value: function(t2, e2) {
          var r2 = 1 < arguments.length && e2 !== void 0 ? e2 : 1e3;
          if (this._valuesEnd = t2, typeof r2 == "number" || typeof r2 == "function")
            this._duration = typeof r2 == "function" ? r2(this._duration) : r2;
          else if (m(r2) === "object") {
            for (var n2 in r2)
              if (typeof this[n2] == "function") {
                var i2 = S(Array.isArray(r2[n2]) ? r2[n2] : [r2[n2]], 4), o2 = i2[0], s2 = o2 === void 0 ? null : o2, a2 = i2[1], u2 = a2 === void 0 ? null : a2, f2 = i2[2], l2 = f2 === void 0 ? null : f2, h2 = i2[3], c2 = h2 === void 0 ? null : h2;
                this[n2](s2, u2, l2, c2);
              }
          }
          return this;
        }}, {key: "render", value: function() {
          if (this._rendered)
            return this;
          var t2 = this._valuesStart, e2 = this._valuesEnd, r2 = this.object, n2 = this.node, i2 = this.InitialValues;
          if (tt(r2), tt(e2), n2 && n2.queueID && st[n2.queueID]) {
            var o2 = st[n2.queueID];
            if (o2.propNormaliseRequired && o2.tween !== this) {
              for (var s2 in e2)
                o2.tween._valuesEnd[s2];
              o2.normalisedProp = true, o2.propNormaliseRequired = false;
            }
          }
          if (n2 && i2 && (r2 && Object.keys(r2).length !== 0 ? e2 && Object.keys(e2).length !== 0 || (e2 = this._valuesEnd = i2(n2, r2)) : r2 = this.object = at(n2, i2(n2, e2), this)), !t2.processed) {
            for (var a2 in e2) {
              var u2 = r2 && r2[a2] && I(r2[a2]), f2 = e2[a2];
              if (!(q[a2] && q[a2].init && (q[a2].init.call(this, u2, f2, a2, r2), u2 === void 0 && t2[a2] && (u2 = t2[a2]), q[a2].skipProcess)) && !(typeof u2 == "number" && isNaN(u2) || u2 === null || f2 === null || u2 === false || f2 === false || u2 === void 0 || f2 === void 0 || u2 === f2)) {
                if (t2[a2] = u2, Array.isArray(f2))
                  if (Array.isArray(u2))
                    f2.isString && r2[a2].isString && !u2.isString ? u2.isString = true : X(a2, r2, t2, e2);
                  else {
                    f2.unshift(u2);
                    for (var l2 = 0, h2 = f2.length; l2 < h2; l2++)
                      typeof f2[l2] == "string" && (f2[l2] = H(f2[l2]));
                  }
                else
                  X(a2, r2, t2, e2);
                typeof u2 != "number" || typeof f2 != "string" || f2[1];
              }
            }
            t2.processed = true;
          }
          return L2.Renderer && this.node && L2.Renderer.init && (L2.Renderer.init.call(this, r2, t2, e2), this.__render = true), this._rendered = true, this;
        }}, {key: "start", value: function(t2) {
          return this._startTime = t2 !== void 0 ? typeof t2 == "string" ? C() + parseFloat(t2) : t2 : C(), this._startTime += this._delayTime, this._initTime = this._prevTime = this._startTime, this._onStartCallbackFired = false, this._rendered = false, this._isPlaying = true, s(this), this;
        }}, {key: "stop", value: function() {
          var t2 = this._isPlaying, e2 = this._isFinite, r2 = this.object, n2 = this._startTime, i2 = this._duration, o2 = this._r, s2 = this._yoyo, a2 = this._reversed;
          if (!t2)
            return this;
          var u2 = e2 ? (o2 + 1) % 2 == 1 : !a2;
          return this._reversed = false, s2 && u2 ? this.update(n2) : this.update(n2 + i2), N(this), this.emit("stop", r2);
        }}, {key: "delay", value: function(t2) {
          return this._delayTime = typeof t2 == "function" ? t2(this._delayTime) : t2, this;
        }}, {key: "chainedTweens", value: function() {
          if (this._chainedTweensCount = arguments.length, !this._chainedTweensCount)
            return this;
          for (var t2 = 0, e2 = this._chainedTweensCount; t2 < e2; t2++)
            this[U + t2] = arguments[t2];
          return this;
        }}, {key: "repeat", value: function(t2) {
          return this._repeat = this._duration ? typeof t2 == "function" ? t2(this._repeat) : t2 : 0, this._r = this._repeat, this._isFinite = isFinite(t2), this;
        }}, {key: "reverseDelay", value: function(t2) {
          return this._reverseDelayTime = typeof t2 == "function" ? t2(this._reverseDelayTime) : t2, this;
        }}, {key: "yoyo", value: function(t2, e2) {
          return this._yoyo = typeof t2 == "function" ? t2(this._yoyo) : t2 === null ? this._yoyo : t2, t2 || (this._reversed = false), this._easingReverse = e2 || null, this;
        }}, {key: "easing", value: function(t2) {
          return this._easingFunction = t2, this;
        }}, {key: "interpolation", value: function(t2) {
          return typeof t2 == "function" && (this._interpolationFunction = t2), this;
        }}, {key: "reassignValues", value: function(t2) {
          var e2 = this._valuesStart, r2 = this.object, n2 = this._delayTime;
          for (var i2 in this._isPlaying = true, this._startTime = t2 !== void 0 ? t2 : C(), this._startTime += n2, this._reversed = false, s(this), e2) {
            var o2 = e2[i2];
            r2[i2] = o2;
          }
          return this;
        }}, {key: "update", value: function(t2, e2, r2) {
          var n2, i2, o2, s2 = this._onStartCallbackFired, a2 = this._easingFunction, u2 = this._interpolationFunction, f2 = this._easingReverse, l2 = this._repeat, h2 = this._delayTime, c2 = this._reverseDelayTime, p2 = this._yoyo, y2 = this._reversed, d2 = this._startTime, v2 = this._prevTime, _2 = this._duration, m2 = this._valuesStart, g2 = this._valuesEnd, b2 = this.object, T2 = this._isFinite, O2 = this._isPlaying, w2 = this.__render, k2 = this._chainedTweensCount, j2 = 0;
          if (_2) {
            var A2 = (t2 = t2 !== void 0 ? t2 : C()) - v2;
            if (this._prevTime = t2, 250 < A2 && F() && x() && (t2 -= A2 - D), !O2 || t2 < d2 && !r2)
              return true;
            n2 = 1 < (n2 = (t2 - d2) / _2) ? 1 : n2, n2 = y2 ? 1 - n2 : n2;
          } else
            n2 = 1, l2 = 0;
          if (s2 || (this._rendered || (this.render(), this._rendered = true), this.emit(G, b2), this._onStartCallbackFired = true), i2 = y2 && f2 || a2, !b2)
            return true;
          for (o2 in g2) {
            var S2 = m2[o2];
            if (S2 != null || q[o2] && q[o2].update) {
              var E2 = g2[o2], P2 = i2[o2] ? i2[o2](n2) : (typeof i2 == "function" ? i2 : lt)(n2), M2 = u2[o2] ? u2[o2] : typeof u2 == "function" ? u2 : ot.Linear;
              typeof E2 == "number" ? b2[o2] = S2 + (E2 - S2) * P2 : !Array.isArray(E2) || E2.isString || Array.isArray(S2) ? E2 && E2.update ? E2.update(P2) : typeof E2 == "function" ? b2[o2] = E2(P2) : typeof E2 == "string" && typeof S2 == "number" ? b2[o2] = S2 + parseFloat(E2[0] + E2.substr(2)) * P2 : $(o2, b2, m2, g2, P2, n2) : b2[o2] = M2(E2, P2, b2[o2]), q[o2] && q[o2].update && q[o2].update.call(this, b2[o2], S2, E2, P2, n2, o2), j2++;
            }
          }
          if (!j2)
            return N(this), false;
          if (w2 && L2.Renderer && L2.Renderer.update && L2.Renderer.update.call(this, b2, n2), this.emit(V, b2, n2, t2), n2 === 1 || y2 && n2 === 0) {
            if (0 < l2 && 0 < _2) {
              if (T2 && this._repeat--, p2)
                this._reversed = !y2;
              else
                for (o2 in g2) {
                  var R2 = g2[o2];
                  typeof R2 == "string" && typeof m2[o2] == "number" && (m2[o2] += parseFloat(R2[0] + R2.substr(2)));
                }
              return this.emit(p2 && !y2 ? Q : z, b2), this._startTime = y2 && c2 ? t2 - c2 : t2 + h2, true;
            }
            if (e2 || (this._isPlaying = false, N(this), ft--), this.emit(B, b2), this._repeat = this._r, k2)
              for (var I2 = 0; I2 < k2; I2++)
                this[U + I2].start(t2 + _2);
            return false;
          }
          return true;
        }}]), L2;
      }(), ct = function() {
        function t2() {
          _(this, t2), this.totalTime = 0, this.labels = [], this.offsets = [];
        }
        return b(t2, [{key: "parseLabel", value: function(t3, e2) {
          var r2 = this.offsets, n2 = this.labels, i2 = n2.indexOf(t3);
          if (typeof t3 == "string" && t3.indexOf("=") !== -1 && !e2 && i2 === -1) {
            var o2 = t3.substr(t3.indexOf("=") - 1, 2), s2 = t3.split(o2);
            e2 = s2.length === 2 ? o2 + s2[1] : null, t3 = s2[0], i2 = n2.indexOf(t3);
          }
          if (i2 !== -1 && t3) {
            var a2 = r2[i2] || 0;
            if (typeof e2 == "number")
              a2 = e2;
            else if (typeof e2 == "string" && e2.indexOf("=") !== -1) {
              var u2 = e2.charAt(0);
              e2 = Number(e2.substr(2)), u2 === "+" || u2 === "-" ? a2 += parseFloat(u2 + e2) : u2 === "*" ? a2 *= e2 : u2 === "/" ? a2 /= e2 : u2 === "%" && (a2 *= e2 / 100);
            }
            return a2;
          }
          return typeof e2 == "number" ? e2 : 0;
        }}, {key: "addLabel", value: function(t3, e2) {
          return this.labels.push(t3), this.offsets.push(this.parseLabel(t3, e2)), this;
        }}, {key: "setLabel", value: function(t3, e2) {
          var r2 = this.labels.indexOf(t3);
          return r2 !== -1 && this.offsets.splice(r2, 1, this.parseLabel(t3, e2)), this;
        }}, {key: "eraseLabel", value: function(t3) {
          var e2 = this.labels.indexOf(t3);
          return e2 !== -1 && (this.labels.splice(e2, 1), this.offsets.splice(e2, 1)), this;
        }}]), t2;
      }(), pt = 0, yt = function() {
        function r2(t2) {
          var e2;
          return _(this, r2), (e2 = A(this, w(r2).call(this)))._duration = 0, e2._startTime = t2 && t2.startTime !== void 0 ? t2.startTime : C(), e2._tweens = [], e2.elapsed = 0, e2._id = pt++, e2._defaultParams = t2, e2.position = new ct(), e2.position.addLabel("afterLast", e2._duration), e2.position.addLabel("afterInit", e2._startTime), e2._onStartCallbackFired = false, A(e2, j(e2));
        }
        return function(t2, e2) {
          if (typeof e2 != "function" && e2 !== null)
            throw new TypeError("Super expression must either be null or a function");
          t2.prototype = Object.create(e2 && e2.prototype, {constructor: {value: t2, writable: true, configurable: true}}), e2 && k(t2, e2);
        }(r2, ht), b(r2, [{key: "mapTotal", value: function(t2) {
          return t2.call(this, this._tweens), this;
        }}, {key: "timingOrder", value: function(t2) {
          var r3 = t2(this._tweens.map(function(t3) {
            return t3._startTime;
          }));
          return this._tweens.map(function(t3, e2) {
            t3._startTime = r3[e2];
          }), this;
        }}, {key: "getTiming", value: function(t2, e2, r3, n2) {
          var i2 = 3 < arguments.length && n2 !== void 0 ? n2 : 0;
          if (t2 === "reverse") {
            var o2 = r3.stagger, s2 = (o2 || 0) * (e2.length - 1);
            return e2.map(function(t3, e3) {
              return s2 - (o2 || 0) * e3 + i2;
            });
          }
          if (t2 === "async")
            return e2.map(function(t3) {
              return i2;
            });
          if (t2 === "sequence" || t2 === "delayed") {
            var a2 = r3.stagger;
            return a2 = a2 || (r3.duration || 1e3) / (e2.length - 1), e2.map(function(t3, e3) {
              return a2 * e3 + i2;
            });
          }
          if (t2 === "oneByOne")
            return e2.map(function(t3) {
              return r3.duration;
            });
          if (t2 === "shuffle") {
            var u2 = r3.stagger;
            return function(t3) {
              var e3, r4, n3;
              for (n3 = t3.length; n3; --n3)
                e3 = Math.floor(Math.random() * n3), r4 = t3[n3 - 1], t3[n3 - 1] = t3[e3], t3[e3] = r4;
              return t3;
            }(e2.map(function(t3, e3) {
              return (u2 || 0) * e3 + i2;
            }));
          }
          var f2 = r3.stagger;
          return e2.map(function(t3, e3) {
            return (f2 || 0) * e3 + i2;
          });
        }}, {key: "fromTo", value: function(t2, e2, r3, n2) {
          if ((t2 = ut(t2, true, true)) && t2.length) {
            this._defaultParams && (n2 = n2 ? O({}, this._defaultParams, {}, n2) : this._defaultParams);
            for (var i2, o2 = n2.label, s2 = typeof o2 == "number" ? o2 : this.position.parseLabel(o2 !== void 0 ? o2 : "afterLast", null), a2 = this.getTiming(n2.mode, t2, n2, s2), u2 = 0, f2 = t2.length; u2 < f2; u2++)
              i2 = t2[u2], this.add(ht.fromTo(i2, typeof e2 == "function" ? e2(u2, t2.length) : m(e2) === "object" && e2 ? O({}, e2) : null, typeof r3 == "function" ? r3(u2, t2.length) : r3, typeof n2 == "function" ? n2(u2, t2.length) : n2), a2[u2]);
          }
          return this.start();
        }}, {key: "from", value: function(t2, e2, r3) {
          return this.fromTo(t2, e2, null, r3);
        }}, {key: "to", value: function(t2, e2, r3) {
          return this.fromTo(t2, null, e2, r3);
        }}, {key: "addLabel", value: function(t2, e2) {
          return this.position.addLabel(t2, e2), this;
        }}, {key: "map", value: function(t2) {
          for (var e2 = 0, r3 = this._tweens.length; e2 < r3; e2++) {
            var n2 = this._tweens[e2];
            t2(n2, e2), this._duration = Math.max(this._duration, n2._duration + n2._startTime);
          }
          return this;
        }}, {key: "add", value: function(t2, e2) {
          var r3 = this;
          if (Array.isArray(t2))
            return t2.map(function(t3) {
              r3.add(t3, e2);
            }), this;
          m(t2) !== "object" || t2 instanceof ht || (t2 = new ht(t2.from).to(t2.to, t2));
          var n2 = this._defaultParams, i2 = this._duration;
          if (n2)
            for (var o2 in n2)
              typeof t2[o2] == "function" && t2[o2](n2[o2]);
          var s2 = typeof e2 == "number" ? e2 : this.position.parseLabel(e2 !== void 0 ? e2 : "afterLast", null);
          return t2._startTime = Math.max(this._startTime, t2._delayTime, s2), t2._delayTime = s2, t2._isPlaying = true, this._duration = Math.max(i2, Math.max(t2._startTime + t2._delayTime, t2._duration)), this._tweens.push(t2), this.position.setLabel("afterLast", this._duration), this;
        }}, {key: "restart", value: function() {
          return this._startTime += C(), s(this), this.emit(P);
        }}, {key: "easing", value: function(e2) {
          return this.map(function(t2) {
            return t2.easing(e2);
          });
        }}, {key: "interpolation", value: function(e2) {
          return this.map(function(t2) {
            return t2.interpolation(e2);
          });
        }}, {key: "update", value: function(t2) {
          var e2, r3 = this._tweens, n2 = this._duration, i2 = this._reverseDelayTime, o2 = this._startTime, s2 = this._reversed, a2 = this._yoyo, u2 = this._repeat, f2 = this._isFinite, l2 = this._isPlaying, h2 = this._prevTime, c2 = this._onStartCallbackFired, p2 = (t2 = t2 !== void 0 ? t2 : C()) - h2;
          if (this._prevTime = t2, 250 < p2 && F() && x() && (t2 -= p2 - D), !l2 || t2 < o2)
            return true;
          e2 = 1 < (e2 = (t2 - o2) / n2) ? 1 : e2, e2 = s2 ? 1 - e2 : e2, this.elapsed = e2, c2 || (this.emit(G), this._onStartCallbackFired = true);
          for (var y2 = t2 - o2, d2 = s2 ? n2 - y2 : y2, v2 = 0; v2 < r3.length; )
            r3[v2].update(d2), v2++;
          if (this.emit(V, e2, y2), e2 === 1 || s2 && e2 === 0) {
            if (u2) {
              for (f2 && this._repeat--, this.emit(s2 ? Q : z), a2 && (this._reversed = !s2, this.timingOrder(function(t3) {
                return t3.reverse();
              })), this._startTime = s2 && i2 ? t2 + i2 : t2, v2 = 0; v2 < r3.length; )
                r3[v2].reassignValues(t2), v2++;
              return true;
            }
            return this.emit(B), this._repeat = this._r, N(this), this._isPlaying = false;
          }
          return true;
        }}, {key: "progress", value: function(t2) {
          return t2 !== void 0 ? this.update(t2 * this._duration) : this.elapsed;
        }}]), r2;
      }();
      t.Easing = v, t.FrameThrottle = function(t2) {
        y = 1.05 * (0 < arguments.length && t2 !== void 0 ? t2 : 120);
      }, t.Interpolation = ot, t.Interpolator = function(i2, o2) {
        var s2 = Array.isArray(i2) && !i2.isString, a2 = typeof i2 == "string" ? i2 : s2 ? i2.slice() : O({}, i2);
        if (s2)
          for (var t2 = 0, e2 = i2.length; t2 < e2; t2++)
            i2[t2] === o2[t2] && typeof i2[t2] == "number" && typeof o2[t2] != "number" || X(t2, a2, i2, o2);
        else if (m(i2) === "object")
          for (var r2 in i2)
            i2[r2] === o2[r2] && typeof i2[r2] == "number" && typeof o2[r2] != "number" || X(r2, a2, i2, o2);
        else if (typeof i2 == "string") {
          i2 = H(i2), o2 = H(o2);
          for (var n2 = 1; n2 < i2.length; )
            i2[n2] === o2[n2] && typeof i2[n2 - 1] == "string" ? (i2.splice(n2 - 1, 2, i2[n2 - 1] + i2[n2]), o2.splice(n2 - 1, 2, o2[n2 - 1] + o2[n2])) : n2++;
        }
        return function(t3) {
          if (s2)
            for (var e3 = 0, r3 = i2.length; e3 < r3; e3++)
              $(e3, a2, i2, o2, t3);
          else if (m(a2) === "object")
            for (var n3 in i2)
              $(n3, a2, i2, o2, t3);
          else
            typeof a2 == "string" && (a2 = $(0, 0, i2, o2, t3, t3, true));
          return a2;
        };
      }, t.Plugins = q, t.Selector = ut, t.Timeline = yt, t.ToggleLagSmoothing = function(t2) {
        d = !(0 < arguments.length && t2 !== void 0) || t2;
      }, t.Tween = ht, t.add = s, t.autoPlay = function(t2) {
        l = t2;
      }, t.get = e, t.getAll = function() {
        return u;
      }, t.has = function(t2) {
        return e(t2) !== null;
      }, t.isRunning = F, t.now = C, t.onRequestTick = function(t2) {
        h.push(t2);
      }, t.onTick = function(t2) {
        return u.push({update: t2});
      }, t.remove = N, t.removeAll = function() {
        u.length = 0, a(o), f = false;
      }, t.update = i, t.utils = it, Object.defineProperty(t, "__esModule", {value: true});
    });
  });

  // empty:/Users/js/repos/walk-aarch-2021/src/node_modules/jsdom/lib/api.js
  var require_api = __commonJS(() => {
  });

  // empty:/Users/js/repos/walk-aarch-2021/src/node_modules/jsdom/lib/jsdom/living/generated/utils.js
  var require_utils = __commonJS(() => {
  });

  // empty:/Users/js/repos/walk-aarch-2021/src/node_modules/jsdom/lib/jsdom/utils.js
  var require_utils2 = __commonJS(() => {
  });

  // node_modules/fabric/dist/fabric.js
  var require_fabric = __commonJS((exports) => {
    /*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */
    var fabric3 = fabric3 || {version: "4.2.0"};
    if (typeof exports !== "undefined") {
      exports.fabric = fabric3;
    } else if (typeof define === "function" && define.amd) {
      define([], function() {
        return fabric3;
      });
    }
    if (typeof document !== "undefined" && typeof window !== "undefined") {
      if (document instanceof (typeof HTMLDocument !== "undefined" ? HTMLDocument : Document)) {
        fabric3.document = document;
      } else {
        fabric3.document = document.implementation.createHTMLDocument("");
      }
      fabric3.window = window;
    } else {
      var jsdom = require_api();
      var virtualWindow = new jsdom.JSDOM(decodeURIComponent("%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E"), {
        features: {
          FetchExternalResources: ["img"]
        },
        resources: "usable"
      }).window;
      fabric3.document = virtualWindow.document;
      fabric3.jsdomImplForWrapper = require_utils().implForWrapper;
      fabric3.nodeCanvas = require_utils2().Canvas;
      fabric3.window = virtualWindow;
      DOMParser = fabric3.window.DOMParser;
    }
    fabric3.isTouchSupported = "ontouchstart" in fabric3.window || "ontouchstart" in fabric3.document || fabric3.window && fabric3.window.navigator && fabric3.window.navigator.maxTouchPoints > 0;
    fabric3.isLikelyNode = typeof Buffer !== "undefined" && typeof window === "undefined";
    fabric3.SHARED_ATTRIBUTES = [
      "display",
      "transform",
      "fill",
      "fill-opacity",
      "fill-rule",
      "opacity",
      "stroke",
      "stroke-dasharray",
      "stroke-linecap",
      "stroke-dashoffset",
      "stroke-linejoin",
      "stroke-miterlimit",
      "stroke-opacity",
      "stroke-width",
      "id",
      "paint-order",
      "vector-effect",
      "instantiated_by_use",
      "clip-path"
    ];
    fabric3.DPI = 96;
    fabric3.reNum = "(?:[-+]?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?)";
    fabric3.commaWsp = "(?:\\s+,?\\s*|,\\s*)";
    fabric3.rePathCommand = /([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:[eE][-+]?\d+)?)/ig;
    fabric3.reNonWord = /[ \n\.,;!\?\-]/;
    fabric3.fontPaths = {};
    fabric3.iMatrix = [1, 0, 0, 1, 0, 0];
    fabric3.svgNS = "http://www.w3.org/2000/svg";
    fabric3.perfLimitSizeTotal = 2097152;
    fabric3.maxCacheSideLimit = 4096;
    fabric3.minCacheSideLimit = 256;
    fabric3.charWidthsCache = {};
    fabric3.textureSize = 2048;
    fabric3.disableStyleCopyPaste = false;
    fabric3.enableGLFiltering = true;
    fabric3.devicePixelRatio = fabric3.window.devicePixelRatio || fabric3.window.webkitDevicePixelRatio || fabric3.window.mozDevicePixelRatio || 1;
    fabric3.browserShadowBlurConstant = 1;
    fabric3.arcToSegmentsCache = {};
    fabric3.boundsOfCurveCache = {};
    fabric3.cachesBoundsOfCurve = true;
    fabric3.forceGLPutImageData = false;
    fabric3.initFilterBackend = function() {
      if (fabric3.enableGLFiltering && fabric3.isWebglSupported && fabric3.isWebglSupported(fabric3.textureSize)) {
        console.log("max texture size: " + fabric3.maxTextureSize);
        return new fabric3.WebglFilterBackend({tileSize: fabric3.textureSize});
      } else if (fabric3.Canvas2dFilterBackend) {
        return new fabric3.Canvas2dFilterBackend();
      }
    };
    if (typeof document !== "undefined" && typeof window !== "undefined") {
      window.fabric = fabric3;
    }
    (function() {
      function _removeEventListener(eventName, handler) {
        if (!this.__eventListeners[eventName]) {
          return;
        }
        var eventListener = this.__eventListeners[eventName];
        if (handler) {
          eventListener[eventListener.indexOf(handler)] = false;
        } else {
          fabric3.util.array.fill(eventListener, false);
        }
      }
      function on(eventName, handler) {
        if (!this.__eventListeners) {
          this.__eventListeners = {};
        }
        if (arguments.length === 1) {
          for (var prop in eventName) {
            this.on(prop, eventName[prop]);
          }
        } else {
          if (!this.__eventListeners[eventName]) {
            this.__eventListeners[eventName] = [];
          }
          this.__eventListeners[eventName].push(handler);
        }
        return this;
      }
      function off(eventName, handler) {
        if (!this.__eventListeners) {
          return this;
        }
        if (arguments.length === 0) {
          for (eventName in this.__eventListeners) {
            _removeEventListener.call(this, eventName);
          }
        } else if (arguments.length === 1 && typeof arguments[0] === "object") {
          for (var prop in eventName) {
            _removeEventListener.call(this, prop, eventName[prop]);
          }
        } else {
          _removeEventListener.call(this, eventName, handler);
        }
        return this;
      }
      function fire(eventName, options) {
        if (!this.__eventListeners) {
          return this;
        }
        var listenersForEvent = this.__eventListeners[eventName];
        if (!listenersForEvent) {
          return this;
        }
        for (var i = 0, len = listenersForEvent.length; i < len; i++) {
          listenersForEvent[i] && listenersForEvent[i].call(this, options || {});
        }
        this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {
          return value !== false;
        });
        return this;
      }
      fabric3.Observable = {
        fire,
        on,
        off
      };
    })();
    fabric3.Collection = {
      _objects: [],
      add: function() {
        this._objects.push.apply(this._objects, arguments);
        if (this._onObjectAdded) {
          for (var i = 0, length = arguments.length; i < length; i++) {
            this._onObjectAdded(arguments[i]);
          }
        }
        this.renderOnAddRemove && this.requestRenderAll();
        return this;
      },
      insertAt: function(object, index, nonSplicing) {
        var objects = this._objects;
        if (nonSplicing) {
          objects[index] = object;
        } else {
          objects.splice(index, 0, object);
        }
        this._onObjectAdded && this._onObjectAdded(object);
        this.renderOnAddRemove && this.requestRenderAll();
        return this;
      },
      remove: function() {
        var objects = this._objects, index, somethingRemoved = false;
        for (var i = 0, length = arguments.length; i < length; i++) {
          index = objects.indexOf(arguments[i]);
          if (index !== -1) {
            somethingRemoved = true;
            objects.splice(index, 1);
            this._onObjectRemoved && this._onObjectRemoved(arguments[i]);
          }
        }
        this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();
        return this;
      },
      forEachObject: function(callback, context) {
        var objects = this.getObjects();
        for (var i = 0, len = objects.length; i < len; i++) {
          callback.call(context, objects[i], i, objects);
        }
        return this;
      },
      getObjects: function(type) {
        if (typeof type === "undefined") {
          return this._objects.concat();
        }
        return this._objects.filter(function(o) {
          return o.type === type;
        });
      },
      item: function(index) {
        return this._objects[index];
      },
      isEmpty: function() {
        return this._objects.length === 0;
      },
      size: function() {
        return this._objects.length;
      },
      contains: function(object) {
        return this._objects.indexOf(object) > -1;
      },
      complexity: function() {
        return this._objects.reduce(function(memo, current) {
          memo += current.complexity ? current.complexity() : 0;
          return memo;
        }, 0);
      }
    };
    fabric3.CommonMethods = {
      _setOptions: function(options) {
        for (var prop in options) {
          this.set(prop, options[prop]);
        }
      },
      _initGradient: function(filler, property) {
        if (filler && filler.colorStops && !(filler instanceof fabric3.Gradient)) {
          this.set(property, new fabric3.Gradient(filler));
        }
      },
      _initPattern: function(filler, property, callback) {
        if (filler && filler.source && !(filler instanceof fabric3.Pattern)) {
          this.set(property, new fabric3.Pattern(filler, callback));
        } else {
          callback && callback();
        }
      },
      _setObject: function(obj) {
        for (var prop in obj) {
          this._set(prop, obj[prop]);
        }
      },
      set: function(key, value) {
        if (typeof key === "object") {
          this._setObject(key);
        } else {
          this._set(key, value);
        }
        return this;
      },
      _set: function(key, value) {
        this[key] = value;
      },
      toggle: function(property) {
        var value = this.get(property);
        if (typeof value === "boolean") {
          this.set(property, !value);
        }
        return this;
      },
      get: function(property) {
        return this[property];
      }
    };
    (function(global2) {
      var sqrt = Math.sqrt, atan2 = Math.atan2, pow = Math.pow, PiBy180 = Math.PI / 180, PiBy2 = Math.PI / 2;
      fabric3.util = {
        cos: function(angle) {
          if (angle === 0) {
            return 1;
          }
          if (angle < 0) {
            angle = -angle;
          }
          var angleSlice = angle / PiBy2;
          switch (angleSlice) {
            case 1:
            case 3:
              return 0;
            case 2:
              return -1;
          }
          return Math.cos(angle);
        },
        sin: function(angle) {
          if (angle === 0) {
            return 0;
          }
          var angleSlice = angle / PiBy2, sign2 = 1;
          if (angle < 0) {
            sign2 = -1;
          }
          switch (angleSlice) {
            case 1:
              return sign2;
            case 2:
              return 0;
            case 3:
              return -sign2;
          }
          return Math.sin(angle);
        },
        removeFromArray: function(array, value) {
          var idx = array.indexOf(value);
          if (idx !== -1) {
            array.splice(idx, 1);
          }
          return array;
        },
        getRandomInt: function(min, max) {
          return Math.floor(Math.random() * (max - min + 1)) + min;
        },
        degreesToRadians: function(degrees) {
          return degrees * PiBy180;
        },
        radiansToDegrees: function(radians) {
          return radians / PiBy180;
        },
        rotatePoint: function(point, origin, radians) {
          point.subtractEquals(origin);
          var v = fabric3.util.rotateVector(point, radians);
          return new fabric3.Point(v.x, v.y).addEquals(origin);
        },
        rotateVector: function(vector, radians) {
          var sin = fabric3.util.sin(radians), cos = fabric3.util.cos(radians), rx = vector.x * cos - vector.y * sin, ry = vector.x * sin + vector.y * cos;
          return {
            x: rx,
            y: ry
          };
        },
        transformPoint: function(p, t, ignoreOffset) {
          if (ignoreOffset) {
            return new fabric3.Point(t[0] * p.x + t[2] * p.y, t[1] * p.x + t[3] * p.y);
          }
          return new fabric3.Point(t[0] * p.x + t[2] * p.y + t[4], t[1] * p.x + t[3] * p.y + t[5]);
        },
        makeBoundingBoxFromPoints: function(points, transform) {
          if (transform) {
            for (var i = 0; i < points.length; i++) {
              points[i] = fabric3.util.transformPoint(points[i], transform);
            }
          }
          var xPoints = [points[0].x, points[1].x, points[2].x, points[3].x], minX = fabric3.util.array.min(xPoints), maxX = fabric3.util.array.max(xPoints), width = maxX - minX, yPoints = [points[0].y, points[1].y, points[2].y, points[3].y], minY = fabric3.util.array.min(yPoints), maxY = fabric3.util.array.max(yPoints), height = maxY - minY;
          return {
            left: minX,
            top: minY,
            width,
            height
          };
        },
        invertTransform: function(t) {
          var a = 1 / (t[0] * t[3] - t[1] * t[2]), r = [a * t[3], -a * t[1], -a * t[2], a * t[0]], o = fabric3.util.transformPoint({x: t[4], y: t[5]}, r, true);
          r[4] = -o.x;
          r[5] = -o.y;
          return r;
        },
        toFixed: function(number, fractionDigits) {
          return parseFloat(Number(number).toFixed(fractionDigits));
        },
        parseUnit: function(value, fontSize) {
          var unit = /\D{0,2}$/.exec(value), number = parseFloat(value);
          if (!fontSize) {
            fontSize = fabric3.Text.DEFAULT_SVG_FONT_SIZE;
          }
          switch (unit[0]) {
            case "mm":
              return number * fabric3.DPI / 25.4;
            case "cm":
              return number * fabric3.DPI / 2.54;
            case "in":
              return number * fabric3.DPI;
            case "pt":
              return number * fabric3.DPI / 72;
            case "pc":
              return number * fabric3.DPI / 72 * 12;
            case "em":
              return number * fontSize;
            default:
              return number;
          }
        },
        falseFunction: function() {
          return false;
        },
        getKlass: function(type, namespace) {
          type = fabric3.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));
          return fabric3.util.resolveNamespace(namespace)[type];
        },
        getSvgAttributes: function(type) {
          var attributes = [
            "instantiated_by_use",
            "style",
            "id",
            "class"
          ];
          switch (type) {
            case "linearGradient":
              attributes = attributes.concat(["x1", "y1", "x2", "y2", "gradientUnits", "gradientTransform"]);
              break;
            case "radialGradient":
              attributes = attributes.concat(["gradientUnits", "gradientTransform", "cx", "cy", "r", "fx", "fy", "fr"]);
              break;
            case "stop":
              attributes = attributes.concat(["offset", "stop-color", "stop-opacity"]);
              break;
          }
          return attributes;
        },
        resolveNamespace: function(namespace) {
          if (!namespace) {
            return fabric3;
          }
          var parts = namespace.split("."), len = parts.length, i, obj = global2 || fabric3.window;
          for (i = 0; i < len; ++i) {
            obj = obj[parts[i]];
          }
          return obj;
        },
        loadImage: function(url, callback, context, crossOrigin) {
          if (!url) {
            callback && callback.call(context, url);
            return;
          }
          var img = fabric3.util.createImage();
          var onLoadCallback = function() {
            callback && callback.call(context, img, false);
            img = img.onload = img.onerror = null;
          };
          img.onload = onLoadCallback;
          img.onerror = function() {
            fabric3.log("Error loading " + img.src);
            callback && callback.call(context, null, true);
            img = img.onload = img.onerror = null;
          };
          if (url.indexOf("data") !== 0 && crossOrigin !== void 0 && crossOrigin !== null) {
            img.crossOrigin = crossOrigin;
          }
          if (url.substring(0, 14) === "data:image/svg") {
            img.onload = null;
            fabric3.util.loadImageInDom(img, onLoadCallback);
          }
          img.src = url;
        },
        loadImageInDom: function(img, onLoadCallback) {
          var div = fabric3.document.createElement("div");
          div.style.width = div.style.height = "1px";
          div.style.left = div.style.top = "-100%";
          div.style.position = "absolute";
          div.appendChild(img);
          fabric3.document.querySelector("body").appendChild(div);
          img.onload = function() {
            onLoadCallback();
            div.parentNode.removeChild(div);
            div = null;
          };
        },
        enlivenObjects: function(objects, callback, namespace, reviver) {
          objects = objects || [];
          var enlivenedObjects = [], numLoadedObjects = 0, numTotalObjects = objects.length;
          function onLoaded() {
            if (++numLoadedObjects === numTotalObjects) {
              callback && callback(enlivenedObjects.filter(function(obj) {
                return obj;
              }));
            }
          }
          if (!numTotalObjects) {
            callback && callback(enlivenedObjects);
            return;
          }
          objects.forEach(function(o, index) {
            if (!o || !o.type) {
              onLoaded();
              return;
            }
            var klass = fabric3.util.getKlass(o.type, namespace);
            klass.fromObject(o, function(obj, error) {
              error || (enlivenedObjects[index] = obj);
              reviver && reviver(o, obj, error);
              onLoaded();
            });
          });
        },
        enlivenPatterns: function(patterns, callback) {
          patterns = patterns || [];
          function onLoaded() {
            if (++numLoadedPatterns === numPatterns) {
              callback && callback(enlivenedPatterns);
            }
          }
          var enlivenedPatterns = [], numLoadedPatterns = 0, numPatterns = patterns.length;
          if (!numPatterns) {
            callback && callback(enlivenedPatterns);
            return;
          }
          patterns.forEach(function(p, index) {
            if (p && p.source) {
              new fabric3.Pattern(p, function(pattern) {
                enlivenedPatterns[index] = pattern;
                onLoaded();
              });
            } else {
              enlivenedPatterns[index] = p;
              onLoaded();
            }
          });
        },
        groupSVGElements: function(elements, options, path) {
          var object;
          if (elements && elements.length === 1) {
            return elements[0];
          }
          if (options) {
            if (options.width && options.height) {
              options.centerPoint = {
                x: options.width / 2,
                y: options.height / 2
              };
            } else {
              delete options.width;
              delete options.height;
            }
          }
          object = new fabric3.Group(elements, options);
          if (typeof path !== "undefined") {
            object.sourcePath = path;
          }
          return object;
        },
        populateWithProperties: function(source, destination, properties) {
          if (properties && Object.prototype.toString.call(properties) === "[object Array]") {
            for (var i = 0, len = properties.length; i < len; i++) {
              if (properties[i] in source) {
                destination[properties[i]] = source[properties[i]];
              }
            }
          }
        },
        drawDashedLine: function(ctx, x, y, x2, y2, da) {
          var dx = x2 - x, dy = y2 - y, len = sqrt(dx * dx + dy * dy), rot = atan2(dy, dx), dc = da.length, di = 0, draw = true;
          ctx.save();
          ctx.translate(x, y);
          ctx.moveTo(0, 0);
          ctx.rotate(rot);
          x = 0;
          while (len > x) {
            x += da[di++ % dc];
            if (x > len) {
              x = len;
            }
            ctx[draw ? "lineTo" : "moveTo"](x, 0);
            draw = !draw;
          }
          ctx.restore();
        },
        createCanvasElement: function() {
          return fabric3.document.createElement("canvas");
        },
        copyCanvasElement: function(canvas) {
          var newCanvas = fabric3.util.createCanvasElement();
          newCanvas.width = canvas.width;
          newCanvas.height = canvas.height;
          newCanvas.getContext("2d").drawImage(canvas, 0, 0);
          return newCanvas;
        },
        toDataURL: function(canvasEl, format, quality) {
          return canvasEl.toDataURL("image/" + format, quality);
        },
        createImage: function() {
          return fabric3.document.createElement("img");
        },
        multiplyTransformMatrices: function(a, b, is2x2) {
          return [
            a[0] * b[0] + a[2] * b[1],
            a[1] * b[0] + a[3] * b[1],
            a[0] * b[2] + a[2] * b[3],
            a[1] * b[2] + a[3] * b[3],
            is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],
            is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]
          ];
        },
        qrDecompose: function(a) {
          var angle = atan2(a[1], a[0]), denom = pow(a[0], 2) + pow(a[1], 2), scaleX = sqrt(denom), scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX, skewX = atan2(a[0] * a[2] + a[1] * a[3], denom);
          return {
            angle: angle / PiBy180,
            scaleX,
            scaleY,
            skewX: skewX / PiBy180,
            skewY: 0,
            translateX: a[4],
            translateY: a[5]
          };
        },
        calcRotateMatrix: function(options) {
          if (!options.angle) {
            return fabric3.iMatrix.concat();
          }
          var theta = fabric3.util.degreesToRadians(options.angle), cos = fabric3.util.cos(theta), sin = fabric3.util.sin(theta);
          return [cos, sin, -sin, cos, 0, 0];
        },
        calcDimensionsMatrix: function(options) {
          var scaleX = typeof options.scaleX === "undefined" ? 1 : options.scaleX, scaleY = typeof options.scaleY === "undefined" ? 1 : options.scaleY, scaleMatrix = [
            options.flipX ? -scaleX : scaleX,
            0,
            0,
            options.flipY ? -scaleY : scaleY,
            0,
            0
          ], multiply = fabric3.util.multiplyTransformMatrices, degreesToRadians = fabric3.util.degreesToRadians;
          if (options.skewX) {
            scaleMatrix = multiply(scaleMatrix, [1, 0, Math.tan(degreesToRadians(options.skewX)), 1], true);
          }
          if (options.skewY) {
            scaleMatrix = multiply(scaleMatrix, [1, Math.tan(degreesToRadians(options.skewY)), 0, 1], true);
          }
          return scaleMatrix;
        },
        composeMatrix: function(options) {
          var matrix = [1, 0, 0, 1, options.translateX || 0, options.translateY || 0], multiply = fabric3.util.multiplyTransformMatrices;
          if (options.angle) {
            matrix = multiply(matrix, fabric3.util.calcRotateMatrix(options));
          }
          if (options.scaleX !== 1 || options.scaleY !== 1 || options.skewX || options.skewY || options.flipX || options.flipY) {
            matrix = multiply(matrix, fabric3.util.calcDimensionsMatrix(options));
          }
          return matrix;
        },
        resetObjectTransform: function(target) {
          target.scaleX = 1;
          target.scaleY = 1;
          target.skewX = 0;
          target.skewY = 0;
          target.flipX = false;
          target.flipY = false;
          target.rotate(0);
        },
        saveObjectTransform: function(target) {
          return {
            scaleX: target.scaleX,
            scaleY: target.scaleY,
            skewX: target.skewX,
            skewY: target.skewY,
            angle: target.angle,
            left: target.left,
            flipX: target.flipX,
            flipY: target.flipY,
            top: target.top
          };
        },
        isTransparent: function(ctx, x, y, tolerance) {
          if (tolerance > 0) {
            if (x > tolerance) {
              x -= tolerance;
            } else {
              x = 0;
            }
            if (y > tolerance) {
              y -= tolerance;
            } else {
              y = 0;
            }
          }
          var _isTransparent = true, i, temp, imageData = ctx.getImageData(x, y, tolerance * 2 || 1, tolerance * 2 || 1), l = imageData.data.length;
          for (i = 3; i < l; i += 4) {
            temp = imageData.data[i];
            _isTransparent = temp <= 0;
            if (_isTransparent === false) {
              break;
            }
          }
          imageData = null;
          return _isTransparent;
        },
        parsePreserveAspectRatioAttribute: function(attribute) {
          var meetOrSlice = "meet", alignX = "Mid", alignY = "Mid", aspectRatioAttrs = attribute.split(" "), align;
          if (aspectRatioAttrs && aspectRatioAttrs.length) {
            meetOrSlice = aspectRatioAttrs.pop();
            if (meetOrSlice !== "meet" && meetOrSlice !== "slice") {
              align = meetOrSlice;
              meetOrSlice = "meet";
            } else if (aspectRatioAttrs.length) {
              align = aspectRatioAttrs.pop();
            }
          }
          alignX = align !== "none" ? align.slice(1, 4) : "none";
          alignY = align !== "none" ? align.slice(5, 8) : "none";
          return {
            meetOrSlice,
            alignX,
            alignY
          };
        },
        clearFabricFontCache: function(fontFamily) {
          fontFamily = (fontFamily || "").toLowerCase();
          if (!fontFamily) {
            fabric3.charWidthsCache = {};
          } else if (fabric3.charWidthsCache[fontFamily]) {
            delete fabric3.charWidthsCache[fontFamily];
          }
        },
        limitDimsByArea: function(ar, maximumArea) {
          var roughWidth = Math.sqrt(maximumArea * ar), perfLimitSizeY = Math.floor(maximumArea / roughWidth);
          return {x: Math.floor(roughWidth), y: perfLimitSizeY};
        },
        capValue: function(min, value, max) {
          return Math.max(min, Math.min(value, max));
        },
        findScaleToFit: function(source, destination) {
          return Math.min(destination.width / source.width, destination.height / source.height);
        },
        findScaleToCover: function(source, destination) {
          return Math.max(destination.width / source.width, destination.height / source.height);
        },
        matrixToSVG: function(transform) {
          return "matrix(" + transform.map(function(value) {
            return fabric3.util.toFixed(value, fabric3.Object.NUM_FRACTION_DIGITS);
          }).join(" ") + ")";
        },
        sizeAfterTransform: function(width, height, options) {
          var dimX = width / 2, dimY = height / 2, points = [
            {
              x: -dimX,
              y: -dimY
            },
            {
              x: dimX,
              y: -dimY
            },
            {
              x: -dimX,
              y: dimY
            },
            {
              x: dimX,
              y: dimY
            }
          ], transformMatrix = fabric3.util.calcDimensionsMatrix(options), bbox = fabric3.util.makeBoundingBoxFromPoints(points, transformMatrix);
          return {
            x: bbox.width,
            y: bbox.height
          };
        }
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function() {
      var _join = Array.prototype.join, commandLengths = {
        m: 2,
        l: 2,
        h: 1,
        v: 1,
        c: 6,
        s: 4,
        q: 4,
        t: 2,
        a: 7
      }, repeatedCommands = {
        m: "l",
        M: "L"
      };
      function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {
        var costh2 = fabric3.util.cos(th2), sinth2 = fabric3.util.sin(th2), costh3 = fabric3.util.cos(th3), sinth3 = fabric3.util.sin(th3), toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1, toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1, cp1X = fromX + mT * (-cosTh * rx * sinth2 - sinTh * ry * costh2), cp1Y = fromY + mT * (-sinTh * rx * sinth2 + cosTh * ry * costh2), cp2X = toX + mT * (cosTh * rx * sinth3 + sinTh * ry * costh3), cp2Y = toY + mT * (sinTh * rx * sinth3 - cosTh * ry * costh3);
        return [
          "C",
          cp1X,
          cp1Y,
          cp2X,
          cp2Y,
          toX,
          toY
        ];
      }
      function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {
        var PI = Math.PI, th = rotateX * PI / 180, sinTh = fabric3.util.sin(th), cosTh = fabric3.util.cos(th), fromX = 0, fromY = 0;
        rx = Math.abs(rx);
        ry = Math.abs(ry);
        var px2 = -cosTh * toX * 0.5 - sinTh * toY * 0.5, py2 = -cosTh * toY * 0.5 + sinTh * toX * 0.5, rx2 = rx * rx, ry2 = ry * ry, py22 = py2 * py2, px22 = px2 * px2, pl = rx2 * ry2 - rx2 * py22 - ry2 * px22, root = 0;
        if (pl < 0) {
          var s = Math.sqrt(1 - pl / (rx2 * ry2));
          rx *= s;
          ry *= s;
        } else {
          root = (large === sweep ? -1 : 1) * Math.sqrt(pl / (rx2 * py22 + ry2 * px22));
        }
        var cx = root * rx * py2 / ry, cy = -root * ry * px2 / rx, cx1 = cosTh * cx - sinTh * cy + toX * 0.5, cy1 = sinTh * cx + cosTh * cy + toY * 0.5, mTheta = calcVectorAngle(1, 0, (px2 - cx) / rx, (py2 - cy) / ry), dtheta = calcVectorAngle((px2 - cx) / rx, (py2 - cy) / ry, (-px2 - cx) / rx, (-py2 - cy) / ry);
        if (sweep === 0 && dtheta > 0) {
          dtheta -= 2 * PI;
        } else if (sweep === 1 && dtheta < 0) {
          dtheta += 2 * PI;
        }
        var segments = Math.ceil(Math.abs(dtheta / PI * 2)), result = [], mDelta = dtheta / segments, mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2), th3 = mTheta + mDelta;
        for (var i = 0; i < segments; i++) {
          result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);
          fromX = result[i][5];
          fromY = result[i][6];
          mTheta = th3;
          th3 += mDelta;
        }
        return result;
      }
      function calcVectorAngle(ux, uy, vx, vy) {
        var ta = Math.atan2(uy, ux), tb = Math.atan2(vy, vx);
        if (tb >= ta) {
          return tb - ta;
        } else {
          return 2 * Math.PI - (ta - tb);
        }
      }
      function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {
        var argsString;
        if (fabric3.cachesBoundsOfCurve) {
          argsString = _join.call(arguments);
          if (fabric3.boundsOfCurveCache[argsString]) {
            return fabric3.boundsOfCurveCache[argsString];
          }
        }
        var sqrt = Math.sqrt, min = Math.min, max = Math.max, abs = Math.abs, tvalues = [], bounds = [[], []], a, b, c, t, t1, t2, b2ac, sqrtb2ac;
        b = 6 * x0 - 12 * x1 + 6 * x2;
        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
        c = 3 * x1 - 3 * x0;
        for (var i = 0; i < 2; ++i) {
          if (i > 0) {
            b = 6 * y0 - 12 * y1 + 6 * y2;
            a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
            c = 3 * y1 - 3 * y0;
          }
          if (abs(a) < 1e-12) {
            if (abs(b) < 1e-12) {
              continue;
            }
            t = -c / b;
            if (0 < t && t < 1) {
              tvalues.push(t);
            }
            continue;
          }
          b2ac = b * b - 4 * c * a;
          if (b2ac < 0) {
            continue;
          }
          sqrtb2ac = sqrt(b2ac);
          t1 = (-b + sqrtb2ac) / (2 * a);
          if (0 < t1 && t1 < 1) {
            tvalues.push(t1);
          }
          t2 = (-b - sqrtb2ac) / (2 * a);
          if (0 < t2 && t2 < 1) {
            tvalues.push(t2);
          }
        }
        var x, y, j = tvalues.length, jlen = j, mt;
        while (j--) {
          t = tvalues[j];
          mt = 1 - t;
          x = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
          bounds[0][j] = x;
          y = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
          bounds[1][j] = y;
        }
        bounds[0][jlen] = x0;
        bounds[1][jlen] = y0;
        bounds[0][jlen + 1] = x3;
        bounds[1][jlen + 1] = y3;
        var result = [
          {
            x: min.apply(null, bounds[0]),
            y: min.apply(null, bounds[1])
          },
          {
            x: max.apply(null, bounds[0]),
            y: max.apply(null, bounds[1])
          }
        ];
        if (fabric3.cachesBoundsOfCurve) {
          fabric3.boundsOfCurveCache[argsString] = result;
        }
        return result;
      }
      function fromArcToBeizers(fx, fy, coords) {
        var rx = coords[1], ry = coords[2], rot = coords[3], large = coords[4], sweep = coords[5], tx = coords[6], ty = coords[7], segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);
        for (var i = 0, len = segsNorm.length; i < len; i++) {
          segsNorm[i][1] += fx;
          segsNorm[i][2] += fy;
          segsNorm[i][3] += fx;
          segsNorm[i][4] += fy;
          segsNorm[i][5] += fx;
          segsNorm[i][6] += fy;
        }
        return segsNorm;
      }
      ;
      function makePathSimpler(path) {
        var x = 0, y = 0, len = path.length, x1 = 0, y1 = 0, current, i, converted, destinationPath = [], previous, controlX, controlY;
        for (i = 0; i < len; ++i) {
          converted = false;
          current = path[i].slice(0);
          switch (current[0]) {
            case "l":
              current[0] = "L";
              current[1] += x;
              current[2] += y;
            case "L":
              x = current[1];
              y = current[2];
              break;
            case "h":
              current[1] += x;
            case "H":
              current[0] = "L";
              current[2] = y;
              x = current[1];
              break;
            case "v":
              current[1] += y;
            case "V":
              current[0] = "L";
              y = current[1];
              current[1] = x;
              current[2] = y;
              break;
            case "m":
              current[0] = "M";
              current[1] += x;
              current[2] += y;
            case "M":
              x = current[1];
              y = current[2];
              x1 = current[1];
              y1 = current[2];
              break;
            case "c":
              current[0] = "C";
              current[1] += x;
              current[2] += y;
              current[3] += x;
              current[4] += y;
              current[5] += x;
              current[6] += y;
            case "C":
              controlX = current[3];
              controlY = current[4];
              x = current[5];
              y = current[6];
              break;
            case "s":
              current[0] = "S";
              current[1] += x;
              current[2] += y;
              current[3] += x;
              current[4] += y;
            case "S":
              if (previous === "C") {
                controlX = 2 * x - controlX;
                controlY = 2 * y - controlY;
              } else {
                controlX = x;
                controlY = y;
              }
              x = current[3];
              y = current[4];
              current[0] = "C";
              current[5] = current[3];
              current[6] = current[4];
              current[3] = current[1];
              current[4] = current[2];
              current[1] = controlX;
              current[2] = controlY;
              controlX = current[3];
              controlY = current[4];
              break;
            case "q":
              current[0] = "Q";
              current[1] += x;
              current[2] += y;
              current[3] += x;
              current[4] += y;
            case "Q":
              controlX = current[1];
              controlY = current[2];
              x = current[3];
              y = current[4];
              break;
            case "t":
              current[0] = "T";
              current[1] += x;
              current[2] += y;
            case "T":
              if (previous === "Q") {
                controlX = 2 * x - controlX;
                controlY = 2 * y - controlY;
              } else {
                controlX = x;
                controlY = y;
              }
              current[0] = "Q";
              x = current[1];
              y = current[2];
              current[1] = controlX;
              current[2] = controlY;
              current[3] = x;
              current[4] = y;
              break;
            case "a":
              current[0] = "A";
              current[6] += x;
              current[7] += y;
            case "A":
              converted = true;
              destinationPath = destinationPath.concat(fromArcToBeizers(x, y, current));
              x = current[6];
              y = current[7];
              break;
            case "z":
            case "Z":
              x = x1;
              y = y1;
              break;
            default:
          }
          if (!converted) {
            destinationPath.push(current);
          }
          previous = current[0];
        }
        return destinationPath;
      }
      ;
      function calcLineLength(x1, y1, x2, y2) {
        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      }
      function CB1(t) {
        return t * t * t;
      }
      function CB2(t) {
        return 3 * t * t * (1 - t);
      }
      function CB3(t) {
        return 3 * t * (1 - t) * (1 - t);
      }
      function CB4(t) {
        return (1 - t) * (1 - t) * (1 - t);
      }
      function getPointOnCubicBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {
        return function(pct) {
          var c1 = CB1(pct), c2 = CB2(pct), c3 = CB3(pct), c4 = CB4(pct);
          return {
            x: p4x * c1 + p3x * c2 + p2x * c3 + p1x * c4,
            y: p4y * c1 + p3y * c2 + p2y * c3 + p1y * c4
          };
        };
      }
      function QB1(t) {
        return t * t;
      }
      function QB2(t) {
        return 2 * t * (1 - t);
      }
      function QB3(t) {
        return (1 - t) * (1 - t);
      }
      function getPointOnQuadraticBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y) {
        return function(pct) {
          var c1 = QB1(pct), c2 = QB2(pct), c3 = QB3(pct);
          return {
            x: p3x * c1 + p2x * c2 + p1x * c3,
            y: p3y * c1 + p2y * c2 + p1y * c3
          };
        };
      }
      function pathIterator(iterator, x1, y1) {
        var tempP = {x: x1, y: y1}, p, tmpLen = 0, perc;
        for (perc = 0.01; perc <= 1; perc += 0.01) {
          p = iterator(perc);
          tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);
          tempP = p;
        }
        return tmpLen;
      }
      function getPathSegmentsInfo(path) {
        var totalLength = 0, len = path.length, current, x1 = 0, y1 = 0, x2 = 0, y2 = 0, info = [], iterator, tempInfo;
        for (var i = 0; i < len; i++) {
          current = path[i];
          tempInfo = {
            x: x1,
            y: y1,
            command: current[0]
          };
          switch (current[0]) {
            case "M":
              tempInfo.length = 0;
              x2 = x1 = current[1];
              y2 = y1 = current[2];
              break;
            case "L":
              tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);
              x1 = current[1];
              y1 = current[2];
              break;
            case "C":
              iterator = getPointOnCubicBezierIterator(x1, y1, current[1], current[2], current[3], current[4], current[5], current[6]);
              tempInfo.length = pathIterator(iterator, x1, y1);
              x1 = current[5];
              y1 = current[6];
              break;
            case "Q":
              iterator = getPointOnQuadraticBezierIterator(x1, y1, current[1], current[2], current[3], current[4]);
              tempInfo.length = pathIterator(iterator, x1, y1);
              x1 = current[3];
              y1 = current[4];
              break;
            case "Z":
            case "z":
              tempInfo.destX = x2;
              tempInfo.destY = y2;
              tempInfo.length = calcLineLength(x1, y1, x2, y2);
              x1 = x2;
              y1 = y2;
              break;
          }
          totalLength += tempInfo.length;
          info.push(tempInfo);
        }
        info.push({length: totalLength, x: x1, y: y1});
        return info;
      }
      function getPointOnPath(path, perc, infos) {
        if (!infos) {
          infos = getPathSegmentsInfo(path);
        }
        var distance = infos[infos.length - 1] * perc, i = 0;
        while (distance - infos[i] > 0 && i < infos.length) {
          distance -= infos[i];
          i++;
        }
        var segInfo = infos[i], segPercent = distance / segInfo.length, command = segInfo.length, segment = path[i];
        switch (command) {
          case "Z":
          case "z":
            return new fabric3.Point(segInfo.x, segInfo.y).lerp(new fabric3.Point(segInfo.destX, segInfo.destY), segPercent);
            break;
          case "L":
            return new fabric3.Point(segInfo.x, segInfo.y).lerp(new fabric3.Point(segment[1], segment[2]), segPercent);
            break;
          case "C":
            return getPointOnCubicBezierIterator(segInfo.x, segInfo.y, segment[1], segment[2], segment[3], segment[4], segment[5], segment[6])(segPercent);
            break;
          case "Q":
            return getPointOnQuadraticBezierIterator(segInfo.x, segInfo.y, segment[1], segment[2], segment[3], segment[4])(segPercent);
            break;
        }
      }
      function parsePath(pathString) {
        var result = [], coords = [], currentPath, parsed, re = fabric3.rePathCommand, rNumber = "[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?\\s*", rNumberCommaWsp = "(" + rNumber + ")" + fabric3.commaWsp, rFlagCommaWsp = "([01])" + fabric3.commaWsp + "?", rArcSeq = rNumberCommaWsp + "?" + rNumberCommaWsp + "?" + rNumberCommaWsp + rFlagCommaWsp + rFlagCommaWsp + rNumberCommaWsp + "?(" + rNumber + ")", regArcArgumentSequence = new RegExp(rArcSeq, "g"), match, coordsStr, path;
        if (!pathString || !pathString.match) {
          return result;
        }
        path = pathString.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);
        for (var i = 0, coordsParsed, len = path.length; i < len; i++) {
          currentPath = path[i];
          coordsStr = currentPath.slice(1).trim();
          coords.length = 0;
          var command = currentPath.charAt(0);
          coordsParsed = [command];
          if (command.toLowerCase() === "a") {
            for (var args; args = regArcArgumentSequence.exec(coordsStr); ) {
              for (var j = 1; j < args.length; j++) {
                coords.push(args[j]);
              }
            }
          } else {
            while (match = re.exec(coordsStr)) {
              coords.push(match[0]);
            }
          }
          for (var j = 0, jlen = coords.length; j < jlen; j++) {
            parsed = parseFloat(coords[j]);
            if (!isNaN(parsed)) {
              coordsParsed.push(parsed);
            }
          }
          var commandLength = commandLengths[command.toLowerCase()], repeatedCommand = repeatedCommands[command] || command;
          if (coordsParsed.length - 1 > commandLength) {
            for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {
              result.push([command].concat(coordsParsed.slice(k, k + commandLength)));
              command = repeatedCommand;
            }
          } else {
            result.push(coordsParsed);
          }
        }
        return result;
      }
      ;
      function getBoundsOfArc(fx, fy, rx, ry, rot, large, sweep, tx, ty) {
        var fromX = 0, fromY = 0, bound, bounds = [], segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);
        for (var i = 0, len = segs.length; i < len; i++) {
          bound = getBoundsOfCurve(fromX, fromY, segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5], segs[i][6]);
          bounds.push({x: bound[0].x + fx, y: bound[0].y + fy});
          bounds.push({x: bound[1].x + fx, y: bound[1].y + fy});
          fromX = segs[i][5];
          fromY = segs[i][6];
        }
        return bounds;
      }
      ;
      function drawArc(ctx, fx, fy, coords) {
        coords = coords.slice(0).unshift("X");
        var beizers = fromArcToBeizers(fx, fy, coords);
        beizers.forEach(function(beizer) {
          ctx.bezierCurveTo.apply(ctx, beizer.slice(1));
        });
      }
      ;
      fabric3.util.parsePath = parsePath;
      fabric3.util.makePathSimpler = makePathSimpler;
      fabric3.util.getPathSegmentsInfo = getPathSegmentsInfo;
      fabric3.util.fromArcToBeizers = fromArcToBeizers;
      fabric3.util.getBoundsOfCurve = getBoundsOfCurve;
      fabric3.util.getPointOnPath = getPointOnPath;
      fabric3.util.getBoundsOfArc = getBoundsOfArc;
      fabric3.util.drawArc = drawArc;
    })();
    (function() {
      var slice = Array.prototype.slice;
      function invoke(array, method) {
        var args = slice.call(arguments, 2), result = [];
        for (var i = 0, len = array.length; i < len; i++) {
          result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);
        }
        return result;
      }
      function max(array, byProperty) {
        return find(array, byProperty, function(value1, value2) {
          return value1 >= value2;
        });
      }
      function min(array, byProperty) {
        return find(array, byProperty, function(value1, value2) {
          return value1 < value2;
        });
      }
      function fill(array, value) {
        var k = array.length;
        while (k--) {
          array[k] = value;
        }
        return array;
      }
      function find(array, byProperty, condition) {
        if (!array || array.length === 0) {
          return;
        }
        var i = array.length - 1, result = byProperty ? array[i][byProperty] : array[i];
        if (byProperty) {
          while (i--) {
            if (condition(array[i][byProperty], result)) {
              result = array[i][byProperty];
            }
          }
        } else {
          while (i--) {
            if (condition(array[i], result)) {
              result = array[i];
            }
          }
        }
        return result;
      }
      fabric3.util.array = {
        fill,
        invoke,
        min,
        max
      };
    })();
    (function() {
      function extend(destination, source, deep) {
        if (deep) {
          if (!fabric3.isLikelyNode && source instanceof Element) {
            destination = source;
          } else if (source instanceof Array) {
            destination = [];
            for (var i = 0, len = source.length; i < len; i++) {
              destination[i] = extend({}, source[i], deep);
            }
          } else if (source && typeof source === "object") {
            for (var property in source) {
              if (property === "canvas" || property === "group") {
                destination[property] = null;
              } else if (source.hasOwnProperty(property)) {
                destination[property] = extend({}, source[property], deep);
              }
            }
          } else {
            destination = source;
          }
        } else {
          for (var property in source) {
            destination[property] = source[property];
          }
        }
        return destination;
      }
      function clone(object, deep) {
        return extend({}, object, deep);
      }
      fabric3.util.object = {
        extend,
        clone
      };
      fabric3.util.object.extend(fabric3.util, fabric3.Observable);
    })();
    (function() {
      function camelize(string) {
        return string.replace(/-+(.)?/g, function(match, character) {
          return character ? character.toUpperCase() : "";
        });
      }
      function capitalize(string, firstLetterOnly) {
        return string.charAt(0).toUpperCase() + (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());
      }
      function escapeXml(string) {
        return string.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
      }
      function graphemeSplit(textstring) {
        var i = 0, chr, graphemes = [];
        for (i = 0, chr; i < textstring.length; i++) {
          if ((chr = getWholeChar(textstring, i)) === false) {
            continue;
          }
          graphemes.push(chr);
        }
        return graphemes;
      }
      function getWholeChar(str, i) {
        var code = str.charCodeAt(i);
        if (isNaN(code)) {
          return "";
        }
        if (code < 55296 || code > 57343) {
          return str.charAt(i);
        }
        if (55296 <= code && code <= 56319) {
          if (str.length <= i + 1) {
            throw "High surrogate without following low surrogate";
          }
          var next = str.charCodeAt(i + 1);
          if (56320 > next || next > 57343) {
            throw "High surrogate without following low surrogate";
          }
          return str.charAt(i) + str.charAt(i + 1);
        }
        if (i === 0) {
          throw "Low surrogate without preceding high surrogate";
        }
        var prev = str.charCodeAt(i - 1);
        if (55296 > prev || prev > 56319) {
          throw "Low surrogate without preceding high surrogate";
        }
        return false;
      }
      fabric3.util.string = {
        camelize,
        capitalize,
        escapeXml,
        graphemeSplit
      };
    })();
    (function() {
      var slice = Array.prototype.slice, emptyFunction = function() {
      }, IS_DONTENUM_BUGGY = function() {
        for (var p in {toString: 1}) {
          if (p === "toString") {
            return false;
          }
        }
        return true;
      }(), addMethods = function(klass, source, parent) {
        for (var property in source) {
          if (property in klass.prototype && typeof klass.prototype[property] === "function" && (source[property] + "").indexOf("callSuper") > -1) {
            klass.prototype[property] = function(property2) {
              return function() {
                var superclass = this.constructor.superclass;
                this.constructor.superclass = parent;
                var returnValue = source[property2].apply(this, arguments);
                this.constructor.superclass = superclass;
                if (property2 !== "initialize") {
                  return returnValue;
                }
              };
            }(property);
          } else {
            klass.prototype[property] = source[property];
          }
          if (IS_DONTENUM_BUGGY) {
            if (source.toString !== Object.prototype.toString) {
              klass.prototype.toString = source.toString;
            }
            if (source.valueOf !== Object.prototype.valueOf) {
              klass.prototype.valueOf = source.valueOf;
            }
          }
        }
      };
      function Subclass() {
      }
      function callSuper(methodName) {
        var parentMethod = null, _this = this;
        while (_this.constructor.superclass) {
          var superClassMethod = _this.constructor.superclass.prototype[methodName];
          if (_this[methodName] !== superClassMethod) {
            parentMethod = superClassMethod;
            break;
          }
          _this = _this.constructor.superclass.prototype;
        }
        if (!parentMethod) {
          return console.log("tried to callSuper " + methodName + ", method not found in prototype chain", this);
        }
        return arguments.length > 1 ? parentMethod.apply(this, slice.call(arguments, 1)) : parentMethod.call(this);
      }
      function createClass() {
        var parent = null, properties = slice.call(arguments, 0);
        if (typeof properties[0] === "function") {
          parent = properties.shift();
        }
        function klass() {
          this.initialize.apply(this, arguments);
        }
        klass.superclass = parent;
        klass.subclasses = [];
        if (parent) {
          Subclass.prototype = parent.prototype;
          klass.prototype = new Subclass();
          parent.subclasses.push(klass);
        }
        for (var i = 0, length = properties.length; i < length; i++) {
          addMethods(klass, properties[i], parent);
        }
        if (!klass.prototype.initialize) {
          klass.prototype.initialize = emptyFunction;
        }
        klass.prototype.constructor = klass;
        klass.prototype.callSuper = callSuper;
        return klass;
      }
      fabric3.util.createClass = createClass;
    })();
    (function() {
      var couldUseAttachEvent = !!fabric3.document.createElement("div").attachEvent, touchEvents = ["touchstart", "touchmove", "touchend"];
      fabric3.util.addListener = function(element, eventName, handler, options) {
        element && element.addEventListener(eventName, handler, couldUseAttachEvent ? false : options);
      };
      fabric3.util.removeListener = function(element, eventName, handler, options) {
        element && element.removeEventListener(eventName, handler, couldUseAttachEvent ? false : options);
      };
      function getTouchInfo(event) {
        var touchProp = event.changedTouches;
        if (touchProp && touchProp[0]) {
          return touchProp[0];
        }
        return event;
      }
      fabric3.util.getPointer = function(event) {
        var element = event.target, scroll = fabric3.util.getScrollLeftTop(element), _evt = getTouchInfo(event);
        return {
          x: _evt.clientX + scroll.left,
          y: _evt.clientY + scroll.top
        };
      };
      fabric3.util.isTouchEvent = function(event) {
        return touchEvents.indexOf(event.type) > -1 || event.pointerType === "touch";
      };
    })();
    (function() {
      function setStyle(element, styles) {
        var elementStyle = element.style;
        if (!elementStyle) {
          return element;
        }
        if (typeof styles === "string") {
          element.style.cssText += ";" + styles;
          return styles.indexOf("opacity") > -1 ? setOpacity(element, styles.match(/opacity:\s*(\d?\.?\d*)/)[1]) : element;
        }
        for (var property in styles) {
          if (property === "opacity") {
            setOpacity(element, styles[property]);
          } else {
            var normalizedProperty = property === "float" || property === "cssFloat" ? typeof elementStyle.styleFloat === "undefined" ? "cssFloat" : "styleFloat" : property;
            elementStyle[normalizedProperty] = styles[property];
          }
        }
        return element;
      }
      var parseEl = fabric3.document.createElement("div"), supportsOpacity = typeof parseEl.style.opacity === "string", supportsFilters = typeof parseEl.style.filter === "string", reOpacity = /alpha\s*\(\s*opacity\s*=\s*([^\)]+)\)/, setOpacity = function(element) {
        return element;
      };
      if (supportsOpacity) {
        setOpacity = function(element, value) {
          element.style.opacity = value;
          return element;
        };
      } else if (supportsFilters) {
        setOpacity = function(element, value) {
          var es = element.style;
          if (element.currentStyle && !element.currentStyle.hasLayout) {
            es.zoom = 1;
          }
          if (reOpacity.test(es.filter)) {
            value = value >= 0.9999 ? "" : "alpha(opacity=" + value * 100 + ")";
            es.filter = es.filter.replace(reOpacity, value);
          } else {
            es.filter += " alpha(opacity=" + value * 100 + ")";
          }
          return element;
        };
      }
      fabric3.util.setStyle = setStyle;
    })();
    (function() {
      var _slice = Array.prototype.slice;
      function getById(id) {
        return typeof id === "string" ? fabric3.document.getElementById(id) : id;
      }
      var sliceCanConvertNodelists, toArray = function(arrayLike) {
        return _slice.call(arrayLike, 0);
      };
      try {
        sliceCanConvertNodelists = toArray(fabric3.document.childNodes) instanceof Array;
      } catch (err) {
      }
      if (!sliceCanConvertNodelists) {
        toArray = function(arrayLike) {
          var arr = new Array(arrayLike.length), i = arrayLike.length;
          while (i--) {
            arr[i] = arrayLike[i];
          }
          return arr;
        };
      }
      function makeElement(tagName, attributes) {
        var el2 = fabric3.document.createElement(tagName);
        for (var prop in attributes) {
          if (prop === "class") {
            el2.className = attributes[prop];
          } else if (prop === "for") {
            el2.htmlFor = attributes[prop];
          } else {
            el2.setAttribute(prop, attributes[prop]);
          }
        }
        return el2;
      }
      function addClass(element, className) {
        if (element && (" " + element.className + " ").indexOf(" " + className + " ") === -1) {
          element.className += (element.className ? " " : "") + className;
        }
      }
      function wrapElement(element, wrapper, attributes) {
        if (typeof wrapper === "string") {
          wrapper = makeElement(wrapper, attributes);
        }
        if (element.parentNode) {
          element.parentNode.replaceChild(wrapper, element);
        }
        wrapper.appendChild(element);
        return wrapper;
      }
      function getScrollLeftTop(element) {
        var left = 0, top = 0, docElement = fabric3.document.documentElement, body = fabric3.document.body || {
          scrollLeft: 0,
          scrollTop: 0
        };
        while (element && (element.parentNode || element.host)) {
          element = element.parentNode || element.host;
          if (element === fabric3.document) {
            left = body.scrollLeft || docElement.scrollLeft || 0;
            top = body.scrollTop || docElement.scrollTop || 0;
          } else {
            left += element.scrollLeft || 0;
            top += element.scrollTop || 0;
          }
          if (element.nodeType === 1 && element.style.position === "fixed") {
            break;
          }
        }
        return {left, top};
      }
      function getElementOffset(element) {
        var docElem, doc = element && element.ownerDocument, box = {left: 0, top: 0}, offset = {left: 0, top: 0}, scrollLeftTop, offsetAttributes = {
          borderLeftWidth: "left",
          borderTopWidth: "top",
          paddingLeft: "left",
          paddingTop: "top"
        };
        if (!doc) {
          return offset;
        }
        for (var attr in offsetAttributes) {
          offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;
        }
        docElem = doc.documentElement;
        if (typeof element.getBoundingClientRect !== "undefined") {
          box = element.getBoundingClientRect();
        }
        scrollLeftTop = getScrollLeftTop(element);
        return {
          left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,
          top: box.top + scrollLeftTop.top - (docElem.clientTop || 0) + offset.top
        };
      }
      var getElementStyle;
      if (fabric3.document.defaultView && fabric3.document.defaultView.getComputedStyle) {
        getElementStyle = function(element, attr) {
          var style = fabric3.document.defaultView.getComputedStyle(element, null);
          return style ? style[attr] : void 0;
        };
      } else {
        getElementStyle = function(element, attr) {
          var value = element.style[attr];
          if (!value && element.currentStyle) {
            value = element.currentStyle[attr];
          }
          return value;
        };
      }
      (function() {
        var style = fabric3.document.documentElement.style, selectProp = "userSelect" in style ? "userSelect" : "MozUserSelect" in style ? "MozUserSelect" : "WebkitUserSelect" in style ? "WebkitUserSelect" : "KhtmlUserSelect" in style ? "KhtmlUserSelect" : "";
        function makeElementUnselectable(element) {
          if (typeof element.onselectstart !== "undefined") {
            element.onselectstart = fabric3.util.falseFunction;
          }
          if (selectProp) {
            element.style[selectProp] = "none";
          } else if (typeof element.unselectable === "string") {
            element.unselectable = "on";
          }
          return element;
        }
        function makeElementSelectable(element) {
          if (typeof element.onselectstart !== "undefined") {
            element.onselectstart = null;
          }
          if (selectProp) {
            element.style[selectProp] = "";
          } else if (typeof element.unselectable === "string") {
            element.unselectable = "";
          }
          return element;
        }
        fabric3.util.makeElementUnselectable = makeElementUnselectable;
        fabric3.util.makeElementSelectable = makeElementSelectable;
      })();
      function getNodeCanvas(element) {
        var impl = fabric3.jsdomImplForWrapper(element);
        return impl._canvas || impl._image;
      }
      ;
      function cleanUpJsdomNode(element) {
        if (!fabric3.isLikelyNode) {
          return;
        }
        var impl = fabric3.jsdomImplForWrapper(element);
        if (impl) {
          impl._image = null;
          impl._canvas = null;
          impl._currentSrc = null;
          impl._attributes = null;
          impl._classList = null;
        }
      }
      function setImageSmoothing(ctx, value) {
        ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;
        ctx.imageSmoothingEnabled = value;
      }
      fabric3.util.setImageSmoothing = setImageSmoothing;
      fabric3.util.getById = getById;
      fabric3.util.toArray = toArray;
      fabric3.util.addClass = addClass;
      fabric3.util.makeElement = makeElement;
      fabric3.util.wrapElement = wrapElement;
      fabric3.util.getScrollLeftTop = getScrollLeftTop;
      fabric3.util.getElementOffset = getElementOffset;
      fabric3.util.getNodeCanvas = getNodeCanvas;
      fabric3.util.cleanUpJsdomNode = cleanUpJsdomNode;
    })();
    (function() {
      function addParamToUrl(url, param) {
        return url + (/\?/.test(url) ? "&" : "?") + param;
      }
      function emptyFn() {
      }
      function request(url, options) {
        options || (options = {});
        var method = options.method ? options.method.toUpperCase() : "GET", onComplete = options.onComplete || function() {
        }, xhr = new fabric3.window.XMLHttpRequest(), body = options.body || options.parameters;
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            onComplete(xhr);
            xhr.onreadystatechange = emptyFn;
          }
        };
        if (method === "GET") {
          body = null;
          if (typeof options.parameters === "string") {
            url = addParamToUrl(url, options.parameters);
          }
        }
        xhr.open(method, url, true);
        if (method === "POST" || method === "PUT") {
          xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        }
        xhr.send(body);
        return xhr;
      }
      fabric3.util.request = request;
    })();
    fabric3.log = console.log;
    fabric3.warn = console.warn;
    (function() {
      function noop() {
        return false;
      }
      function defaultEasing(t, b, c, d) {
        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
      }
      function animate(options) {
        requestAnimFrame(function(timestamp) {
          options || (options = {});
          var start = timestamp || +new Date(), duration = options.duration || 500, finish = start + duration, time, onChange = options.onChange || noop, abort = options.abort || noop, onComplete = options.onComplete || noop, easing = options.easing || defaultEasing, startValue = "startValue" in options ? options.startValue : 0, endValue = "endValue" in options ? options.endValue : 100, byValue = options.byValue || endValue - startValue;
          options.onStart && options.onStart();
          (function tick(ticktime) {
            time = ticktime || +new Date();
            var currentTime = time > finish ? duration : time - start, timePerc = currentTime / duration, current = easing(currentTime, startValue, byValue, duration), valuePerc = Math.abs((current - startValue) / byValue);
            if (abort()) {
              onComplete(endValue, 1, 1);
              return;
            }
            if (time > finish) {
              onChange(endValue, 1, 1);
              onComplete(endValue, 1, 1);
              return;
            } else {
              onChange(current, valuePerc, timePerc);
              requestAnimFrame(tick);
            }
          })(start);
        });
      }
      var _requestAnimFrame = fabric3.window.requestAnimationFrame || fabric3.window.webkitRequestAnimationFrame || fabric3.window.mozRequestAnimationFrame || fabric3.window.oRequestAnimationFrame || fabric3.window.msRequestAnimationFrame || function(callback) {
        return fabric3.window.setTimeout(callback, 1e3 / 60);
      };
      var _cancelAnimFrame = fabric3.window.cancelAnimationFrame || fabric3.window.clearTimeout;
      function requestAnimFrame() {
        return _requestAnimFrame.apply(fabric3.window, arguments);
      }
      function cancelAnimFrame() {
        return _cancelAnimFrame.apply(fabric3.window, arguments);
      }
      fabric3.util.animate = animate;
      fabric3.util.requestAnimFrame = requestAnimFrame;
      fabric3.util.cancelAnimFrame = cancelAnimFrame;
    })();
    (function() {
      function calculateColor(begin, end, pos) {
        var color = "rgba(" + parseInt(begin[0] + pos * (end[0] - begin[0]), 10) + "," + parseInt(begin[1] + pos * (end[1] - begin[1]), 10) + "," + parseInt(begin[2] + pos * (end[2] - begin[2]), 10);
        color += "," + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);
        color += ")";
        return color;
      }
      function animateColor(fromColor, toColor, duration, options) {
        var startColor = new fabric3.Color(fromColor).getSource(), endColor = new fabric3.Color(toColor).getSource(), originalOnComplete = options.onComplete, originalOnChange = options.onChange;
        options = options || {};
        fabric3.util.animate(fabric3.util.object.extend(options, {
          duration: duration || 500,
          startValue: startColor,
          endValue: endColor,
          byValue: endColor,
          easing: function(currentTime, startValue, byValue, duration2) {
            var posValue = options.colorEasing ? options.colorEasing(currentTime, duration2) : 1 - Math.cos(currentTime / duration2 * (Math.PI / 2));
            return calculateColor(startValue, byValue, posValue);
          },
          onComplete: function(current, valuePerc, timePerc) {
            if (originalOnComplete) {
              return originalOnComplete(calculateColor(endColor, endColor, 0), valuePerc, timePerc);
            }
          },
          onChange: function(current, valuePerc, timePerc) {
            if (originalOnChange) {
              if (Array.isArray(current)) {
                return originalOnChange(calculateColor(current, current, 0), valuePerc, timePerc);
              }
              originalOnChange(current, valuePerc, timePerc);
            }
          }
        }));
      }
      fabric3.util.animateColor = animateColor;
    })();
    (function() {
      function normalize(a, c, p, s) {
        if (a < Math.abs(c)) {
          a = c;
          s = p / 4;
        } else {
          if (c === 0 && a === 0) {
            s = p / (2 * Math.PI) * Math.asin(1);
          } else {
            s = p / (2 * Math.PI) * Math.asin(c / a);
          }
        }
        return {a, c, p, s};
      }
      function elastic(opts, t, d) {
        return opts.a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p);
      }
      function easeOutCubic(t, b, c, d) {
        return c * ((t = t / d - 1) * t * t + 1) + b;
      }
      function easeInOutCubic(t, b, c, d) {
        t /= d / 2;
        if (t < 1) {
          return c / 2 * t * t * t + b;
        }
        return c / 2 * ((t -= 2) * t * t + 2) + b;
      }
      function easeInQuart(t, b, c, d) {
        return c * (t /= d) * t * t * t + b;
      }
      function easeOutQuart(t, b, c, d) {
        return -c * ((t = t / d - 1) * t * t * t - 1) + b;
      }
      function easeInOutQuart(t, b, c, d) {
        t /= d / 2;
        if (t < 1) {
          return c / 2 * t * t * t * t + b;
        }
        return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
      }
      function easeInQuint(t, b, c, d) {
        return c * (t /= d) * t * t * t * t + b;
      }
      function easeOutQuint(t, b, c, d) {
        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
      }
      function easeInOutQuint(t, b, c, d) {
        t /= d / 2;
        if (t < 1) {
          return c / 2 * t * t * t * t * t + b;
        }
        return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
      }
      function easeInSine(t, b, c, d) {
        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
      }
      function easeOutSine(t, b, c, d) {
        return c * Math.sin(t / d * (Math.PI / 2)) + b;
      }
      function easeInOutSine(t, b, c, d) {
        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
      }
      function easeInExpo(t, b, c, d) {
        return t === 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
      }
      function easeOutExpo(t, b, c, d) {
        return t === d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
      }
      function easeInOutExpo(t, b, c, d) {
        if (t === 0) {
          return b;
        }
        if (t === d) {
          return b + c;
        }
        t /= d / 2;
        if (t < 1) {
          return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
        }
        return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
      }
      function easeInCirc(t, b, c, d) {
        return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
      }
      function easeOutCirc(t, b, c, d) {
        return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
      }
      function easeInOutCirc(t, b, c, d) {
        t /= d / 2;
        if (t < 1) {
          return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
        }
        return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
      }
      function easeInElastic(t, b, c, d) {
        var s = 1.70158, p = 0, a = c;
        if (t === 0) {
          return b;
        }
        t /= d;
        if (t === 1) {
          return b + c;
        }
        if (!p) {
          p = d * 0.3;
        }
        var opts = normalize(a, c, p, s);
        return -elastic(opts, t, d) + b;
      }
      function easeOutElastic(t, b, c, d) {
        var s = 1.70158, p = 0, a = c;
        if (t === 0) {
          return b;
        }
        t /= d;
        if (t === 1) {
          return b + c;
        }
        if (!p) {
          p = d * 0.3;
        }
        var opts = normalize(a, c, p, s);
        return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p) + opts.c + b;
      }
      function easeInOutElastic(t, b, c, d) {
        var s = 1.70158, p = 0, a = c;
        if (t === 0) {
          return b;
        }
        t /= d / 2;
        if (t === 2) {
          return b + c;
        }
        if (!p) {
          p = d * (0.3 * 1.5);
        }
        var opts = normalize(a, c, p, s);
        if (t < 1) {
          return -0.5 * elastic(opts, t, d) + b;
        }
        return opts.a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p) * 0.5 + opts.c + b;
      }
      function easeInBack(t, b, c, d, s) {
        if (s === void 0) {
          s = 1.70158;
        }
        return c * (t /= d) * t * ((s + 1) * t - s) + b;
      }
      function easeOutBack(t, b, c, d, s) {
        if (s === void 0) {
          s = 1.70158;
        }
        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
      }
      function easeInOutBack(t, b, c, d, s) {
        if (s === void 0) {
          s = 1.70158;
        }
        t /= d / 2;
        if (t < 1) {
          return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
        }
        return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
      }
      function easeInBounce(t, b, c, d) {
        return c - easeOutBounce(d - t, 0, c, d) + b;
      }
      function easeOutBounce(t, b, c, d) {
        if ((t /= d) < 1 / 2.75) {
          return c * (7.5625 * t * t) + b;
        } else if (t < 2 / 2.75) {
          return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
        } else if (t < 2.5 / 2.75) {
          return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
        } else {
          return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
        }
      }
      function easeInOutBounce(t, b, c, d) {
        if (t < d / 2) {
          return easeInBounce(t * 2, 0, c, d) * 0.5 + b;
        }
        return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
      }
      fabric3.util.ease = {
        easeInQuad: function(t, b, c, d) {
          return c * (t /= d) * t + b;
        },
        easeOutQuad: function(t, b, c, d) {
          return -c * (t /= d) * (t - 2) + b;
        },
        easeInOutQuad: function(t, b, c, d) {
          t /= d / 2;
          if (t < 1) {
            return c / 2 * t * t + b;
          }
          return -c / 2 * (--t * (t - 2) - 1) + b;
        },
        easeInCubic: function(t, b, c, d) {
          return c * (t /= d) * t * t + b;
        },
        easeOutCubic,
        easeInOutCubic,
        easeInQuart,
        easeOutQuart,
        easeInOutQuart,
        easeInQuint,
        easeOutQuint,
        easeInOutQuint,
        easeInSine,
        easeOutSine,
        easeInOutSine,
        easeInExpo,
        easeOutExpo,
        easeInOutExpo,
        easeInCirc,
        easeOutCirc,
        easeInOutCirc,
        easeInElastic,
        easeOutElastic,
        easeInOutElastic,
        easeInBack,
        easeOutBack,
        easeInOutBack,
        easeInBounce,
        easeOutBounce,
        easeInOutBounce
      };
    })();
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), extend = fabric4.util.object.extend, clone = fabric4.util.object.clone, toFixed = fabric4.util.toFixed, parseUnit = fabric4.util.parseUnit, multiplyTransformMatrices = fabric4.util.multiplyTransformMatrices, svgValidTagNames = [
        "path",
        "circle",
        "polygon",
        "polyline",
        "ellipse",
        "rect",
        "line",
        "image",
        "text"
      ], svgViewBoxElements = ["symbol", "image", "marker", "pattern", "view", "svg"], svgInvalidAncestors = ["pattern", "defs", "symbol", "metadata", "clipPath", "mask", "desc"], svgValidParents = ["symbol", "g", "a", "svg", "clipPath", "defs"], attributesMap = {
        cx: "left",
        x: "left",
        r: "radius",
        cy: "top",
        y: "top",
        display: "visible",
        visibility: "visible",
        transform: "transformMatrix",
        "fill-opacity": "fillOpacity",
        "fill-rule": "fillRule",
        "font-family": "fontFamily",
        "font-size": "fontSize",
        "font-style": "fontStyle",
        "font-weight": "fontWeight",
        "letter-spacing": "charSpacing",
        "paint-order": "paintFirst",
        "stroke-dasharray": "strokeDashArray",
        "stroke-dashoffset": "strokeDashOffset",
        "stroke-linecap": "strokeLineCap",
        "stroke-linejoin": "strokeLineJoin",
        "stroke-miterlimit": "strokeMiterLimit",
        "stroke-opacity": "strokeOpacity",
        "stroke-width": "strokeWidth",
        "text-decoration": "textDecoration",
        "text-anchor": "textAnchor",
        opacity: "opacity",
        "clip-path": "clipPath",
        "clip-rule": "clipRule",
        "vector-effect": "strokeUniform",
        "image-rendering": "imageSmoothing"
      }, colorAttributes = {
        stroke: "strokeOpacity",
        fill: "fillOpacity"
      }, fSize = "font-size", cPath = "clip-path";
      fabric4.svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);
      fabric4.svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);
      fabric4.svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);
      fabric4.svgValidParentsRegEx = getSvgRegex(svgValidParents);
      fabric4.cssRules = {};
      fabric4.gradientDefs = {};
      fabric4.clipPaths = {};
      function normalizeAttr(attr) {
        if (attr in attributesMap) {
          return attributesMap[attr];
        }
        return attr;
      }
      function normalizeValue(attr, value, parentAttributes, fontSize) {
        var isArray = Object.prototype.toString.call(value) === "[object Array]", parsed;
        if ((attr === "fill" || attr === "stroke") && value === "none") {
          value = "";
        } else if (attr === "strokeUniform") {
          return value === "non-scaling-stroke";
        } else if (attr === "strokeDashArray") {
          if (value === "none") {
            value = null;
          } else {
            value = value.replace(/,/g, " ").split(/\s+/).map(parseFloat);
          }
        } else if (attr === "transformMatrix") {
          if (parentAttributes && parentAttributes.transformMatrix) {
            value = multiplyTransformMatrices(parentAttributes.transformMatrix, fabric4.parseTransformAttribute(value));
          } else {
            value = fabric4.parseTransformAttribute(value);
          }
        } else if (attr === "visible") {
          value = value !== "none" && value !== "hidden";
          if (parentAttributes && parentAttributes.visible === false) {
            value = false;
          }
        } else if (attr === "opacity") {
          value = parseFloat(value);
          if (parentAttributes && typeof parentAttributes.opacity !== "undefined") {
            value *= parentAttributes.opacity;
          }
        } else if (attr === "textAnchor") {
          value = value === "start" ? "left" : value === "end" ? "right" : "center";
        } else if (attr === "charSpacing") {
          parsed = parseUnit(value, fontSize) / fontSize * 1e3;
        } else if (attr === "paintFirst") {
          var fillIndex = value.indexOf("fill");
          var strokeIndex = value.indexOf("stroke");
          var value = "fill";
          if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {
            value = "stroke";
          } else if (fillIndex === -1 && strokeIndex > -1) {
            value = "stroke";
          }
        } else if (attr === "href" || attr === "xlink:href" || attr === "font") {
          return value;
        } else if (attr === "imageSmoothing") {
          return value === "optimizeQuality" ? true : false;
        } else {
          parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);
        }
        return !isArray && isNaN(parsed) ? value : parsed;
      }
      function getSvgRegex(arr) {
        return new RegExp("^(" + arr.join("|") + ")\\b", "i");
      }
      function _setStrokeFillOpacity(attributes) {
        for (var attr in colorAttributes) {
          if (typeof attributes[colorAttributes[attr]] === "undefined" || attributes[attr] === "") {
            continue;
          }
          if (typeof attributes[attr] === "undefined") {
            if (!fabric4.Object.prototype[attr]) {
              continue;
            }
            attributes[attr] = fabric4.Object.prototype[attr];
          }
          if (attributes[attr].indexOf("url(") === 0) {
            continue;
          }
          var color = new fabric4.Color(attributes[attr]);
          attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();
        }
        return attributes;
      }
      function _getMultipleNodes(doc, nodeNames) {
        var nodeName, nodeArray = [], nodeList, i, len;
        for (i = 0, len = nodeNames.length; i < len; i++) {
          nodeName = nodeNames[i];
          nodeList = doc.getElementsByTagName(nodeName);
          nodeArray = nodeArray.concat(Array.prototype.slice.call(nodeList));
        }
        return nodeArray;
      }
      fabric4.parseTransformAttribute = function() {
        function rotateMatrix(matrix2, args) {
          var cos = fabric4.util.cos(args[0]), sin = fabric4.util.sin(args[0]), x = 0, y = 0;
          if (args.length === 3) {
            x = args[1];
            y = args[2];
          }
          matrix2[0] = cos;
          matrix2[1] = sin;
          matrix2[2] = -sin;
          matrix2[3] = cos;
          matrix2[4] = x - (cos * x - sin * y);
          matrix2[5] = y - (sin * x + cos * y);
        }
        function scaleMatrix(matrix2, args) {
          var multiplierX = args[0], multiplierY = args.length === 2 ? args[1] : args[0];
          matrix2[0] = multiplierX;
          matrix2[3] = multiplierY;
        }
        function skewMatrix(matrix2, args, pos) {
          matrix2[pos] = Math.tan(fabric4.util.degreesToRadians(args[0]));
        }
        function translateMatrix(matrix2, args) {
          matrix2[4] = args[0];
          if (args.length === 2) {
            matrix2[5] = args[1];
          }
        }
        var iMatrix = fabric4.iMatrix, number = fabric4.reNum, commaWsp = fabric4.commaWsp, skewX = "(?:(skewX)\\s*\\(\\s*(" + number + ")\\s*\\))", skewY = "(?:(skewY)\\s*\\(\\s*(" + number + ")\\s*\\))", rotate = "(?:(rotate)\\s*\\(\\s*(" + number + ")(?:" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + "))?\\s*\\))", scale = "(?:(scale)\\s*\\(\\s*(" + number + ")(?:" + commaWsp + "(" + number + "))?\\s*\\))", translate = "(?:(translate)\\s*\\(\\s*(" + number + ")(?:" + commaWsp + "(" + number + "))?\\s*\\))", matrix = "(?:(matrix)\\s*\\(\\s*(" + number + ")" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + ")\\s*\\))", transform = "(?:" + matrix + "|" + translate + "|" + scale + "|" + rotate + "|" + skewX + "|" + skewY + ")", transforms = "(?:" + transform + "(?:" + commaWsp + "*" + transform + ")*)", transformList = "^\\s*(?:" + transforms + "?)\\s*$", reTransformList = new RegExp(transformList), reTransform = new RegExp(transform, "g");
        return function(attributeValue) {
          var matrix2 = iMatrix.concat(), matrices = [];
          if (!attributeValue || attributeValue && !reTransformList.test(attributeValue)) {
            return matrix2;
          }
          attributeValue.replace(reTransform, function(match) {
            var m = new RegExp(transform).exec(match).filter(function(match2) {
              return !!match2;
            }), operation = m[1], args = m.slice(2).map(parseFloat);
            switch (operation) {
              case "translate":
                translateMatrix(matrix2, args);
                break;
              case "rotate":
                args[0] = fabric4.util.degreesToRadians(args[0]);
                rotateMatrix(matrix2, args);
                break;
              case "scale":
                scaleMatrix(matrix2, args);
                break;
              case "skewX":
                skewMatrix(matrix2, args, 2);
                break;
              case "skewY":
                skewMatrix(matrix2, args, 1);
                break;
              case "matrix":
                matrix2 = args;
                break;
            }
            matrices.push(matrix2.concat());
            matrix2 = iMatrix.concat();
          });
          var combinedMatrix = matrices[0];
          while (matrices.length > 1) {
            matrices.shift();
            combinedMatrix = fabric4.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);
          }
          return combinedMatrix;
        };
      }();
      function parseStyleString(style, oStyle) {
        var attr, value;
        style.replace(/;\s*$/, "").split(";").forEach(function(chunk) {
          var pair = chunk.split(":");
          attr = pair[0].trim().toLowerCase();
          value = pair[1].trim();
          oStyle[attr] = value;
        });
      }
      function parseStyleObject(style, oStyle) {
        var attr, value;
        for (var prop in style) {
          if (typeof style[prop] === "undefined") {
            continue;
          }
          attr = prop.toLowerCase();
          value = style[prop];
          oStyle[attr] = value;
        }
      }
      function getGlobalStylesForElement(element, svgUid) {
        var styles = {};
        for (var rule in fabric4.cssRules[svgUid]) {
          if (elementMatchesRule(element, rule.split(" "))) {
            for (var property in fabric4.cssRules[svgUid][rule]) {
              styles[property] = fabric4.cssRules[svgUid][rule][property];
            }
          }
        }
        return styles;
      }
      function elementMatchesRule(element, selectors) {
        var firstMatching, parentMatching = true;
        firstMatching = selectorMatches(element, selectors.pop());
        if (firstMatching && selectors.length) {
          parentMatching = doesSomeParentMatch(element, selectors);
        }
        return firstMatching && parentMatching && selectors.length === 0;
      }
      function doesSomeParentMatch(element, selectors) {
        var selector, parentMatching = true;
        while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {
          if (parentMatching) {
            selector = selectors.pop();
          }
          element = element.parentNode;
          parentMatching = selectorMatches(element, selector);
        }
        return selectors.length === 0;
      }
      function selectorMatches(element, selector) {
        var nodeName = element.nodeName, classNames = element.getAttribute("class"), id = element.getAttribute("id"), matcher, i;
        matcher = new RegExp("^" + nodeName, "i");
        selector = selector.replace(matcher, "");
        if (id && selector.length) {
          matcher = new RegExp("#" + id + "(?![a-zA-Z\\-]+)", "i");
          selector = selector.replace(matcher, "");
        }
        if (classNames && selector.length) {
          classNames = classNames.split(" ");
          for (i = classNames.length; i--; ) {
            matcher = new RegExp("\\." + classNames[i] + "(?![a-zA-Z\\-]+)", "i");
            selector = selector.replace(matcher, "");
          }
        }
        return selector.length === 0;
      }
      function elementById(doc, id) {
        var el2;
        doc.getElementById && (el2 = doc.getElementById(id));
        if (el2) {
          return el2;
        }
        var node, i, len, nodelist = doc.getElementsByTagName("*");
        for (i = 0, len = nodelist.length; i < len; i++) {
          node = nodelist[i];
          if (id === node.getAttribute("id")) {
            return node;
          }
        }
      }
      function parseUseDirectives(doc) {
        var nodelist = _getMultipleNodes(doc, ["use", "svg:use"]), i = 0;
        while (nodelist.length && i < nodelist.length) {
          var el2 = nodelist[i], xlink = (el2.getAttribute("xlink:href") || el2.getAttribute("href")).substr(1), x = el2.getAttribute("x") || 0, y = el2.getAttribute("y") || 0, el22 = elementById(doc, xlink).cloneNode(true), currentTrans = (el22.getAttribute("transform") || "") + " translate(" + x + ", " + y + ")", parentNode, oldLength = nodelist.length, attr, j, attrs, len, namespace = fabric4.svgNS;
          applyViewboxTransform(el22);
          if (/^svg$/i.test(el22.nodeName)) {
            var el3 = el22.ownerDocument.createElementNS(namespace, "g");
            for (j = 0, attrs = el22.attributes, len = attrs.length; j < len; j++) {
              attr = attrs.item(j);
              el3.setAttributeNS(namespace, attr.nodeName, attr.nodeValue);
            }
            while (el22.firstChild) {
              el3.appendChild(el22.firstChild);
            }
            el22 = el3;
          }
          for (j = 0, attrs = el2.attributes, len = attrs.length; j < len; j++) {
            attr = attrs.item(j);
            if (attr.nodeName === "x" || attr.nodeName === "y" || attr.nodeName === "xlink:href" || attr.nodeName === "href") {
              continue;
            }
            if (attr.nodeName === "transform") {
              currentTrans = attr.nodeValue + " " + currentTrans;
            } else {
              el22.setAttribute(attr.nodeName, attr.nodeValue);
            }
          }
          el22.setAttribute("transform", currentTrans);
          el22.setAttribute("instantiated_by_use", "1");
          el22.removeAttribute("id");
          parentNode = el2.parentNode;
          parentNode.replaceChild(el22, el2);
          if (nodelist.length === oldLength) {
            i++;
          }
        }
      }
      var reViewBoxAttrValue = new RegExp("^\\s*(" + fabric4.reNum + "+)\\s*,?\\s*(" + fabric4.reNum + "+)\\s*,?\\s*(" + fabric4.reNum + "+)\\s*,?\\s*(" + fabric4.reNum + "+)\\s*$");
      function applyViewboxTransform(element) {
        if (!fabric4.svgViewBoxElementsRegEx.test(element.nodeName)) {
          return;
        }
        var viewBoxAttr = element.getAttribute("viewBox"), scaleX = 1, scaleY = 1, minX = 0, minY = 0, viewBoxWidth, viewBoxHeight, matrix, el2, widthAttr = element.getAttribute("width"), heightAttr = element.getAttribute("height"), x = element.getAttribute("x") || 0, y = element.getAttribute("y") || 0, preserveAspectRatio = element.getAttribute("preserveAspectRatio") || "", missingViewBox = !viewBoxAttr || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue)), missingDimAttr = !widthAttr || !heightAttr || widthAttr === "100%" || heightAttr === "100%", toBeParsed = missingViewBox && missingDimAttr, parsedDim = {}, translateMatrix = "", widthDiff = 0, heightDiff = 0;
        parsedDim.width = 0;
        parsedDim.height = 0;
        parsedDim.toBeParsed = toBeParsed;
        if (missingViewBox) {
          if ((x || y) && element.parentNode.nodeName !== "#document") {
            translateMatrix = " translate(" + parseUnit(x) + " " + parseUnit(y) + ") ";
            matrix = (element.getAttribute("transform") || "") + translateMatrix;
            element.setAttribute("transform", matrix);
            element.removeAttribute("x");
            element.removeAttribute("y");
          }
        }
        if (toBeParsed) {
          return parsedDim;
        }
        if (missingViewBox) {
          parsedDim.width = parseUnit(widthAttr);
          parsedDim.height = parseUnit(heightAttr);
          return parsedDim;
        }
        minX = -parseFloat(viewBoxAttr[1]);
        minY = -parseFloat(viewBoxAttr[2]);
        viewBoxWidth = parseFloat(viewBoxAttr[3]);
        viewBoxHeight = parseFloat(viewBoxAttr[4]);
        parsedDim.minX = minX;
        parsedDim.minY = minY;
        parsedDim.viewBoxWidth = viewBoxWidth;
        parsedDim.viewBoxHeight = viewBoxHeight;
        if (!missingDimAttr) {
          parsedDim.width = parseUnit(widthAttr);
          parsedDim.height = parseUnit(heightAttr);
          scaleX = parsedDim.width / viewBoxWidth;
          scaleY = parsedDim.height / viewBoxHeight;
        } else {
          parsedDim.width = viewBoxWidth;
          parsedDim.height = viewBoxHeight;
        }
        preserveAspectRatio = fabric4.util.parsePreserveAspectRatioAttribute(preserveAspectRatio);
        if (preserveAspectRatio.alignX !== "none") {
          if (preserveAspectRatio.meetOrSlice === "meet") {
            scaleY = scaleX = scaleX > scaleY ? scaleY : scaleX;
          }
          if (preserveAspectRatio.meetOrSlice === "slice") {
            scaleY = scaleX = scaleX > scaleY ? scaleX : scaleY;
          }
          widthDiff = parsedDim.width - viewBoxWidth * scaleX;
          heightDiff = parsedDim.height - viewBoxHeight * scaleX;
          if (preserveAspectRatio.alignX === "Mid") {
            widthDiff /= 2;
          }
          if (preserveAspectRatio.alignY === "Mid") {
            heightDiff /= 2;
          }
          if (preserveAspectRatio.alignX === "Min") {
            widthDiff = 0;
          }
          if (preserveAspectRatio.alignY === "Min") {
            heightDiff = 0;
          }
        }
        if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0 && x === 0 && y === 0) {
          return parsedDim;
        }
        if ((x || y) && element.parentNode.nodeName !== "#document") {
          translateMatrix = " translate(" + parseUnit(x) + " " + parseUnit(y) + ") ";
        }
        matrix = translateMatrix + " matrix(" + scaleX + " 0 0 " + scaleY + " " + (minX * scaleX + widthDiff) + " " + (minY * scaleY + heightDiff) + ") ";
        if (element.nodeName === "svg") {
          el2 = element.ownerDocument.createElementNS(fabric4.svgNS, "g");
          while (element.firstChild) {
            el2.appendChild(element.firstChild);
          }
          element.appendChild(el2);
        } else {
          el2 = element;
          el2.removeAttribute("x");
          el2.removeAttribute("y");
          matrix = el2.getAttribute("transform") + matrix;
        }
        el2.setAttribute("transform", matrix);
        return parsedDim;
      }
      function hasAncestorWithNodeName(element, nodeName) {
        while (element && (element = element.parentNode)) {
          if (element.nodeName && nodeName.test(element.nodeName.replace("svg:", "")) && !element.getAttribute("instantiated_by_use")) {
            return true;
          }
        }
        return false;
      }
      fabric4.parseSVGDocument = function(doc, callback, reviver, parsingOptions) {
        if (!doc) {
          return;
        }
        parseUseDirectives(doc);
        var svgUid = fabric4.Object.__uid++, i, len, options = applyViewboxTransform(doc), descendants = fabric4.util.toArray(doc.getElementsByTagName("*"));
        options.crossOrigin = parsingOptions && parsingOptions.crossOrigin;
        options.svgUid = svgUid;
        if (descendants.length === 0 && fabric4.isLikelyNode) {
          descendants = doc.selectNodes('//*[name(.)!="svg"]');
          var arr = [];
          for (i = 0, len = descendants.length; i < len; i++) {
            arr[i] = descendants[i];
          }
          descendants = arr;
        }
        var elements = descendants.filter(function(el2) {
          applyViewboxTransform(el2);
          return fabric4.svgValidTagNamesRegEx.test(el2.nodeName.replace("svg:", "")) && !hasAncestorWithNodeName(el2, fabric4.svgInvalidAncestorsRegEx);
        });
        if (!elements || elements && !elements.length) {
          callback && callback([], {});
          return;
        }
        var clipPaths = {};
        descendants.filter(function(el2) {
          return el2.nodeName.replace("svg:", "") === "clipPath";
        }).forEach(function(el2) {
          var id = el2.getAttribute("id");
          clipPaths[id] = fabric4.util.toArray(el2.getElementsByTagName("*")).filter(function(el3) {
            return fabric4.svgValidTagNamesRegEx.test(el3.nodeName.replace("svg:", ""));
          });
        });
        fabric4.gradientDefs[svgUid] = fabric4.getGradientDefs(doc);
        fabric4.cssRules[svgUid] = fabric4.getCSSRules(doc);
        fabric4.clipPaths[svgUid] = clipPaths;
        fabric4.parseElements(elements, function(instances, elements2) {
          if (callback) {
            callback(instances, options, elements2, descendants);
            delete fabric4.gradientDefs[svgUid];
            delete fabric4.cssRules[svgUid];
            delete fabric4.clipPaths[svgUid];
          }
        }, clone(options), reviver, parsingOptions);
      };
      function recursivelyParseGradientsXlink(doc, gradient) {
        var gradientsAttrs = ["gradientTransform", "x1", "x2", "y1", "y2", "gradientUnits", "cx", "cy", "r", "fx", "fy"], xlinkAttr = "xlink:href", xLink = gradient.getAttribute(xlinkAttr).substr(1), referencedGradient = elementById(doc, xLink);
        if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {
          recursivelyParseGradientsXlink(doc, referencedGradient);
        }
        gradientsAttrs.forEach(function(attr) {
          if (referencedGradient && !gradient.hasAttribute(attr) && referencedGradient.hasAttribute(attr)) {
            gradient.setAttribute(attr, referencedGradient.getAttribute(attr));
          }
        });
        if (!gradient.children.length) {
          var referenceClone = referencedGradient.cloneNode(true);
          while (referenceClone.firstChild) {
            gradient.appendChild(referenceClone.firstChild);
          }
        }
        gradient.removeAttribute(xlinkAttr);
      }
      var reFontDeclaration = new RegExp("(normal|italic)?\\s*(normal|small-caps)?\\s*(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\s*(" + fabric4.reNum + "(?:px|cm|mm|em|pt|pc|in)*)(?:\\/(normal|" + fabric4.reNum + "))?\\s+(.*)");
      extend(fabric4, {
        parseFontDeclaration: function(value, oStyle) {
          var match = value.match(reFontDeclaration);
          if (!match) {
            return;
          }
          var fontStyle = match[1], fontWeight = match[3], fontSize = match[4], lineHeight = match[5], fontFamily = match[6];
          if (fontStyle) {
            oStyle.fontStyle = fontStyle;
          }
          if (fontWeight) {
            oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);
          }
          if (fontSize) {
            oStyle.fontSize = parseUnit(fontSize);
          }
          if (fontFamily) {
            oStyle.fontFamily = fontFamily;
          }
          if (lineHeight) {
            oStyle.lineHeight = lineHeight === "normal" ? 1 : lineHeight;
          }
        },
        getGradientDefs: function(doc) {
          var tagArray = [
            "linearGradient",
            "radialGradient",
            "svg:linearGradient",
            "svg:radialGradient"
          ], elList = _getMultipleNodes(doc, tagArray), el2, j = 0, gradientDefs = {};
          j = elList.length;
          while (j--) {
            el2 = elList[j];
            if (el2.getAttribute("xlink:href")) {
              recursivelyParseGradientsXlink(doc, el2);
            }
            gradientDefs[el2.getAttribute("id")] = el2;
          }
          return gradientDefs;
        },
        parseAttributes: function(element, attributes, svgUid) {
          if (!element) {
            return;
          }
          var value, parentAttributes = {}, fontSize, parentFontSize;
          if (typeof svgUid === "undefined") {
            svgUid = element.getAttribute("svgUid");
          }
          if (element.parentNode && fabric4.svgValidParentsRegEx.test(element.parentNode.nodeName)) {
            parentAttributes = fabric4.parseAttributes(element.parentNode, attributes, svgUid);
          }
          var ownAttributes = attributes.reduce(function(memo, attr2) {
            value = element.getAttribute(attr2);
            if (value) {
              memo[attr2] = value;
            }
            return memo;
          }, {});
          var cssAttrs = extend(getGlobalStylesForElement(element, svgUid), fabric4.parseStyleAttribute(element));
          ownAttributes = extend(ownAttributes, cssAttrs);
          if (cssAttrs[cPath]) {
            element.setAttribute(cPath, cssAttrs[cPath]);
          }
          fontSize = parentFontSize = parentAttributes.fontSize || fabric4.Text.DEFAULT_SVG_FONT_SIZE;
          if (ownAttributes[fSize]) {
            ownAttributes[fSize] = fontSize = parseUnit(ownAttributes[fSize], parentFontSize);
          }
          var normalizedAttr, normalizedValue, normalizedStyle = {};
          for (var attr in ownAttributes) {
            normalizedAttr = normalizeAttr(attr);
            normalizedValue = normalizeValue(normalizedAttr, ownAttributes[attr], parentAttributes, fontSize);
            normalizedStyle[normalizedAttr] = normalizedValue;
          }
          if (normalizedStyle && normalizedStyle.font) {
            fabric4.parseFontDeclaration(normalizedStyle.font, normalizedStyle);
          }
          var mergedAttrs = extend(parentAttributes, normalizedStyle);
          return fabric4.svgValidParentsRegEx.test(element.nodeName) ? mergedAttrs : _setStrokeFillOpacity(mergedAttrs);
        },
        parseElements: function(elements, callback, options, reviver, parsingOptions) {
          new fabric4.ElementsParser(elements, callback, options, reviver, parsingOptions).parse();
        },
        parseStyleAttribute: function(element) {
          var oStyle = {}, style = element.getAttribute("style");
          if (!style) {
            return oStyle;
          }
          if (typeof style === "string") {
            parseStyleString(style, oStyle);
          } else {
            parseStyleObject(style, oStyle);
          }
          return oStyle;
        },
        parsePointsAttribute: function(points) {
          if (!points) {
            return null;
          }
          points = points.replace(/,/g, " ").trim();
          points = points.split(/\s+/);
          var parsedPoints = [], i, len;
          for (i = 0, len = points.length; i < len; i += 2) {
            parsedPoints.push({
              x: parseFloat(points[i]),
              y: parseFloat(points[i + 1])
            });
          }
          return parsedPoints;
        },
        getCSSRules: function(doc) {
          var styles = doc.getElementsByTagName("style"), i, len, allRules = {}, rules;
          for (i = 0, len = styles.length; i < len; i++) {
            var styleContents = styles[i].textContent || "";
            styleContents = styleContents.replace(/\/\*[\s\S]*?\*\//g, "");
            if (styleContents.trim() === "") {
              continue;
            }
            rules = styleContents.match(/[^{]*\{[\s\S]*?\}/g);
            rules = rules.map(function(rule) {
              return rule.trim();
            });
            rules.forEach(function(rule) {
              var match = rule.match(/([\s\S]*?)\s*\{([^}]*)\}/), ruleObj = {}, declaration = match[2].trim(), propertyValuePairs = declaration.replace(/;$/, "").split(/\s*;\s*/);
              for (i = 0, len = propertyValuePairs.length; i < len; i++) {
                var pair = propertyValuePairs[i].split(/\s*:\s*/), property = pair[0], value = pair[1];
                ruleObj[property] = value;
              }
              rule = match[1];
              rule.split(",").forEach(function(_rule) {
                _rule = _rule.replace(/^svg/i, "").trim();
                if (_rule === "") {
                  return;
                }
                if (allRules[_rule]) {
                  fabric4.util.object.extend(allRules[_rule], ruleObj);
                } else {
                  allRules[_rule] = fabric4.util.object.clone(ruleObj);
                }
              });
            });
          }
          return allRules;
        },
        loadSVGFromURL: function(url, callback, reviver, options) {
          url = url.replace(/^\n\s*/, "").trim();
          new fabric4.util.request(url, {
            method: "get",
            onComplete
          });
          function onComplete(r) {
            var xml = r.responseXML;
            if (!xml || !xml.documentElement) {
              callback && callback(null);
              return false;
            }
            fabric4.parseSVGDocument(xml.documentElement, function(results, _options, elements, allElements) {
              callback && callback(results, _options, elements, allElements);
            }, reviver, options);
          }
        },
        loadSVGFromString: function(string, callback, reviver, options) {
          var parser = new fabric4.window.DOMParser(), doc = parser.parseFromString(string.trim(), "text/xml");
          fabric4.parseSVGDocument(doc.documentElement, function(results, _options, elements, allElements) {
            callback(results, _options, elements, allElements);
          }, reviver, options);
        }
      });
    })(typeof exports !== "undefined" ? exports : exports);
    fabric3.ElementsParser = function(elements, callback, options, reviver, parsingOptions, doc) {
      this.elements = elements;
      this.callback = callback;
      this.options = options;
      this.reviver = reviver;
      this.svgUid = options && options.svgUid || 0;
      this.parsingOptions = parsingOptions;
      this.regexUrl = /^url\(['"]?#([^'"]+)['"]?\)/g;
      this.doc = doc;
    };
    (function(proto) {
      proto.parse = function() {
        this.instances = new Array(this.elements.length);
        this.numElements = this.elements.length;
        this.createObjects();
      };
      proto.createObjects = function() {
        var _this = this;
        this.elements.forEach(function(element, i) {
          element.setAttribute("svgUid", _this.svgUid);
          _this.createObject(element, i);
        });
      };
      proto.findTag = function(el2) {
        return fabric3[fabric3.util.string.capitalize(el2.tagName.replace("svg:", ""))];
      };
      proto.createObject = function(el2, index) {
        var klass = this.findTag(el2);
        if (klass && klass.fromElement) {
          try {
            klass.fromElement(el2, this.createCallback(index, el2), this.options);
          } catch (err) {
            fabric3.log(err);
          }
        } else {
          this.checkIfDone();
        }
      };
      proto.createCallback = function(index, el2) {
        var _this = this;
        return function(obj) {
          var _options;
          _this.resolveGradient(obj, el2, "fill");
          _this.resolveGradient(obj, el2, "stroke");
          if (obj instanceof fabric3.Image && obj._originalElement) {
            _options = obj.parsePreserveAspectRatioAttribute(el2);
          }
          obj._removeTransformMatrix(_options);
          _this.resolveClipPath(obj, el2);
          _this.reviver && _this.reviver(el2, obj);
          _this.instances[index] = obj;
          _this.checkIfDone();
        };
      };
      proto.extractPropertyDefinition = function(obj, property, storage) {
        var value = obj[property], regex = this.regexUrl;
        if (!regex.test(value)) {
          return;
        }
        regex.lastIndex = 0;
        var id = regex.exec(value)[1];
        regex.lastIndex = 0;
        return fabric3[storage][this.svgUid][id];
      };
      proto.resolveGradient = function(obj, el2, property) {
        var gradientDef = this.extractPropertyDefinition(obj, property, "gradientDefs");
        if (gradientDef) {
          var opacityAttr = el2.getAttribute(property + "-opacity");
          var gradient = fabric3.Gradient.fromElement(gradientDef, obj, opacityAttr, this.options);
          obj.set(property, gradient);
        }
      };
      proto.createClipPathCallback = function(obj, container2) {
        return function(_newObj) {
          _newObj._removeTransformMatrix();
          _newObj.fillRule = _newObj.clipRule;
          container2.push(_newObj);
        };
      };
      proto.resolveClipPath = function(obj, usingElement) {
        var clipPath = this.extractPropertyDefinition(obj, "clipPath", "clipPaths"), element, klass, objTransformInv, container2, gTransform, options;
        if (clipPath) {
          container2 = [];
          objTransformInv = fabric3.util.invertTransform(obj.calcTransformMatrix());
          var clipPathTag = clipPath[0].parentNode;
          var clipPathOwner = usingElement;
          while (clipPathOwner.parentNode && clipPathOwner.getAttribute("clip-path") !== obj.clipPath) {
            clipPathOwner = clipPathOwner.parentNode;
          }
          clipPathOwner.parentNode.appendChild(clipPathTag);
          for (var i = 0; i < clipPath.length; i++) {
            element = clipPath[i];
            klass = this.findTag(element);
            klass.fromElement(element, this.createClipPathCallback(obj, container2), this.options);
          }
          if (container2.length === 1) {
            clipPath = container2[0];
          } else {
            clipPath = new fabric3.Group(container2);
          }
          gTransform = fabric3.util.multiplyTransformMatrices(objTransformInv, clipPath.calcTransformMatrix());
          if (clipPath.clipPath) {
            this.resolveClipPath(clipPath, clipPathOwner);
          }
          var options = fabric3.util.qrDecompose(gTransform);
          clipPath.flipX = false;
          clipPath.flipY = false;
          clipPath.set("scaleX", options.scaleX);
          clipPath.set("scaleY", options.scaleY);
          clipPath.angle = options.angle;
          clipPath.skewX = options.skewX;
          clipPath.skewY = 0;
          clipPath.setPositionByOrigin({x: options.translateX, y: options.translateY}, "center", "center");
          obj.clipPath = clipPath;
        } else {
          delete obj.clipPath;
        }
      };
      proto.checkIfDone = function() {
        if (--this.numElements === 0) {
          this.instances = this.instances.filter(function(el2) {
            return el2 != null;
          });
          this.callback(this.instances, this.elements);
        }
      };
    })(fabric3.ElementsParser.prototype);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {});
      if (fabric4.Point) {
        fabric4.warn("fabric.Point is already defined");
        return;
      }
      fabric4.Point = Point;
      function Point(x, y) {
        this.x = x;
        this.y = y;
      }
      Point.prototype = {
        type: "point",
        constructor: Point,
        add: function(that) {
          return new Point(this.x + that.x, this.y + that.y);
        },
        addEquals: function(that) {
          this.x += that.x;
          this.y += that.y;
          return this;
        },
        scalarAdd: function(scalar) {
          return new Point(this.x + scalar, this.y + scalar);
        },
        scalarAddEquals: function(scalar) {
          this.x += scalar;
          this.y += scalar;
          return this;
        },
        subtract: function(that) {
          return new Point(this.x - that.x, this.y - that.y);
        },
        subtractEquals: function(that) {
          this.x -= that.x;
          this.y -= that.y;
          return this;
        },
        scalarSubtract: function(scalar) {
          return new Point(this.x - scalar, this.y - scalar);
        },
        scalarSubtractEquals: function(scalar) {
          this.x -= scalar;
          this.y -= scalar;
          return this;
        },
        multiply: function(scalar) {
          return new Point(this.x * scalar, this.y * scalar);
        },
        multiplyEquals: function(scalar) {
          this.x *= scalar;
          this.y *= scalar;
          return this;
        },
        divide: function(scalar) {
          return new Point(this.x / scalar, this.y / scalar);
        },
        divideEquals: function(scalar) {
          this.x /= scalar;
          this.y /= scalar;
          return this;
        },
        eq: function(that) {
          return this.x === that.x && this.y === that.y;
        },
        lt: function(that) {
          return this.x < that.x && this.y < that.y;
        },
        lte: function(that) {
          return this.x <= that.x && this.y <= that.y;
        },
        gt: function(that) {
          return this.x > that.x && this.y > that.y;
        },
        gte: function(that) {
          return this.x >= that.x && this.y >= that.y;
        },
        lerp: function(that, t) {
          if (typeof t === "undefined") {
            t = 0.5;
          }
          t = Math.max(Math.min(1, t), 0);
          return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);
        },
        distanceFrom: function(that) {
          var dx = this.x - that.x, dy = this.y - that.y;
          return Math.sqrt(dx * dx + dy * dy);
        },
        midPointFrom: function(that) {
          return this.lerp(that);
        },
        min: function(that) {
          return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));
        },
        max: function(that) {
          return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));
        },
        toString: function() {
          return this.x + "," + this.y;
        },
        setXY: function(x, y) {
          this.x = x;
          this.y = y;
          return this;
        },
        setX: function(x) {
          this.x = x;
          return this;
        },
        setY: function(y) {
          this.y = y;
          return this;
        },
        setFromPoint: function(that) {
          this.x = that.x;
          this.y = that.y;
          return this;
        },
        swap: function(that) {
          var x = this.x, y = this.y;
          this.x = that.x;
          this.y = that.y;
          that.x = x;
          that.y = y;
        },
        clone: function() {
          return new Point(this.x, this.y);
        }
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {});
      if (fabric4.Intersection) {
        fabric4.warn("fabric.Intersection is already defined");
        return;
      }
      function Intersection(status) {
        this.status = status;
        this.points = [];
      }
      fabric4.Intersection = Intersection;
      fabric4.Intersection.prototype = {
        constructor: Intersection,
        appendPoint: function(point) {
          this.points.push(point);
          return this;
        },
        appendPoints: function(points) {
          this.points = this.points.concat(points);
          return this;
        }
      };
      fabric4.Intersection.intersectLineLine = function(a1, a2, b1, b2) {
        var result, uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x), ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x), uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
        if (uB !== 0) {
          var ua = uaT / uB, ub = ubT / uB;
          if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
            result = new Intersection("Intersection");
            result.appendPoint(new fabric4.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));
          } else {
            result = new Intersection();
          }
        } else {
          if (uaT === 0 || ubT === 0) {
            result = new Intersection("Coincident");
          } else {
            result = new Intersection("Parallel");
          }
        }
        return result;
      };
      fabric4.Intersection.intersectLinePolygon = function(a1, a2, points) {
        var result = new Intersection(), length = points.length, b1, b2, inter, i;
        for (i = 0; i < length; i++) {
          b1 = points[i];
          b2 = points[(i + 1) % length];
          inter = Intersection.intersectLineLine(a1, a2, b1, b2);
          result.appendPoints(inter.points);
        }
        if (result.points.length > 0) {
          result.status = "Intersection";
        }
        return result;
      };
      fabric4.Intersection.intersectPolygonPolygon = function(points1, points2) {
        var result = new Intersection(), length = points1.length, i;
        for (i = 0; i < length; i++) {
          var a1 = points1[i], a2 = points1[(i + 1) % length], inter = Intersection.intersectLinePolygon(a1, a2, points2);
          result.appendPoints(inter.points);
        }
        if (result.points.length > 0) {
          result.status = "Intersection";
        }
        return result;
      };
      fabric4.Intersection.intersectPolygonRectangle = function(points, r1, r2) {
        var min = r1.min(r2), max = r1.max(r2), topRight = new fabric4.Point(max.x, min.y), bottomLeft = new fabric4.Point(min.x, max.y), inter1 = Intersection.intersectLinePolygon(min, topRight, points), inter2 = Intersection.intersectLinePolygon(topRight, max, points), inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points), inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points), result = new Intersection();
        result.appendPoints(inter1.points);
        result.appendPoints(inter2.points);
        result.appendPoints(inter3.points);
        result.appendPoints(inter4.points);
        if (result.points.length > 0) {
          result.status = "Intersection";
        }
        return result;
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {});
      if (fabric4.Color) {
        fabric4.warn("fabric.Color is already defined.");
        return;
      }
      function Color2(color) {
        if (!color) {
          this.setSource([0, 0, 0, 1]);
        } else {
          this._tryParsingColor(color);
        }
      }
      fabric4.Color = Color2;
      fabric4.Color.prototype = {
        _tryParsingColor: function(color) {
          var source;
          if (color in Color2.colorNameMap) {
            color = Color2.colorNameMap[color];
          }
          if (color === "transparent") {
            source = [255, 255, 255, 0];
          }
          if (!source) {
            source = Color2.sourceFromHex(color);
          }
          if (!source) {
            source = Color2.sourceFromRgb(color);
          }
          if (!source) {
            source = Color2.sourceFromHsl(color);
          }
          if (!source) {
            source = [0, 0, 0, 1];
          }
          if (source) {
            this.setSource(source);
          }
        },
        _rgbToHsl: function(r, g, b) {
          r /= 255;
          g /= 255;
          b /= 255;
          var h, s, l, max = fabric4.util.array.max([r, g, b]), min = fabric4.util.array.min([r, g, b]);
          l = (max + min) / 2;
          if (max === min) {
            h = s = 0;
          } else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
              case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
              case g:
                h = (b - r) / d + 2;
                break;
              case b:
                h = (r - g) / d + 4;
                break;
            }
            h /= 6;
          }
          return [
            Math.round(h * 360),
            Math.round(s * 100),
            Math.round(l * 100)
          ];
        },
        getSource: function() {
          return this._source;
        },
        setSource: function(source) {
          this._source = source;
        },
        toRgb: function() {
          var source = this.getSource();
          return "rgb(" + source[0] + "," + source[1] + "," + source[2] + ")";
        },
        toRgba: function() {
          var source = this.getSource();
          return "rgba(" + source[0] + "," + source[1] + "," + source[2] + "," + source[3] + ")";
        },
        toHsl: function() {
          var source = this.getSource(), hsl = this._rgbToHsl(source[0], source[1], source[2]);
          return "hsl(" + hsl[0] + "," + hsl[1] + "%," + hsl[2] + "%)";
        },
        toHsla: function() {
          var source = this.getSource(), hsl = this._rgbToHsl(source[0], source[1], source[2]);
          return "hsla(" + hsl[0] + "," + hsl[1] + "%," + hsl[2] + "%," + source[3] + ")";
        },
        toHex: function() {
          var source = this.getSource(), r, g, b;
          r = source[0].toString(16);
          r = r.length === 1 ? "0" + r : r;
          g = source[1].toString(16);
          g = g.length === 1 ? "0" + g : g;
          b = source[2].toString(16);
          b = b.length === 1 ? "0" + b : b;
          return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();
        },
        toHexa: function() {
          var source = this.getSource(), a;
          a = Math.round(source[3] * 255);
          a = a.toString(16);
          a = a.length === 1 ? "0" + a : a;
          return this.toHex() + a.toUpperCase();
        },
        getAlpha: function() {
          return this.getSource()[3];
        },
        setAlpha: function(alpha) {
          var source = this.getSource();
          source[3] = alpha;
          this.setSource(source);
          return this;
        },
        toGrayscale: function() {
          var source = this.getSource(), average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10), currentAlpha = source[3];
          this.setSource([average, average, average, currentAlpha]);
          return this;
        },
        toBlackWhite: function(threshold) {
          var source = this.getSource(), average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), currentAlpha = source[3];
          threshold = threshold || 127;
          average = Number(average) < Number(threshold) ? 0 : 255;
          this.setSource([average, average, average, currentAlpha]);
          return this;
        },
        overlayWith: function(otherColor) {
          if (!(otherColor instanceof Color2)) {
            otherColor = new Color2(otherColor);
          }
          var result = [], alpha = this.getAlpha(), otherAlpha = 0.5, source = this.getSource(), otherSource = otherColor.getSource(), i;
          for (i = 0; i < 3; i++) {
            result.push(Math.round(source[i] * (1 - otherAlpha) + otherSource[i] * otherAlpha));
          }
          result[3] = alpha;
          this.setSource(result);
          return this;
        }
      };
      fabric4.Color.reRGBa = /^rgba?\(\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*(?:\s*,\s*((?:\d*\.?\d+)?)\s*)?\)$/i;
      fabric4.Color.reHSLa = /^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3}\%)\s*,\s*(\d{1,3}\%)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)$/i;
      fabric4.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;
      fabric4.Color.colorNameMap = {
        aliceblue: "#F0F8FF",
        antiquewhite: "#FAEBD7",
        aqua: "#00FFFF",
        aquamarine: "#7FFFD4",
        azure: "#F0FFFF",
        beige: "#F5F5DC",
        bisque: "#FFE4C4",
        black: "#000000",
        blanchedalmond: "#FFEBCD",
        blue: "#0000FF",
        blueviolet: "#8A2BE2",
        brown: "#A52A2A",
        burlywood: "#DEB887",
        cadetblue: "#5F9EA0",
        chartreuse: "#7FFF00",
        chocolate: "#D2691E",
        coral: "#FF7F50",
        cornflowerblue: "#6495ED",
        cornsilk: "#FFF8DC",
        crimson: "#DC143C",
        cyan: "#00FFFF",
        darkblue: "#00008B",
        darkcyan: "#008B8B",
        darkgoldenrod: "#B8860B",
        darkgray: "#A9A9A9",
        darkgrey: "#A9A9A9",
        darkgreen: "#006400",
        darkkhaki: "#BDB76B",
        darkmagenta: "#8B008B",
        darkolivegreen: "#556B2F",
        darkorange: "#FF8C00",
        darkorchid: "#9932CC",
        darkred: "#8B0000",
        darksalmon: "#E9967A",
        darkseagreen: "#8FBC8F",
        darkslateblue: "#483D8B",
        darkslategray: "#2F4F4F",
        darkslategrey: "#2F4F4F",
        darkturquoise: "#00CED1",
        darkviolet: "#9400D3",
        deeppink: "#FF1493",
        deepskyblue: "#00BFFF",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1E90FF",
        firebrick: "#B22222",
        floralwhite: "#FFFAF0",
        forestgreen: "#228B22",
        fuchsia: "#FF00FF",
        gainsboro: "#DCDCDC",
        ghostwhite: "#F8F8FF",
        gold: "#FFD700",
        goldenrod: "#DAA520",
        gray: "#808080",
        grey: "#808080",
        green: "#008000",
        greenyellow: "#ADFF2F",
        honeydew: "#F0FFF0",
        hotpink: "#FF69B4",
        indianred: "#CD5C5C",
        indigo: "#4B0082",
        ivory: "#FFFFF0",
        khaki: "#F0E68C",
        lavender: "#E6E6FA",
        lavenderblush: "#FFF0F5",
        lawngreen: "#7CFC00",
        lemonchiffon: "#FFFACD",
        lightblue: "#ADD8E6",
        lightcoral: "#F08080",
        lightcyan: "#E0FFFF",
        lightgoldenrodyellow: "#FAFAD2",
        lightgray: "#D3D3D3",
        lightgrey: "#D3D3D3",
        lightgreen: "#90EE90",
        lightpink: "#FFB6C1",
        lightsalmon: "#FFA07A",
        lightseagreen: "#20B2AA",
        lightskyblue: "#87CEFA",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#B0C4DE",
        lightyellow: "#FFFFE0",
        lime: "#00FF00",
        limegreen: "#32CD32",
        linen: "#FAF0E6",
        magenta: "#FF00FF",
        maroon: "#800000",
        mediumaquamarine: "#66CDAA",
        mediumblue: "#0000CD",
        mediumorchid: "#BA55D3",
        mediumpurple: "#9370DB",
        mediumseagreen: "#3CB371",
        mediumslateblue: "#7B68EE",
        mediumspringgreen: "#00FA9A",
        mediumturquoise: "#48D1CC",
        mediumvioletred: "#C71585",
        midnightblue: "#191970",
        mintcream: "#F5FFFA",
        mistyrose: "#FFE4E1",
        moccasin: "#FFE4B5",
        navajowhite: "#FFDEAD",
        navy: "#000080",
        oldlace: "#FDF5E6",
        olive: "#808000",
        olivedrab: "#6B8E23",
        orange: "#FFA500",
        orangered: "#FF4500",
        orchid: "#DA70D6",
        palegoldenrod: "#EEE8AA",
        palegreen: "#98FB98",
        paleturquoise: "#AFEEEE",
        palevioletred: "#DB7093",
        papayawhip: "#FFEFD5",
        peachpuff: "#FFDAB9",
        peru: "#CD853F",
        pink: "#FFC0CB",
        plum: "#DDA0DD",
        powderblue: "#B0E0E6",
        purple: "#800080",
        rebeccapurple: "#663399",
        red: "#FF0000",
        rosybrown: "#BC8F8F",
        royalblue: "#4169E1",
        saddlebrown: "#8B4513",
        salmon: "#FA8072",
        sandybrown: "#F4A460",
        seagreen: "#2E8B57",
        seashell: "#FFF5EE",
        sienna: "#A0522D",
        silver: "#C0C0C0",
        skyblue: "#87CEEB",
        slateblue: "#6A5ACD",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#FFFAFA",
        springgreen: "#00FF7F",
        steelblue: "#4682B4",
        tan: "#D2B48C",
        teal: "#008080",
        thistle: "#D8BFD8",
        tomato: "#FF6347",
        turquoise: "#40E0D0",
        violet: "#EE82EE",
        wheat: "#F5DEB3",
        white: "#FFFFFF",
        whitesmoke: "#F5F5F5",
        yellow: "#FFFF00",
        yellowgreen: "#9ACD32"
      };
      function hue2rgb2(p, q, t) {
        if (t < 0) {
          t += 1;
        }
        if (t > 1) {
          t -= 1;
        }
        if (t < 1 / 6) {
          return p + (q - p) * 6 * t;
        }
        if (t < 1 / 2) {
          return q;
        }
        if (t < 2 / 3) {
          return p + (q - p) * (2 / 3 - t) * 6;
        }
        return p;
      }
      fabric4.Color.fromRgb = function(color) {
        return Color2.fromSource(Color2.sourceFromRgb(color));
      };
      fabric4.Color.sourceFromRgb = function(color) {
        var match = color.match(Color2.reRGBa);
        if (match) {
          var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1), g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1), b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);
          return [
            parseInt(r, 10),
            parseInt(g, 10),
            parseInt(b, 10),
            match[4] ? parseFloat(match[4]) : 1
          ];
        }
      };
      fabric4.Color.fromRgba = Color2.fromRgb;
      fabric4.Color.fromHsl = function(color) {
        return Color2.fromSource(Color2.sourceFromHsl(color));
      };
      fabric4.Color.sourceFromHsl = function(color) {
        var match = color.match(Color2.reHSLa);
        if (!match) {
          return;
        }
        var h = (parseFloat(match[1]) % 360 + 360) % 360 / 360, s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1), l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1), r, g, b;
        if (s === 0) {
          r = g = b = l;
        } else {
          var q = l <= 0.5 ? l * (s + 1) : l + s - l * s, p = l * 2 - q;
          r = hue2rgb2(p, q, h + 1 / 3);
          g = hue2rgb2(p, q, h);
          b = hue2rgb2(p, q, h - 1 / 3);
        }
        return [
          Math.round(r * 255),
          Math.round(g * 255),
          Math.round(b * 255),
          match[4] ? parseFloat(match[4]) : 1
        ];
      };
      fabric4.Color.fromHsla = Color2.fromHsl;
      fabric4.Color.fromHex = function(color) {
        return Color2.fromSource(Color2.sourceFromHex(color));
      };
      fabric4.Color.sourceFromHex = function(color) {
        if (color.match(Color2.reHex)) {
          var value = color.slice(color.indexOf("#") + 1), isShortNotation = value.length === 3 || value.length === 4, isRGBa = value.length === 8 || value.length === 4, r = isShortNotation ? value.charAt(0) + value.charAt(0) : value.substring(0, 2), g = isShortNotation ? value.charAt(1) + value.charAt(1) : value.substring(2, 4), b = isShortNotation ? value.charAt(2) + value.charAt(2) : value.substring(4, 6), a = isRGBa ? isShortNotation ? value.charAt(3) + value.charAt(3) : value.substring(6, 8) : "FF";
          return [
            parseInt(r, 16),
            parseInt(g, 16),
            parseInt(b, 16),
            parseFloat((parseInt(a, 16) / 255).toFixed(2))
          ];
        }
      };
      fabric4.Color.fromSource = function(source) {
        var oColor = new Color2();
        oColor.setSource(source);
        return oColor;
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), scaleMap = ["e", "se", "s", "sw", "w", "nw", "n", "ne", "e"], skewMap = ["ns", "nesw", "ew", "nwse"], controls2 = {}, LEFT = "left", TOP = "top", RIGHT = "right", BOTTOM = "bottom", CENTER = "center", opposite = {
        top: BOTTOM,
        bottom: TOP,
        left: RIGHT,
        right: LEFT,
        center: CENTER
      }, radiansToDegrees = fabric4.util.radiansToDegrees, sign2 = Math.sign || function(x) {
        return (x > 0) - (x < 0) || +x;
      };
      function findCornerQuadrant(fabricObject, control) {
        var cornerAngle = fabricObject.angle + radiansToDegrees(Math.atan2(control.y, control.x)) + 360;
        return Math.round(cornerAngle % 360 / 45);
      }
      function fireEvent(eventName, options) {
        var target = options.transform.target, canvas = target.canvas, canvasOptions = fabric4.util.object.clone(options);
        canvasOptions.target = target;
        canvas && canvas.fire("object:" + eventName, canvasOptions);
        target.fire(eventName, options);
      }
      function scaleIsProportional(eventData, fabricObject) {
        var canvas = fabricObject.canvas, uniScaleKey = canvas.uniScaleKey, uniformIsToggled = eventData[uniScaleKey];
        return canvas.uniformScaling && !uniformIsToggled || !canvas.uniformScaling && uniformIsToggled;
      }
      function isTransformCentered(transform) {
        return transform.originX === CENTER && transform.originY === CENTER;
      }
      function scalingIsForbidden(fabricObject, by, scaleProportionally) {
        var lockX = fabricObject.lockScalingX, lockY = fabricObject.lockScalingY;
        if (lockX && lockY) {
          return true;
        }
        if (!by && (lockX || lockY) && scaleProportionally) {
          return true;
        }
        if (lockX && by === "x") {
          return true;
        }
        if (lockY && by === "y") {
          return true;
        }
        return false;
      }
      function scaleCursorStyleHandler(eventData, control, fabricObject) {
        var notAllowed = "not-allowed", scaleProportionally = scaleIsProportional(eventData, fabricObject), by = "";
        if (control.x !== 0 && control.y === 0) {
          by = "x";
        } else if (control.x === 0 && control.y !== 0) {
          by = "y";
        }
        if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {
          return notAllowed;
        }
        var n = findCornerQuadrant(fabricObject, control);
        return scaleMap[n] + "-resize";
      }
      function skewCursorStyleHandler(eventData, control, fabricObject) {
        var notAllowed = "not-allowed";
        if (control.x !== 0 && fabricObject.lockSkewingY) {
          return notAllowed;
        }
        if (control.y !== 0 && fabricObject.lockSkewingX) {
          return notAllowed;
        }
        var n = findCornerQuadrant(fabricObject, control) % 4;
        return skewMap[n] + "-resize";
      }
      function scaleSkewCursorStyleHandler(eventData, control, fabricObject) {
        if (eventData[fabricObject.canvas.altActionKey]) {
          return controls2.skewCursorStyleHandler(eventData, control, fabricObject);
        }
        return controls2.scaleCursorStyleHandler(eventData, control, fabricObject);
      }
      function scaleOrSkewActionName(eventData, control, fabricObject) {
        var isAlternative = eventData[fabricObject.canvas.altActionKey];
        if (control.x === 0) {
          return isAlternative ? "skewX" : "scaleY";
        }
        if (control.y === 0) {
          return isAlternative ? "skewY" : "scaleX";
        }
      }
      function rotationStyleHandler(eventData, control, fabricObject) {
        if (fabricObject.lockRotation) {
          return "not-allowed";
        }
        return control.cursorStyle;
      }
      function commonEventInfo(eventData, transform, x, y) {
        return {
          e: eventData,
          transform,
          pointer: {
            x,
            y
          }
        };
      }
      function wrapWithFixedAnchor(actionHandler) {
        return function(eventData, transform, x, y) {
          var target = transform.target, centerPoint = target.getCenterPoint(), constraint = target.translateToOriginPoint(centerPoint, transform.originX, transform.originY), actionPerformed = actionHandler(eventData, transform, x, y);
          target.setPositionByOrigin(constraint, transform.originX, transform.originY);
          return actionPerformed;
        };
      }
      function getLocalPoint(transform, originX, originY, x, y) {
        var target = transform.target, control = target.controls[transform.corner], zoom = target.canvas.getZoom(), padding = target.padding / zoom, localPoint = target.toLocalPoint(new fabric4.Point(x, y), originX, originY);
        if (localPoint.x >= padding) {
          localPoint.x -= padding;
        }
        if (localPoint.x <= -padding) {
          localPoint.x += padding;
        }
        if (localPoint.y >= padding) {
          localPoint.y -= padding;
        }
        if (localPoint.y <= padding) {
          localPoint.y += padding;
        }
        localPoint.x -= control.offsetX;
        localPoint.y -= control.offsetY;
        return localPoint;
      }
      function targetHasOneFlip(target) {
        return target.flipX && !target.flipY || !target.flipX && target.flipY;
      }
      function compensateScaleForSkew(target, oppositeSkew, scaleToCompensate, axis, reference) {
        if (target[oppositeSkew] !== 0) {
          var newDim = target._getTransformedDimensions()[axis];
          var newValue = reference / newDim * target[scaleToCompensate];
          target.set(scaleToCompensate, newValue);
        }
      }
      function skewObjectX(eventData, transform, x, y) {
        var target = transform.target, dimNoSkew = target._getTransformedDimensions(0, target.skewY), localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y), totalSkewSize = Math.abs(localPoint.x * 2) - dimNoSkew.x, currentSkew = target.skewX, newSkew;
        if (totalSkewSize < 2) {
          newSkew = 0;
        } else {
          newSkew = radiansToDegrees(Math.atan2(totalSkewSize / target.scaleX, dimNoSkew.y / target.scaleY));
          if (transform.originX === LEFT && transform.originY === BOTTOM) {
            newSkew = -newSkew;
          }
          if (transform.originX === RIGHT && transform.originY === TOP) {
            newSkew = -newSkew;
          }
          if (targetHasOneFlip(target)) {
            newSkew = -newSkew;
          }
        }
        var hasSkewed = currentSkew !== newSkew;
        if (hasSkewed) {
          var dimBeforeSkewing = target._getTransformedDimensions().y;
          target.set("skewX", newSkew);
          compensateScaleForSkew(target, "skewY", "scaleY", "y", dimBeforeSkewing);
          fireEvent("skewing", commonEventInfo(eventData, transform, x, y));
        }
        return hasSkewed;
      }
      function skewObjectY(eventData, transform, x, y) {
        var target = transform.target, dimNoSkew = target._getTransformedDimensions(target.skewX, 0), localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y), totalSkewSize = Math.abs(localPoint.y * 2) - dimNoSkew.y, currentSkew = target.skewY, newSkew;
        if (totalSkewSize < 2) {
          newSkew = 0;
        } else {
          newSkew = radiansToDegrees(Math.atan2(totalSkewSize / target.scaleY, dimNoSkew.x / target.scaleX));
          if (transform.originX === LEFT && transform.originY === BOTTOM) {
            newSkew = -newSkew;
          }
          if (transform.originX === RIGHT && transform.originY === TOP) {
            newSkew = -newSkew;
          }
          if (targetHasOneFlip(target)) {
            newSkew = -newSkew;
          }
        }
        var hasSkewed = currentSkew !== newSkew;
        if (hasSkewed) {
          var dimBeforeSkewing = target._getTransformedDimensions().x;
          target.set("skewY", newSkew);
          compensateScaleForSkew(target, "skewX", "scaleX", "x", dimBeforeSkewing);
          fireEvent("skewing", commonEventInfo(eventData, transform, x, y));
        }
        return hasSkewed;
      }
      function skewHandlerX(eventData, transform, x, y) {
        var target = transform.target, currentSkew = target.skewX, originX, originY = transform.originY;
        if (target.lockSkewingX) {
          return false;
        }
        if (currentSkew === 0) {
          var localPointFromCenter = getLocalPoint(transform, CENTER, CENTER, x, y);
          if (localPointFromCenter.x > 0) {
            originX = LEFT;
          } else {
            originX = RIGHT;
          }
        } else {
          if (currentSkew > 0) {
            originX = originY === TOP ? LEFT : RIGHT;
          }
          if (currentSkew < 0) {
            originX = originY === TOP ? RIGHT : LEFT;
          }
          if (targetHasOneFlip(target)) {
            originX = originX === LEFT ? RIGHT : LEFT;
          }
        }
        transform.originX = originX;
        var finalHandler = wrapWithFixedAnchor(skewObjectX);
        return finalHandler(eventData, transform, x, y);
      }
      function skewHandlerY(eventData, transform, x, y) {
        var target = transform.target, currentSkew = target.skewY, originY, originX = transform.originX;
        if (target.lockSkewingY) {
          return false;
        }
        if (currentSkew === 0) {
          var localPointFromCenter = getLocalPoint(transform, CENTER, CENTER, x, y);
          if (localPointFromCenter.y > 0) {
            originY = TOP;
          } else {
            originY = BOTTOM;
          }
        } else {
          if (currentSkew > 0) {
            originY = originX === LEFT ? TOP : BOTTOM;
          }
          if (currentSkew < 0) {
            originY = originX === LEFT ? BOTTOM : TOP;
          }
          if (targetHasOneFlip(target)) {
            originY = originY === TOP ? BOTTOM : TOP;
          }
        }
        transform.originY = originY;
        var finalHandler = wrapWithFixedAnchor(skewObjectY);
        return finalHandler(eventData, transform, x, y);
      }
      function rotationWithSnapping(eventData, transform, x, y) {
        var t = transform, target = t.target, pivotPoint = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY);
        if (target.lockRotation) {
          return false;
        }
        var lastAngle = Math.atan2(t.ey - pivotPoint.y, t.ex - pivotPoint.x), curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x), angle = radiansToDegrees(curAngle - lastAngle + t.theta), hasRotated = true;
        if (target.snapAngle > 0) {
          var snapAngle = target.snapAngle, snapThreshold = target.snapThreshold || snapAngle, rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle, leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;
          if (Math.abs(angle - leftAngleLocked) < snapThreshold) {
            angle = leftAngleLocked;
          } else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {
            angle = rightAngleLocked;
          }
        }
        if (angle < 0) {
          angle = 360 + angle;
        }
        angle %= 360;
        hasRotated = target.angle !== angle;
        target.angle = angle;
        if (hasRotated) {
          fireEvent("rotating", commonEventInfo(eventData, transform, x, y));
        }
        return hasRotated;
      }
      function scaleObject(eventData, transform, x, y, options) {
        options = options || {};
        var target = transform.target, lockScalingX = target.lockScalingX, lockScalingY = target.lockScalingY, by = options.by, newPoint, scaleX, scaleY, dim, scaleProportionally = scaleIsProportional(eventData, target), forbidScaling = scalingIsForbidden(target, by, scaleProportionally), signX, signY, gestureScale = transform.gestureScale;
        if (forbidScaling) {
          return false;
        }
        if (gestureScale) {
          scaleX = transform.scaleX * gestureScale;
          scaleY = transform.scaleY * gestureScale;
        } else {
          newPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y);
          signX = by !== "y" ? sign2(newPoint.x) : 1;
          signY = by !== "x" ? sign2(newPoint.y) : 1;
          if (!transform.signX) {
            transform.signX = signX;
          }
          if (!transform.signY) {
            transform.signY = signY;
          }
          if (target.lockScalingFlip && (transform.signX !== signX || transform.signY !== signY)) {
            return false;
          }
          dim = target._getTransformedDimensions();
          if (scaleProportionally && !by) {
            var distance = Math.abs(newPoint.x) + Math.abs(newPoint.y), original = transform.original, originalDistance = Math.abs(dim.x * original.scaleX / target.scaleX) + Math.abs(dim.y * original.scaleY / target.scaleY), scale = distance / originalDistance, hasScaled;
            scaleX = original.scaleX * scale;
            scaleY = original.scaleY * scale;
          } else {
            scaleX = Math.abs(newPoint.x * target.scaleX / dim.x);
            scaleY = Math.abs(newPoint.y * target.scaleY / dim.y);
          }
          if (isTransformCentered(transform)) {
            scaleX *= 2;
            scaleY *= 2;
          }
          if (transform.signX !== signX && by !== "y") {
            transform.originX = opposite[transform.originX];
            scaleX *= -1;
            transform.signX = signX;
          }
          if (transform.signY !== signY && by !== "x") {
            transform.originY = opposite[transform.originY];
            scaleY *= -1;
            transform.signY = signY;
          }
        }
        var oldScaleX = target.scaleX, oldScaleY = target.scaleY;
        if (!by) {
          !lockScalingX && target.set("scaleX", scaleX);
          !lockScalingY && target.set("scaleY", scaleY);
        } else {
          by === "x" && target.set("scaleX", scaleX);
          by === "y" && target.set("scaleY", scaleY);
        }
        hasScaled = oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;
        if (hasScaled) {
          fireEvent("scaling", commonEventInfo(eventData, transform, x, y));
        }
        return hasScaled;
      }
      function scaleObjectFromCorner(eventData, transform, x, y) {
        return scaleObject(eventData, transform, x, y);
      }
      function scaleObjectX(eventData, transform, x, y) {
        return scaleObject(eventData, transform, x, y, {by: "x"});
      }
      function scaleObjectY(eventData, transform, x, y) {
        return scaleObject(eventData, transform, x, y, {by: "y"});
      }
      function scalingYOrSkewingX(eventData, transform, x, y) {
        if (eventData[transform.target.canvas.altActionKey]) {
          return controls2.skewHandlerX(eventData, transform, x, y);
        }
        return controls2.scalingY(eventData, transform, x, y);
      }
      function scalingXOrSkewingY(eventData, transform, x, y) {
        if (eventData[transform.target.canvas.altActionKey]) {
          return controls2.skewHandlerY(eventData, transform, x, y);
        }
        return controls2.scalingX(eventData, transform, x, y);
      }
      function changeWidth(eventData, transform, x, y) {
        var target = transform.target, localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y), strokePadding = target.strokeWidth / (target.strokeUniform ? target.scaleX : 1), multiplier = isTransformCentered(transform) ? 2 : 1, oldWidth = target.width, hasResized, newWidth = Math.abs(localPoint.x * multiplier / target.scaleX) - strokePadding;
        target.set("width", Math.max(newWidth, 0));
        hasResized = oldWidth !== newWidth;
        if (hasResized) {
          fireEvent("resizing", commonEventInfo(eventData, transform, x, y));
        }
        return hasResized;
      }
      function dragHandler(eventData, transform, x, y) {
        var target = transform.target, newLeft = x - transform.offsetX, newTop = y - transform.offsetY, moveX = !target.get("lockMovementX") && target.left !== newLeft, moveY = !target.get("lockMovementY") && target.top !== newTop;
        moveX && target.set("left", newLeft);
        moveY && target.set("top", newTop);
        if (moveX || moveY) {
          fireEvent("moving", commonEventInfo(eventData, transform, x, y));
        }
        return moveX || moveY;
      }
      controls2.scaleCursorStyleHandler = scaleCursorStyleHandler;
      controls2.skewCursorStyleHandler = skewCursorStyleHandler;
      controls2.scaleSkewCursorStyleHandler = scaleSkewCursorStyleHandler;
      controls2.rotationWithSnapping = wrapWithFixedAnchor(rotationWithSnapping);
      controls2.scalingEqually = wrapWithFixedAnchor(scaleObjectFromCorner);
      controls2.scalingX = wrapWithFixedAnchor(scaleObjectX);
      controls2.scalingY = wrapWithFixedAnchor(scaleObjectY);
      controls2.scalingYOrSkewingX = scalingYOrSkewingX;
      controls2.scalingXOrSkewingY = scalingXOrSkewingY;
      controls2.changeWidth = wrapWithFixedAnchor(changeWidth);
      controls2.skewHandlerX = skewHandlerX;
      controls2.skewHandlerY = skewHandlerY;
      controls2.dragHandler = dragHandler;
      controls2.scaleOrSkewActionName = scaleOrSkewActionName;
      controls2.rotationStyleHandler = rotationStyleHandler;
      controls2.fireEvent = fireEvent;
      controls2.wrapWithFixedAnchor = wrapWithFixedAnchor;
      controls2.getLocalPoint = getLocalPoint;
      fabric4.controlsUtils = controls2;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), degreesToRadians = fabric4.util.degreesToRadians, controls2 = fabric4.controlsUtils;
      function renderCircleControl(ctx, left, top, styleOverride, fabricObject) {
        styleOverride = styleOverride || {};
        var size = styleOverride.cornerSize || fabricObject.cornerSize, transparentCorners = typeof styleOverride.transparentCorners !== "undefined" ? styleOverride.transparentCorners : this.transparentCorners, methodName = transparentCorners ? "stroke" : "fill", stroke = !transparentCorners && (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor);
        ctx.save();
        ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;
        ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.arc(left, top, size / 2, 0, 2 * Math.PI, false);
        ctx[methodName]();
        if (stroke) {
          ctx.stroke();
        }
        ctx.restore();
      }
      function renderSquareControl(ctx, left, top, styleOverride, fabricObject) {
        styleOverride = styleOverride || {};
        var size = styleOverride.cornerSize || fabricObject.cornerSize, transparentCorners = typeof styleOverride.transparentCorners !== "undefined" ? styleOverride.transparentCorners : fabricObject.transparentCorners, methodName = transparentCorners ? "stroke" : "fill", stroke = !transparentCorners && (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor), sizeBy2 = size / 2;
        ctx.save();
        ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;
        ctx.strokeStyle = styleOverride.strokeCornerColor || fabricObject.strokeCornerColor;
        ctx.lineWidth = 1;
        ctx.translate(left, top);
        ctx.rotate(degreesToRadians(fabricObject.angle));
        ctx[methodName + "Rect"](-sizeBy2, -sizeBy2, size, size);
        if (stroke) {
          ctx.strokeRect(-sizeBy2, -sizeBy2, size, size);
        }
        ctx.restore();
      }
      controls2.renderCircleControl = renderCircleControl;
      controls2.renderSquareControl = renderSquareControl;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {});
      function Control(options) {
        for (var i in options) {
          this[i] = options[i];
        }
      }
      fabric4.Control = Control;
      fabric4.Control.prototype = {
        visible: true,
        actionName: "scale",
        angle: 0,
        x: 0,
        y: 0,
        offsetX: 0,
        offsetY: 0,
        cursorStyle: "crosshair",
        withConnection: false,
        actionHandler: function() {
        },
        mouseDownHandler: function() {
        },
        mouseUpHandler: function() {
        },
        getActionHandler: function() {
          return this.actionHandler;
        },
        getMouseDownHandler: function() {
          return this.mouseDownHandler;
        },
        getMouseUpHandler: function() {
          return this.mouseUpHandler;
        },
        cursorStyleHandler: function(eventData, control) {
          return control.cursorStyle;
        },
        getActionName: function(eventData, control) {
          return control.actionName;
        },
        getVisibility: function(fabricObject, controlKey) {
          var objectVisibility = fabricObject._controlsVisibility;
          if (objectVisibility && typeof objectVisibility[controlKey] !== "undefined") {
            return objectVisibility[controlKey];
          }
          return this.visible;
        },
        setVisibility: function(visibility) {
          this.visible = visibility;
        },
        positionHandler: function(dim, finalMatrix) {
          var point = fabric4.util.transformPoint({
            x: this.x * dim.x + this.offsetX,
            y: this.y * dim.y + this.offsetY
          }, finalMatrix);
          return point;
        },
        render: function(ctx, left, top, styleOverride, fabricObject) {
          styleOverride = styleOverride || {};
          switch (styleOverride.cornerStyle || fabricObject.cornerStyle) {
            case "circle":
              fabric4.controlsUtils.renderCircleControl.call(this, ctx, left, top, styleOverride, fabricObject);
              break;
            default:
              fabric4.controlsUtils.renderSquareControl.call(this, ctx, left, top, styleOverride, fabricObject);
          }
        }
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function() {
      function getColorStop(el2, multiplier) {
        var style = el2.getAttribute("style"), offset = el2.getAttribute("offset") || 0, color, colorAlpha, opacity, i;
        offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);
        offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;
        if (style) {
          var keyValuePairs = style.split(/\s*;\s*/);
          if (keyValuePairs[keyValuePairs.length - 1] === "") {
            keyValuePairs.pop();
          }
          for (i = keyValuePairs.length; i--; ) {
            var split = keyValuePairs[i].split(/\s*:\s*/), key = split[0].trim(), value = split[1].trim();
            if (key === "stop-color") {
              color = value;
            } else if (key === "stop-opacity") {
              opacity = value;
            }
          }
        }
        if (!color) {
          color = el2.getAttribute("stop-color") || "rgb(0,0,0)";
        }
        if (!opacity) {
          opacity = el2.getAttribute("stop-opacity");
        }
        color = new fabric3.Color(color);
        colorAlpha = color.getAlpha();
        opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);
        opacity *= colorAlpha * multiplier;
        return {
          offset,
          color: color.toRgb(),
          opacity
        };
      }
      function getLinearCoords(el2) {
        return {
          x1: el2.getAttribute("x1") || 0,
          y1: el2.getAttribute("y1") || 0,
          x2: el2.getAttribute("x2") || "100%",
          y2: el2.getAttribute("y2") || 0
        };
      }
      function getRadialCoords(el2) {
        return {
          x1: el2.getAttribute("fx") || el2.getAttribute("cx") || "50%",
          y1: el2.getAttribute("fy") || el2.getAttribute("cy") || "50%",
          r1: 0,
          x2: el2.getAttribute("cx") || "50%",
          y2: el2.getAttribute("cy") || "50%",
          r2: el2.getAttribute("r") || "50%"
        };
      }
      var clone = fabric3.util.object.clone;
      fabric3.Gradient = fabric3.util.createClass({
        offsetX: 0,
        offsetY: 0,
        gradientTransform: null,
        gradientUnits: "pixels",
        type: "linear",
        initialize: function(options) {
          options || (options = {});
          options.coords || (options.coords = {});
          var coords, _this = this;
          Object.keys(options).forEach(function(option) {
            _this[option] = options[option];
          });
          if (this.id) {
            this.id += "_" + fabric3.Object.__uid++;
          } else {
            this.id = fabric3.Object.__uid++;
          }
          coords = {
            x1: options.coords.x1 || 0,
            y1: options.coords.y1 || 0,
            x2: options.coords.x2 || 0,
            y2: options.coords.y2 || 0
          };
          if (this.type === "radial") {
            coords.r1 = options.coords.r1 || 0;
            coords.r2 = options.coords.r2 || 0;
          }
          this.coords = coords;
          this.colorStops = options.colorStops.slice();
        },
        addColorStop: function(colorStops) {
          for (var position in colorStops) {
            var color = new fabric3.Color(colorStops[position]);
            this.colorStops.push({
              offset: parseFloat(position),
              color: color.toRgb(),
              opacity: color.getAlpha()
            });
          }
          return this;
        },
        toObject: function(propertiesToInclude) {
          var object = {
            type: this.type,
            coords: this.coords,
            colorStops: this.colorStops,
            offsetX: this.offsetX,
            offsetY: this.offsetY,
            gradientUnits: this.gradientUnits,
            gradientTransform: this.gradientTransform ? this.gradientTransform.concat() : this.gradientTransform
          };
          fabric3.util.populateWithProperties(this, object, propertiesToInclude);
          return object;
        },
        toSVG: function(object, options) {
          var coords = clone(this.coords, true), i, len, options = options || {}, markup, commonAttributes, colorStops = clone(this.colorStops, true), needsSwap = coords.r1 > coords.r2, transform = this.gradientTransform ? this.gradientTransform.concat() : fabric3.iMatrix.concat(), offsetX = -this.offsetX, offsetY = -this.offsetY, withViewport = !!options.additionalTransform, gradientUnits = this.gradientUnits === "pixels" ? "userSpaceOnUse" : "objectBoundingBox";
          colorStops.sort(function(a, b) {
            return a.offset - b.offset;
          });
          if (gradientUnits === "objectBoundingBox") {
            offsetX /= object.width;
            offsetY /= object.height;
          } else {
            offsetX += object.width / 2;
            offsetY += object.height / 2;
          }
          if (object.type === "path") {
            offsetX -= object.pathOffset.x;
            offsetY -= object.pathOffset.y;
          }
          transform[4] -= offsetX;
          transform[5] -= offsetY;
          commonAttributes = 'id="SVGID_' + this.id + '" gradientUnits="' + gradientUnits + '"';
          commonAttributes += ' gradientTransform="' + (withViewport ? options.additionalTransform + " " : "") + fabric3.util.matrixToSVG(transform) + '" ';
          if (this.type === "linear") {
            markup = [
              "<linearGradient ",
              commonAttributes,
              ' x1="',
              coords.x1,
              '" y1="',
              coords.y1,
              '" x2="',
              coords.x2,
              '" y2="',
              coords.y2,
              '">\n'
            ];
          } else if (this.type === "radial") {
            markup = [
              "<radialGradient ",
              commonAttributes,
              ' cx="',
              needsSwap ? coords.x1 : coords.x2,
              '" cy="',
              needsSwap ? coords.y1 : coords.y2,
              '" r="',
              needsSwap ? coords.r1 : coords.r2,
              '" fx="',
              needsSwap ? coords.x2 : coords.x1,
              '" fy="',
              needsSwap ? coords.y2 : coords.y1,
              '">\n'
            ];
          }
          if (this.type === "radial") {
            if (needsSwap) {
              colorStops = colorStops.concat();
              colorStops.reverse();
              for (i = 0, len = colorStops.length; i < len; i++) {
                colorStops[i].offset = 1 - colorStops[i].offset;
              }
            }
            var minRadius = Math.min(coords.r1, coords.r2);
            if (minRadius > 0) {
              var maxRadius = Math.max(coords.r1, coords.r2), percentageShift = minRadius / maxRadius;
              for (i = 0, len = colorStops.length; i < len; i++) {
                colorStops[i].offset += percentageShift * (1 - colorStops[i].offset);
              }
            }
          }
          for (i = 0, len = colorStops.length; i < len; i++) {
            var colorStop = colorStops[i];
            markup.push("<stop ", 'offset="', colorStop.offset * 100 + "%", '" style="stop-color:', colorStop.color, typeof colorStop.opacity !== "undefined" ? ";stop-opacity: " + colorStop.opacity : ";", '"/>\n');
          }
          markup.push(this.type === "linear" ? "</linearGradient>\n" : "</radialGradient>\n");
          return markup.join("");
        },
        toLive: function(ctx) {
          var gradient, coords = fabric3.util.object.clone(this.coords), i, len;
          if (!this.type) {
            return;
          }
          if (this.type === "linear") {
            gradient = ctx.createLinearGradient(coords.x1, coords.y1, coords.x2, coords.y2);
          } else if (this.type === "radial") {
            gradient = ctx.createRadialGradient(coords.x1, coords.y1, coords.r1, coords.x2, coords.y2, coords.r2);
          }
          for (i = 0, len = this.colorStops.length; i < len; i++) {
            var color = this.colorStops[i].color, opacity = this.colorStops[i].opacity, offset = this.colorStops[i].offset;
            if (typeof opacity !== "undefined") {
              color = new fabric3.Color(color).setAlpha(opacity).toRgba();
            }
            gradient.addColorStop(offset, color);
          }
          return gradient;
        }
      });
      fabric3.util.object.extend(fabric3.Gradient, {
        fromElement: function(el2, instance, opacityAttr, svgOptions) {
          var multiplier = parseFloat(opacityAttr) / (/%$/.test(opacityAttr) ? 100 : 1);
          multiplier = multiplier < 0 ? 0 : multiplier > 1 ? 1 : multiplier;
          if (isNaN(multiplier)) {
            multiplier = 1;
          }
          var colorStopEls = el2.getElementsByTagName("stop"), type, gradientUnits = el2.getAttribute("gradientUnits") === "userSpaceOnUse" ? "pixels" : "percentage", gradientTransform = el2.getAttribute("gradientTransform") || "", colorStops = [], coords, i, offsetX = 0, offsetY = 0, transformMatrix;
          if (el2.nodeName === "linearGradient" || el2.nodeName === "LINEARGRADIENT") {
            type = "linear";
            coords = getLinearCoords(el2);
          } else {
            type = "radial";
            coords = getRadialCoords(el2);
          }
          for (i = colorStopEls.length; i--; ) {
            colorStops.push(getColorStop(colorStopEls[i], multiplier));
          }
          transformMatrix = fabric3.parseTransformAttribute(gradientTransform);
          __convertPercentUnitsToValues(instance, coords, svgOptions, gradientUnits);
          if (gradientUnits === "pixels") {
            offsetX = -instance.left;
            offsetY = -instance.top;
          }
          var gradient = new fabric3.Gradient({
            id: el2.getAttribute("id"),
            type,
            coords,
            colorStops,
            gradientUnits,
            gradientTransform: transformMatrix,
            offsetX,
            offsetY
          });
          return gradient;
        }
      });
      function __convertPercentUnitsToValues(instance, options, svgOptions, gradientUnits) {
        var propValue, finalValue;
        Object.keys(options).forEach(function(prop) {
          propValue = options[prop];
          if (propValue === "Infinity") {
            finalValue = 1;
          } else if (propValue === "-Infinity") {
            finalValue = 0;
          } else {
            finalValue = parseFloat(options[prop], 10);
            if (typeof propValue === "string" && /^(\d+\.\d+)%|(\d+)%$/.test(propValue)) {
              finalValue *= 0.01;
              if (gradientUnits === "pixels") {
                if (prop === "x1" || prop === "x2" || prop === "r2") {
                  finalValue *= svgOptions.viewBoxWidth || svgOptions.width;
                }
                if (prop === "y1" || prop === "y2") {
                  finalValue *= svgOptions.viewBoxHeight || svgOptions.height;
                }
              }
            }
          }
          options[prop] = finalValue;
        });
      }
    })();
    (function() {
      "use strict";
      var toFixed = fabric3.util.toFixed;
      fabric3.Pattern = fabric3.util.createClass({
        repeat: "repeat",
        offsetX: 0,
        offsetY: 0,
        crossOrigin: "",
        patternTransform: null,
        initialize: function(options, callback) {
          options || (options = {});
          this.id = fabric3.Object.__uid++;
          this.setOptions(options);
          if (!options.source || options.source && typeof options.source !== "string") {
            callback && callback(this);
            return;
          } else {
            var _this = this;
            this.source = fabric3.util.createImage();
            fabric3.util.loadImage(options.source, function(img, isError) {
              _this.source = img;
              callback && callback(_this, isError);
            }, null, this.crossOrigin);
          }
        },
        toObject: function(propertiesToInclude) {
          var NUM_FRACTION_DIGITS = fabric3.Object.NUM_FRACTION_DIGITS, source, object;
          if (typeof this.source.src === "string") {
            source = this.source.src;
          } else if (typeof this.source === "object" && this.source.toDataURL) {
            source = this.source.toDataURL();
          }
          object = {
            type: "pattern",
            source,
            repeat: this.repeat,
            crossOrigin: this.crossOrigin,
            offsetX: toFixed(this.offsetX, NUM_FRACTION_DIGITS),
            offsetY: toFixed(this.offsetY, NUM_FRACTION_DIGITS),
            patternTransform: this.patternTransform ? this.patternTransform.concat() : null
          };
          fabric3.util.populateWithProperties(this, object, propertiesToInclude);
          return object;
        },
        toSVG: function(object) {
          var patternSource = typeof this.source === "function" ? this.source() : this.source, patternWidth = patternSource.width / object.width, patternHeight = patternSource.height / object.height, patternOffsetX = this.offsetX / object.width, patternOffsetY = this.offsetY / object.height, patternImgSrc = "";
          if (this.repeat === "repeat-x" || this.repeat === "no-repeat") {
            patternHeight = 1;
            if (patternOffsetY) {
              patternHeight += Math.abs(patternOffsetY);
            }
          }
          if (this.repeat === "repeat-y" || this.repeat === "no-repeat") {
            patternWidth = 1;
            if (patternOffsetX) {
              patternWidth += Math.abs(patternOffsetX);
            }
          }
          if (patternSource.src) {
            patternImgSrc = patternSource.src;
          } else if (patternSource.toDataURL) {
            patternImgSrc = patternSource.toDataURL();
          }
          return '<pattern id="SVGID_' + this.id + '" x="' + patternOffsetX + '" y="' + patternOffsetY + '" width="' + patternWidth + '" height="' + patternHeight + '">\n<image x="0" y="0" width="' + patternSource.width + '" height="' + patternSource.height + '" xlink:href="' + patternImgSrc + '"></image>\n</pattern>\n';
        },
        setOptions: function(options) {
          for (var prop in options) {
            this[prop] = options[prop];
          }
        },
        toLive: function(ctx) {
          var source = this.source;
          if (!source) {
            return "";
          }
          if (typeof source.src !== "undefined") {
            if (!source.complete) {
              return "";
            }
            if (source.naturalWidth === 0 || source.naturalHeight === 0) {
              return "";
            }
          }
          return ctx.createPattern(source, this.repeat);
        }
      });
    })();
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), toFixed = fabric4.util.toFixed;
      if (fabric4.Shadow) {
        fabric4.warn("fabric.Shadow is already defined.");
        return;
      }
      fabric4.Shadow = fabric4.util.createClass({
        color: "rgb(0,0,0)",
        blur: 0,
        offsetX: 0,
        offsetY: 0,
        affectStroke: false,
        includeDefaultValues: true,
        nonScaling: false,
        initialize: function(options) {
          if (typeof options === "string") {
            options = this._parseShadow(options);
          }
          for (var prop in options) {
            this[prop] = options[prop];
          }
          this.id = fabric4.Object.__uid++;
        },
        _parseShadow: function(shadow) {
          var shadowStr = shadow.trim(), offsetsAndBlur = fabric4.Shadow.reOffsetsAndBlur.exec(shadowStr) || [], color = shadowStr.replace(fabric4.Shadow.reOffsetsAndBlur, "") || "rgb(0,0,0)";
          return {
            color: color.trim(),
            offsetX: parseInt(offsetsAndBlur[1], 10) || 0,
            offsetY: parseInt(offsetsAndBlur[2], 10) || 0,
            blur: parseInt(offsetsAndBlur[3], 10) || 0
          };
        },
        toString: function() {
          return [this.offsetX, this.offsetY, this.blur, this.color].join("px ");
        },
        toSVG: function(object) {
          var fBoxX = 40, fBoxY = 40, NUM_FRACTION_DIGITS = fabric4.Object.NUM_FRACTION_DIGITS, offset = fabric4.util.rotateVector({x: this.offsetX, y: this.offsetY}, fabric4.util.degreesToRadians(-object.angle)), BLUR_BOX = 20, color = new fabric4.Color(this.color);
          if (object.width && object.height) {
            fBoxX = toFixed((Math.abs(offset.x) + this.blur) / object.width, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;
            fBoxY = toFixed((Math.abs(offset.y) + this.blur) / object.height, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;
          }
          if (object.flipX) {
            offset.x *= -1;
          }
          if (object.flipY) {
            offset.y *= -1;
          }
          return '<filter id="SVGID_' + this.id + '" y="-' + fBoxY + '%" height="' + (100 + 2 * fBoxY) + '%" x="-' + fBoxX + '%" width="' + (100 + 2 * fBoxX) + '%" >\n	<feGaussianBlur in="SourceAlpha" stdDeviation="' + toFixed(this.blur ? this.blur / 2 : 0, NUM_FRACTION_DIGITS) + '"></feGaussianBlur>\n	<feOffset dx="' + toFixed(offset.x, NUM_FRACTION_DIGITS) + '" dy="' + toFixed(offset.y, NUM_FRACTION_DIGITS) + '" result="oBlur" ></feOffset>\n	<feFlood flood-color="' + color.toRgb() + '" flood-opacity="' + color.getAlpha() + '"/>\n	<feComposite in2="oBlur" operator="in" />\n	<feMerge>\n		<feMergeNode></feMergeNode>\n		<feMergeNode in="SourceGraphic"></feMergeNode>\n	</feMerge>\n</filter>\n';
        },
        toObject: function() {
          if (this.includeDefaultValues) {
            return {
              color: this.color,
              blur: this.blur,
              offsetX: this.offsetX,
              offsetY: this.offsetY,
              affectStroke: this.affectStroke,
              nonScaling: this.nonScaling
            };
          }
          var obj = {}, proto = fabric4.Shadow.prototype;
          ["color", "blur", "offsetX", "offsetY", "affectStroke", "nonScaling"].forEach(function(prop) {
            if (this[prop] !== proto[prop]) {
              obj[prop] = this[prop];
            }
          }, this);
          return obj;
        }
      });
      fabric4.Shadow.reOffsetsAndBlur = /(?:\s|^)(-?\d+(?:px)?(?:\s?|$))?(-?\d+(?:px)?(?:\s?|$))?(\d+(?:px)?)?(?:\s?|$)(?:$|\s)/;
    })(typeof exports !== "undefined" ? exports : exports);
    (function() {
      "use strict";
      if (fabric3.StaticCanvas) {
        fabric3.warn("fabric.StaticCanvas is already defined.");
        return;
      }
      var extend = fabric3.util.object.extend, getElementOffset = fabric3.util.getElementOffset, removeFromArray = fabric3.util.removeFromArray, toFixed = fabric3.util.toFixed, transformPoint = fabric3.util.transformPoint, invertTransform = fabric3.util.invertTransform, getNodeCanvas = fabric3.util.getNodeCanvas, createCanvasElement2 = fabric3.util.createCanvasElement, CANVAS_INIT_ERROR = new Error("Could not initialize `canvas` element");
      fabric3.StaticCanvas = fabric3.util.createClass(fabric3.CommonMethods, {
        initialize: function(el2, options) {
          options || (options = {});
          this.renderAndResetBound = this.renderAndReset.bind(this);
          this.requestRenderAllBound = this.requestRenderAll.bind(this);
          this._initStatic(el2, options);
        },
        backgroundColor: "",
        backgroundImage: null,
        overlayColor: "",
        overlayImage: null,
        includeDefaultValues: true,
        stateful: false,
        renderOnAddRemove: true,
        controlsAboveOverlay: false,
        allowTouchScrolling: false,
        imageSmoothingEnabled: true,
        viewportTransform: fabric3.iMatrix.concat(),
        backgroundVpt: true,
        overlayVpt: true,
        enableRetinaScaling: true,
        vptCoords: {},
        skipOffscreen: true,
        clipPath: void 0,
        _initStatic: function(el2, options) {
          var cb = this.requestRenderAllBound;
          this._objects = [];
          this._createLowerCanvas(el2);
          this._initOptions(options);
          if (!this.interactive) {
            this._initRetinaScaling();
          }
          if (options.overlayImage) {
            this.setOverlayImage(options.overlayImage, cb);
          }
          if (options.backgroundImage) {
            this.setBackgroundImage(options.backgroundImage, cb);
          }
          if (options.backgroundColor) {
            this.setBackgroundColor(options.backgroundColor, cb);
          }
          if (options.overlayColor) {
            this.setOverlayColor(options.overlayColor, cb);
          }
          this.calcOffset();
        },
        _isRetinaScaling: function() {
          return fabric3.devicePixelRatio !== 1 && this.enableRetinaScaling;
        },
        getRetinaScaling: function() {
          return this._isRetinaScaling() ? fabric3.devicePixelRatio : 1;
        },
        _initRetinaScaling: function() {
          if (!this._isRetinaScaling()) {
            return;
          }
          var scaleRatio = fabric3.devicePixelRatio;
          this.__initRetinaScaling(scaleRatio, this.lowerCanvasEl, this.contextContainer);
          if (this.upperCanvasEl) {
            this.__initRetinaScaling(scaleRatio, this.upperCanvasEl, this.contextTop);
          }
        },
        __initRetinaScaling: function(scaleRatio, canvas, context) {
          canvas.setAttribute("width", this.width * scaleRatio);
          canvas.setAttribute("height", this.height * scaleRatio);
          context.scale(scaleRatio, scaleRatio);
        },
        calcOffset: function() {
          this._offset = getElementOffset(this.lowerCanvasEl);
          return this;
        },
        setOverlayImage: function(image, callback, options) {
          return this.__setBgOverlayImage("overlayImage", image, callback, options);
        },
        setBackgroundImage: function(image, callback, options) {
          return this.__setBgOverlayImage("backgroundImage", image, callback, options);
        },
        setOverlayColor: function(overlayColor, callback) {
          return this.__setBgOverlayColor("overlayColor", overlayColor, callback);
        },
        setBackgroundColor: function(backgroundColor, callback) {
          return this.__setBgOverlayColor("backgroundColor", backgroundColor, callback);
        },
        __setBgOverlayImage: function(property, image, callback, options) {
          if (typeof image === "string") {
            fabric3.util.loadImage(image, function(img, isError) {
              if (img) {
                var instance = new fabric3.Image(img, options);
                this[property] = instance;
                instance.canvas = this;
              }
              callback && callback(img, isError);
            }, this, options && options.crossOrigin);
          } else {
            options && image.setOptions(options);
            this[property] = image;
            image && (image.canvas = this);
            callback && callback(image, false);
          }
          return this;
        },
        __setBgOverlayColor: function(property, color, callback) {
          this[property] = color;
          this._initGradient(color, property);
          this._initPattern(color, property, callback);
          return this;
        },
        _createCanvasElement: function() {
          var element = createCanvasElement2();
          if (!element) {
            throw CANVAS_INIT_ERROR;
          }
          if (!element.style) {
            element.style = {};
          }
          if (typeof element.getContext === "undefined") {
            throw CANVAS_INIT_ERROR;
          }
          return element;
        },
        _initOptions: function(options) {
          var lowerCanvasEl = this.lowerCanvasEl;
          this._setOptions(options);
          this.width = this.width || parseInt(lowerCanvasEl.width, 10) || 0;
          this.height = this.height || parseInt(lowerCanvasEl.height, 10) || 0;
          if (!this.lowerCanvasEl.style) {
            return;
          }
          lowerCanvasEl.width = this.width;
          lowerCanvasEl.height = this.height;
          lowerCanvasEl.style.width = this.width + "px";
          lowerCanvasEl.style.height = this.height + "px";
          this.viewportTransform = this.viewportTransform.slice();
        },
        _createLowerCanvas: function(canvasEl) {
          if (canvasEl && canvasEl.getContext) {
            this.lowerCanvasEl = canvasEl;
          } else {
            this.lowerCanvasEl = fabric3.util.getById(canvasEl) || this._createCanvasElement();
          }
          fabric3.util.addClass(this.lowerCanvasEl, "lower-canvas");
          if (this.interactive) {
            this._applyCanvasStyle(this.lowerCanvasEl);
          }
          this.contextContainer = this.lowerCanvasEl.getContext("2d");
        },
        getWidth: function() {
          return this.width;
        },
        getHeight: function() {
          return this.height;
        },
        setWidth: function(value, options) {
          return this.setDimensions({width: value}, options);
        },
        setHeight: function(value, options) {
          return this.setDimensions({height: value}, options);
        },
        setDimensions: function(dimensions, options) {
          var cssValue;
          options = options || {};
          for (var prop in dimensions) {
            cssValue = dimensions[prop];
            if (!options.cssOnly) {
              this._setBackstoreDimension(prop, dimensions[prop]);
              cssValue += "px";
              this.hasLostContext = true;
            }
            if (!options.backstoreOnly) {
              this._setCssDimension(prop, cssValue);
            }
          }
          if (this._isCurrentlyDrawing) {
            this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles();
          }
          this._initRetinaScaling();
          this.calcOffset();
          if (!options.cssOnly) {
            this.requestRenderAll();
          }
          return this;
        },
        _setBackstoreDimension: function(prop, value) {
          this.lowerCanvasEl[prop] = value;
          if (this.upperCanvasEl) {
            this.upperCanvasEl[prop] = value;
          }
          if (this.cacheCanvasEl) {
            this.cacheCanvasEl[prop] = value;
          }
          this[prop] = value;
          return this;
        },
        _setCssDimension: function(prop, value) {
          this.lowerCanvasEl.style[prop] = value;
          if (this.upperCanvasEl) {
            this.upperCanvasEl.style[prop] = value;
          }
          if (this.wrapperEl) {
            this.wrapperEl.style[prop] = value;
          }
          return this;
        },
        getZoom: function() {
          return this.viewportTransform[0];
        },
        setViewportTransform: function(vpt) {
          var activeObject = this._activeObject, object, i, len;
          this.viewportTransform = vpt;
          for (i = 0, len = this._objects.length; i < len; i++) {
            object = this._objects[i];
            object.group || object.setCoords(true);
          }
          if (activeObject) {
            activeObject.setCoords();
          }
          this.calcViewportBoundaries();
          this.renderOnAddRemove && this.requestRenderAll();
          return this;
        },
        zoomToPoint: function(point, value) {
          var before = point, vpt = this.viewportTransform.slice(0);
          point = transformPoint(point, invertTransform(this.viewportTransform));
          vpt[0] = value;
          vpt[3] = value;
          var after = transformPoint(point, vpt);
          vpt[4] += before.x - after.x;
          vpt[5] += before.y - after.y;
          return this.setViewportTransform(vpt);
        },
        setZoom: function(value) {
          this.zoomToPoint(new fabric3.Point(0, 0), value);
          return this;
        },
        absolutePan: function(point) {
          var vpt = this.viewportTransform.slice(0);
          vpt[4] = -point.x;
          vpt[5] = -point.y;
          return this.setViewportTransform(vpt);
        },
        relativePan: function(point) {
          return this.absolutePan(new fabric3.Point(-point.x - this.viewportTransform[4], -point.y - this.viewportTransform[5]));
        },
        getElement: function() {
          return this.lowerCanvasEl;
        },
        _onObjectAdded: function(obj) {
          this.stateful && obj.setupState();
          obj._set("canvas", this);
          obj.setCoords();
          this.fire("object:added", {target: obj});
          obj.fire("added");
        },
        _onObjectRemoved: function(obj) {
          this.fire("object:removed", {target: obj});
          obj.fire("removed");
          delete obj.canvas;
        },
        clearContext: function(ctx) {
          ctx.clearRect(0, 0, this.width, this.height);
          return this;
        },
        getContext: function() {
          return this.contextContainer;
        },
        clear: function() {
          this._objects.length = 0;
          this.backgroundImage = null;
          this.overlayImage = null;
          this.backgroundColor = "";
          this.overlayColor = "";
          if (this._hasITextHandlers) {
            this.off("mouse:up", this._mouseUpITextHandler);
            this._iTextInstances = null;
            this._hasITextHandlers = false;
          }
          this.clearContext(this.contextContainer);
          this.fire("canvas:cleared");
          this.renderOnAddRemove && this.requestRenderAll();
          return this;
        },
        renderAll: function() {
          var canvasToDrawOn = this.contextContainer;
          this.renderCanvas(canvasToDrawOn, this._objects);
          return this;
        },
        renderAndReset: function() {
          this.isRendering = 0;
          this.renderAll();
        },
        requestRenderAll: function() {
          if (!this.isRendering) {
            this.isRendering = fabric3.util.requestAnimFrame(this.renderAndResetBound);
          }
          return this;
        },
        calcViewportBoundaries: function() {
          var points = {}, width = this.width, height = this.height, iVpt = invertTransform(this.viewportTransform);
          points.tl = transformPoint({x: 0, y: 0}, iVpt);
          points.br = transformPoint({x: width, y: height}, iVpt);
          points.tr = new fabric3.Point(points.br.x, points.tl.y);
          points.bl = new fabric3.Point(points.tl.x, points.br.y);
          this.vptCoords = points;
          return points;
        },
        cancelRequestedRender: function() {
          if (this.isRendering) {
            fabric3.util.cancelAnimFrame(this.isRendering);
            this.isRendering = 0;
          }
        },
        renderCanvas: function(ctx, objects) {
          var v = this.viewportTransform, path = this.clipPath;
          this.cancelRequestedRender();
          this.calcViewportBoundaries();
          this.clearContext(ctx);
          fabric3.util.setImageSmoothing(ctx, this.imageSmoothingEnabled);
          this.fire("before:render", {ctx});
          this._renderBackground(ctx);
          ctx.save();
          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
          this._renderObjects(ctx, objects);
          ctx.restore();
          if (!this.controlsAboveOverlay && this.interactive) {
            this.drawControls(ctx);
          }
          if (path) {
            path.canvas = this;
            path.shouldCache();
            path._transformDone = true;
            path.renderCache({forClipping: true});
            this.drawClipPathOnCanvas(ctx);
          }
          this._renderOverlay(ctx);
          if (this.controlsAboveOverlay && this.interactive) {
            this.drawControls(ctx);
          }
          this.fire("after:render", {ctx});
        },
        drawClipPathOnCanvas: function(ctx) {
          var v = this.viewportTransform, path = this.clipPath;
          ctx.save();
          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
          ctx.globalCompositeOperation = "destination-in";
          path.transform(ctx);
          ctx.scale(1 / path.zoomX, 1 / path.zoomY);
          ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);
          ctx.restore();
        },
        _renderObjects: function(ctx, objects) {
          var i, len;
          for (i = 0, len = objects.length; i < len; ++i) {
            objects[i] && objects[i].render(ctx);
          }
        },
        _renderBackgroundOrOverlay: function(ctx, property) {
          var fill = this[property + "Color"], object = this[property + "Image"], v = this.viewportTransform, needsVpt = this[property + "Vpt"];
          if (!fill && !object) {
            return;
          }
          if (fill) {
            ctx.save();
            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.lineTo(this.width, 0);
            ctx.lineTo(this.width, this.height);
            ctx.lineTo(0, this.height);
            ctx.closePath();
            ctx.fillStyle = fill.toLive ? fill.toLive(ctx, this) : fill;
            if (needsVpt) {
              ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
            }
            ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);
            var m = fill.gradientTransform || fill.patternTransform;
            m && ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
            ctx.fill();
            ctx.restore();
          }
          if (object) {
            ctx.save();
            if (needsVpt) {
              ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
            }
            object.render(ctx);
            ctx.restore();
          }
        },
        _renderBackground: function(ctx) {
          this._renderBackgroundOrOverlay(ctx, "background");
        },
        _renderOverlay: function(ctx) {
          this._renderBackgroundOrOverlay(ctx, "overlay");
        },
        getCenter: function() {
          return {
            top: this.height / 2,
            left: this.width / 2
          };
        },
        centerObjectH: function(object) {
          return this._centerObject(object, new fabric3.Point(this.getCenter().left, object.getCenterPoint().y));
        },
        centerObjectV: function(object) {
          return this._centerObject(object, new fabric3.Point(object.getCenterPoint().x, this.getCenter().top));
        },
        centerObject: function(object) {
          var center = this.getCenter();
          return this._centerObject(object, new fabric3.Point(center.left, center.top));
        },
        viewportCenterObject: function(object) {
          var vpCenter = this.getVpCenter();
          return this._centerObject(object, vpCenter);
        },
        viewportCenterObjectH: function(object) {
          var vpCenter = this.getVpCenter();
          this._centerObject(object, new fabric3.Point(vpCenter.x, object.getCenterPoint().y));
          return this;
        },
        viewportCenterObjectV: function(object) {
          var vpCenter = this.getVpCenter();
          return this._centerObject(object, new fabric3.Point(object.getCenterPoint().x, vpCenter.y));
        },
        getVpCenter: function() {
          var center = this.getCenter(), iVpt = invertTransform(this.viewportTransform);
          return transformPoint({x: center.left, y: center.top}, iVpt);
        },
        _centerObject: function(object, center) {
          object.setPositionByOrigin(center, "center", "center");
          object.setCoords();
          this.renderOnAddRemove && this.requestRenderAll();
          return this;
        },
        toDatalessJSON: function(propertiesToInclude) {
          return this.toDatalessObject(propertiesToInclude);
        },
        toObject: function(propertiesToInclude) {
          return this._toObjectMethod("toObject", propertiesToInclude);
        },
        toDatalessObject: function(propertiesToInclude) {
          return this._toObjectMethod("toDatalessObject", propertiesToInclude);
        },
        _toObjectMethod: function(methodName, propertiesToInclude) {
          var clipPath = this.clipPath, data = {
            version: fabric3.version,
            objects: this._toObjects(methodName, propertiesToInclude)
          };
          if (clipPath) {
            data.clipPath = this._toObject(this.clipPath, methodName, propertiesToInclude);
          }
          extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));
          fabric3.util.populateWithProperties(this, data, propertiesToInclude);
          return data;
        },
        _toObjects: function(methodName, propertiesToInclude) {
          return this._objects.filter(function(object) {
            return !object.excludeFromExport;
          }).map(function(instance) {
            return this._toObject(instance, methodName, propertiesToInclude);
          }, this);
        },
        _toObject: function(instance, methodName, propertiesToInclude) {
          var originalValue;
          if (!this.includeDefaultValues) {
            originalValue = instance.includeDefaultValues;
            instance.includeDefaultValues = false;
          }
          var object = instance[methodName](propertiesToInclude);
          if (!this.includeDefaultValues) {
            instance.includeDefaultValues = originalValue;
          }
          return object;
        },
        __serializeBgOverlay: function(methodName, propertiesToInclude) {
          var data = {}, bgImage = this.backgroundImage, overlay = this.overlayImage;
          if (this.backgroundColor) {
            data.background = this.backgroundColor.toObject ? this.backgroundColor.toObject(propertiesToInclude) : this.backgroundColor;
          }
          if (this.overlayColor) {
            data.overlay = this.overlayColor.toObject ? this.overlayColor.toObject(propertiesToInclude) : this.overlayColor;
          }
          if (bgImage && !bgImage.excludeFromExport) {
            data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);
          }
          if (overlay && !overlay.excludeFromExport) {
            data.overlayImage = this._toObject(overlay, methodName, propertiesToInclude);
          }
          return data;
        },
        svgViewportTransformation: true,
        toSVG: function(options, reviver) {
          options || (options = {});
          options.reviver = reviver;
          var markup = [];
          this._setSVGPreamble(markup, options);
          this._setSVGHeader(markup, options);
          if (this.clipPath) {
            markup.push('<g clip-path="url(#' + this.clipPath.clipPathId + ')" >\n');
          }
          this._setSVGBgOverlayColor(markup, "background");
          this._setSVGBgOverlayImage(markup, "backgroundImage", reviver);
          this._setSVGObjects(markup, reviver);
          if (this.clipPath) {
            markup.push("</g>\n");
          }
          this._setSVGBgOverlayColor(markup, "overlay");
          this._setSVGBgOverlayImage(markup, "overlayImage", reviver);
          markup.push("</svg>");
          return markup.join("");
        },
        _setSVGPreamble: function(markup, options) {
          if (options.suppressPreamble) {
            return;
          }
          markup.push('<?xml version="1.0" encoding="', options.encoding || "UTF-8", '" standalone="no" ?>\n', '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ', '"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n');
        },
        _setSVGHeader: function(markup, options) {
          var width = options.width || this.width, height = options.height || this.height, vpt, viewBox = 'viewBox="0 0 ' + this.width + " " + this.height + '" ', NUM_FRACTION_DIGITS = fabric3.Object.NUM_FRACTION_DIGITS;
          if (options.viewBox) {
            viewBox = 'viewBox="' + options.viewBox.x + " " + options.viewBox.y + " " + options.viewBox.width + " " + options.viewBox.height + '" ';
          } else {
            if (this.svgViewportTransformation) {
              vpt = this.viewportTransform;
              viewBox = 'viewBox="' + toFixed(-vpt[4] / vpt[0], NUM_FRACTION_DIGITS) + " " + toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS) + " " + toFixed(this.width / vpt[0], NUM_FRACTION_DIGITS) + " " + toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS) + '" ';
            }
          }
          markup.push("<svg ", 'xmlns="http://www.w3.org/2000/svg" ', 'xmlns:xlink="http://www.w3.org/1999/xlink" ', 'version="1.1" ', 'width="', width, '" ', 'height="', height, '" ', viewBox, 'xml:space="preserve">\n', "<desc>Created with Fabric.js ", fabric3.version, "</desc>\n", "<defs>\n", this.createSVGFontFacesMarkup(), this.createSVGRefElementsMarkup(), this.createSVGClipPathMarkup(options), "</defs>\n");
        },
        createSVGClipPathMarkup: function(options) {
          var clipPath = this.clipPath;
          if (clipPath) {
            clipPath.clipPathId = "CLIPPATH_" + fabric3.Object.__uid++;
            return '<clipPath id="' + clipPath.clipPathId + '" >\n' + this.clipPath.toClipPathSVG(options.reviver) + "</clipPath>\n";
          }
          return "";
        },
        createSVGRefElementsMarkup: function() {
          var _this = this, markup = ["background", "overlay"].map(function(prop) {
            var fill = _this[prop + "Color"];
            if (fill && fill.toLive) {
              var shouldTransform = _this[prop + "Vpt"], vpt = _this.viewportTransform, object = {
                width: _this.width / (shouldTransform ? vpt[0] : 1),
                height: _this.height / (shouldTransform ? vpt[3] : 1)
              };
              return fill.toSVG(object, {additionalTransform: shouldTransform ? fabric3.util.matrixToSVG(vpt) : ""});
            }
          });
          return markup.join("");
        },
        createSVGFontFacesMarkup: function() {
          var markup = "", fontList = {}, obj, fontFamily, style, row, rowIndex, _char, charIndex, i, len, fontPaths = fabric3.fontPaths, objects = [];
          this._objects.forEach(function add(object) {
            objects.push(object);
            if (object._objects) {
              object._objects.forEach(add);
            }
          });
          for (i = 0, len = objects.length; i < len; i++) {
            obj = objects[i];
            fontFamily = obj.fontFamily;
            if (obj.type.indexOf("text") === -1 || fontList[fontFamily] || !fontPaths[fontFamily]) {
              continue;
            }
            fontList[fontFamily] = true;
            if (!obj.styles) {
              continue;
            }
            style = obj.styles;
            for (rowIndex in style) {
              row = style[rowIndex];
              for (charIndex in row) {
                _char = row[charIndex];
                fontFamily = _char.fontFamily;
                if (!fontList[fontFamily] && fontPaths[fontFamily]) {
                  fontList[fontFamily] = true;
                }
              }
            }
          }
          for (var j in fontList) {
            markup += [
              "		@font-face {\n",
              "			font-family: '",
              j,
              "';\n",
              "			src: url('",
              fontPaths[j],
              "');\n",
              "		}\n"
            ].join("");
          }
          if (markup) {
            markup = [
              '	<style type="text/css">',
              "<![CDATA[\n",
              markup,
              "]]>",
              "</style>\n"
            ].join("");
          }
          return markup;
        },
        _setSVGObjects: function(markup, reviver) {
          var instance, i, len, objects = this._objects;
          for (i = 0, len = objects.length; i < len; i++) {
            instance = objects[i];
            if (instance.excludeFromExport) {
              continue;
            }
            this._setSVGObject(markup, instance, reviver);
          }
        },
        _setSVGObject: function(markup, instance, reviver) {
          markup.push(instance.toSVG(reviver));
        },
        _setSVGBgOverlayImage: function(markup, property, reviver) {
          if (this[property] && !this[property].excludeFromExport && this[property].toSVG) {
            markup.push(this[property].toSVG(reviver));
          }
        },
        _setSVGBgOverlayColor: function(markup, property) {
          var filler = this[property + "Color"], vpt = this.viewportTransform, finalWidth = this.width, finalHeight = this.height;
          if (!filler) {
            return;
          }
          if (filler.toLive) {
            var repeat = filler.repeat, iVpt = fabric3.util.invertTransform(vpt), shouldInvert = this[property + "Vpt"], additionalTransform = shouldInvert ? fabric3.util.matrixToSVG(iVpt) : "";
            markup.push('<rect transform="' + additionalTransform + " translate(", finalWidth / 2, ",", finalHeight / 2, ')"', ' x="', filler.offsetX - finalWidth / 2, '" y="', filler.offsetY - finalHeight / 2, '" ', 'width="', repeat === "repeat-y" || repeat === "no-repeat" ? filler.source.width : finalWidth, '" height="', repeat === "repeat-x" || repeat === "no-repeat" ? filler.source.height : finalHeight, '" fill="url(#SVGID_' + filler.id + ')"', "></rect>\n");
          } else {
            markup.push('<rect x="0" y="0" width="100%" height="100%" ', 'fill="', filler, '"', "></rect>\n");
          }
        },
        sendToBack: function(object) {
          if (!object) {
            return this;
          }
          var activeSelection = this._activeObject, i, obj, objs;
          if (object === activeSelection && object.type === "activeSelection") {
            objs = activeSelection._objects;
            for (i = objs.length; i--; ) {
              obj = objs[i];
              removeFromArray(this._objects, obj);
              this._objects.unshift(obj);
            }
          } else {
            removeFromArray(this._objects, object);
            this._objects.unshift(object);
          }
          this.renderOnAddRemove && this.requestRenderAll();
          return this;
        },
        bringToFront: function(object) {
          if (!object) {
            return this;
          }
          var activeSelection = this._activeObject, i, obj, objs;
          if (object === activeSelection && object.type === "activeSelection") {
            objs = activeSelection._objects;
            for (i = 0; i < objs.length; i++) {
              obj = objs[i];
              removeFromArray(this._objects, obj);
              this._objects.push(obj);
            }
          } else {
            removeFromArray(this._objects, object);
            this._objects.push(object);
          }
          this.renderOnAddRemove && this.requestRenderAll();
          return this;
        },
        sendBackwards: function(object, intersecting) {
          if (!object) {
            return this;
          }
          var activeSelection = this._activeObject, i, obj, idx, newIdx, objs, objsMoved = 0;
          if (object === activeSelection && object.type === "activeSelection") {
            objs = activeSelection._objects;
            for (i = 0; i < objs.length; i++) {
              obj = objs[i];
              idx = this._objects.indexOf(obj);
              if (idx > 0 + objsMoved) {
                newIdx = idx - 1;
                removeFromArray(this._objects, obj);
                this._objects.splice(newIdx, 0, obj);
              }
              objsMoved++;
            }
          } else {
            idx = this._objects.indexOf(object);
            if (idx !== 0) {
              newIdx = this._findNewLowerIndex(object, idx, intersecting);
              removeFromArray(this._objects, object);
              this._objects.splice(newIdx, 0, object);
            }
          }
          this.renderOnAddRemove && this.requestRenderAll();
          return this;
        },
        _findNewLowerIndex: function(object, idx, intersecting) {
          var newIdx, i;
          if (intersecting) {
            newIdx = idx;
            for (i = idx - 1; i >= 0; --i) {
              var isIntersecting = object.intersectsWithObject(this._objects[i]) || object.isContainedWithinObject(this._objects[i]) || this._objects[i].isContainedWithinObject(object);
              if (isIntersecting) {
                newIdx = i;
                break;
              }
            }
          } else {
            newIdx = idx - 1;
          }
          return newIdx;
        },
        bringForward: function(object, intersecting) {
          if (!object) {
            return this;
          }
          var activeSelection = this._activeObject, i, obj, idx, newIdx, objs, objsMoved = 0;
          if (object === activeSelection && object.type === "activeSelection") {
            objs = activeSelection._objects;
            for (i = objs.length; i--; ) {
              obj = objs[i];
              idx = this._objects.indexOf(obj);
              if (idx < this._objects.length - 1 - objsMoved) {
                newIdx = idx + 1;
                removeFromArray(this._objects, obj);
                this._objects.splice(newIdx, 0, obj);
              }
              objsMoved++;
            }
          } else {
            idx = this._objects.indexOf(object);
            if (idx !== this._objects.length - 1) {
              newIdx = this._findNewUpperIndex(object, idx, intersecting);
              removeFromArray(this._objects, object);
              this._objects.splice(newIdx, 0, object);
            }
          }
          this.renderOnAddRemove && this.requestRenderAll();
          return this;
        },
        _findNewUpperIndex: function(object, idx, intersecting) {
          var newIdx, i, len;
          if (intersecting) {
            newIdx = idx;
            for (i = idx + 1, len = this._objects.length; i < len; ++i) {
              var isIntersecting = object.intersectsWithObject(this._objects[i]) || object.isContainedWithinObject(this._objects[i]) || this._objects[i].isContainedWithinObject(object);
              if (isIntersecting) {
                newIdx = i;
                break;
              }
            }
          } else {
            newIdx = idx + 1;
          }
          return newIdx;
        },
        moveTo: function(object, index) {
          removeFromArray(this._objects, object);
          this._objects.splice(index, 0, object);
          return this.renderOnAddRemove && this.requestRenderAll();
        },
        dispose: function() {
          if (this.isRendering) {
            fabric3.util.cancelAnimFrame(this.isRendering);
            this.isRendering = 0;
          }
          this.forEachObject(function(object) {
            object.dispose && object.dispose();
          });
          this._objects = [];
          if (this.backgroundImage && this.backgroundImage.dispose) {
            this.backgroundImage.dispose();
          }
          this.backgroundImage = null;
          if (this.overlayImage && this.overlayImage.dispose) {
            this.overlayImage.dispose();
          }
          this.overlayImage = null;
          this._iTextInstances = null;
          this.contextContainer = null;
          fabric3.util.cleanUpJsdomNode(this.lowerCanvasEl);
          this.lowerCanvasEl = void 0;
          return this;
        },
        toString: function() {
          return "#<fabric.Canvas (" + this.complexity() + "): { objects: " + this._objects.length + " }>";
        }
      });
      extend(fabric3.StaticCanvas.prototype, fabric3.Observable);
      extend(fabric3.StaticCanvas.prototype, fabric3.Collection);
      extend(fabric3.StaticCanvas.prototype, fabric3.DataURLExporter);
      extend(fabric3.StaticCanvas, {
        EMPTY_JSON: '{"objects": [], "background": "white"}',
        supports: function(methodName) {
          var el2 = createCanvasElement2();
          if (!el2 || !el2.getContext) {
            return null;
          }
          var ctx = el2.getContext("2d");
          if (!ctx) {
            return null;
          }
          switch (methodName) {
            case "setLineDash":
              return typeof ctx.setLineDash !== "undefined";
            default:
              return null;
          }
        }
      });
      fabric3.StaticCanvas.prototype.toJSON = fabric3.StaticCanvas.prototype.toObject;
      if (fabric3.isLikelyNode) {
        fabric3.StaticCanvas.prototype.createPNGStream = function() {
          var impl = getNodeCanvas(this.lowerCanvasEl);
          return impl && impl.createPNGStream();
        };
        fabric3.StaticCanvas.prototype.createJPEGStream = function(opts) {
          var impl = getNodeCanvas(this.lowerCanvasEl);
          return impl && impl.createJPEGStream(opts);
        };
      }
    })();
    fabric3.BaseBrush = fabric3.util.createClass({
      color: "rgb(0, 0, 0)",
      width: 1,
      shadow: null,
      strokeLineCap: "round",
      strokeLineJoin: "round",
      strokeMiterLimit: 10,
      strokeDashArray: null,
      _setBrushStyles: function() {
        var ctx = this.canvas.contextTop;
        ctx.strokeStyle = this.color;
        ctx.lineWidth = this.width;
        ctx.lineCap = this.strokeLineCap;
        ctx.miterLimit = this.strokeMiterLimit;
        ctx.lineJoin = this.strokeLineJoin;
        if (fabric3.StaticCanvas.supports("setLineDash")) {
          ctx.setLineDash(this.strokeDashArray || []);
        }
      },
      _saveAndTransform: function(ctx) {
        var v = this.canvas.viewportTransform;
        ctx.save();
        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
      },
      _setShadow: function() {
        if (!this.shadow) {
          return;
        }
        var canvas = this.canvas, shadow = this.shadow, ctx = canvas.contextTop, zoom = canvas.getZoom();
        if (canvas && canvas._isRetinaScaling()) {
          zoom *= fabric3.devicePixelRatio;
        }
        ctx.shadowColor = shadow.color;
        ctx.shadowBlur = shadow.blur * zoom;
        ctx.shadowOffsetX = shadow.offsetX * zoom;
        ctx.shadowOffsetY = shadow.offsetY * zoom;
      },
      needsFullRender: function() {
        var color = new fabric3.Color(this.color);
        return color.getAlpha() < 1 || !!this.shadow;
      },
      _resetShadow: function() {
        var ctx = this.canvas.contextTop;
        ctx.shadowColor = "";
        ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;
      }
    });
    (function() {
      fabric3.PencilBrush = fabric3.util.createClass(fabric3.BaseBrush, {
        decimate: 0.4,
        initialize: function(canvas) {
          this.canvas = canvas;
          this._points = [];
        },
        _drawSegment: function(ctx, p1, p2) {
          var midPoint = p1.midPointFrom(p2);
          ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);
          return midPoint;
        },
        onMouseDown: function(pointer, options) {
          if (!this.canvas._isMainEvent(options.e)) {
            return;
          }
          this._prepareForDrawing(pointer);
          this._captureDrawingPath(pointer);
          this._render();
        },
        onMouseMove: function(pointer, options) {
          if (!this.canvas._isMainEvent(options.e)) {
            return;
          }
          if (this._captureDrawingPath(pointer) && this._points.length > 1) {
            if (this.needsFullRender()) {
              this.canvas.clearContext(this.canvas.contextTop);
              this._render();
            } else {
              var points = this._points, length = points.length, ctx = this.canvas.contextTop;
              this._saveAndTransform(ctx);
              if (this.oldEnd) {
                ctx.beginPath();
                ctx.moveTo(this.oldEnd.x, this.oldEnd.y);
              }
              this.oldEnd = this._drawSegment(ctx, points[length - 2], points[length - 1], true);
              ctx.stroke();
              ctx.restore();
            }
          }
        },
        onMouseUp: function(options) {
          if (!this.canvas._isMainEvent(options.e)) {
            return true;
          }
          this.oldEnd = void 0;
          this._finalizeAndAddPath();
          return false;
        },
        _prepareForDrawing: function(pointer) {
          var p = new fabric3.Point(pointer.x, pointer.y);
          this._reset();
          this._addPoint(p);
          this.canvas.contextTop.moveTo(p.x, p.y);
        },
        _addPoint: function(point) {
          if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {
            return false;
          }
          this._points.push(point);
          return true;
        },
        _reset: function() {
          this._points = [];
          this._setBrushStyles();
          this._setShadow();
        },
        _captureDrawingPath: function(pointer) {
          var pointerPoint = new fabric3.Point(pointer.x, pointer.y);
          return this._addPoint(pointerPoint);
        },
        _render: function() {
          var ctx = this.canvas.contextTop, i, len, p1 = this._points[0], p2 = this._points[1];
          this._saveAndTransform(ctx);
          ctx.beginPath();
          if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {
            var width = this.width / 1e3;
            p1 = new fabric3.Point(p1.x, p1.y);
            p2 = new fabric3.Point(p2.x, p2.y);
            p1.x -= width;
            p2.x += width;
          }
          ctx.moveTo(p1.x, p1.y);
          for (i = 1, len = this._points.length; i < len; i++) {
            this._drawSegment(ctx, p1, p2);
            p1 = this._points[i];
            p2 = this._points[i + 1];
          }
          ctx.lineTo(p1.x, p1.y);
          ctx.stroke();
          ctx.restore();
        },
        convertPointsToSVGPath: function(points) {
          var path = [], i, width = this.width / 1e3, p1 = new fabric3.Point(points[0].x, points[0].y), p2 = new fabric3.Point(points[1].x, points[1].y), len = points.length, multSignX = 1, multSignY = 0, manyPoints = len > 2;
          if (manyPoints) {
            multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;
            multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;
          }
          path.push("M ", p1.x - multSignX * width, " ", p1.y - multSignY * width, " ");
          for (i = 1; i < len; i++) {
            if (!p1.eq(p2)) {
              var midPoint = p1.midPointFrom(p2);
              path.push("Q ", p1.x, " ", p1.y, " ", midPoint.x, " ", midPoint.y, " ");
            }
            p1 = points[i];
            if (i + 1 < points.length) {
              p2 = points[i + 1];
            }
          }
          if (manyPoints) {
            multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;
            multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;
          }
          path.push("L ", p1.x + multSignX * width, " ", p1.y + multSignY * width);
          return path;
        },
        createPath: function(pathData) {
          var path = new fabric3.Path(pathData, {
            fill: null,
            stroke: this.color,
            strokeWidth: this.width,
            strokeLineCap: this.strokeLineCap,
            strokeMiterLimit: this.strokeMiterLimit,
            strokeLineJoin: this.strokeLineJoin,
            strokeDashArray: this.strokeDashArray
          });
          if (this.shadow) {
            this.shadow.affectStroke = true;
            path.shadow = new fabric3.Shadow(this.shadow);
          }
          return path;
        },
        decimatePoints: function(points, distance) {
          if (points.length <= 2) {
            return points;
          }
          var zoom = this.canvas.getZoom(), adjustedDistance = Math.pow(distance / zoom, 2), i, l = points.length - 1, lastPoint = points[0], newPoints = [lastPoint], cDistance;
          for (i = 1; i < l; i++) {
            cDistance = Math.pow(lastPoint.x - points[i].x, 2) + Math.pow(lastPoint.y - points[i].y, 2);
            if (cDistance >= adjustedDistance) {
              lastPoint = points[i];
              newPoints.push(lastPoint);
            }
          }
          if (newPoints.length === 1) {
            newPoints.push(new fabric3.Point(newPoints[0].x, newPoints[0].y));
          }
          return newPoints;
        },
        _finalizeAndAddPath: function() {
          var ctx = this.canvas.contextTop;
          ctx.closePath();
          if (this.decimate) {
            this._points = this.decimatePoints(this._points, this.decimate);
          }
          var pathData = this.convertPointsToSVGPath(this._points).join("");
          if (pathData === "M 0 0 Q 0 0 0 0 L 0 0") {
            this.canvas.requestRenderAll();
            return;
          }
          var path = this.createPath(pathData);
          this.canvas.clearContext(this.canvas.contextTop);
          this.canvas.fire("before:path:created", {path});
          this.canvas.add(path);
          this.canvas.requestRenderAll();
          path.setCoords();
          this._resetShadow();
          this.canvas.fire("path:created", {path});
        }
      });
    })();
    fabric3.CircleBrush = fabric3.util.createClass(fabric3.BaseBrush, {
      width: 10,
      initialize: function(canvas) {
        this.canvas = canvas;
        this.points = [];
      },
      drawDot: function(pointer) {
        var point = this.addPoint(pointer), ctx = this.canvas.contextTop;
        this._saveAndTransform(ctx);
        this.dot(ctx, point);
        ctx.restore();
      },
      dot: function(ctx, point) {
        ctx.fillStyle = point.fill;
        ctx.beginPath();
        ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);
        ctx.closePath();
        ctx.fill();
      },
      onMouseDown: function(pointer) {
        this.points.length = 0;
        this.canvas.clearContext(this.canvas.contextTop);
        this._setShadow();
        this.drawDot(pointer);
      },
      _render: function() {
        var ctx = this.canvas.contextTop, i, len, points = this.points;
        this._saveAndTransform(ctx);
        for (i = 0, len = points.length; i < len; i++) {
          this.dot(ctx, points[i]);
        }
        ctx.restore();
      },
      onMouseMove: function(pointer) {
        if (this.needsFullRender()) {
          this.canvas.clearContext(this.canvas.contextTop);
          this.addPoint(pointer);
          this._render();
        } else {
          this.drawDot(pointer);
        }
      },
      onMouseUp: function() {
        var originalRenderOnAddRemove = this.canvas.renderOnAddRemove, i, len;
        this.canvas.renderOnAddRemove = false;
        var circles = [];
        for (i = 0, len = this.points.length; i < len; i++) {
          var point = this.points[i], circle = new fabric3.Circle({
            radius: point.radius,
            left: point.x,
            top: point.y,
            originX: "center",
            originY: "center",
            fill: point.fill
          });
          this.shadow && (circle.shadow = new fabric3.Shadow(this.shadow));
          circles.push(circle);
        }
        var group2 = new fabric3.Group(circles);
        group2.canvas = this.canvas;
        this.canvas.fire("before:path:created", {path: group2});
        this.canvas.add(group2);
        this.canvas.fire("path:created", {path: group2});
        this.canvas.clearContext(this.canvas.contextTop);
        this._resetShadow();
        this.canvas.renderOnAddRemove = originalRenderOnAddRemove;
        this.canvas.requestRenderAll();
      },
      addPoint: function(pointer) {
        var pointerPoint = new fabric3.Point(pointer.x, pointer.y), circleRadius = fabric3.util.getRandomInt(Math.max(0, this.width - 20), this.width + 20) / 2, circleColor = new fabric3.Color(this.color).setAlpha(fabric3.util.getRandomInt(0, 100) / 100).toRgba();
        pointerPoint.radius = circleRadius;
        pointerPoint.fill = circleColor;
        this.points.push(pointerPoint);
        return pointerPoint;
      }
    });
    fabric3.SprayBrush = fabric3.util.createClass(fabric3.BaseBrush, {
      width: 10,
      density: 20,
      dotWidth: 1,
      dotWidthVariance: 1,
      randomOpacity: false,
      optimizeOverlapping: true,
      initialize: function(canvas) {
        this.canvas = canvas;
        this.sprayChunks = [];
      },
      onMouseDown: function(pointer) {
        this.sprayChunks.length = 0;
        this.canvas.clearContext(this.canvas.contextTop);
        this._setShadow();
        this.addSprayChunk(pointer);
        this.render(this.sprayChunkPoints);
      },
      onMouseMove: function(pointer) {
        this.addSprayChunk(pointer);
        this.render(this.sprayChunkPoints);
      },
      onMouseUp: function() {
        var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;
        this.canvas.renderOnAddRemove = false;
        var rects = [];
        for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {
          var sprayChunk = this.sprayChunks[i];
          for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {
            var rect = new fabric3.Rect({
              width: sprayChunk[j].width,
              height: sprayChunk[j].width,
              left: sprayChunk[j].x + 1,
              top: sprayChunk[j].y + 1,
              originX: "center",
              originY: "center",
              fill: this.color
            });
            rects.push(rect);
          }
        }
        if (this.optimizeOverlapping) {
          rects = this._getOptimizedRects(rects);
        }
        var group2 = new fabric3.Group(rects);
        this.shadow && group2.set("shadow", new fabric3.Shadow(this.shadow));
        this.canvas.fire("before:path:created", {path: group2});
        this.canvas.add(group2);
        this.canvas.fire("path:created", {path: group2});
        this.canvas.clearContext(this.canvas.contextTop);
        this._resetShadow();
        this.canvas.renderOnAddRemove = originalRenderOnAddRemove;
        this.canvas.requestRenderAll();
      },
      _getOptimizedRects: function(rects) {
        var uniqueRects = {}, key, i, len;
        for (i = 0, len = rects.length; i < len; i++) {
          key = rects[i].left + "" + rects[i].top;
          if (!uniqueRects[key]) {
            uniqueRects[key] = rects[i];
          }
        }
        var uniqueRectsArray = [];
        for (key in uniqueRects) {
          uniqueRectsArray.push(uniqueRects[key]);
        }
        return uniqueRectsArray;
      },
      render: function(sprayChunk) {
        var ctx = this.canvas.contextTop, i, len;
        ctx.fillStyle = this.color;
        this._saveAndTransform(ctx);
        for (i = 0, len = sprayChunk.length; i < len; i++) {
          var point = sprayChunk[i];
          if (typeof point.opacity !== "undefined") {
            ctx.globalAlpha = point.opacity;
          }
          ctx.fillRect(point.x, point.y, point.width, point.width);
        }
        ctx.restore();
      },
      _render: function() {
        var ctx = this.canvas.contextTop, i, ilen;
        ctx.fillStyle = this.color;
        this._saveAndTransform(ctx);
        for (i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {
          this.render(this.sprayChunks[i]);
        }
        ctx.restore();
      },
      addSprayChunk: function(pointer) {
        this.sprayChunkPoints = [];
        var x, y, width, radius = this.width / 2, i;
        for (i = 0; i < this.density; i++) {
          x = fabric3.util.getRandomInt(pointer.x - radius, pointer.x + radius);
          y = fabric3.util.getRandomInt(pointer.y - radius, pointer.y + radius);
          if (this.dotWidthVariance) {
            width = fabric3.util.getRandomInt(Math.max(1, this.dotWidth - this.dotWidthVariance), this.dotWidth + this.dotWidthVariance);
          } else {
            width = this.dotWidth;
          }
          var point = new fabric3.Point(x, y);
          point.width = width;
          if (this.randomOpacity) {
            point.opacity = fabric3.util.getRandomInt(0, 100) / 100;
          }
          this.sprayChunkPoints.push(point);
        }
        this.sprayChunks.push(this.sprayChunkPoints);
      }
    });
    fabric3.PatternBrush = fabric3.util.createClass(fabric3.PencilBrush, {
      getPatternSrc: function() {
        var dotWidth = 20, dotDistance = 5, patternCanvas = fabric3.util.createCanvasElement(), patternCtx = patternCanvas.getContext("2d");
        patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;
        patternCtx.fillStyle = this.color;
        patternCtx.beginPath();
        patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);
        patternCtx.closePath();
        patternCtx.fill();
        return patternCanvas;
      },
      getPatternSrcFunction: function() {
        return String(this.getPatternSrc).replace("this.color", '"' + this.color + '"');
      },
      getPattern: function() {
        return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), "repeat");
      },
      _setBrushStyles: function() {
        this.callSuper("_setBrushStyles");
        this.canvas.contextTop.strokeStyle = this.getPattern();
      },
      createPath: function(pathData) {
        var path = this.callSuper("createPath", pathData), topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);
        path.stroke = new fabric3.Pattern({
          source: this.source || this.getPatternSrcFunction(),
          offsetX: -topLeft.x,
          offsetY: -topLeft.y
        });
        return path;
      }
    });
    (function() {
      var getPointer = fabric3.util.getPointer, degreesToRadians = fabric3.util.degreesToRadians, abs = Math.abs, supportLineDash = fabric3.StaticCanvas.supports("setLineDash"), isTouchEvent = fabric3.util.isTouchEvent, STROKE_OFFSET = 0.5;
      fabric3.Canvas = fabric3.util.createClass(fabric3.StaticCanvas, {
        initialize: function(el2, options) {
          options || (options = {});
          this.renderAndResetBound = this.renderAndReset.bind(this);
          this.requestRenderAllBound = this.requestRenderAll.bind(this);
          this._initStatic(el2, options);
          this._initInteractive();
          this._createCacheCanvas();
        },
        uniformScaling: true,
        uniScaleKey: "shiftKey",
        centeredScaling: false,
        centeredRotation: false,
        centeredKey: "altKey",
        altActionKey: "shiftKey",
        interactive: true,
        selection: true,
        selectionKey: "shiftKey",
        altSelectionKey: null,
        selectionColor: "rgba(100, 100, 255, 0.3)",
        selectionDashArray: [],
        selectionBorderColor: "rgba(255, 255, 255, 0.3)",
        selectionLineWidth: 1,
        selectionFullyContained: false,
        hoverCursor: "move",
        moveCursor: "move",
        defaultCursor: "default",
        freeDrawingCursor: "crosshair",
        rotationCursor: "crosshair",
        notAllowedCursor: "not-allowed",
        containerClass: "canvas-container",
        perPixelTargetFind: false,
        targetFindTolerance: 0,
        skipTargetFind: false,
        isDrawingMode: false,
        preserveObjectStacking: false,
        snapAngle: 0,
        snapThreshold: null,
        stopContextMenu: false,
        fireRightClick: false,
        fireMiddleClick: false,
        targets: [],
        _hoveredTarget: null,
        _hoveredTargets: [],
        _initInteractive: function() {
          this._currentTransform = null;
          this._groupSelector = null;
          this._initWrapperElement();
          this._createUpperCanvas();
          this._initEventListeners();
          this._initRetinaScaling();
          this.freeDrawingBrush = fabric3.PencilBrush && new fabric3.PencilBrush(this);
          this.calcOffset();
        },
        _chooseObjectsToRender: function() {
          var activeObjects = this.getActiveObjects(), object, objsToRender, activeGroupObjects;
          if (activeObjects.length > 0 && !this.preserveObjectStacking) {
            objsToRender = [];
            activeGroupObjects = [];
            for (var i = 0, length = this._objects.length; i < length; i++) {
              object = this._objects[i];
              if (activeObjects.indexOf(object) === -1) {
                objsToRender.push(object);
              } else {
                activeGroupObjects.push(object);
              }
            }
            if (activeObjects.length > 1) {
              this._activeObject._objects = activeGroupObjects;
            }
            objsToRender.push.apply(objsToRender, activeGroupObjects);
          } else {
            objsToRender = this._objects;
          }
          return objsToRender;
        },
        renderAll: function() {
          if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {
            this.clearContext(this.contextTop);
            this.contextTopDirty = false;
          }
          if (this.hasLostContext) {
            this.renderTopLayer(this.contextTop);
          }
          var canvasToDrawOn = this.contextContainer;
          this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());
          return this;
        },
        renderTopLayer: function(ctx) {
          ctx.save();
          if (this.isDrawingMode && this._isCurrentlyDrawing) {
            this.freeDrawingBrush && this.freeDrawingBrush._render();
            this.contextTopDirty = true;
          }
          if (this.selection && this._groupSelector) {
            this._drawSelection(ctx);
            this.contextTopDirty = true;
          }
          ctx.restore();
        },
        renderTop: function() {
          var ctx = this.contextTop;
          this.clearContext(ctx);
          this.renderTopLayer(ctx);
          this.fire("after:render");
          return this;
        },
        _normalizePointer: function(object, pointer) {
          var m = object.calcTransformMatrix(), invertedM = fabric3.util.invertTransform(m), vptPointer = this.restorePointerVpt(pointer);
          return fabric3.util.transformPoint(vptPointer, invertedM);
        },
        isTargetTransparent: function(target, x, y) {
          if (target.shouldCache() && target._cacheCanvas && target !== this._activeObject) {
            var normalizedPointer = this._normalizePointer(target, {x, y}), targetRelativeX = Math.max(target.cacheTranslationX + normalizedPointer.x * target.zoomX, 0), targetRelativeY = Math.max(target.cacheTranslationY + normalizedPointer.y * target.zoomY, 0);
            var isTransparent = fabric3.util.isTransparent(target._cacheContext, Math.round(targetRelativeX), Math.round(targetRelativeY), this.targetFindTolerance);
            return isTransparent;
          }
          var ctx = this.contextCache, originalColor = target.selectionBackgroundColor, v = this.viewportTransform;
          target.selectionBackgroundColor = "";
          this.clearContext(ctx);
          ctx.save();
          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
          target.render(ctx);
          ctx.restore();
          target === this._activeObject && target._renderControls(ctx, {
            hasBorders: false,
            transparentCorners: false
          }, {
            hasBorders: false
          });
          target.selectionBackgroundColor = originalColor;
          var isTransparent = fabric3.util.isTransparent(ctx, x, y, this.targetFindTolerance);
          return isTransparent;
        },
        _isSelectionKeyPressed: function(e) {
          var selectionKeyPressed = false;
          if (Object.prototype.toString.call(this.selectionKey) === "[object Array]") {
            selectionKeyPressed = !!this.selectionKey.find(function(key) {
              return e[key] === true;
            });
          } else {
            selectionKeyPressed = e[this.selectionKey];
          }
          return selectionKeyPressed;
        },
        _shouldClearSelection: function(e, target) {
          var activeObjects = this.getActiveObjects(), activeObject = this._activeObject;
          return !target || target && activeObject && activeObjects.length > 1 && activeObjects.indexOf(target) === -1 && activeObject !== target && !this._isSelectionKeyPressed(e) || target && !target.evented || target && !target.selectable && activeObject && activeObject !== target;
        },
        _shouldCenterTransform: function(target, action2, altKey) {
          if (!target) {
            return;
          }
          var centerTransform;
          if (action2 === "scale" || action2 === "scaleX" || action2 === "scaleY" || action2 === "resizing") {
            centerTransform = this.centeredScaling || target.centeredScaling;
          } else if (action2 === "rotate") {
            centerTransform = this.centeredRotation || target.centeredRotation;
          }
          return centerTransform ? !altKey : altKey;
        },
        _getOriginFromCorner: function(target, corner) {
          var origin = {
            x: target.originX,
            y: target.originY
          };
          if (corner === "ml" || corner === "tl" || corner === "bl") {
            origin.x = "right";
          } else if (corner === "mr" || corner === "tr" || corner === "br") {
            origin.x = "left";
          }
          if (corner === "tl" || corner === "mt" || corner === "tr") {
            origin.y = "bottom";
          } else if (corner === "bl" || corner === "mb" || corner === "br") {
            origin.y = "top";
          } else if (corner === "mtr") {
            origin.x = "center";
            origin.y = "center";
          }
          return origin;
        },
        _getActionFromCorner: function(alreadySelected, corner, e, target) {
          if (!corner || !alreadySelected) {
            return "drag";
          }
          var control = target.controls[corner];
          return control.getActionName(e, control, target);
        },
        _setupCurrentTransform: function(e, target, alreadySelected) {
          if (!target) {
            return;
          }
          var pointer = this.getPointer(e), corner = target.__corner, actionHandler = alreadySelected && corner ? target.controls[corner].getActionHandler() : fabric3.controlsUtils.dragHandler, action2 = this._getActionFromCorner(alreadySelected, corner, e, target), origin = this._getOriginFromCorner(target, corner), altKey = e[this.centeredKey], transform = {
            target,
            action: action2,
            actionHandler,
            corner,
            scaleX: target.scaleX,
            scaleY: target.scaleY,
            skewX: target.skewX,
            skewY: target.skewY,
            offsetX: pointer.x - target.left,
            offsetY: pointer.y - target.top,
            originX: origin.x,
            originY: origin.y,
            ex: pointer.x,
            ey: pointer.y,
            lastX: pointer.x,
            lastY: pointer.y,
            theta: degreesToRadians(target.angle),
            width: target.width * target.scaleX,
            shiftKey: e.shiftKey,
            altKey,
            original: fabric3.util.saveObjectTransform(target)
          };
          if (this._shouldCenterTransform(target, action2, altKey)) {
            transform.originX = "center";
            transform.originY = "center";
          }
          transform.original.originX = origin.x;
          transform.original.originY = origin.y;
          this._currentTransform = transform;
          this._beforeTransform(e);
        },
        setCursor: function(value) {
          this.upperCanvasEl.style.cursor = value;
        },
        _drawSelection: function(ctx) {
          var groupSelector = this._groupSelector, left = groupSelector.left, top = groupSelector.top, aleft = abs(left), atop = abs(top);
          if (this.selectionColor) {
            ctx.fillStyle = this.selectionColor;
            ctx.fillRect(groupSelector.ex - (left > 0 ? 0 : -left), groupSelector.ey - (top > 0 ? 0 : -top), aleft, atop);
          }
          if (!this.selectionLineWidth || !this.selectionBorderColor) {
            return;
          }
          ctx.lineWidth = this.selectionLineWidth;
          ctx.strokeStyle = this.selectionBorderColor;
          if (this.selectionDashArray.length > 1 && !supportLineDash) {
            var px2 = groupSelector.ex + STROKE_OFFSET - (left > 0 ? 0 : aleft), py2 = groupSelector.ey + STROKE_OFFSET - (top > 0 ? 0 : atop);
            ctx.beginPath();
            fabric3.util.drawDashedLine(ctx, px2, py2, px2 + aleft, py2, this.selectionDashArray);
            fabric3.util.drawDashedLine(ctx, px2, py2 + atop - 1, px2 + aleft, py2 + atop - 1, this.selectionDashArray);
            fabric3.util.drawDashedLine(ctx, px2, py2, px2, py2 + atop, this.selectionDashArray);
            fabric3.util.drawDashedLine(ctx, px2 + aleft - 1, py2, px2 + aleft - 1, py2 + atop, this.selectionDashArray);
            ctx.closePath();
            ctx.stroke();
          } else {
            fabric3.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);
            ctx.strokeRect(groupSelector.ex + STROKE_OFFSET - (left > 0 ? 0 : aleft), groupSelector.ey + STROKE_OFFSET - (top > 0 ? 0 : atop), aleft, atop);
          }
        },
        findTarget: function(e, skipGroup) {
          if (this.skipTargetFind) {
            return;
          }
          var ignoreZoom = true, pointer = this.getPointer(e, ignoreZoom), activeObject = this._activeObject, aObjects = this.getActiveObjects(), activeTarget, activeTargetSubs, isTouch = isTouchEvent(e);
          this.targets = [];
          if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([activeObject], pointer)) {
            return activeObject;
          }
          if (aObjects.length === 1 && activeObject._findTargetCorner(pointer, isTouch)) {
            return activeObject;
          }
          if (aObjects.length === 1 && activeObject === this._searchPossibleTargets([activeObject], pointer)) {
            if (!this.preserveObjectStacking) {
              return activeObject;
            } else {
              activeTarget = activeObject;
              activeTargetSubs = this.targets;
              this.targets = [];
            }
          }
          var target = this._searchPossibleTargets(this._objects, pointer);
          if (e[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {
            target = activeTarget;
            this.targets = activeTargetSubs;
          }
          return target;
        },
        _checkTarget: function(pointer, obj, globalPointer) {
          if (obj && obj.visible && obj.evented && (obj.containsPoint(pointer) || !!obj._findTargetCorner(pointer))) {
            if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {
              var isTransparent = this.isTargetTransparent(obj, globalPointer.x, globalPointer.y);
              if (!isTransparent) {
                return true;
              }
            } else {
              return true;
            }
          }
        },
        _searchPossibleTargets: function(objects, pointer) {
          var target, i = objects.length, subTarget;
          while (i--) {
            var objToCheck = objects[i];
            var pointerToUse = objToCheck.group ? this._normalizePointer(objToCheck.group, pointer) : pointer;
            if (this._checkTarget(pointerToUse, objToCheck, pointer)) {
              target = objects[i];
              if (target.subTargetCheck && target instanceof fabric3.Group) {
                subTarget = this._searchPossibleTargets(target._objects, pointer);
                subTarget && this.targets.push(subTarget);
              }
              break;
            }
          }
          return target;
        },
        restorePointerVpt: function(pointer) {
          return fabric3.util.transformPoint(pointer, fabric3.util.invertTransform(this.viewportTransform));
        },
        getPointer: function(e, ignoreZoom) {
          if (this._absolutePointer && !ignoreZoom) {
            return this._absolutePointer;
          }
          if (this._pointer && ignoreZoom) {
            return this._pointer;
          }
          var pointer = getPointer(e), upperCanvasEl = this.upperCanvasEl, bounds = upperCanvasEl.getBoundingClientRect(), boundsWidth = bounds.width || 0, boundsHeight = bounds.height || 0, cssScale;
          if (!boundsWidth || !boundsHeight) {
            if ("top" in bounds && "bottom" in bounds) {
              boundsHeight = Math.abs(bounds.top - bounds.bottom);
            }
            if ("right" in bounds && "left" in bounds) {
              boundsWidth = Math.abs(bounds.right - bounds.left);
            }
          }
          this.calcOffset();
          pointer.x = pointer.x - this._offset.left;
          pointer.y = pointer.y - this._offset.top;
          if (!ignoreZoom) {
            pointer = this.restorePointerVpt(pointer);
          }
          var retinaScaling = this.getRetinaScaling();
          if (retinaScaling !== 1) {
            pointer.x /= retinaScaling;
            pointer.y /= retinaScaling;
          }
          if (boundsWidth === 0 || boundsHeight === 0) {
            cssScale = {width: 1, height: 1};
          } else {
            cssScale = {
              width: upperCanvasEl.width / boundsWidth,
              height: upperCanvasEl.height / boundsHeight
            };
          }
          return {
            x: pointer.x * cssScale.width,
            y: pointer.y * cssScale.height
          };
        },
        _createUpperCanvas: function() {
          var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\s*lower-canvas\s*/, ""), lowerCanvasEl = this.lowerCanvasEl, upperCanvasEl = this.upperCanvasEl;
          if (upperCanvasEl) {
            upperCanvasEl.className = "";
          } else {
            upperCanvasEl = this._createCanvasElement();
            this.upperCanvasEl = upperCanvasEl;
          }
          fabric3.util.addClass(upperCanvasEl, "upper-canvas " + lowerCanvasClass);
          this.wrapperEl.appendChild(upperCanvasEl);
          this._copyCanvasStyle(lowerCanvasEl, upperCanvasEl);
          this._applyCanvasStyle(upperCanvasEl);
          this.contextTop = upperCanvasEl.getContext("2d");
        },
        _createCacheCanvas: function() {
          this.cacheCanvasEl = this._createCanvasElement();
          this.cacheCanvasEl.setAttribute("width", this.width);
          this.cacheCanvasEl.setAttribute("height", this.height);
          this.contextCache = this.cacheCanvasEl.getContext("2d");
        },
        _initWrapperElement: function() {
          this.wrapperEl = fabric3.util.wrapElement(this.lowerCanvasEl, "div", {
            class: this.containerClass
          });
          fabric3.util.setStyle(this.wrapperEl, {
            width: this.width + "px",
            height: this.height + "px",
            position: "relative"
          });
          fabric3.util.makeElementUnselectable(this.wrapperEl);
        },
        _applyCanvasStyle: function(element) {
          var width = this.width || element.width, height = this.height || element.height;
          fabric3.util.setStyle(element, {
            position: "absolute",
            width: width + "px",
            height: height + "px",
            left: 0,
            top: 0,
            "touch-action": this.allowTouchScrolling ? "manipulation" : "none",
            "-ms-touch-action": this.allowTouchScrolling ? "manipulation" : "none"
          });
          element.width = width;
          element.height = height;
          fabric3.util.makeElementUnselectable(element);
        },
        _copyCanvasStyle: function(fromEl, toEl) {
          toEl.style.cssText = fromEl.style.cssText;
        },
        getSelectionContext: function() {
          return this.contextTop;
        },
        getSelectionElement: function() {
          return this.upperCanvasEl;
        },
        getActiveObject: function() {
          return this._activeObject;
        },
        getActiveObjects: function() {
          var active = this._activeObject;
          if (active) {
            if (active.type === "activeSelection" && active._objects) {
              return active._objects.slice(0);
            } else {
              return [active];
            }
          }
          return [];
        },
        _onObjectRemoved: function(obj) {
          if (obj === this._activeObject) {
            this.fire("before:selection:cleared", {target: obj});
            this._discardActiveObject();
            this.fire("selection:cleared", {target: obj});
            obj.fire("deselected");
          }
          if (obj === this._hoveredTarget) {
            this._hoveredTarget = null;
            this._hoveredTargets = [];
          }
          this.callSuper("_onObjectRemoved", obj);
        },
        _fireSelectionEvents: function(oldObjects, e) {
          var somethingChanged = false, objects = this.getActiveObjects(), added = [], removed = [], opt = {e};
          oldObjects.forEach(function(oldObject) {
            if (objects.indexOf(oldObject) === -1) {
              somethingChanged = true;
              oldObject.fire("deselected", opt);
              removed.push(oldObject);
            }
          });
          objects.forEach(function(object) {
            if (oldObjects.indexOf(object) === -1) {
              somethingChanged = true;
              object.fire("selected", opt);
              added.push(object);
            }
          });
          if (oldObjects.length > 0 && objects.length > 0) {
            opt.selected = added;
            opt.deselected = removed;
            opt.updated = added[0] || removed[0];
            opt.target = this._activeObject;
            somethingChanged && this.fire("selection:updated", opt);
          } else if (objects.length > 0) {
            opt.selected = added;
            opt.target = this._activeObject;
            this.fire("selection:created", opt);
          } else if (oldObjects.length > 0) {
            opt.deselected = removed;
            this.fire("selection:cleared", opt);
          }
        },
        setActiveObject: function(object, e) {
          var currentActives = this.getActiveObjects();
          this._setActiveObject(object, e);
          this._fireSelectionEvents(currentActives, e);
          return this;
        },
        _setActiveObject: function(object, e) {
          if (this._activeObject === object) {
            return false;
          }
          if (!this._discardActiveObject(e, object)) {
            return false;
          }
          if (object.onSelect({e})) {
            return false;
          }
          this._activeObject = object;
          return true;
        },
        _discardActiveObject: function(e, object) {
          var obj = this._activeObject;
          if (obj) {
            if (obj.onDeselect({e, object})) {
              return false;
            }
            this._activeObject = null;
          }
          return true;
        },
        discardActiveObject: function(e) {
          var currentActives = this.getActiveObjects(), activeObject = this.getActiveObject();
          if (currentActives.length) {
            this.fire("before:selection:cleared", {target: activeObject, e});
          }
          this._discardActiveObject(e);
          this._fireSelectionEvents(currentActives, e);
          return this;
        },
        dispose: function() {
          var wrapper = this.wrapperEl;
          this.removeListeners();
          wrapper.removeChild(this.upperCanvasEl);
          wrapper.removeChild(this.lowerCanvasEl);
          this.contextCache = null;
          this.contextTop = null;
          ["upperCanvasEl", "cacheCanvasEl"].forEach(function(element) {
            fabric3.util.cleanUpJsdomNode(this[element]);
            this[element] = void 0;
          }.bind(this));
          if (wrapper.parentNode) {
            wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);
          }
          delete this.wrapperEl;
          fabric3.StaticCanvas.prototype.dispose.call(this);
          return this;
        },
        clear: function() {
          this.discardActiveObject();
          this.clearContext(this.contextTop);
          return this.callSuper("clear");
        },
        drawControls: function(ctx) {
          var activeObject = this._activeObject;
          if (activeObject) {
            activeObject._renderControls(ctx);
          }
        },
        _toObject: function(instance, methodName, propertiesToInclude) {
          var originalProperties = this._realizeGroupTransformOnObject(instance), object = this.callSuper("_toObject", instance, methodName, propertiesToInclude);
          this._unwindGroupTransformOnObject(instance, originalProperties);
          return object;
        },
        _realizeGroupTransformOnObject: function(instance) {
          if (instance.group && instance.group.type === "activeSelection" && this._activeObject === instance.group) {
            var layoutProps = ["angle", "flipX", "flipY", "left", "scaleX", "scaleY", "skewX", "skewY", "top"];
            var originalValues = {};
            layoutProps.forEach(function(prop2) {
              originalValues[prop2] = instance[prop2];
            });
            this._activeObject.realizeTransform(instance);
            return originalValues;
          } else {
            return null;
          }
        },
        _unwindGroupTransformOnObject: function(instance, originalValues) {
          if (originalValues) {
            instance.set(originalValues);
          }
        },
        _setSVGObject: function(markup, instance, reviver) {
          var originalProperties = this._realizeGroupTransformOnObject(instance);
          this.callSuper("_setSVGObject", markup, instance, reviver);
          this._unwindGroupTransformOnObject(instance, originalProperties);
        },
        setViewportTransform: function(vpt) {
          if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {
            this._activeObject.clearContextTop();
          }
          fabric3.StaticCanvas.prototype.setViewportTransform.call(this, vpt);
        }
      });
      for (var prop in fabric3.StaticCanvas) {
        if (prop !== "prototype") {
          fabric3.Canvas[prop] = fabric3.StaticCanvas[prop];
        }
      }
    })();
    (function() {
      var addListener = fabric3.util.addListener, removeListener = fabric3.util.removeListener, RIGHT_CLICK = 3, MIDDLE_CLICK = 2, LEFT_CLICK = 1, addEventOptions = {passive: false};
      function checkClick(e, value) {
        return e.button && e.button === value - 1;
      }
      fabric3.util.object.extend(fabric3.Canvas.prototype, {
        mainTouchId: null,
        _initEventListeners: function() {
          this.removeListeners();
          this._bindEvents();
          this.addOrRemove(addListener, "add");
        },
        _getEventPrefix: function() {
          return this.enablePointerEvents ? "pointer" : "mouse";
        },
        addOrRemove: function(functor, eventjsFunctor) {
          var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();
          functor(fabric3.window, "resize", this._onResize);
          functor(canvasElement, eventTypePrefix + "down", this._onMouseDown);
          functor(canvasElement, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
          functor(canvasElement, eventTypePrefix + "out", this._onMouseOut);
          functor(canvasElement, eventTypePrefix + "enter", this._onMouseEnter);
          functor(canvasElement, "wheel", this._onMouseWheel);
          functor(canvasElement, "contextmenu", this._onContextMenu);
          functor(canvasElement, "dblclick", this._onDoubleClick);
          functor(canvasElement, "dragover", this._onDragOver);
          functor(canvasElement, "dragenter", this._onDragEnter);
          functor(canvasElement, "dragleave", this._onDragLeave);
          functor(canvasElement, "drop", this._onDrop);
          if (!this.enablePointerEvents) {
            functor(canvasElement, "touchstart", this._onTouchStart, addEventOptions);
          }
          if (typeof eventjs !== "undefined" && eventjsFunctor in eventjs) {
            eventjs[eventjsFunctor](canvasElement, "gesture", this._onGesture);
            eventjs[eventjsFunctor](canvasElement, "drag", this._onDrag);
            eventjs[eventjsFunctor](canvasElement, "orientation", this._onOrientationChange);
            eventjs[eventjsFunctor](canvasElement, "shake", this._onShake);
            eventjs[eventjsFunctor](canvasElement, "longpress", this._onLongPress);
          }
        },
        removeListeners: function() {
          this.addOrRemove(removeListener, "remove");
          var eventTypePrefix = this._getEventPrefix();
          removeListener(fabric3.document, eventTypePrefix + "up", this._onMouseUp);
          removeListener(fabric3.document, "touchend", this._onTouchEnd, addEventOptions);
          removeListener(fabric3.document, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
          removeListener(fabric3.document, "touchmove", this._onMouseMove, addEventOptions);
        },
        _bindEvents: function() {
          if (this.eventsBound) {
            return;
          }
          this._onMouseDown = this._onMouseDown.bind(this);
          this._onTouchStart = this._onTouchStart.bind(this);
          this._onMouseMove = this._onMouseMove.bind(this);
          this._onMouseUp = this._onMouseUp.bind(this);
          this._onTouchEnd = this._onTouchEnd.bind(this);
          this._onResize = this._onResize.bind(this);
          this._onGesture = this._onGesture.bind(this);
          this._onDrag = this._onDrag.bind(this);
          this._onShake = this._onShake.bind(this);
          this._onLongPress = this._onLongPress.bind(this);
          this._onOrientationChange = this._onOrientationChange.bind(this);
          this._onMouseWheel = this._onMouseWheel.bind(this);
          this._onMouseOut = this._onMouseOut.bind(this);
          this._onMouseEnter = this._onMouseEnter.bind(this);
          this._onContextMenu = this._onContextMenu.bind(this);
          this._onDoubleClick = this._onDoubleClick.bind(this);
          this._onDragOver = this._onDragOver.bind(this);
          this._onDragEnter = this._simpleEventHandler.bind(this, "dragenter");
          this._onDragLeave = this._simpleEventHandler.bind(this, "dragleave");
          this._onDrop = this._simpleEventHandler.bind(this, "drop");
          this.eventsBound = true;
        },
        _onGesture: function(e, self2) {
          this.__onTransformGesture && this.__onTransformGesture(e, self2);
        },
        _onDrag: function(e, self2) {
          this.__onDrag && this.__onDrag(e, self2);
        },
        _onMouseWheel: function(e) {
          this.__onMouseWheel(e);
        },
        _onMouseOut: function(e) {
          var target = this._hoveredTarget;
          this.fire("mouse:out", {target, e});
          this._hoveredTarget = null;
          target && target.fire("mouseout", {e});
          var _this = this;
          this._hoveredTargets.forEach(function(_target2) {
            _this.fire("mouse:out", {target, e});
            _target2 && target.fire("mouseout", {e});
          });
          this._hoveredTargets = [];
          if (this._iTextInstances) {
            this._iTextInstances.forEach(function(obj) {
              if (obj.isEditing) {
                obj.hiddenTextarea.focus();
              }
            });
          }
        },
        _onMouseEnter: function(e) {
          if (!this._currentTransform && !this.findTarget(e)) {
            this.fire("mouse:over", {target: null, e});
            this._hoveredTarget = null;
            this._hoveredTargets = [];
          }
        },
        _onOrientationChange: function(e, self2) {
          this.__onOrientationChange && this.__onOrientationChange(e, self2);
        },
        _onShake: function(e, self2) {
          this.__onShake && this.__onShake(e, self2);
        },
        _onLongPress: function(e, self2) {
          this.__onLongPress && this.__onLongPress(e, self2);
        },
        _onDragOver: function(e) {
          e.preventDefault();
          var target = this._simpleEventHandler("dragover", e);
          this._fireEnterLeaveEvents(target, e);
        },
        _onContextMenu: function(e) {
          if (this.stopContextMenu) {
            e.stopPropagation();
            e.preventDefault();
          }
          return false;
        },
        _onDoubleClick: function(e) {
          this._cacheTransformEventData(e);
          this._handleEvent(e, "dblclick");
          this._resetTransformEventData(e);
        },
        getPointerId: function(evt) {
          var changedTouches = evt.changedTouches;
          if (changedTouches) {
            return changedTouches[0] && changedTouches[0].identifier;
          }
          if (this.enablePointerEvents) {
            return evt.pointerId;
          }
          return -1;
        },
        _isMainEvent: function(evt) {
          if (evt.isPrimary === true) {
            return true;
          }
          if (evt.isPrimary === false) {
            return false;
          }
          if (evt.type === "touchend" && evt.touches.length === 0) {
            return true;
          }
          if (evt.changedTouches) {
            return evt.changedTouches[0].identifier === this.mainTouchId;
          }
          return true;
        },
        _onTouchStart: function(e) {
          e.preventDefault();
          if (this.mainTouchId === null) {
            this.mainTouchId = this.getPointerId(e);
          }
          this.__onMouseDown(e);
          this._resetTransformEventData();
          var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();
          addListener(fabric3.document, "touchend", this._onTouchEnd, addEventOptions);
          addListener(fabric3.document, "touchmove", this._onMouseMove, addEventOptions);
          removeListener(canvasElement, eventTypePrefix + "down", this._onMouseDown);
        },
        _onMouseDown: function(e) {
          this.__onMouseDown(e);
          this._resetTransformEventData();
          var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();
          removeListener(canvasElement, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
          addListener(fabric3.document, eventTypePrefix + "up", this._onMouseUp);
          addListener(fabric3.document, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
        },
        _onTouchEnd: function(e) {
          if (e.touches.length > 0) {
            return;
          }
          this.__onMouseUp(e);
          this._resetTransformEventData();
          this.mainTouchId = null;
          var eventTypePrefix = this._getEventPrefix();
          removeListener(fabric3.document, "touchend", this._onTouchEnd, addEventOptions);
          removeListener(fabric3.document, "touchmove", this._onMouseMove, addEventOptions);
          var _this = this;
          if (this._willAddMouseDown) {
            clearTimeout(this._willAddMouseDown);
          }
          this._willAddMouseDown = setTimeout(function() {
            addListener(_this.upperCanvasEl, eventTypePrefix + "down", _this._onMouseDown);
            _this._willAddMouseDown = 0;
          }, 400);
        },
        _onMouseUp: function(e) {
          this.__onMouseUp(e);
          this._resetTransformEventData();
          var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();
          if (this._isMainEvent(e)) {
            removeListener(fabric3.document, eventTypePrefix + "up", this._onMouseUp);
            removeListener(fabric3.document, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
            addListener(canvasElement, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
          }
        },
        _onMouseMove: function(e) {
          !this.allowTouchScrolling && e.preventDefault && e.preventDefault();
          this.__onMouseMove(e);
        },
        _onResize: function() {
          this.calcOffset();
        },
        _shouldRender: function(target) {
          var activeObject = this._activeObject;
          if (!!activeObject !== !!target || activeObject && target && activeObject !== target) {
            return true;
          } else if (activeObject && activeObject.isEditing) {
            return false;
          }
          return false;
        },
        __onMouseUp: function(e) {
          var target, transform = this._currentTransform, groupSelector = this._groupSelector, shouldRender = false, isClick = !groupSelector || groupSelector.left === 0 && groupSelector.top === 0;
          this._cacheTransformEventData(e);
          target = this._target;
          this._handleEvent(e, "up:before");
          if (checkClick(e, RIGHT_CLICK)) {
            if (this.fireRightClick) {
              this._handleEvent(e, "up", RIGHT_CLICK, isClick);
            }
            return;
          }
          if (checkClick(e, MIDDLE_CLICK)) {
            if (this.fireMiddleClick) {
              this._handleEvent(e, "up", MIDDLE_CLICK, isClick);
            }
            this._resetTransformEventData();
            return;
          }
          if (this.isDrawingMode && this._isCurrentlyDrawing) {
            this._onMouseUpInDrawingMode(e);
            return;
          }
          if (!this._isMainEvent(e)) {
            return;
          }
          if (transform) {
            this._finalizeCurrentTransform(e);
            shouldRender = transform.actionPerformed;
          }
          if (!isClick) {
            var targetWasActive = target === this._activeObject;
            this._maybeGroupObjects(e);
            if (!shouldRender) {
              shouldRender = this._shouldRender(target) || !targetWasActive && target === this._activeObject;
            }
          }
          if (target) {
            var corner = target._findTargetCorner(this.getPointer(e, true), fabric3.util.isTouchEvent(e));
            var control = target.controls[corner], mouseUpHandler = control && control.getMouseUpHandler(e, target, control);
            if (mouseUpHandler) {
              mouseUpHandler(e, target, control);
            }
            target.isMoving = false;
          }
          this._setCursorFromEvent(e, target);
          this._handleEvent(e, "up", LEFT_CLICK, isClick);
          this._groupSelector = null;
          this._currentTransform = null;
          target && (target.__corner = 0);
          if (shouldRender) {
            this.requestRenderAll();
          } else if (!isClick) {
            this.renderTop();
          }
        },
        _simpleEventHandler: function(eventType, e) {
          var target = this.findTarget(e), targets = this.targets, options = {
            e,
            target,
            subTargets: targets
          };
          this.fire(eventType, options);
          target && target.fire(eventType, options);
          if (!targets) {
            return target;
          }
          for (var i = 0; i < targets.length; i++) {
            targets[i].fire(eventType, options);
          }
          return target;
        },
        _handleEvent: function(e, eventType, button, isClick) {
          var target = this._target, targets = this.targets || [], options = {
            e,
            target,
            subTargets: targets,
            button: button || LEFT_CLICK,
            isClick: isClick || false,
            pointer: this._pointer,
            absolutePointer: this._absolutePointer,
            transform: this._currentTransform
          };
          if (eventType === "up") {
            options.currentTarget = this.findTarget(e);
            options.currentSubTargets = this.targets;
          }
          this.fire("mouse:" + eventType, options);
          target && target.fire("mouse" + eventType, options);
          for (var i = 0; i < targets.length; i++) {
            targets[i].fire("mouse" + eventType, options);
          }
        },
        _finalizeCurrentTransform: function(e) {
          var transform = this._currentTransform, target = transform.target, eventName, options = {
            e,
            target,
            transform,
            action: transform.action
          };
          if (target._scaling) {
            target._scaling = false;
          }
          target.setCoords();
          if (transform.actionPerformed || this.stateful && target.hasStateChanged()) {
            if (transform.actionPerformed) {
              eventName = this._addEventOptions(options, transform);
              this._fire(eventName, options);
            }
            this._fire("modified", options);
          }
        },
        _addEventOptions: function(options, transform) {
          var eventName, by;
          switch (transform.action) {
            case "scaleX":
              eventName = "scaled";
              by = "x";
              break;
            case "scaleY":
              eventName = "scaled";
              by = "y";
              break;
            case "skewX":
              eventName = "skewed";
              by = "x";
              break;
            case "skewY":
              eventName = "skewed";
              by = "y";
              break;
            case "scale":
              eventName = "scaled";
              by = "equally";
              break;
            case "rotate":
              eventName = "rotated";
              break;
            case "drag":
              eventName = "moved";
              break;
          }
          options.by = by;
          return eventName;
        },
        _onMouseDownInDrawingMode: function(e) {
          this._isCurrentlyDrawing = true;
          if (this.getActiveObject()) {
            this.discardActiveObject(e).requestRenderAll();
          }
          var pointer = this.getPointer(e);
          this.freeDrawingBrush.onMouseDown(pointer, {e, pointer});
          this._handleEvent(e, "down");
        },
        _onMouseMoveInDrawingMode: function(e) {
          if (this._isCurrentlyDrawing) {
            var pointer = this.getPointer(e);
            this.freeDrawingBrush.onMouseMove(pointer, {e, pointer});
          }
          this.setCursor(this.freeDrawingCursor);
          this._handleEvent(e, "move");
        },
        _onMouseUpInDrawingMode: function(e) {
          var pointer = this.getPointer(e);
          this._isCurrentlyDrawing = this.freeDrawingBrush.onMouseUp({e, pointer});
          this._handleEvent(e, "up");
        },
        __onMouseDown: function(e) {
          this._cacheTransformEventData(e);
          this._handleEvent(e, "down:before");
          var target = this._target;
          if (checkClick(e, RIGHT_CLICK)) {
            if (this.fireRightClick) {
              this._handleEvent(e, "down", RIGHT_CLICK);
            }
            return;
          }
          if (checkClick(e, MIDDLE_CLICK)) {
            if (this.fireMiddleClick) {
              this._handleEvent(e, "down", MIDDLE_CLICK);
            }
            return;
          }
          if (this.isDrawingMode) {
            this._onMouseDownInDrawingMode(e);
            return;
          }
          if (!this._isMainEvent(e)) {
            return;
          }
          if (this._currentTransform) {
            return;
          }
          var pointer = this._pointer;
          this._previousPointer = pointer;
          var shouldRender = this._shouldRender(target), shouldGroup = this._shouldGroup(e, target);
          if (this._shouldClearSelection(e, target)) {
            this.discardActiveObject(e);
          } else if (shouldGroup) {
            this._handleGrouping(e, target);
            target = this._activeObject;
          }
          if (this.selection && (!target || !target.selectable && !target.isEditing && target !== this._activeObject)) {
            this._groupSelector = {
              ex: pointer.x,
              ey: pointer.y,
              top: 0,
              left: 0
            };
          }
          if (target) {
            var alreadySelected = target === this._activeObject;
            if (target.selectable) {
              this.setActiveObject(target, e);
            }
            var corner = target._findTargetCorner(this.getPointer(e, true), fabric3.util.isTouchEvent(e));
            target.__corner = corner;
            if (target === this._activeObject && (corner || !shouldGroup)) {
              var control = target.controls[corner], mouseDownHandler = control && control.getMouseDownHandler(e, target, control);
              if (mouseDownHandler) {
                mouseDownHandler(e, target, control);
              }
              this._setupCurrentTransform(e, target, alreadySelected);
            }
          }
          this._handleEvent(e, "down");
          (shouldRender || shouldGroup) && this.requestRenderAll();
        },
        _resetTransformEventData: function() {
          this._target = null;
          this._pointer = null;
          this._absolutePointer = null;
        },
        _cacheTransformEventData: function(e) {
          this._resetTransformEventData();
          this._pointer = this.getPointer(e, true);
          this._absolutePointer = this.restorePointerVpt(this._pointer);
          this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e) || null;
        },
        _beforeTransform: function(e) {
          var t = this._currentTransform;
          this.stateful && t.target.saveState();
          this.fire("before:transform", {
            e,
            transform: t
          });
        },
        __onMouseMove: function(e) {
          this._handleEvent(e, "move:before");
          this._cacheTransformEventData(e);
          var target, pointer;
          if (this.isDrawingMode) {
            this._onMouseMoveInDrawingMode(e);
            return;
          }
          if (!this._isMainEvent(e)) {
            return;
          }
          var groupSelector = this._groupSelector;
          if (groupSelector) {
            pointer = this._pointer;
            groupSelector.left = pointer.x - groupSelector.ex;
            groupSelector.top = pointer.y - groupSelector.ey;
            this.renderTop();
          } else if (!this._currentTransform) {
            target = this.findTarget(e) || null;
            this._setCursorFromEvent(e, target);
            this._fireOverOutEvents(target, e);
          } else {
            this._transformObject(e);
          }
          this._handleEvent(e, "move");
          this._resetTransformEventData();
        },
        _fireOverOutEvents: function(target, e) {
          var _hoveredTarget = this._hoveredTarget, _hoveredTargets = this._hoveredTargets, targets = this.targets, length = Math.max(_hoveredTargets.length, targets.length);
          this.fireSyntheticInOutEvents(target, e, {
            oldTarget: _hoveredTarget,
            evtOut: "mouseout",
            canvasEvtOut: "mouse:out",
            evtIn: "mouseover",
            canvasEvtIn: "mouse:over"
          });
          for (var i = 0; i < length; i++) {
            this.fireSyntheticInOutEvents(targets[i], e, {
              oldTarget: _hoveredTargets[i],
              evtOut: "mouseout",
              evtIn: "mouseover"
            });
          }
          this._hoveredTarget = target;
          this._hoveredTargets = this.targets.concat();
        },
        _fireEnterLeaveEvents: function(target, e) {
          var _draggedoverTarget = this._draggedoverTarget, _hoveredTargets = this._hoveredTargets, targets = this.targets, length = Math.max(_hoveredTargets.length, targets.length);
          this.fireSyntheticInOutEvents(target, e, {
            oldTarget: _draggedoverTarget,
            evtOut: "dragleave",
            evtIn: "dragenter"
          });
          for (var i = 0; i < length; i++) {
            this.fireSyntheticInOutEvents(targets[i], e, {
              oldTarget: _hoveredTargets[i],
              evtOut: "dragleave",
              evtIn: "dragenter"
            });
          }
          this._draggedoverTarget = target;
        },
        fireSyntheticInOutEvents: function(target, e, config) {
          var inOpt, outOpt, oldTarget = config.oldTarget, outFires, inFires, targetChanged = oldTarget !== target, canvasEvtIn = config.canvasEvtIn, canvasEvtOut = config.canvasEvtOut;
          if (targetChanged) {
            inOpt = {e, target, previousTarget: oldTarget};
            outOpt = {e, target: oldTarget, nextTarget: target};
          }
          inFires = target && targetChanged;
          outFires = oldTarget && targetChanged;
          if (outFires) {
            canvasEvtOut && this.fire(canvasEvtOut, outOpt);
            oldTarget.fire(config.evtOut, outOpt);
          }
          if (inFires) {
            canvasEvtIn && this.fire(canvasEvtIn, inOpt);
            target.fire(config.evtIn, inOpt);
          }
        },
        __onMouseWheel: function(e) {
          this._cacheTransformEventData(e);
          this._handleEvent(e, "wheel");
          this._resetTransformEventData();
        },
        _transformObject: function(e) {
          var pointer = this.getPointer(e), transform = this._currentTransform;
          transform.reset = false;
          transform.target.isMoving = true;
          transform.shiftKey = e.shiftKey;
          transform.altKey = e[this.centeredKey];
          this._performTransformAction(e, transform, pointer);
          transform.actionPerformed && this.requestRenderAll();
        },
        _performTransformAction: function(e, transform, pointer) {
          var x = pointer.x, y = pointer.y, action2 = transform.action, actionPerformed = false, actionHandler = transform.actionHandler;
          if (actionHandler) {
            actionPerformed = actionHandler(e, transform, x, y);
          }
          if (action2 === "drag" && actionPerformed) {
            this.setCursor(transform.target.moveCursor || this.moveCursor);
          }
          transform.actionPerformed = transform.actionPerformed || actionPerformed;
        },
        _fire: fabric3.controlsUtils.fireEvent,
        _setCursorFromEvent: function(e, target) {
          if (!target) {
            this.setCursor(this.defaultCursor);
            return false;
          }
          var hoverCursor = target.hoverCursor || this.hoverCursor, activeSelection = this._activeObject && this._activeObject.type === "activeSelection" ? this._activeObject : null, corner = (!activeSelection || !activeSelection.contains(target)) && target._findTargetCorner(this.getPointer(e, true));
          if (!corner) {
            if (target.subTargetCheck) {
              this.targets.concat().reverse().map(function(_target2) {
                hoverCursor = _target2.hoverCursor || hoverCursor;
              });
            }
            this.setCursor(hoverCursor);
          } else {
            this.setCursor(this.getCornerCursor(corner, target, e));
          }
        },
        getCornerCursor: function(corner, target, e) {
          var control = target.controls[corner];
          return control.cursorStyleHandler(e, control, target);
        }
      });
    })();
    (function() {
      var min = Math.min, max = Math.max;
      fabric3.util.object.extend(fabric3.Canvas.prototype, {
        _shouldGroup: function(e, target) {
          var activeObject = this._activeObject;
          return activeObject && this._isSelectionKeyPressed(e) && target && target.selectable && this.selection && (activeObject !== target || activeObject.type === "activeSelection") && !target.onSelect({e});
        },
        _handleGrouping: function(e, target) {
          var activeObject = this._activeObject;
          if (activeObject.__corner) {
            return;
          }
          if (target === activeObject) {
            target = this.findTarget(e, true);
            if (!target || !target.selectable) {
              return;
            }
          }
          if (activeObject && activeObject.type === "activeSelection") {
            this._updateActiveSelection(target, e);
          } else {
            this._createActiveSelection(target, e);
          }
        },
        _updateActiveSelection: function(target, e) {
          var activeSelection = this._activeObject, currentActiveObjects = activeSelection._objects.slice(0);
          if (activeSelection.contains(target)) {
            activeSelection.removeWithUpdate(target);
            this._hoveredTarget = target;
            this._hoveredTargets = this.targets.concat();
            if (activeSelection.size() === 1) {
              this._setActiveObject(activeSelection.item(0), e);
            }
          } else {
            activeSelection.addWithUpdate(target);
            this._hoveredTarget = activeSelection;
            this._hoveredTargets = this.targets.concat();
          }
          this._fireSelectionEvents(currentActiveObjects, e);
        },
        _createActiveSelection: function(target, e) {
          var currentActives = this.getActiveObjects(), group2 = this._createGroup(target);
          this._hoveredTarget = group2;
          this._setActiveObject(group2, e);
          this._fireSelectionEvents(currentActives, e);
        },
        _createGroup: function(target) {
          var objects = this._objects, isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target), groupObjects = isActiveLower ? [this._activeObject, target] : [target, this._activeObject];
          this._activeObject.isEditing && this._activeObject.exitEditing();
          return new fabric3.ActiveSelection(groupObjects, {
            canvas: this
          });
        },
        _groupSelectedObjects: function(e) {
          var group2 = this._collectObjects(e), aGroup;
          if (group2.length === 1) {
            this.setActiveObject(group2[0], e);
          } else if (group2.length > 1) {
            aGroup = new fabric3.ActiveSelection(group2.reverse(), {
              canvas: this
            });
            this.setActiveObject(aGroup, e);
          }
        },
        _collectObjects: function(e) {
          var group2 = [], currentObject, x1 = this._groupSelector.ex, y1 = this._groupSelector.ey, x2 = x1 + this._groupSelector.left, y2 = y1 + this._groupSelector.top, selectionX1Y1 = new fabric3.Point(min(x1, x2), min(y1, y2)), selectionX2Y2 = new fabric3.Point(max(x1, x2), max(y1, y2)), allowIntersect = !this.selectionFullyContained, isClick = x1 === x2 && y1 === y2;
          for (var i = this._objects.length; i--; ) {
            currentObject = this._objects[i];
            if (!currentObject || !currentObject.selectable || !currentObject.visible) {
              continue;
            }
            if (allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2) || currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2) || allowIntersect && currentObject.containsPoint(selectionX1Y1) || allowIntersect && currentObject.containsPoint(selectionX2Y2)) {
              group2.push(currentObject);
              if (isClick) {
                break;
              }
            }
          }
          if (group2.length > 1) {
            group2 = group2.filter(function(object) {
              return !object.onSelect({e});
            });
          }
          return group2;
        },
        _maybeGroupObjects: function(e) {
          if (this.selection && this._groupSelector) {
            this._groupSelectedObjects(e);
          }
          this.setCursor(this.defaultCursor);
          this._groupSelector = null;
        }
      });
    })();
    (function() {
      fabric3.util.object.extend(fabric3.StaticCanvas.prototype, {
        toDataURL: function(options) {
          options || (options = {});
          var format = options.format || "png", quality = options.quality || 1, multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? this.getRetinaScaling() : 1), canvasEl = this.toCanvasElement(multiplier, options);
          return fabric3.util.toDataURL(canvasEl, format, quality);
        },
        toCanvasElement: function(multiplier, cropping) {
          multiplier = multiplier || 1;
          cropping = cropping || {};
          var scaledWidth = (cropping.width || this.width) * multiplier, scaledHeight = (cropping.height || this.height) * multiplier, zoom = this.getZoom(), originalWidth = this.width, originalHeight = this.height, newZoom = zoom * multiplier, vp = this.viewportTransform, translateX = (vp[4] - (cropping.left || 0)) * multiplier, translateY = (vp[5] - (cropping.top || 0)) * multiplier, originalInteractive = this.interactive, newVp = [newZoom, 0, 0, newZoom, translateX, translateY], originalRetina = this.enableRetinaScaling, canvasEl = fabric3.util.createCanvasElement(), originalContextTop = this.contextTop;
          canvasEl.width = scaledWidth;
          canvasEl.height = scaledHeight;
          this.contextTop = null;
          this.enableRetinaScaling = false;
          this.interactive = false;
          this.viewportTransform = newVp;
          this.width = scaledWidth;
          this.height = scaledHeight;
          this.calcViewportBoundaries();
          this.renderCanvas(canvasEl.getContext("2d"), this._objects);
          this.viewportTransform = vp;
          this.width = originalWidth;
          this.height = originalHeight;
          this.calcViewportBoundaries();
          this.interactive = originalInteractive;
          this.enableRetinaScaling = originalRetina;
          this.contextTop = originalContextTop;
          return canvasEl;
        }
      });
    })();
    fabric3.util.object.extend(fabric3.StaticCanvas.prototype, {
      loadFromJSON: function(json, callback, reviver) {
        if (!json) {
          return;
        }
        var serialized = typeof json === "string" ? JSON.parse(json) : fabric3.util.object.clone(json);
        var _this = this, clipPath = serialized.clipPath, renderOnAddRemove = this.renderOnAddRemove;
        this.renderOnAddRemove = false;
        delete serialized.clipPath;
        this._enlivenObjects(serialized.objects, function(enlivenedObjects) {
          _this.clear();
          _this._setBgOverlay(serialized, function() {
            if (clipPath) {
              _this._enlivenObjects([clipPath], function(enlivenedCanvasClip) {
                _this.clipPath = enlivenedCanvasClip[0];
                _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);
              });
            } else {
              _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);
            }
          });
        }, reviver);
        return this;
      },
      __setupCanvas: function(serialized, enlivenedObjects, renderOnAddRemove, callback) {
        var _this = this;
        enlivenedObjects.forEach(function(obj, index) {
          _this.insertAt(obj, index);
        });
        this.renderOnAddRemove = renderOnAddRemove;
        delete serialized.objects;
        delete serialized.backgroundImage;
        delete serialized.overlayImage;
        delete serialized.background;
        delete serialized.overlay;
        this._setOptions(serialized);
        this.renderAll();
        callback && callback();
      },
      _setBgOverlay: function(serialized, callback) {
        var loaded = {
          backgroundColor: false,
          overlayColor: false,
          backgroundImage: false,
          overlayImage: false
        };
        if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {
          callback && callback();
          return;
        }
        var cbIfLoaded = function() {
          if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {
            callback && callback();
          }
        };
        this.__setBgOverlay("backgroundImage", serialized.backgroundImage, loaded, cbIfLoaded);
        this.__setBgOverlay("overlayImage", serialized.overlayImage, loaded, cbIfLoaded);
        this.__setBgOverlay("backgroundColor", serialized.background, loaded, cbIfLoaded);
        this.__setBgOverlay("overlayColor", serialized.overlay, loaded, cbIfLoaded);
      },
      __setBgOverlay: function(property, value, loaded, callback) {
        var _this = this;
        if (!value) {
          loaded[property] = true;
          callback && callback();
          return;
        }
        if (property === "backgroundImage" || property === "overlayImage") {
          fabric3.util.enlivenObjects([value], function(enlivedObject) {
            _this[property] = enlivedObject[0];
            loaded[property] = true;
            callback && callback();
          });
        } else {
          this["set" + fabric3.util.string.capitalize(property, true)](value, function() {
            loaded[property] = true;
            callback && callback();
          });
        }
      },
      _enlivenObjects: function(objects, callback, reviver) {
        if (!objects || objects.length === 0) {
          callback && callback([]);
          return;
        }
        fabric3.util.enlivenObjects(objects, function(enlivenedObjects) {
          callback && callback(enlivenedObjects);
        }, null, reviver);
      },
      _toDataURL: function(format, callback) {
        this.clone(function(clone) {
          callback(clone.toDataURL(format));
        });
      },
      _toDataURLWithMultiplier: function(format, multiplier, callback) {
        this.clone(function(clone) {
          callback(clone.toDataURLWithMultiplier(format, multiplier));
        });
      },
      clone: function(callback, properties) {
        var data = JSON.stringify(this.toJSON(properties));
        this.cloneWithoutData(function(clone) {
          clone.loadFromJSON(data, function() {
            callback && callback(clone);
          });
        });
      },
      cloneWithoutData: function(callback) {
        var el2 = fabric3.util.createCanvasElement();
        el2.width = this.width;
        el2.height = this.height;
        var clone = new fabric3.Canvas(el2);
        if (this.backgroundImage) {
          clone.setBackgroundImage(this.backgroundImage.src, function() {
            clone.renderAll();
            callback && callback(clone);
          });
          clone.backgroundImageOpacity = this.backgroundImageOpacity;
          clone.backgroundImageStretch = this.backgroundImageStretch;
        } else {
          callback && callback(clone);
        }
      }
    });
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), extend = fabric4.util.object.extend, clone = fabric4.util.object.clone, toFixed = fabric4.util.toFixed, capitalize = fabric4.util.string.capitalize, degreesToRadians = fabric4.util.degreesToRadians, supportsLineDash = fabric4.StaticCanvas.supports("setLineDash"), objectCaching = !fabric4.isLikelyNode, ALIASING_LIMIT = 2;
      if (fabric4.Object) {
        return;
      }
      fabric4.Object = fabric4.util.createClass(fabric4.CommonMethods, {
        type: "object",
        originX: "left",
        originY: "top",
        top: 0,
        left: 0,
        width: 0,
        height: 0,
        scaleX: 1,
        scaleY: 1,
        flipX: false,
        flipY: false,
        opacity: 1,
        angle: 0,
        skewX: 0,
        skewY: 0,
        cornerSize: 13,
        touchCornerSize: 24,
        transparentCorners: true,
        hoverCursor: null,
        moveCursor: null,
        padding: 0,
        borderColor: "rgb(178,204,255)",
        borderDashArray: null,
        cornerColor: "rgb(178,204,255)",
        cornerStrokeColor: null,
        cornerStyle: "rect",
        cornerDashArray: null,
        centeredScaling: false,
        centeredRotation: true,
        fill: "rgb(0,0,0)",
        fillRule: "nonzero",
        globalCompositeOperation: "source-over",
        backgroundColor: "",
        selectionBackgroundColor: "",
        stroke: null,
        strokeWidth: 1,
        strokeDashArray: null,
        strokeDashOffset: 0,
        strokeLineCap: "butt",
        strokeLineJoin: "miter",
        strokeMiterLimit: 4,
        shadow: null,
        borderOpacityWhenMoving: 0.4,
        borderScaleFactor: 1,
        minScaleLimit: 0,
        selectable: true,
        evented: true,
        visible: true,
        hasControls: true,
        hasBorders: true,
        perPixelTargetFind: false,
        includeDefaultValues: true,
        lockMovementX: false,
        lockMovementY: false,
        lockRotation: false,
        lockScalingX: false,
        lockScalingY: false,
        lockSkewingX: false,
        lockSkewingY: false,
        lockScalingFlip: false,
        excludeFromExport: false,
        objectCaching,
        statefullCache: false,
        noScaleCache: true,
        strokeUniform: false,
        dirty: true,
        __corner: 0,
        paintFirst: "fill",
        stateProperties: "top left width height scaleX scaleY flipX flipY originX originY transformMatrix stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit angle opacity fill globalCompositeOperation shadow visible backgroundColor skewX skewY fillRule paintFirst clipPath strokeUniform".split(" "),
        cacheProperties: "fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath".split(" "),
        colorProperties: "fill stroke backgroundColor".split(" "),
        clipPath: void 0,
        inverted: false,
        absolutePositioned: false,
        initialize: function(options) {
          if (options) {
            this.setOptions(options);
          }
        },
        _createCacheCanvas: function() {
          this._cacheProperties = {};
          this._cacheCanvas = fabric4.util.createCanvasElement();
          this._cacheContext = this._cacheCanvas.getContext("2d");
          this._updateCacheCanvas();
          this.dirty = true;
        },
        _limitCacheSize: function(dims) {
          var perfLimitSizeTotal = fabric4.perfLimitSizeTotal, width = dims.width, height = dims.height, max = fabric4.maxCacheSideLimit, min = fabric4.minCacheSideLimit;
          if (width <= max && height <= max && width * height <= perfLimitSizeTotal) {
            if (width < min) {
              dims.width = min;
            }
            if (height < min) {
              dims.height = min;
            }
            return dims;
          }
          var ar = width / height, limitedDims = fabric4.util.limitDimsByArea(ar, perfLimitSizeTotal), capValue = fabric4.util.capValue, x = capValue(min, limitedDims.x, max), y = capValue(min, limitedDims.y, max);
          if (width > x) {
            dims.zoomX /= width / x;
            dims.width = x;
            dims.capped = true;
          }
          if (height > y) {
            dims.zoomY /= height / y;
            dims.height = y;
            dims.capped = true;
          }
          return dims;
        },
        _getCacheCanvasDimensions: function() {
          var objectScale = this.getTotalObjectScaling(), dim = this._getTransformedDimensions(0, 0), neededX = dim.x * objectScale.scaleX / this.scaleX, neededY = dim.y * objectScale.scaleY / this.scaleY;
          return {
            width: neededX + ALIASING_LIMIT,
            height: neededY + ALIASING_LIMIT,
            zoomX: objectScale.scaleX,
            zoomY: objectScale.scaleY,
            x: neededX,
            y: neededY
          };
        },
        _updateCacheCanvas: function() {
          var targetCanvas = this.canvas;
          if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {
            var target = targetCanvas._currentTransform.target, action2 = targetCanvas._currentTransform.action;
            if (this === target && action2.slice && action2.slice(0, 5) === "scale") {
              return false;
            }
          }
          var canvas = this._cacheCanvas, dims = this._limitCacheSize(this._getCacheCanvasDimensions()), minCacheSize = fabric4.minCacheSideLimit, width = dims.width, height = dims.height, drawingWidth, drawingHeight, zoomX = dims.zoomX, zoomY = dims.zoomY, dimensionsChanged = width !== this.cacheWidth || height !== this.cacheHeight, zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY, shouldRedraw = dimensionsChanged || zoomChanged, additionalWidth = 0, additionalHeight = 0, shouldResizeCanvas = false;
          if (dimensionsChanged) {
            var canvasWidth = this._cacheCanvas.width, canvasHeight = this._cacheCanvas.height, sizeGrowing = width > canvasWidth || height > canvasHeight, sizeShrinking = (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) && canvasWidth > minCacheSize && canvasHeight > minCacheSize;
            shouldResizeCanvas = sizeGrowing || sizeShrinking;
            if (sizeGrowing && !dims.capped && (width > minCacheSize || height > minCacheSize)) {
              additionalWidth = width * 0.1;
              additionalHeight = height * 0.1;
            }
          }
          if (shouldRedraw) {
            if (shouldResizeCanvas) {
              canvas.width = Math.ceil(width + additionalWidth);
              canvas.height = Math.ceil(height + additionalHeight);
            } else {
              this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);
              this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);
            }
            drawingWidth = dims.x / 2;
            drawingHeight = dims.y / 2;
            this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;
            this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;
            this.cacheWidth = width;
            this.cacheHeight = height;
            this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);
            this._cacheContext.scale(zoomX, zoomY);
            this.zoomX = zoomX;
            this.zoomY = zoomY;
            return true;
          }
          return false;
        },
        setOptions: function(options) {
          this._setOptions(options);
          this._initGradient(options.fill, "fill");
          this._initGradient(options.stroke, "stroke");
          this._initPattern(options.fill, "fill");
          this._initPattern(options.stroke, "stroke");
        },
        transform: function(ctx) {
          var needFullTransform = this.group && !this.group._transformDone || this.group && this.canvas && ctx === this.canvas.contextTop;
          var m = this.calcTransformMatrix(!needFullTransform);
          ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
        },
        toObject: function(propertiesToInclude) {
          var NUM_FRACTION_DIGITS = fabric4.Object.NUM_FRACTION_DIGITS, object = {
            type: this.type,
            version: fabric4.version,
            originX: this.originX,
            originY: this.originY,
            left: toFixed(this.left, NUM_FRACTION_DIGITS),
            top: toFixed(this.top, NUM_FRACTION_DIGITS),
            width: toFixed(this.width, NUM_FRACTION_DIGITS),
            height: toFixed(this.height, NUM_FRACTION_DIGITS),
            fill: this.fill && this.fill.toObject ? this.fill.toObject() : this.fill,
            stroke: this.stroke && this.stroke.toObject ? this.stroke.toObject() : this.stroke,
            strokeWidth: toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),
            strokeDashArray: this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,
            strokeLineCap: this.strokeLineCap,
            strokeDashOffset: this.strokeDashOffset,
            strokeLineJoin: this.strokeLineJoin,
            strokeMiterLimit: toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),
            scaleX: toFixed(this.scaleX, NUM_FRACTION_DIGITS),
            scaleY: toFixed(this.scaleY, NUM_FRACTION_DIGITS),
            angle: toFixed(this.angle, NUM_FRACTION_DIGITS),
            flipX: this.flipX,
            flipY: this.flipY,
            opacity: toFixed(this.opacity, NUM_FRACTION_DIGITS),
            shadow: this.shadow && this.shadow.toObject ? this.shadow.toObject() : this.shadow,
            visible: this.visible,
            backgroundColor: this.backgroundColor,
            fillRule: this.fillRule,
            paintFirst: this.paintFirst,
            globalCompositeOperation: this.globalCompositeOperation,
            skewX: toFixed(this.skewX, NUM_FRACTION_DIGITS),
            skewY: toFixed(this.skewY, NUM_FRACTION_DIGITS)
          };
          if (this.clipPath) {
            object.clipPath = this.clipPath.toObject(propertiesToInclude);
            object.clipPath.inverted = this.clipPath.inverted;
            object.clipPath.absolutePositioned = this.clipPath.absolutePositioned;
          }
          fabric4.util.populateWithProperties(this, object, propertiesToInclude);
          if (!this.includeDefaultValues) {
            object = this._removeDefaultValues(object);
          }
          return object;
        },
        toDatalessObject: function(propertiesToInclude) {
          return this.toObject(propertiesToInclude);
        },
        _removeDefaultValues: function(object) {
          var prototype = fabric4.util.getKlass(object.type).prototype, stateProperties = prototype.stateProperties;
          stateProperties.forEach(function(prop) {
            if (prop === "left" || prop === "top") {
              return;
            }
            if (object[prop] === prototype[prop]) {
              delete object[prop];
            }
            var isArray = Object.prototype.toString.call(object[prop]) === "[object Array]" && Object.prototype.toString.call(prototype[prop]) === "[object Array]";
            if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {
              delete object[prop];
            }
          });
          return object;
        },
        toString: function() {
          return "#<fabric." + capitalize(this.type) + ">";
        },
        getObjectScaling: function() {
          var options = fabric4.util.qrDecompose(this.calcTransformMatrix());
          return {scaleX: Math.abs(options.scaleX), scaleY: Math.abs(options.scaleY)};
        },
        getTotalObjectScaling: function() {
          var scale = this.getObjectScaling(), scaleX = scale.scaleX, scaleY = scale.scaleY;
          if (this.canvas) {
            var zoom = this.canvas.getZoom();
            var retina = this.canvas.getRetinaScaling();
            scaleX *= zoom * retina;
            scaleY *= zoom * retina;
          }
          return {scaleX, scaleY};
        },
        getObjectOpacity: function() {
          var opacity = this.opacity;
          if (this.group) {
            opacity *= this.group.getObjectOpacity();
          }
          return opacity;
        },
        _set: function(key, value) {
          var shouldConstrainValue = key === "scaleX" || key === "scaleY", isChanged = this[key] !== value, groupNeedsUpdate = false;
          if (shouldConstrainValue) {
            value = this._constrainScale(value);
          }
          if (key === "scaleX" && value < 0) {
            this.flipX = !this.flipX;
            value *= -1;
          } else if (key === "scaleY" && value < 0) {
            this.flipY = !this.flipY;
            value *= -1;
          } else if (key === "shadow" && value && !(value instanceof fabric4.Shadow)) {
            value = new fabric4.Shadow(value);
          } else if (key === "dirty" && this.group) {
            this.group.set("dirty", value);
          }
          this[key] = value;
          if (isChanged) {
            groupNeedsUpdate = this.group && this.group.isOnACache();
            if (this.cacheProperties.indexOf(key) > -1) {
              this.dirty = true;
              groupNeedsUpdate && this.group.set("dirty", true);
            } else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {
              this.group.set("dirty", true);
            }
          }
          return this;
        },
        setOnGroup: function() {
        },
        getViewportTransform: function() {
          if (this.canvas && this.canvas.viewportTransform) {
            return this.canvas.viewportTransform;
          }
          return fabric4.iMatrix.concat();
        },
        isNotVisible: function() {
          return this.opacity === 0 || !this.width && !this.height && this.strokeWidth === 0 || !this.visible;
        },
        render: function(ctx) {
          if (this.isNotVisible()) {
            return;
          }
          if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {
            return;
          }
          ctx.save();
          this._setupCompositeOperation(ctx);
          this.drawSelectionBackground(ctx);
          this.transform(ctx);
          this._setOpacity(ctx);
          this._setShadow(ctx, this);
          if (this.shouldCache()) {
            this.renderCache();
            this.drawCacheOnCanvas(ctx);
          } else {
            this._removeCacheCanvas();
            this.dirty = false;
            this.drawObject(ctx);
            if (this.objectCaching && this.statefullCache) {
              this.saveState({propertySet: "cacheProperties"});
            }
          }
          ctx.restore();
        },
        renderCache: function(options) {
          options = options || {};
          if (!this._cacheCanvas) {
            this._createCacheCanvas();
          }
          if (this.isCacheDirty()) {
            this.statefullCache && this.saveState({propertySet: "cacheProperties"});
            this.drawObject(this._cacheContext, options.forClipping);
            this.dirty = false;
          }
        },
        _removeCacheCanvas: function() {
          this._cacheCanvas = null;
          this.cacheWidth = 0;
          this.cacheHeight = 0;
        },
        hasStroke: function() {
          return this.stroke && this.stroke !== "transparent" && this.strokeWidth !== 0;
        },
        hasFill: function() {
          return this.fill && this.fill !== "transparent";
        },
        needsItsOwnCache: function() {
          if (this.paintFirst === "stroke" && this.hasFill() && this.hasStroke() && typeof this.shadow === "object") {
            return true;
          }
          if (this.clipPath) {
            return true;
          }
          return false;
        },
        shouldCache: function() {
          this.ownCaching = this.needsItsOwnCache() || this.objectCaching && (!this.group || !this.group.isOnACache());
          return this.ownCaching;
        },
        willDrawShadow: function() {
          return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);
        },
        drawClipPathOnCache: function(ctx) {
          var path = this.clipPath;
          ctx.save();
          if (path.inverted) {
            ctx.globalCompositeOperation = "destination-out";
          } else {
            ctx.globalCompositeOperation = "destination-in";
          }
          if (path.absolutePositioned) {
            var m = fabric4.util.invertTransform(this.calcTransformMatrix());
            ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
          }
          path.transform(ctx);
          ctx.scale(1 / path.zoomX, 1 / path.zoomY);
          ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);
          ctx.restore();
        },
        drawObject: function(ctx, forClipping) {
          var originalFill = this.fill, originalStroke = this.stroke;
          if (forClipping) {
            this.fill = "black";
            this.stroke = "";
            this._setClippingProperties(ctx);
          } else {
            this._renderBackground(ctx);
            this._setStrokeStyles(ctx, this);
            this._setFillStyles(ctx, this);
          }
          this._render(ctx);
          this._drawClipPath(ctx);
          this.fill = originalFill;
          this.stroke = originalStroke;
        },
        _drawClipPath: function(ctx) {
          var path = this.clipPath;
          if (!path) {
            return;
          }
          path.canvas = this.canvas;
          path.shouldCache();
          path._transformDone = true;
          path.renderCache({forClipping: true});
          this.drawClipPathOnCache(ctx);
        },
        drawCacheOnCanvas: function(ctx) {
          ctx.scale(1 / this.zoomX, 1 / this.zoomY);
          ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);
        },
        isCacheDirty: function(skipCanvas) {
          if (this.isNotVisible()) {
            return false;
          }
          if (this._cacheCanvas && !skipCanvas && this._updateCacheCanvas()) {
            return true;
          } else {
            if (this.dirty || this.clipPath && this.clipPath.absolutePositioned || this.statefullCache && this.hasStateChanged("cacheProperties")) {
              if (this._cacheCanvas && !skipCanvas) {
                var width = this.cacheWidth / this.zoomX;
                var height = this.cacheHeight / this.zoomY;
                this._cacheContext.clearRect(-width / 2, -height / 2, width, height);
              }
              return true;
            }
          }
          return false;
        },
        _renderBackground: function(ctx) {
          if (!this.backgroundColor) {
            return;
          }
          var dim = this._getNonTransformedDimensions();
          ctx.fillStyle = this.backgroundColor;
          ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);
          this._removeShadow(ctx);
        },
        _setOpacity: function(ctx) {
          if (this.group && !this.group._transformDone) {
            ctx.globalAlpha = this.getObjectOpacity();
          } else {
            ctx.globalAlpha *= this.opacity;
          }
        },
        _setStrokeStyles: function(ctx, decl) {
          if (decl.stroke) {
            ctx.lineWidth = decl.strokeWidth;
            ctx.lineCap = decl.strokeLineCap;
            ctx.lineDashOffset = decl.strokeDashOffset;
            ctx.lineJoin = decl.strokeLineJoin;
            ctx.miterLimit = decl.strokeMiterLimit;
            ctx.strokeStyle = decl.stroke.toLive ? decl.stroke.toLive(ctx, this) : decl.stroke;
          }
        },
        _setFillStyles: function(ctx, decl) {
          if (decl.fill) {
            ctx.fillStyle = decl.fill.toLive ? decl.fill.toLive(ctx, this) : decl.fill;
          }
        },
        _setClippingProperties: function(ctx) {
          ctx.globalAlpha = 1;
          ctx.strokeStyle = "transparent";
          ctx.fillStyle = "#000000";
        },
        _setLineDash: function(ctx, dashArray, alternative) {
          if (!dashArray || dashArray.length === 0) {
            return;
          }
          if (1 & dashArray.length) {
            dashArray.push.apply(dashArray, dashArray);
          }
          if (supportsLineDash) {
            ctx.setLineDash(dashArray);
          } else {
            alternative && alternative(ctx);
          }
        },
        _renderControls: function(ctx, styleOverride) {
          var vpt = this.getViewportTransform(), matrix = this.calcTransformMatrix(), options, drawBorders, drawControls;
          styleOverride = styleOverride || {};
          drawBorders = typeof styleOverride.hasBorders !== "undefined" ? styleOverride.hasBorders : this.hasBorders;
          drawControls = typeof styleOverride.hasControls !== "undefined" ? styleOverride.hasControls : this.hasControls;
          matrix = fabric4.util.multiplyTransformMatrices(vpt, matrix);
          options = fabric4.util.qrDecompose(matrix);
          ctx.save();
          ctx.translate(options.translateX, options.translateY);
          ctx.lineWidth = 1 * this.borderScaleFactor;
          if (!this.group) {
            ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
          }
          if (styleOverride.forActiveSelection) {
            ctx.rotate(degreesToRadians(options.angle));
            drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);
          } else {
            ctx.rotate(degreesToRadians(this.angle));
            drawBorders && this.drawBorders(ctx, styleOverride);
          }
          drawControls && this.drawControls(ctx, styleOverride);
          ctx.restore();
        },
        _setShadow: function(ctx) {
          if (!this.shadow) {
            return;
          }
          var shadow = this.shadow, canvas = this.canvas, scaling, multX = canvas && canvas.viewportTransform[0] || 1, multY = canvas && canvas.viewportTransform[3] || 1;
          if (shadow.nonScaling) {
            scaling = {scaleX: 1, scaleY: 1};
          } else {
            scaling = this.getObjectScaling();
          }
          if (canvas && canvas._isRetinaScaling()) {
            multX *= fabric4.devicePixelRatio;
            multY *= fabric4.devicePixelRatio;
          }
          ctx.shadowColor = shadow.color;
          ctx.shadowBlur = shadow.blur * fabric4.browserShadowBlurConstant * (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;
          ctx.shadowOffsetX = shadow.offsetX * multX * scaling.scaleX;
          ctx.shadowOffsetY = shadow.offsetY * multY * scaling.scaleY;
        },
        _removeShadow: function(ctx) {
          if (!this.shadow) {
            return;
          }
          ctx.shadowColor = "";
          ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;
        },
        _applyPatternGradientTransform: function(ctx, filler) {
          if (!filler || !filler.toLive) {
            return {offsetX: 0, offsetY: 0};
          }
          var t = filler.gradientTransform || filler.patternTransform;
          var offsetX = -this.width / 2 + filler.offsetX || 0, offsetY = -this.height / 2 + filler.offsetY || 0;
          if (filler.gradientUnits === "percentage") {
            ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);
          } else {
            ctx.transform(1, 0, 0, 1, offsetX, offsetY);
          }
          if (t) {
            ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);
          }
          return {offsetX, offsetY};
        },
        _renderPaintInOrder: function(ctx) {
          if (this.paintFirst === "stroke") {
            this._renderStroke(ctx);
            this._renderFill(ctx);
          } else {
            this._renderFill(ctx);
            this._renderStroke(ctx);
          }
        },
        _render: function() {
        },
        _renderFill: function(ctx) {
          if (!this.fill) {
            return;
          }
          ctx.save();
          this._applyPatternGradientTransform(ctx, this.fill);
          if (this.fillRule === "evenodd") {
            ctx.fill("evenodd");
          } else {
            ctx.fill();
          }
          ctx.restore();
        },
        _renderStroke: function(ctx) {
          if (!this.stroke || this.strokeWidth === 0) {
            return;
          }
          if (this.shadow && !this.shadow.affectStroke) {
            this._removeShadow(ctx);
          }
          ctx.save();
          if (this.strokeUniform && this.group) {
            var scaling = this.getObjectScaling();
            ctx.scale(1 / scaling.scaleX, 1 / scaling.scaleY);
          } else if (this.strokeUniform) {
            ctx.scale(1 / this.scaleX, 1 / this.scaleY);
          }
          this._setLineDash(ctx, this.strokeDashArray, this._renderDashedStroke);
          if (this.stroke.toLive && this.stroke.gradientUnits === "percentage") {
            this._applyPatternForTransformedGradient(ctx, this.stroke);
          } else {
            this._applyPatternGradientTransform(ctx, this.stroke);
          }
          ctx.stroke();
          ctx.restore();
        },
        _applyPatternForTransformedGradient: function(ctx, filler) {
          var dims = this._limitCacheSize(this._getCacheCanvasDimensions()), pCanvas = fabric4.util.createCanvasElement(), pCtx, retinaScaling = this.canvas.getRetinaScaling(), width = dims.x / this.scaleX / retinaScaling, height = dims.y / this.scaleY / retinaScaling;
          pCanvas.width = width;
          pCanvas.height = height;
          pCtx = pCanvas.getContext("2d");
          pCtx.beginPath();
          pCtx.moveTo(0, 0);
          pCtx.lineTo(width, 0);
          pCtx.lineTo(width, height);
          pCtx.lineTo(0, height);
          pCtx.closePath();
          pCtx.translate(width / 2, height / 2);
          pCtx.scale(dims.zoomX / this.scaleX / retinaScaling, dims.zoomY / this.scaleY / retinaScaling);
          this._applyPatternGradientTransform(pCtx, filler);
          pCtx.fillStyle = filler.toLive(ctx);
          pCtx.fill();
          ctx.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2);
          ctx.scale(retinaScaling * this.scaleX / dims.zoomX, retinaScaling * this.scaleY / dims.zoomY);
          ctx.strokeStyle = pCtx.createPattern(pCanvas, "no-repeat");
        },
        _findCenterFromElement: function() {
          return {x: this.left + this.width / 2, y: this.top + this.height / 2};
        },
        _assignTransformMatrixProps: function() {
          if (this.transformMatrix) {
            var options = fabric4.util.qrDecompose(this.transformMatrix);
            this.flipX = false;
            this.flipY = false;
            this.set("scaleX", options.scaleX);
            this.set("scaleY", options.scaleY);
            this.angle = options.angle;
            this.skewX = options.skewX;
            this.skewY = 0;
          }
        },
        _removeTransformMatrix: function(preserveAspectRatioOptions) {
          var center = this._findCenterFromElement();
          if (this.transformMatrix) {
            this._assignTransformMatrixProps();
            center = fabric4.util.transformPoint(center, this.transformMatrix);
          }
          this.transformMatrix = null;
          if (preserveAspectRatioOptions) {
            this.scaleX *= preserveAspectRatioOptions.scaleX;
            this.scaleY *= preserveAspectRatioOptions.scaleY;
            this.cropX = preserveAspectRatioOptions.cropX;
            this.cropY = preserveAspectRatioOptions.cropY;
            center.x += preserveAspectRatioOptions.offsetLeft;
            center.y += preserveAspectRatioOptions.offsetTop;
            this.width = preserveAspectRatioOptions.width;
            this.height = preserveAspectRatioOptions.height;
          }
          this.setPositionByOrigin(center, "center", "center");
        },
        clone: function(callback, propertiesToInclude) {
          var objectForm = this.toObject(propertiesToInclude);
          if (this.constructor.fromObject) {
            this.constructor.fromObject(objectForm, callback);
          } else {
            fabric4.Object._fromObject("Object", objectForm, callback);
          }
        },
        cloneAsImage: function(callback, options) {
          var canvasEl = this.toCanvasElement(options);
          if (callback) {
            callback(new fabric4.Image(canvasEl));
          }
          return this;
        },
        toCanvasElement: function(options) {
          options || (options = {});
          var utils = fabric4.util, origParams = utils.saveObjectTransform(this), originalGroup = this.group, originalShadow = this.shadow, abs = Math.abs, multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? fabric4.devicePixelRatio : 1);
          delete this.group;
          if (options.withoutTransform) {
            utils.resetObjectTransform(this);
          }
          if (options.withoutShadow) {
            this.shadow = null;
          }
          var el2 = fabric4.util.createCanvasElement(), boundingRect = this.getBoundingRect(true, true), shadow = this.shadow, scaling, shadowOffset = {x: 0, y: 0}, shadowBlur, width, height;
          if (shadow) {
            shadowBlur = shadow.blur;
            if (shadow.nonScaling) {
              scaling = {scaleX: 1, scaleY: 1};
            } else {
              scaling = this.getObjectScaling();
            }
            shadowOffset.x = 2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.scaleX);
            shadowOffset.y = 2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.scaleY);
          }
          width = boundingRect.width + shadowOffset.x;
          height = boundingRect.height + shadowOffset.y;
          el2.width = Math.ceil(width);
          el2.height = Math.ceil(height);
          var canvas = new fabric4.StaticCanvas(el2, {
            enableRetinaScaling: false,
            renderOnAddRemove: false,
            skipOffscreen: false
          });
          if (options.format === "jpeg") {
            canvas.backgroundColor = "#fff";
          }
          this.setPositionByOrigin(new fabric4.Point(canvas.width / 2, canvas.height / 2), "center", "center");
          var originalCanvas = this.canvas;
          canvas.add(this);
          var canvasEl = canvas.toCanvasElement(multiplier || 1, options);
          this.shadow = originalShadow;
          this.set("canvas", originalCanvas);
          if (originalGroup) {
            this.group = originalGroup;
          }
          this.set(origParams).setCoords();
          canvas._objects = [];
          canvas.dispose();
          canvas = null;
          return canvasEl;
        },
        toDataURL: function(options) {
          options || (options = {});
          return fabric4.util.toDataURL(this.toCanvasElement(options), options.format || "png", options.quality || 1);
        },
        isType: function(type) {
          return this.type === type;
        },
        complexity: function() {
          return 1;
        },
        toJSON: function(propertiesToInclude) {
          return this.toObject(propertiesToInclude);
        },
        rotate: function(angle) {
          var shouldCenterOrigin = (this.originX !== "center" || this.originY !== "center") && this.centeredRotation;
          if (shouldCenterOrigin) {
            this._setOriginToCenter();
          }
          this.set("angle", angle);
          if (shouldCenterOrigin) {
            this._resetOrigin();
          }
          return this;
        },
        centerH: function() {
          this.canvas && this.canvas.centerObjectH(this);
          return this;
        },
        viewportCenterH: function() {
          this.canvas && this.canvas.viewportCenterObjectH(this);
          return this;
        },
        centerV: function() {
          this.canvas && this.canvas.centerObjectV(this);
          return this;
        },
        viewportCenterV: function() {
          this.canvas && this.canvas.viewportCenterObjectV(this);
          return this;
        },
        center: function() {
          this.canvas && this.canvas.centerObject(this);
          return this;
        },
        viewportCenter: function() {
          this.canvas && this.canvas.viewportCenterObject(this);
          return this;
        },
        getLocalPointer: function(e, pointer) {
          pointer = pointer || this.canvas.getPointer(e);
          var pClicked = new fabric4.Point(pointer.x, pointer.y), objectLeftTop = this._getLeftTopCoords();
          if (this.angle) {
            pClicked = fabric4.util.rotatePoint(pClicked, objectLeftTop, degreesToRadians(-this.angle));
          }
          return {
            x: pClicked.x - objectLeftTop.x,
            y: pClicked.y - objectLeftTop.y
          };
        },
        _setupCompositeOperation: function(ctx) {
          if (this.globalCompositeOperation) {
            ctx.globalCompositeOperation = this.globalCompositeOperation;
          }
        }
      });
      fabric4.util.createAccessors && fabric4.util.createAccessors(fabric4.Object);
      extend(fabric4.Object.prototype, fabric4.Observable);
      fabric4.Object.NUM_FRACTION_DIGITS = 2;
      fabric4.Object._fromObject = function(className, object, callback, extraParam) {
        var klass = fabric4[className];
        object = clone(object, true);
        fabric4.util.enlivenPatterns([object.fill, object.stroke], function(patterns) {
          if (typeof patterns[0] !== "undefined") {
            object.fill = patterns[0];
          }
          if (typeof patterns[1] !== "undefined") {
            object.stroke = patterns[1];
          }
          fabric4.util.enlivenObjects([object.clipPath], function(enlivedProps) {
            object.clipPath = enlivedProps[0];
            var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);
            callback && callback(instance);
          });
        });
      };
      fabric4.Object.__uid = 0;
    })(typeof exports !== "undefined" ? exports : exports);
    (function() {
      var degreesToRadians = fabric3.util.degreesToRadians, originXOffset = {
        left: -0.5,
        center: 0,
        right: 0.5
      }, originYOffset = {
        top: -0.5,
        center: 0,
        bottom: 0.5
      };
      fabric3.util.object.extend(fabric3.Object.prototype, {
        translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {
          var x = point.x, y = point.y, offsetX, offsetY, dim;
          if (typeof fromOriginX === "string") {
            fromOriginX = originXOffset[fromOriginX];
          } else {
            fromOriginX -= 0.5;
          }
          if (typeof toOriginX === "string") {
            toOriginX = originXOffset[toOriginX];
          } else {
            toOriginX -= 0.5;
          }
          offsetX = toOriginX - fromOriginX;
          if (typeof fromOriginY === "string") {
            fromOriginY = originYOffset[fromOriginY];
          } else {
            fromOriginY -= 0.5;
          }
          if (typeof toOriginY === "string") {
            toOriginY = originYOffset[toOriginY];
          } else {
            toOriginY -= 0.5;
          }
          offsetY = toOriginY - fromOriginY;
          if (offsetX || offsetY) {
            dim = this._getTransformedDimensions();
            x = point.x + offsetX * dim.x;
            y = point.y + offsetY * dim.y;
          }
          return new fabric3.Point(x, y);
        },
        translateToCenterPoint: function(point, originX, originY) {
          var p = this.translateToGivenOrigin(point, originX, originY, "center", "center");
          if (this.angle) {
            return fabric3.util.rotatePoint(p, point, degreesToRadians(this.angle));
          }
          return p;
        },
        translateToOriginPoint: function(center, originX, originY) {
          var p = this.translateToGivenOrigin(center, "center", "center", originX, originY);
          if (this.angle) {
            return fabric3.util.rotatePoint(p, center, degreesToRadians(this.angle));
          }
          return p;
        },
        getCenterPoint: function() {
          var leftTop = new fabric3.Point(this.left, this.top);
          return this.translateToCenterPoint(leftTop, this.originX, this.originY);
        },
        getPointByOrigin: function(originX, originY) {
          var center = this.getCenterPoint();
          return this.translateToOriginPoint(center, originX, originY);
        },
        toLocalPoint: function(point, originX, originY) {
          var center = this.getCenterPoint(), p, p2;
          if (typeof originX !== "undefined" && typeof originY !== "undefined") {
            p = this.translateToGivenOrigin(center, "center", "center", originX, originY);
          } else {
            p = new fabric3.Point(this.left, this.top);
          }
          p2 = new fabric3.Point(point.x, point.y);
          if (this.angle) {
            p2 = fabric3.util.rotatePoint(p2, center, -degreesToRadians(this.angle));
          }
          return p2.subtractEquals(p);
        },
        setPositionByOrigin: function(pos, originX, originY) {
          var center = this.translateToCenterPoint(pos, originX, originY), position = this.translateToOriginPoint(center, this.originX, this.originY);
          this.set("left", position.x);
          this.set("top", position.y);
        },
        adjustPosition: function(to) {
          var angle = degreesToRadians(this.angle), hypotFull = this.getScaledWidth(), xFull = fabric3.util.cos(angle) * hypotFull, yFull = fabric3.util.sin(angle) * hypotFull, offsetFrom, offsetTo;
          if (typeof this.originX === "string") {
            offsetFrom = originXOffset[this.originX];
          } else {
            offsetFrom = this.originX - 0.5;
          }
          if (typeof to === "string") {
            offsetTo = originXOffset[to];
          } else {
            offsetTo = to - 0.5;
          }
          this.left += xFull * (offsetTo - offsetFrom);
          this.top += yFull * (offsetTo - offsetFrom);
          this.setCoords();
          this.originX = to;
        },
        _setOriginToCenter: function() {
          this._originalOriginX = this.originX;
          this._originalOriginY = this.originY;
          var center = this.getCenterPoint();
          this.originX = "center";
          this.originY = "center";
          this.left = center.x;
          this.top = center.y;
        },
        _resetOrigin: function() {
          var originPoint = this.translateToOriginPoint(this.getCenterPoint(), this._originalOriginX, this._originalOriginY);
          this.originX = this._originalOriginX;
          this.originY = this._originalOriginY;
          this.left = originPoint.x;
          this.top = originPoint.y;
          this._originalOriginX = null;
          this._originalOriginY = null;
        },
        _getLeftTopCoords: function() {
          return this.translateToOriginPoint(this.getCenterPoint(), "left", "top");
        }
      });
    })();
    (function() {
      function arrayFromCoords(coords) {
        return [
          new fabric3.Point(coords.tl.x, coords.tl.y),
          new fabric3.Point(coords.tr.x, coords.tr.y),
          new fabric3.Point(coords.br.x, coords.br.y),
          new fabric3.Point(coords.bl.x, coords.bl.y)
        ];
      }
      var util = fabric3.util, degreesToRadians = util.degreesToRadians, multiplyMatrices = util.multiplyTransformMatrices, transformPoint = util.transformPoint;
      util.object.extend(fabric3.Object.prototype, {
        oCoords: null,
        aCoords: null,
        lineCoords: null,
        ownMatrixCache: null,
        matrixCache: null,
        controls: {},
        _getCoords: function(absolute, calculate) {
          if (calculate) {
            return absolute ? this.calcACoords() : this.calcLineCoords();
          }
          if (!this.aCoords || !this.lineCoords) {
            this.setCoords(true);
          }
          return absolute ? this.aCoords : this.lineCoords;
        },
        getCoords: function(absolute, calculate) {
          return arrayFromCoords(this._getCoords(absolute, calculate));
        },
        intersectsWithRect: function(pointTL, pointBR, absolute, calculate) {
          var coords = this.getCoords(absolute, calculate), intersection = fabric3.Intersection.intersectPolygonRectangle(coords, pointTL, pointBR);
          return intersection.status === "Intersection";
        },
        intersectsWithObject: function(other, absolute, calculate) {
          var intersection = fabric3.Intersection.intersectPolygonPolygon(this.getCoords(absolute, calculate), other.getCoords(absolute, calculate));
          return intersection.status === "Intersection" || other.isContainedWithinObject(this, absolute, calculate) || this.isContainedWithinObject(other, absolute, calculate);
        },
        isContainedWithinObject: function(other, absolute, calculate) {
          var points = this.getCoords(absolute, calculate), otherCoords = absolute ? other.aCoords : other.lineCoords, i = 0, lines = other._getImageLines(otherCoords);
          for (; i < 4; i++) {
            if (!other.containsPoint(points[i], lines)) {
              return false;
            }
          }
          return true;
        },
        isContainedWithinRect: function(pointTL, pointBR, absolute, calculate) {
          var boundingRect = this.getBoundingRect(absolute, calculate);
          return boundingRect.left >= pointTL.x && boundingRect.left + boundingRect.width <= pointBR.x && boundingRect.top >= pointTL.y && boundingRect.top + boundingRect.height <= pointBR.y;
        },
        containsPoint: function(point, lines, absolute, calculate) {
          var coords = this._getCoords(absolute, calculate), lines = lines || this._getImageLines(coords), xPoints = this._findCrossPoints(point, lines);
          return xPoints !== 0 && xPoints % 2 === 1;
        },
        isOnScreen: function(calculate) {
          if (!this.canvas) {
            return false;
          }
          var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;
          var points = this.getCoords(true, calculate);
          if (points.some(function(point) {
            return point.x <= pointBR.x && point.x >= pointTL.x && point.y <= pointBR.y && point.y >= pointTL.y;
          })) {
            return true;
          }
          if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {
            return true;
          }
          return this._containsCenterOfCanvas(pointTL, pointBR, calculate);
        },
        _containsCenterOfCanvas: function(pointTL, pointBR, calculate) {
          var centerPoint = {x: (pointTL.x + pointBR.x) / 2, y: (pointTL.y + pointBR.y) / 2};
          if (this.containsPoint(centerPoint, null, true, calculate)) {
            return true;
          }
          return false;
        },
        isPartiallyOnScreen: function(calculate) {
          if (!this.canvas) {
            return false;
          }
          var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;
          if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {
            return true;
          }
          var allPointsAreOutside = this.getCoords(true, calculate).every(function(point) {
            return (point.x >= pointBR.x || point.x <= pointTL.x) && (point.y >= pointBR.y || point.y <= pointTL.y);
          });
          return allPointsAreOutside && this._containsCenterOfCanvas(pointTL, pointBR, calculate);
        },
        _getImageLines: function(oCoords) {
          var lines = {
            topline: {
              o: oCoords.tl,
              d: oCoords.tr
            },
            rightline: {
              o: oCoords.tr,
              d: oCoords.br
            },
            bottomline: {
              o: oCoords.br,
              d: oCoords.bl
            },
            leftline: {
              o: oCoords.bl,
              d: oCoords.tl
            }
          };
          return lines;
        },
        _findCrossPoints: function(point, lines) {
          var b1, b2, a1, a2, xi, xcount = 0, iLine;
          for (var lineKey in lines) {
            iLine = lines[lineKey];
            if (iLine.o.y < point.y && iLine.d.y < point.y) {
              continue;
            }
            if (iLine.o.y >= point.y && iLine.d.y >= point.y) {
              continue;
            }
            if (iLine.o.x === iLine.d.x && iLine.o.x >= point.x) {
              xi = iLine.o.x;
            } else {
              b1 = 0;
              b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);
              a1 = point.y - b1 * point.x;
              a2 = iLine.o.y - b2 * iLine.o.x;
              xi = -(a1 - a2) / (b1 - b2);
            }
            if (xi >= point.x) {
              xcount += 1;
            }
            if (xcount === 2) {
              break;
            }
          }
          return xcount;
        },
        getBoundingRect: function(absolute, calculate) {
          var coords = this.getCoords(absolute, calculate);
          return util.makeBoundingBoxFromPoints(coords);
        },
        getScaledWidth: function() {
          return this._getTransformedDimensions().x;
        },
        getScaledHeight: function() {
          return this._getTransformedDimensions().y;
        },
        _constrainScale: function(value) {
          if (Math.abs(value) < this.minScaleLimit) {
            if (value < 0) {
              return -this.minScaleLimit;
            } else {
              return this.minScaleLimit;
            }
          } else if (value === 0) {
            return 1e-4;
          }
          return value;
        },
        scale: function(value) {
          this._set("scaleX", value);
          this._set("scaleY", value);
          return this.setCoords();
        },
        scaleToWidth: function(value, absolute) {
          var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();
          return this.scale(value / this.width / boundingRectFactor);
        },
        scaleToHeight: function(value, absolute) {
          var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();
          return this.scale(value / this.height / boundingRectFactor);
        },
        calcCoords: function(absolute) {
          if (absolute) {
            return this.calcACoords();
          }
          return this.calcOCoords();
        },
        calcLineCoords: function() {
          var vpt = this.getViewportTransform(), padding = this.padding, angle = degreesToRadians(this.angle), cos = util.cos(angle), sin = util.sin(angle), cosP = cos * padding, sinP = sin * padding, cosPSinP = cosP + sinP, cosPMinusSinP = cosP - sinP, aCoords = this.calcACoords();
          var lineCoords = {
            tl: transformPoint(aCoords.tl, vpt),
            tr: transformPoint(aCoords.tr, vpt),
            bl: transformPoint(aCoords.bl, vpt),
            br: transformPoint(aCoords.br, vpt)
          };
          if (padding) {
            lineCoords.tl.x -= cosPMinusSinP;
            lineCoords.tl.y -= cosPSinP;
            lineCoords.tr.x += cosPSinP;
            lineCoords.tr.y -= cosPMinusSinP;
            lineCoords.bl.x -= cosPSinP;
            lineCoords.bl.y += cosPMinusSinP;
            lineCoords.br.x += cosPMinusSinP;
            lineCoords.br.y += cosPSinP;
          }
          return lineCoords;
        },
        calcOCoords: function() {
          var rotateMatrix = this._calcRotateMatrix(), translateMatrix = this._calcTranslateMatrix(), vpt = this.getViewportTransform(), startMatrix = multiplyMatrices(vpt, translateMatrix), finalMatrix = multiplyMatrices(startMatrix, rotateMatrix), finalMatrix = multiplyMatrices(finalMatrix, [1 / vpt[0], 0, 0, 1 / vpt[3], 0, 0]), dim = this._calculateCurrentDimensions(), coords = {};
          this.forEachControl(function(control, key, fabricObject) {
            coords[key] = control.positionHandler(dim, finalMatrix, fabricObject);
          });
          return coords;
        },
        calcACoords: function() {
          var rotateMatrix = this._calcRotateMatrix(), translateMatrix = this._calcTranslateMatrix(), finalMatrix = multiplyMatrices(translateMatrix, rotateMatrix), dim = this._getTransformedDimensions(), w = dim.x / 2, h = dim.y / 2;
          return {
            tl: transformPoint({x: -w, y: -h}, finalMatrix),
            tr: transformPoint({x: w, y: -h}, finalMatrix),
            bl: transformPoint({x: -w, y: h}, finalMatrix),
            br: transformPoint({x: w, y: h}, finalMatrix)
          };
        },
        setCoords: function(skipCorners) {
          this.aCoords = this.calcACoords();
          this.lineCoords = this.group ? this.aCoords : this.calcLineCoords();
          if (skipCorners) {
            return this;
          }
          this.oCoords = this.calcOCoords();
          this._setCornerCoords && this._setCornerCoords();
          return this;
        },
        _calcRotateMatrix: function() {
          return util.calcRotateMatrix(this);
        },
        _calcTranslateMatrix: function() {
          var center = this.getCenterPoint();
          return [1, 0, 0, 1, center.x, center.y];
        },
        transformMatrixKey: function(skipGroup) {
          var sep = "_", prefix = "";
          if (!skipGroup && this.group) {
            prefix = this.group.transformMatrixKey(skipGroup) + sep;
          }
          ;
          return prefix + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY + sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY + sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;
        },
        calcTransformMatrix: function(skipGroup) {
          var matrix = this.calcOwnMatrix();
          if (skipGroup || !this.group) {
            return matrix;
          }
          var key = this.transformMatrixKey(skipGroup), cache = this.matrixCache || (this.matrixCache = {});
          if (cache.key === key) {
            return cache.value;
          }
          if (this.group) {
            matrix = multiplyMatrices(this.group.calcTransformMatrix(false), matrix);
          }
          cache.key = key;
          cache.value = matrix;
          return matrix;
        },
        calcOwnMatrix: function() {
          var key = this.transformMatrixKey(true), cache = this.ownMatrixCache || (this.ownMatrixCache = {});
          if (cache.key === key) {
            return cache.value;
          }
          var tMatrix = this._calcTranslateMatrix(), options = {
            angle: this.angle,
            translateX: tMatrix[4],
            translateY: tMatrix[5],
            scaleX: this.scaleX,
            scaleY: this.scaleY,
            skewX: this.skewX,
            skewY: this.skewY,
            flipX: this.flipX,
            flipY: this.flipY
          };
          cache.key = key;
          cache.value = util.composeMatrix(options);
          return cache.value;
        },
        _calcDimensionsTransformMatrix: function(skewX, skewY, flipping) {
          return util.calcDimensionsMatrix({
            skewX,
            skewY,
            scaleX: this.scaleX * (flipping && this.flipX ? -1 : 1),
            scaleY: this.scaleY * (flipping && this.flipY ? -1 : 1)
          });
        },
        _getNonTransformedDimensions: function() {
          var strokeWidth = this.strokeWidth, w = this.width + strokeWidth, h = this.height + strokeWidth;
          return {x: w, y: h};
        },
        _getTransformedDimensions: function(skewX, skewY) {
          if (typeof skewX === "undefined") {
            skewX = this.skewX;
          }
          if (typeof skewY === "undefined") {
            skewY = this.skewY;
          }
          var dimensions = this._getNonTransformedDimensions(), dimX, dimY, noSkew = skewX === 0 && skewY === 0;
          if (this.strokeUniform) {
            dimX = this.width;
            dimY = this.height;
          } else {
            dimX = dimensions.x;
            dimY = dimensions.y;
          }
          if (noSkew) {
            return this._finalizeDimensions(dimX * this.scaleX, dimY * this.scaleY);
          }
          var bbox = util.sizeAfterTransform(dimX, dimY, {
            scaleX: this.scaleX,
            scaleY: this.scaleY,
            skewX,
            skewY
          });
          return this._finalizeDimensions(bbox.x, bbox.y);
        },
        _finalizeDimensions: function(width, height) {
          return this.strokeUniform ? {x: width + this.strokeWidth, y: height + this.strokeWidth} : {x: width, y: height};
        },
        _calculateCurrentDimensions: function() {
          var vpt = this.getViewportTransform(), dim = this._getTransformedDimensions(), p = transformPoint(dim, vpt, true);
          return p.scalarAdd(2 * this.padding);
        }
      });
    })();
    fabric3.util.object.extend(fabric3.Object.prototype, {
      sendToBack: function() {
        if (this.group) {
          fabric3.StaticCanvas.prototype.sendToBack.call(this.group, this);
        } else if (this.canvas) {
          this.canvas.sendToBack(this);
        }
        return this;
      },
      bringToFront: function() {
        if (this.group) {
          fabric3.StaticCanvas.prototype.bringToFront.call(this.group, this);
        } else if (this.canvas) {
          this.canvas.bringToFront(this);
        }
        return this;
      },
      sendBackwards: function(intersecting) {
        if (this.group) {
          fabric3.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);
        } else if (this.canvas) {
          this.canvas.sendBackwards(this, intersecting);
        }
        return this;
      },
      bringForward: function(intersecting) {
        if (this.group) {
          fabric3.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);
        } else if (this.canvas) {
          this.canvas.bringForward(this, intersecting);
        }
        return this;
      },
      moveTo: function(index) {
        if (this.group && this.group.type !== "activeSelection") {
          fabric3.StaticCanvas.prototype.moveTo.call(this.group, this, index);
        } else if (this.canvas) {
          this.canvas.moveTo(this, index);
        }
        return this;
      }
    });
    (function() {
      function getSvgColorString(prop, value) {
        if (!value) {
          return prop + ": none; ";
        } else if (value.toLive) {
          return prop + ": url(#SVGID_" + value.id + "); ";
        } else {
          var color = new fabric3.Color(value), str = prop + ": " + color.toRgb() + "; ", opacity = color.getAlpha();
          if (opacity !== 1) {
            str += prop + "-opacity: " + opacity.toString() + "; ";
          }
          return str;
        }
      }
      var toFixed = fabric3.util.toFixed;
      fabric3.util.object.extend(fabric3.Object.prototype, {
        getSvgStyles: function(skipShadow) {
          var fillRule = this.fillRule ? this.fillRule : "nonzero", strokeWidth = this.strokeWidth ? this.strokeWidth : "0", strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(" ") : "none", strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : "0", strokeLineCap = this.strokeLineCap ? this.strokeLineCap : "butt", strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : "miter", strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : "4", opacity = typeof this.opacity !== "undefined" ? this.opacity : "1", visibility = this.visible ? "" : " visibility: hidden;", filter = skipShadow ? "" : this.getSvgFilter(), fill = getSvgColorString("fill", this.fill), stroke = getSvgColorString("stroke", this.stroke);
          return [
            stroke,
            "stroke-width: ",
            strokeWidth,
            "; ",
            "stroke-dasharray: ",
            strokeDashArray,
            "; ",
            "stroke-linecap: ",
            strokeLineCap,
            "; ",
            "stroke-dashoffset: ",
            strokeDashOffset,
            "; ",
            "stroke-linejoin: ",
            strokeLineJoin,
            "; ",
            "stroke-miterlimit: ",
            strokeMiterLimit,
            "; ",
            fill,
            "fill-rule: ",
            fillRule,
            "; ",
            "opacity: ",
            opacity,
            ";",
            filter,
            visibility
          ].join("");
        },
        getSvgSpanStyles: function(style, useWhiteSpace) {
          var term = "; ";
          var fontFamily = style.fontFamily ? "font-family: " + (style.fontFamily.indexOf("'") === -1 && style.fontFamily.indexOf('"') === -1 ? "'" + style.fontFamily + "'" : style.fontFamily) + term : "";
          var strokeWidth = style.strokeWidth ? "stroke-width: " + style.strokeWidth + term : "", fontFamily = fontFamily, fontSize = style.fontSize ? "font-size: " + style.fontSize + "px" + term : "", fontStyle = style.fontStyle ? "font-style: " + style.fontStyle + term : "", fontWeight = style.fontWeight ? "font-weight: " + style.fontWeight + term : "", fill = style.fill ? getSvgColorString("fill", style.fill) : "", stroke = style.stroke ? getSvgColorString("stroke", style.stroke) : "", textDecoration = this.getSvgTextDecoration(style), deltaY = style.deltaY ? "baseline-shift: " + -style.deltaY + "; " : "";
          if (textDecoration) {
            textDecoration = "text-decoration: " + textDecoration + term;
          }
          return [
            stroke,
            strokeWidth,
            fontFamily,
            fontSize,
            fontStyle,
            fontWeight,
            textDecoration,
            fill,
            deltaY,
            useWhiteSpace ? "white-space: pre; " : ""
          ].join("");
        },
        getSvgTextDecoration: function(style) {
          return ["overline", "underline", "line-through"].filter(function(decoration) {
            return style[decoration.replace("-", "")];
          }).join(" ");
        },
        getSvgFilter: function() {
          return this.shadow ? "filter: url(#SVGID_" + this.shadow.id + ");" : "";
        },
        getSvgCommons: function() {
          return [
            this.id ? 'id="' + this.id + '" ' : "",
            this.clipPath ? 'clip-path="url(#' + this.clipPath.clipPathId + ')" ' : ""
          ].join("");
        },
        getSvgTransform: function(full, additionalTransform) {
          var transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(), svgTransform = 'transform="' + fabric3.util.matrixToSVG(transform);
          return svgTransform + (additionalTransform || "") + '" ';
        },
        _setSVGBg: function(textBgRects) {
          if (this.backgroundColor) {
            var NUM_FRACTION_DIGITS = fabric3.Object.NUM_FRACTION_DIGITS;
            textBgRects.push("		<rect ", this._getFillAttributes(this.backgroundColor), ' x="', toFixed(-this.width / 2, NUM_FRACTION_DIGITS), '" y="', toFixed(-this.height / 2, NUM_FRACTION_DIGITS), '" width="', toFixed(this.width, NUM_FRACTION_DIGITS), '" height="', toFixed(this.height, NUM_FRACTION_DIGITS), '"></rect>\n');
          }
        },
        toSVG: function(reviver) {
          return this._createBaseSVGMarkup(this._toSVG(reviver), {reviver});
        },
        toClipPathSVG: function(reviver) {
          return "	" + this._createBaseClipPathSVGMarkup(this._toSVG(reviver), {reviver});
        },
        _createBaseClipPathSVGMarkup: function(objectMarkup, options) {
          options = options || {};
          var reviver = options.reviver, additionalTransform = options.additionalTransform || "", commonPieces = [
            this.getSvgTransform(true, additionalTransform),
            this.getSvgCommons()
          ].join(""), index = objectMarkup.indexOf("COMMON_PARTS");
          objectMarkup[index] = commonPieces;
          return reviver ? reviver(objectMarkup.join("")) : objectMarkup.join("");
        },
        _createBaseSVGMarkup: function(objectMarkup, options) {
          options = options || {};
          var noStyle = options.noStyle, reviver = options.reviver, styleInfo = noStyle ? "" : 'style="' + this.getSvgStyles() + '" ', shadowInfo = options.withShadow ? 'style="' + this.getSvgFilter() + '" ' : "", clipPath = this.clipPath, vectorEffect = this.strokeUniform ? 'vector-effect="non-scaling-stroke" ' : "", absoluteClipPath = clipPath && clipPath.absolutePositioned, stroke = this.stroke, fill = this.fill, shadow = this.shadow, commonPieces, markup = [], clipPathMarkup, index = objectMarkup.indexOf("COMMON_PARTS"), additionalTransform = options.additionalTransform;
          if (clipPath) {
            clipPath.clipPathId = "CLIPPATH_" + fabric3.Object.__uid++;
            clipPathMarkup = '<clipPath id="' + clipPath.clipPathId + '" >\n' + clipPath.toClipPathSVG(reviver) + "</clipPath>\n";
          }
          if (absoluteClipPath) {
            markup.push("<g ", shadowInfo, this.getSvgCommons(), " >\n");
          }
          markup.push("<g ", this.getSvgTransform(false), !absoluteClipPath ? shadowInfo + this.getSvgCommons() : "", " >\n");
          commonPieces = [
            styleInfo,
            vectorEffect,
            noStyle ? "" : this.addPaintOrder(),
            " ",
            additionalTransform ? 'transform="' + additionalTransform + '" ' : ""
          ].join("");
          objectMarkup[index] = commonPieces;
          if (fill && fill.toLive) {
            markup.push(fill.toSVG(this));
          }
          if (stroke && stroke.toLive) {
            markup.push(stroke.toSVG(this));
          }
          if (shadow) {
            markup.push(shadow.toSVG(this));
          }
          if (clipPath) {
            markup.push(clipPathMarkup);
          }
          markup.push(objectMarkup.join(""));
          markup.push("</g>\n");
          absoluteClipPath && markup.push("</g>\n");
          return reviver ? reviver(markup.join("")) : markup.join("");
        },
        addPaintOrder: function() {
          return this.paintFirst !== "fill" ? ' paint-order="' + this.paintFirst + '" ' : "";
        }
      });
    })();
    (function() {
      var extend = fabric3.util.object.extend, originalSet = "stateProperties";
      function saveProps(origin, destination, props) {
        var tmpObj = {}, deep = true;
        props.forEach(function(prop) {
          tmpObj[prop] = origin[prop];
        });
        extend(origin[destination], tmpObj, deep);
      }
      function _isEqual(origValue, currentValue, firstPass) {
        if (origValue === currentValue) {
          return true;
        } else if (Array.isArray(origValue)) {
          if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {
            return false;
          }
          for (var i = 0, len = origValue.length; i < len; i++) {
            if (!_isEqual(origValue[i], currentValue[i])) {
              return false;
            }
          }
          return true;
        } else if (origValue && typeof origValue === "object") {
          var keys = Object.keys(origValue), key;
          if (!currentValue || typeof currentValue !== "object" || !firstPass && keys.length !== Object.keys(currentValue).length) {
            return false;
          }
          for (var i = 0, len = keys.length; i < len; i++) {
            key = keys[i];
            if (key === "canvas" || key === "group") {
              continue;
            }
            if (!_isEqual(origValue[key], currentValue[key])) {
              return false;
            }
          }
          return true;
        }
      }
      fabric3.util.object.extend(fabric3.Object.prototype, {
        hasStateChanged: function(propertySet) {
          propertySet = propertySet || originalSet;
          var dashedPropertySet = "_" + propertySet;
          if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {
            return true;
          }
          return !_isEqual(this[dashedPropertySet], this, true);
        },
        saveState: function(options) {
          var propertySet = options && options.propertySet || originalSet, destination = "_" + propertySet;
          if (!this[destination]) {
            return this.setupState(options);
          }
          saveProps(this, destination, this[propertySet]);
          if (options && options.stateProperties) {
            saveProps(this, destination, options.stateProperties);
          }
          return this;
        },
        setupState: function(options) {
          options = options || {};
          var propertySet = options.propertySet || originalSet;
          options.propertySet = propertySet;
          this["_" + propertySet] = {};
          this.saveState(options);
          return this;
        }
      });
    })();
    (function() {
      var degreesToRadians = fabric3.util.degreesToRadians;
      fabric3.util.object.extend(fabric3.Object.prototype, {
        _findTargetCorner: function(pointer, forTouch) {
          if (!this.hasControls || this.group || (!this.canvas || this.canvas._activeObject !== this)) {
            return false;
          }
          var ex = pointer.x, ey = pointer.y, xPoints, lines, keys = Object.keys(this.oCoords), j = keys.length - 1, i;
          this.__corner = 0;
          for (; j >= 0; j--) {
            i = keys[j];
            if (!this.isControlVisible(i)) {
              continue;
            }
            lines = this._getImageLines(forTouch ? this.oCoords[i].touchCorner : this.oCoords[i].corner);
            xPoints = this._findCrossPoints({x: ex, y: ey}, lines);
            if (xPoints !== 0 && xPoints % 2 === 1) {
              this.__corner = i;
              return i;
            }
          }
          return false;
        },
        forEachControl: function(fn) {
          for (var i in this.controls) {
            fn(this.controls[i], i, this);
          }
          ;
        },
        _setCornerCoords: function() {
          var coords = this.oCoords, newTheta = degreesToRadians(45 - this.angle), cosTheta = fabric3.util.cos(newTheta), sinTheta = fabric3.util.sin(newTheta), cornerHypotenuse = this.cornerSize * 0.707106, touchHypotenuse = this.touchCornerSize * 0.707106, cosHalfOffset = cornerHypotenuse * cosTheta, sinHalfOffset = cornerHypotenuse * sinTheta, touchCosHalfOffset = touchHypotenuse * cosTheta, touchSinHalfOffset = touchHypotenuse * sinTheta, x, y;
          for (var control in coords) {
            x = coords[control].x;
            y = coords[control].y;
            coords[control].corner = {
              tl: {
                x: x - sinHalfOffset,
                y: y - cosHalfOffset
              },
              tr: {
                x: x + cosHalfOffset,
                y: y - sinHalfOffset
              },
              bl: {
                x: x - cosHalfOffset,
                y: y + sinHalfOffset
              },
              br: {
                x: x + sinHalfOffset,
                y: y + cosHalfOffset
              }
            };
            coords[control].touchCorner = {
              tl: {
                x: x - touchSinHalfOffset,
                y: y - touchCosHalfOffset
              },
              tr: {
                x: x + touchCosHalfOffset,
                y: y - touchSinHalfOffset
              },
              bl: {
                x: x - touchCosHalfOffset,
                y: y + touchSinHalfOffset
              },
              br: {
                x: x + touchSinHalfOffset,
                y: y + touchCosHalfOffset
              }
            };
          }
        },
        drawSelectionBackground: function(ctx) {
          if (!this.selectionBackgroundColor || this.canvas && !this.canvas.interactive || this.canvas && this.canvas._activeObject !== this) {
            return this;
          }
          ctx.save();
          var center = this.getCenterPoint(), wh = this._calculateCurrentDimensions(), vpt = this.canvas.viewportTransform;
          ctx.translate(center.x, center.y);
          ctx.scale(1 / vpt[0], 1 / vpt[3]);
          ctx.rotate(degreesToRadians(this.angle));
          ctx.fillStyle = this.selectionBackgroundColor;
          ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);
          ctx.restore();
          return this;
        },
        drawBorders: function(ctx, styleOverride) {
          styleOverride = styleOverride || {};
          var wh = this._calculateCurrentDimensions(), strokeWidth = this.borderScaleFactor, width = wh.x + strokeWidth, height = wh.y + strokeWidth, hasControls = typeof styleOverride.hasControls !== "undefined" ? styleOverride.hasControls : this.hasControls, shouldStroke = false;
          ctx.save();
          ctx.strokeStyle = styleOverride.borderColor || this.borderColor;
          this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);
          ctx.strokeRect(-width / 2, -height / 2, width, height);
          if (hasControls) {
            ctx.beginPath();
            this.forEachControl(function(control, key, fabricObject) {
              if (control.withConnection && control.getVisibility(fabricObject, key)) {
                shouldStroke = true;
                ctx.moveTo(control.x * width, control.y * height);
                ctx.lineTo(control.x * width + control.offsetX, control.y * height + control.offsetY);
              }
            });
            if (shouldStroke) {
              ctx.stroke();
            }
          }
          ctx.restore();
          return this;
        },
        drawBordersInGroup: function(ctx, options, styleOverride) {
          styleOverride = styleOverride || {};
          var bbox = fabric3.util.sizeAfterTransform(this.width, this.height, options), strokeWidth = this.strokeWidth, strokeUniform = this.strokeUniform, borderScaleFactor = this.borderScaleFactor, width = bbox.x + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleX) + borderScaleFactor, height = bbox.y + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleY) + borderScaleFactor;
          ctx.save();
          this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);
          ctx.strokeStyle = styleOverride.borderColor || this.borderColor;
          ctx.strokeRect(-width / 2, -height / 2, width, height);
          ctx.restore();
          return this;
        },
        drawControls: function(ctx, styleOverride) {
          styleOverride = styleOverride || {};
          ctx.save();
          ctx.setTransform(this.canvas.getRetinaScaling(), 0, 0, this.canvas.getRetinaScaling(), 0, 0);
          ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;
          if (!this.transparentCorners) {
            ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;
          }
          this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray, null);
          this.setCoords();
          this.forEachControl(function(control, key, fabricObject) {
            if (control.getVisibility(fabricObject, key)) {
              control.render(ctx, fabricObject.oCoords[key].x, fabricObject.oCoords[key].y, styleOverride, fabricObject);
            }
          });
          ctx.restore();
          return this;
        },
        isControlVisible: function(controlKey) {
          return this.controls[controlKey] && this.controls[controlKey].getVisibility(this, controlKey);
        },
        setControlVisible: function(controlKey, visible) {
          if (!this._controlsVisibility) {
            this._controlsVisibility = {};
          }
          this._controlsVisibility[controlKey] = visible;
          return this;
        },
        setControlsVisibility: function(options) {
          options || (options = {});
          for (var p in options) {
            this.setControlVisible(p, options[p]);
          }
          return this;
        },
        onDeselect: function() {
        },
        onSelect: function() {
        }
      });
    })();
    fabric3.util.object.extend(fabric3.StaticCanvas.prototype, {
      FX_DURATION: 500,
      fxCenterObjectH: function(object, callbacks) {
        callbacks = callbacks || {};
        var empty = function() {
        }, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;
        fabric3.util.animate({
          startValue: object.left,
          endValue: this.getCenter().left,
          duration: this.FX_DURATION,
          onChange: function(value) {
            object.set("left", value);
            _this.requestRenderAll();
            onChange();
          },
          onComplete: function() {
            object.setCoords();
            onComplete();
          }
        });
        return this;
      },
      fxCenterObjectV: function(object, callbacks) {
        callbacks = callbacks || {};
        var empty = function() {
        }, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;
        fabric3.util.animate({
          startValue: object.top,
          endValue: this.getCenter().top,
          duration: this.FX_DURATION,
          onChange: function(value) {
            object.set("top", value);
            _this.requestRenderAll();
            onChange();
          },
          onComplete: function() {
            object.setCoords();
            onComplete();
          }
        });
        return this;
      },
      fxRemove: function(object, callbacks) {
        callbacks = callbacks || {};
        var empty = function() {
        }, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;
        fabric3.util.animate({
          startValue: object.opacity,
          endValue: 0,
          duration: this.FX_DURATION,
          onChange: function(value) {
            object.set("opacity", value);
            _this.requestRenderAll();
            onChange();
          },
          onComplete: function() {
            _this.remove(object);
            onComplete();
          }
        });
        return this;
      }
    });
    fabric3.util.object.extend(fabric3.Object.prototype, {
      animate: function() {
        if (arguments[0] && typeof arguments[0] === "object") {
          var propsToAnimate = [], prop, skipCallbacks;
          for (prop in arguments[0]) {
            propsToAnimate.push(prop);
          }
          for (var i = 0, len = propsToAnimate.length; i < len; i++) {
            prop = propsToAnimate[i];
            skipCallbacks = i !== len - 1;
            this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);
          }
        } else {
          this._animate.apply(this, arguments);
        }
        return this;
      },
      _animate: function(property, to, options, skipCallbacks) {
        var _this = this, propPair;
        to = to.toString();
        if (!options) {
          options = {};
        } else {
          options = fabric3.util.object.clone(options);
        }
        if (~property.indexOf(".")) {
          propPair = property.split(".");
        }
        var propIsColor = _this.colorProperties.indexOf(property) > -1 || propPair && _this.colorProperties.indexOf(propPair[1]) > -1;
        var currentValue = propPair ? this.get(propPair[0])[propPair[1]] : this.get(property);
        if (!("from" in options)) {
          options.from = currentValue;
        }
        if (!propIsColor) {
          if (~to.indexOf("=")) {
            to = currentValue + parseFloat(to.replace("=", ""));
          } else {
            to = parseFloat(to);
          }
        }
        var _options = {
          startValue: options.from,
          endValue: to,
          byValue: options.by,
          easing: options.easing,
          duration: options.duration,
          abort: options.abort && function() {
            return options.abort.call(_this);
          },
          onChange: function(value, valueProgress, timeProgress) {
            if (propPair) {
              _this[propPair[0]][propPair[1]] = value;
            } else {
              _this.set(property, value);
            }
            if (skipCallbacks) {
              return;
            }
            options.onChange && options.onChange(value, valueProgress, timeProgress);
          },
          onComplete: function(value, valueProgress, timeProgress) {
            if (skipCallbacks) {
              return;
            }
            _this.setCoords();
            options.onComplete && options.onComplete(value, valueProgress, timeProgress);
          }
        };
        if (propIsColor) {
          fabric3.util.animateColor(_options.startValue, _options.endValue, _options.duration, _options);
        } else {
          fabric3.util.animate(_options);
        }
      }
    });
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), extend = fabric4.util.object.extend, clone = fabric4.util.object.clone, coordProps = {x1: 1, x2: 1, y1: 1, y2: 1}, supportsLineDash = fabric4.StaticCanvas.supports("setLineDash");
      if (fabric4.Line) {
        fabric4.warn("fabric.Line is already defined");
        return;
      }
      fabric4.Line = fabric4.util.createClass(fabric4.Object, {
        type: "line",
        x1: 0,
        y1: 0,
        x2: 0,
        y2: 0,
        cacheProperties: fabric4.Object.prototype.cacheProperties.concat("x1", "x2", "y1", "y2"),
        initialize: function(points, options) {
          if (!points) {
            points = [0, 0, 0, 0];
          }
          this.callSuper("initialize", options);
          this.set("x1", points[0]);
          this.set("y1", points[1]);
          this.set("x2", points[2]);
          this.set("y2", points[3]);
          this._setWidthHeight(options);
        },
        _setWidthHeight: function(options) {
          options || (options = {});
          this.width = Math.abs(this.x2 - this.x1);
          this.height = Math.abs(this.y2 - this.y1);
          this.left = "left" in options ? options.left : this._getLeftToOriginX();
          this.top = "top" in options ? options.top : this._getTopToOriginY();
        },
        _set: function(key, value) {
          this.callSuper("_set", key, value);
          if (typeof coordProps[key] !== "undefined") {
            this._setWidthHeight();
          }
          return this;
        },
        _getLeftToOriginX: makeEdgeToOriginGetter({
          origin: "originX",
          axis1: "x1",
          axis2: "x2",
          dimension: "width"
        }, {
          nearest: "left",
          center: "center",
          farthest: "right"
        }),
        _getTopToOriginY: makeEdgeToOriginGetter({
          origin: "originY",
          axis1: "y1",
          axis2: "y2",
          dimension: "height"
        }, {
          nearest: "top",
          center: "center",
          farthest: "bottom"
        }),
        _render: function(ctx) {
          ctx.beginPath();
          if (!this.strokeDashArray || this.strokeDashArray && supportsLineDash) {
            var p = this.calcLinePoints();
            ctx.moveTo(p.x1, p.y1);
            ctx.lineTo(p.x2, p.y2);
          }
          ctx.lineWidth = this.strokeWidth;
          var origStrokeStyle = ctx.strokeStyle;
          ctx.strokeStyle = this.stroke || ctx.fillStyle;
          this.stroke && this._renderStroke(ctx);
          ctx.strokeStyle = origStrokeStyle;
        },
        _renderDashedStroke: function(ctx) {
          var p = this.calcLinePoints();
          ctx.beginPath();
          fabric4.util.drawDashedLine(ctx, p.x1, p.y1, p.x2, p.y2, this.strokeDashArray);
          ctx.closePath();
        },
        _findCenterFromElement: function() {
          return {
            x: (this.x1 + this.x2) / 2,
            y: (this.y1 + this.y2) / 2
          };
        },
        toObject: function(propertiesToInclude) {
          return extend(this.callSuper("toObject", propertiesToInclude), this.calcLinePoints());
        },
        _getNonTransformedDimensions: function() {
          var dim = this.callSuper("_getNonTransformedDimensions");
          if (this.strokeLineCap === "butt") {
            if (this.width === 0) {
              dim.y -= this.strokeWidth;
            }
            if (this.height === 0) {
              dim.x -= this.strokeWidth;
            }
          }
          return dim;
        },
        calcLinePoints: function() {
          var xMult = this.x1 <= this.x2 ? -1 : 1, yMult = this.y1 <= this.y2 ? -1 : 1, x1 = xMult * this.width * 0.5, y1 = yMult * this.height * 0.5, x2 = xMult * this.width * -0.5, y2 = yMult * this.height * -0.5;
          return {
            x1,
            x2,
            y1,
            y2
          };
        },
        _toSVG: function() {
          var p = this.calcLinePoints();
          return [
            "<line ",
            "COMMON_PARTS",
            'x1="',
            p.x1,
            '" y1="',
            p.y1,
            '" x2="',
            p.x2,
            '" y2="',
            p.y2,
            '" />\n'
          ];
        }
      });
      fabric4.Line.ATTRIBUTE_NAMES = fabric4.SHARED_ATTRIBUTES.concat("x1 y1 x2 y2".split(" "));
      fabric4.Line.fromElement = function(element, callback, options) {
        options = options || {};
        var parsedAttributes = fabric4.parseAttributes(element, fabric4.Line.ATTRIBUTE_NAMES), points = [
          parsedAttributes.x1 || 0,
          parsedAttributes.y1 || 0,
          parsedAttributes.x2 || 0,
          parsedAttributes.y2 || 0
        ];
        callback(new fabric4.Line(points, extend(parsedAttributes, options)));
      };
      fabric4.Line.fromObject = function(object, callback) {
        function _callback(instance) {
          delete instance.points;
          callback && callback(instance);
        }
        ;
        var options = clone(object, true);
        options.points = [object.x1, object.y1, object.x2, object.y2];
        fabric4.Object._fromObject("Line", options, _callback, "points");
      };
      function makeEdgeToOriginGetter(propertyNames, originValues) {
        var origin = propertyNames.origin, axis1 = propertyNames.axis1, axis2 = propertyNames.axis2, dimension = propertyNames.dimension, nearest = originValues.nearest, center = originValues.center, farthest = originValues.farthest;
        return function() {
          switch (this.get(origin)) {
            case nearest:
              return Math.min(this.get(axis1), this.get(axis2));
            case center:
              return Math.min(this.get(axis1), this.get(axis2)) + 0.5 * this.get(dimension);
            case farthest:
              return Math.max(this.get(axis1), this.get(axis2));
          }
        };
      }
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), pi = Math.PI;
      if (fabric4.Circle) {
        fabric4.warn("fabric.Circle is already defined.");
        return;
      }
      fabric4.Circle = fabric4.util.createClass(fabric4.Object, {
        type: "circle",
        radius: 0,
        startAngle: 0,
        endAngle: pi * 2,
        cacheProperties: fabric4.Object.prototype.cacheProperties.concat("radius", "startAngle", "endAngle"),
        _set: function(key, value) {
          this.callSuper("_set", key, value);
          if (key === "radius") {
            this.setRadius(value);
          }
          return this;
        },
        toObject: function(propertiesToInclude) {
          return this.callSuper("toObject", ["radius", "startAngle", "endAngle"].concat(propertiesToInclude));
        },
        _toSVG: function() {
          var svgString, x = 0, y = 0, angle = (this.endAngle - this.startAngle) % (2 * pi);
          if (angle === 0) {
            svgString = [
              "<circle ",
              "COMMON_PARTS",
              'cx="' + x + '" cy="' + y + '" ',
              'r="',
              this.radius,
              '" />\n'
            ];
          } else {
            var startX = fabric4.util.cos(this.startAngle) * this.radius, startY = fabric4.util.sin(this.startAngle) * this.radius, endX = fabric4.util.cos(this.endAngle) * this.radius, endY = fabric4.util.sin(this.endAngle) * this.radius, largeFlag = angle > pi ? "1" : "0";
            svgString = [
              '<path d="M ' + startX + " " + startY,
              " A " + this.radius + " " + this.radius,
              " 0 ",
              +largeFlag + " 1",
              " " + endX + " " + endY,
              '" ',
              "COMMON_PARTS",
              " />\n"
            ];
          }
          return svgString;
        },
        _render: function(ctx) {
          ctx.beginPath();
          ctx.arc(0, 0, this.radius, this.startAngle, this.endAngle, false);
          this._renderPaintInOrder(ctx);
        },
        getRadiusX: function() {
          return this.get("radius") * this.get("scaleX");
        },
        getRadiusY: function() {
          return this.get("radius") * this.get("scaleY");
        },
        setRadius: function(value) {
          this.radius = value;
          return this.set("width", value * 2).set("height", value * 2);
        }
      });
      fabric4.Circle.ATTRIBUTE_NAMES = fabric4.SHARED_ATTRIBUTES.concat("cx cy r".split(" "));
      fabric4.Circle.fromElement = function(element, callback) {
        var parsedAttributes = fabric4.parseAttributes(element, fabric4.Circle.ATTRIBUTE_NAMES);
        if (!isValidRadius(parsedAttributes)) {
          throw new Error("value of `r` attribute is required and can not be negative");
        }
        parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.radius;
        parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.radius;
        callback(new fabric4.Circle(parsedAttributes));
      };
      function isValidRadius(attributes) {
        return "radius" in attributes && attributes.radius >= 0;
      }
      fabric4.Circle.fromObject = function(object, callback) {
        return fabric4.Object._fromObject("Circle", object, callback);
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {});
      if (fabric4.Triangle) {
        fabric4.warn("fabric.Triangle is already defined");
        return;
      }
      fabric4.Triangle = fabric4.util.createClass(fabric4.Object, {
        type: "triangle",
        width: 100,
        height: 100,
        _render: function(ctx) {
          var widthBy2 = this.width / 2, heightBy2 = this.height / 2;
          ctx.beginPath();
          ctx.moveTo(-widthBy2, heightBy2);
          ctx.lineTo(0, -heightBy2);
          ctx.lineTo(widthBy2, heightBy2);
          ctx.closePath();
          this._renderPaintInOrder(ctx);
        },
        _renderDashedStroke: function(ctx) {
          var widthBy2 = this.width / 2, heightBy2 = this.height / 2;
          ctx.beginPath();
          fabric4.util.drawDashedLine(ctx, -widthBy2, heightBy2, 0, -heightBy2, this.strokeDashArray);
          fabric4.util.drawDashedLine(ctx, 0, -heightBy2, widthBy2, heightBy2, this.strokeDashArray);
          fabric4.util.drawDashedLine(ctx, widthBy2, heightBy2, -widthBy2, heightBy2, this.strokeDashArray);
          ctx.closePath();
        },
        _toSVG: function() {
          var widthBy2 = this.width / 2, heightBy2 = this.height / 2, points = [
            -widthBy2 + " " + heightBy2,
            "0 " + -heightBy2,
            widthBy2 + " " + heightBy2
          ].join(",");
          return [
            "<polygon ",
            "COMMON_PARTS",
            'points="',
            points,
            '" />'
          ];
        }
      });
      fabric4.Triangle.fromObject = function(object, callback) {
        return fabric4.Object._fromObject("Triangle", object, callback);
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), piBy2 = Math.PI * 2;
      if (fabric4.Ellipse) {
        fabric4.warn("fabric.Ellipse is already defined.");
        return;
      }
      fabric4.Ellipse = fabric4.util.createClass(fabric4.Object, {
        type: "ellipse",
        rx: 0,
        ry: 0,
        cacheProperties: fabric4.Object.prototype.cacheProperties.concat("rx", "ry"),
        initialize: function(options) {
          this.callSuper("initialize", options);
          this.set("rx", options && options.rx || 0);
          this.set("ry", options && options.ry || 0);
        },
        _set: function(key, value) {
          this.callSuper("_set", key, value);
          switch (key) {
            case "rx":
              this.rx = value;
              this.set("width", value * 2);
              break;
            case "ry":
              this.ry = value;
              this.set("height", value * 2);
              break;
          }
          return this;
        },
        getRx: function() {
          return this.get("rx") * this.get("scaleX");
        },
        getRy: function() {
          return this.get("ry") * this.get("scaleY");
        },
        toObject: function(propertiesToInclude) {
          return this.callSuper("toObject", ["rx", "ry"].concat(propertiesToInclude));
        },
        _toSVG: function() {
          return [
            "<ellipse ",
            "COMMON_PARTS",
            'cx="0" cy="0" ',
            'rx="',
            this.rx,
            '" ry="',
            this.ry,
            '" />\n'
          ];
        },
        _render: function(ctx) {
          ctx.beginPath();
          ctx.save();
          ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);
          ctx.arc(0, 0, this.rx, 0, piBy2, false);
          ctx.restore();
          this._renderPaintInOrder(ctx);
        }
      });
      fabric4.Ellipse.ATTRIBUTE_NAMES = fabric4.SHARED_ATTRIBUTES.concat("cx cy rx ry".split(" "));
      fabric4.Ellipse.fromElement = function(element, callback) {
        var parsedAttributes = fabric4.parseAttributes(element, fabric4.Ellipse.ATTRIBUTE_NAMES);
        parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;
        parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;
        callback(new fabric4.Ellipse(parsedAttributes));
      };
      fabric4.Ellipse.fromObject = function(object, callback) {
        return fabric4.Object._fromObject("Ellipse", object, callback);
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), extend = fabric4.util.object.extend;
      if (fabric4.Rect) {
        fabric4.warn("fabric.Rect is already defined");
        return;
      }
      fabric4.Rect = fabric4.util.createClass(fabric4.Object, {
        stateProperties: fabric4.Object.prototype.stateProperties.concat("rx", "ry"),
        type: "rect",
        rx: 0,
        ry: 0,
        cacheProperties: fabric4.Object.prototype.cacheProperties.concat("rx", "ry"),
        initialize: function(options) {
          this.callSuper("initialize", options);
          this._initRxRy();
        },
        _initRxRy: function() {
          if (this.rx && !this.ry) {
            this.ry = this.rx;
          } else if (this.ry && !this.rx) {
            this.rx = this.ry;
          }
        },
        _render: function(ctx) {
          var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0, ry = this.ry ? Math.min(this.ry, this.height / 2) : 0, w = this.width, h = this.height, x = -this.width / 2, y = -this.height / 2, isRounded = rx !== 0 || ry !== 0, k = 1 - 0.5522847498;
          ctx.beginPath();
          ctx.moveTo(x + rx, y);
          ctx.lineTo(x + w - rx, y);
          isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);
          ctx.lineTo(x + w, y + h - ry);
          isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);
          ctx.lineTo(x + rx, y + h);
          isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);
          ctx.lineTo(x, y + ry);
          isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);
          ctx.closePath();
          this._renderPaintInOrder(ctx);
        },
        _renderDashedStroke: function(ctx) {
          var x = -this.width / 2, y = -this.height / 2, w = this.width, h = this.height;
          ctx.beginPath();
          fabric4.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);
          fabric4.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);
          fabric4.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);
          fabric4.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);
          ctx.closePath();
        },
        toObject: function(propertiesToInclude) {
          return this.callSuper("toObject", ["rx", "ry"].concat(propertiesToInclude));
        },
        _toSVG: function() {
          var x = -this.width / 2, y = -this.height / 2;
          return [
            "<rect ",
            "COMMON_PARTS",
            'x="',
            x,
            '" y="',
            y,
            '" rx="',
            this.rx,
            '" ry="',
            this.ry,
            '" width="',
            this.width,
            '" height="',
            this.height,
            '" />\n'
          ];
        }
      });
      fabric4.Rect.ATTRIBUTE_NAMES = fabric4.SHARED_ATTRIBUTES.concat("x y rx ry width height".split(" "));
      fabric4.Rect.fromElement = function(element, callback, options) {
        if (!element) {
          return callback(null);
        }
        options = options || {};
        var parsedAttributes = fabric4.parseAttributes(element, fabric4.Rect.ATTRIBUTE_NAMES);
        parsedAttributes.left = parsedAttributes.left || 0;
        parsedAttributes.top = parsedAttributes.top || 0;
        parsedAttributes.height = parsedAttributes.height || 0;
        parsedAttributes.width = parsedAttributes.width || 0;
        var rect = new fabric4.Rect(extend(options ? fabric4.util.object.clone(options) : {}, parsedAttributes));
        rect.visible = rect.visible && rect.width > 0 && rect.height > 0;
        callback(rect);
      };
      fabric4.Rect.fromObject = function(object, callback) {
        return fabric4.Object._fromObject("Rect", object, callback);
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), extend = fabric4.util.object.extend, min = fabric4.util.array.min, max = fabric4.util.array.max, toFixed = fabric4.util.toFixed;
      if (fabric4.Polyline) {
        fabric4.warn("fabric.Polyline is already defined");
        return;
      }
      fabric4.Polyline = fabric4.util.createClass(fabric4.Object, {
        type: "polyline",
        points: null,
        cacheProperties: fabric4.Object.prototype.cacheProperties.concat("points"),
        initialize: function(points, options) {
          options = options || {};
          this.points = points || [];
          this.callSuper("initialize", options);
          this._setPositionDimensions(options);
        },
        _setPositionDimensions: function(options) {
          var calcDim = this._calcDimensions(options), correctLeftTop;
          this.width = calcDim.width;
          this.height = calcDim.height;
          if (!options.fromSVG) {
            correctLeftTop = this.translateToGivenOrigin({x: calcDim.left - this.strokeWidth / 2, y: calcDim.top - this.strokeWidth / 2}, "left", "top", this.originX, this.originY);
          }
          if (typeof options.left === "undefined") {
            this.left = options.fromSVG ? calcDim.left : correctLeftTop.x;
          }
          if (typeof options.top === "undefined") {
            this.top = options.fromSVG ? calcDim.top : correctLeftTop.y;
          }
          this.pathOffset = {
            x: calcDim.left + this.width / 2,
            y: calcDim.top + this.height / 2
          };
        },
        _calcDimensions: function() {
          var points = this.points, minX = min(points, "x") || 0, minY = min(points, "y") || 0, maxX = max(points, "x") || 0, maxY = max(points, "y") || 0, width = maxX - minX, height = maxY - minY;
          return {
            left: minX,
            top: minY,
            width,
            height
          };
        },
        toObject: function(propertiesToInclude) {
          return extend(this.callSuper("toObject", propertiesToInclude), {
            points: this.points.concat()
          });
        },
        _toSVG: function() {
          var points = [], diffX = this.pathOffset.x, diffY = this.pathOffset.y, NUM_FRACTION_DIGITS = fabric4.Object.NUM_FRACTION_DIGITS;
          for (var i = 0, len = this.points.length; i < len; i++) {
            points.push(toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS), ",", toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS), " ");
          }
          return [
            "<" + this.type + " ",
            "COMMON_PARTS",
            'points="',
            points.join(""),
            '" />\n'
          ];
        },
        commonRender: function(ctx) {
          var point, len = this.points.length, x = this.pathOffset.x, y = this.pathOffset.y;
          if (!len || isNaN(this.points[len - 1].y)) {
            return false;
          }
          ctx.beginPath();
          ctx.moveTo(this.points[0].x - x, this.points[0].y - y);
          for (var i = 0; i < len; i++) {
            point = this.points[i];
            ctx.lineTo(point.x - x, point.y - y);
          }
          return true;
        },
        _render: function(ctx) {
          if (!this.commonRender(ctx)) {
            return;
          }
          this._renderPaintInOrder(ctx);
        },
        _renderDashedStroke: function(ctx) {
          var p1, p2;
          ctx.beginPath();
          for (var i = 0, len = this.points.length; i < len; i++) {
            p1 = this.points[i];
            p2 = this.points[i + 1] || p1;
            fabric4.util.drawDashedLine(ctx, p1.x, p1.y, p2.x, p2.y, this.strokeDashArray);
          }
        },
        complexity: function() {
          return this.get("points").length;
        }
      });
      fabric4.Polyline.ATTRIBUTE_NAMES = fabric4.SHARED_ATTRIBUTES.concat();
      fabric4.Polyline.fromElementGenerator = function(_class) {
        return function(element, callback, options) {
          if (!element) {
            return callback(null);
          }
          options || (options = {});
          var points = fabric4.parsePointsAttribute(element.getAttribute("points")), parsedAttributes = fabric4.parseAttributes(element, fabric4[_class].ATTRIBUTE_NAMES);
          parsedAttributes.fromSVG = true;
          callback(new fabric4[_class](points, extend(parsedAttributes, options)));
        };
      };
      fabric4.Polyline.fromElement = fabric4.Polyline.fromElementGenerator("Polyline");
      fabric4.Polyline.fromObject = function(object, callback) {
        return fabric4.Object._fromObject("Polyline", object, callback, "points");
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {});
      if (fabric4.Polygon) {
        fabric4.warn("fabric.Polygon is already defined");
        return;
      }
      fabric4.Polygon = fabric4.util.createClass(fabric4.Polyline, {
        type: "polygon",
        _render: function(ctx) {
          if (!this.commonRender(ctx)) {
            return;
          }
          ctx.closePath();
          this._renderPaintInOrder(ctx);
        },
        _renderDashedStroke: function(ctx) {
          this.callSuper("_renderDashedStroke", ctx);
          ctx.closePath();
        }
      });
      fabric4.Polygon.ATTRIBUTE_NAMES = fabric4.SHARED_ATTRIBUTES.concat();
      fabric4.Polygon.fromElement = fabric4.Polyline.fromElementGenerator("Polygon");
      fabric4.Polygon.fromObject = function(object, callback) {
        return fabric4.Object._fromObject("Polygon", object, callback, "points");
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), min = fabric4.util.array.min, max = fabric4.util.array.max, extend = fabric4.util.object.extend, _toString = Object.prototype.toString, toFixed = fabric4.util.toFixed;
      if (fabric4.Path) {
        fabric4.warn("fabric.Path is already defined");
        return;
      }
      fabric4.Path = fabric4.util.createClass(fabric4.Object, {
        type: "path",
        path: null,
        cacheProperties: fabric4.Object.prototype.cacheProperties.concat("path", "fillRule"),
        stateProperties: fabric4.Object.prototype.stateProperties.concat("path"),
        initialize: function(path, options) {
          options = options || {};
          this.callSuper("initialize", options);
          if (!path) {
            path = [];
          }
          var fromArray = _toString.call(path) === "[object Array]";
          this.path = fromArray ? fabric4.util.makePathSimpler(path) : fabric4.util.makePathSimpler(fabric4.util.parsePath(path));
          if (!this.path) {
            return;
          }
          fabric4.Polyline.prototype._setPositionDimensions.call(this, options);
        },
        _renderPathCommands: function(ctx) {
          var current, subpathStartX = 0, subpathStartY = 0, x = 0, y = 0, controlX = 0, controlY = 0, l = -this.pathOffset.x, t = -this.pathOffset.y;
          ctx.beginPath();
          for (var i = 0, len = this.path.length; i < len; ++i) {
            current = this.path[i];
            switch (current[0]) {
              case "L":
                x = current[1];
                y = current[2];
                ctx.lineTo(x + l, y + t);
                break;
              case "M":
                x = current[1];
                y = current[2];
                subpathStartX = x;
                subpathStartY = y;
                ctx.moveTo(x + l, y + t);
                break;
              case "C":
                x = current[5];
                y = current[6];
                controlX = current[3];
                controlY = current[4];
                ctx.bezierCurveTo(current[1] + l, current[2] + t, controlX + l, controlY + t, x + l, y + t);
                break;
              case "Q":
                ctx.quadraticCurveTo(current[1] + l, current[2] + t, current[3] + l, current[4] + t);
                x = current[3];
                y = current[4];
                controlX = current[1];
                controlY = current[2];
                break;
              case "z":
              case "Z":
                x = subpathStartX;
                y = subpathStartY;
                ctx.closePath();
                break;
            }
          }
        },
        _render: function(ctx) {
          this._renderPathCommands(ctx);
          this._renderPaintInOrder(ctx);
        },
        toString: function() {
          return "#<fabric.Path (" + this.complexity() + '): { "top": ' + this.top + ', "left": ' + this.left + " }>";
        },
        toObject: function(propertiesToInclude) {
          return extend(this.callSuper("toObject", propertiesToInclude), {
            path: this.path.map(function(item) {
              return item.slice();
            })
          });
        },
        toDatalessObject: function(propertiesToInclude) {
          var o = this.toObject(["sourcePath"].concat(propertiesToInclude));
          if (o.sourcePath) {
            delete o.path;
          }
          return o;
        },
        _toSVG: function() {
          var path = this.path.map(function(path2) {
            return path2.join(" ");
          }).join(" ");
          return [
            "<path ",
            "COMMON_PARTS",
            'd="',
            path,
            '" stroke-linecap="round" ',
            "/>\n"
          ];
        },
        _getOffsetTransform: function() {
          var digits = fabric4.Object.NUM_FRACTION_DIGITS;
          return " translate(" + toFixed(-this.pathOffset.x, digits) + ", " + toFixed(-this.pathOffset.y, digits) + ")";
        },
        toClipPathSVG: function(reviver) {
          var additionalTransform = this._getOffsetTransform();
          return "	" + this._createBaseClipPathSVGMarkup(this._toSVG(), {reviver, additionalTransform});
        },
        toSVG: function(reviver) {
          var additionalTransform = this._getOffsetTransform();
          return this._createBaseSVGMarkup(this._toSVG(), {reviver, additionalTransform});
        },
        complexity: function() {
          return this.path.length;
        },
        _calcDimensions: function() {
          var aX = [], aY = [], current, subpathStartX = 0, subpathStartY = 0, x = 0, y = 0, bounds;
          for (var i = 0, len = this.path.length; i < len; ++i) {
            current = this.path[i];
            switch (current[0]) {
              case "L":
                x = current[1];
                y = current[2];
                bounds = [];
                break;
              case "M":
                x = current[1];
                y = current[2];
                subpathStartX = x;
                subpathStartY = y;
                bounds = [];
                break;
              case "C":
                bounds = fabric4.util.getBoundsOfCurve(x, y, current[1], current[2], current[3], current[4], current[5], current[6]);
                x = current[5];
                y = current[6];
                break;
              case "Q":
                bounds = fabric4.util.getBoundsOfCurve(x, y, current[1], current[2], current[1], current[2], current[3], current[4]);
                x = current[3];
                y = current[4];
                break;
              case "z":
              case "Z":
                x = subpathStartX;
                y = subpathStartY;
                break;
            }
            bounds.forEach(function(point) {
              aX.push(point.x);
              aY.push(point.y);
            });
            aX.push(x);
            aY.push(y);
          }
          var minX = min(aX) || 0, minY = min(aY) || 0, maxX = max(aX) || 0, maxY = max(aY) || 0, deltaX = maxX - minX, deltaY = maxY - minY;
          return {
            left: minX,
            top: minY,
            width: deltaX,
            height: deltaY
          };
        }
      });
      fabric4.Path.fromObject = function(object, callback) {
        if (typeof object.sourcePath === "string") {
          var pathUrl = object.sourcePath;
          fabric4.loadSVGFromURL(pathUrl, function(elements) {
            var path = elements[0];
            path.setOptions(object);
            callback && callback(path);
          });
        } else {
          fabric4.Object._fromObject("Path", object, callback, "path");
        }
      };
      fabric4.Path.ATTRIBUTE_NAMES = fabric4.SHARED_ATTRIBUTES.concat(["d"]);
      fabric4.Path.fromElement = function(element, callback, options) {
        var parsedAttributes = fabric4.parseAttributes(element, fabric4.Path.ATTRIBUTE_NAMES);
        parsedAttributes.fromSVG = true;
        callback(new fabric4.Path(parsedAttributes.d, extend(parsedAttributes, options)));
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), min = fabric4.util.array.min, max = fabric4.util.array.max;
      if (fabric4.Group) {
        return;
      }
      fabric4.Group = fabric4.util.createClass(fabric4.Object, fabric4.Collection, {
        type: "group",
        strokeWidth: 0,
        subTargetCheck: false,
        cacheProperties: [],
        useSetOnGroup: false,
        initialize: function(objects, options, isAlreadyGrouped) {
          options = options || {};
          this._objects = [];
          isAlreadyGrouped && this.callSuper("initialize", options);
          this._objects = objects || [];
          for (var i = this._objects.length; i--; ) {
            this._objects[i].group = this;
          }
          if (!isAlreadyGrouped) {
            var center = options && options.centerPoint;
            if (options.originX !== void 0) {
              this.originX = options.originX;
            }
            if (options.originY !== void 0) {
              this.originY = options.originY;
            }
            center || this._calcBounds();
            this._updateObjectsCoords(center);
            delete options.centerPoint;
            this.callSuper("initialize", options);
          } else {
            this._updateObjectsACoords();
          }
          this.setCoords();
        },
        _updateObjectsACoords: function() {
          var skipControls = true;
          for (var i = this._objects.length; i--; ) {
            this._objects[i].setCoords(skipControls);
          }
        },
        _updateObjectsCoords: function(center) {
          var center = center || this.getCenterPoint();
          for (var i = this._objects.length; i--; ) {
            this._updateObjectCoords(this._objects[i], center);
          }
        },
        _updateObjectCoords: function(object, center) {
          var objectLeft = object.left, objectTop = object.top, skipControls = true;
          object.set({
            left: objectLeft - center.x,
            top: objectTop - center.y
          });
          object.group = this;
          object.setCoords(skipControls);
        },
        toString: function() {
          return "#<fabric.Group: (" + this.complexity() + ")>";
        },
        addWithUpdate: function(object) {
          this._restoreObjectsState();
          fabric4.util.resetObjectTransform(this);
          if (object) {
            this._objects.push(object);
            object.group = this;
            object._set("canvas", this.canvas);
          }
          this._calcBounds();
          this._updateObjectsCoords();
          this.setCoords();
          this.dirty = true;
          return this;
        },
        removeWithUpdate: function(object) {
          this._restoreObjectsState();
          fabric4.util.resetObjectTransform(this);
          this.remove(object);
          this._calcBounds();
          this._updateObjectsCoords();
          this.setCoords();
          this.dirty = true;
          return this;
        },
        _onObjectAdded: function(object) {
          this.dirty = true;
          object.group = this;
          object._set("canvas", this.canvas);
        },
        _onObjectRemoved: function(object) {
          this.dirty = true;
          delete object.group;
        },
        _set: function(key, value) {
          var i = this._objects.length;
          if (this.useSetOnGroup) {
            while (i--) {
              this._objects[i].setOnGroup(key, value);
            }
          }
          if (key === "canvas") {
            while (i--) {
              this._objects[i]._set(key, value);
            }
          }
          fabric4.Object.prototype._set.call(this, key, value);
        },
        toObject: function(propertiesToInclude) {
          var _includeDefaultValues = this.includeDefaultValues;
          var objsToObject = this._objects.map(function(obj2) {
            var originalDefaults = obj2.includeDefaultValues;
            obj2.includeDefaultValues = _includeDefaultValues;
            var _obj2 = obj2.toObject(propertiesToInclude);
            obj2.includeDefaultValues = originalDefaults;
            return _obj2;
          });
          var obj = fabric4.Object.prototype.toObject.call(this, propertiesToInclude);
          obj.objects = objsToObject;
          return obj;
        },
        toDatalessObject: function(propertiesToInclude) {
          var objsToObject, sourcePath = this.sourcePath;
          if (sourcePath) {
            objsToObject = sourcePath;
          } else {
            var _includeDefaultValues = this.includeDefaultValues;
            objsToObject = this._objects.map(function(obj2) {
              var originalDefaults = obj2.includeDefaultValues;
              obj2.includeDefaultValues = _includeDefaultValues;
              var _obj2 = obj2.toDatalessObject(propertiesToInclude);
              obj2.includeDefaultValues = originalDefaults;
              return _obj2;
            });
          }
          var obj = fabric4.Object.prototype.toDatalessObject.call(this, propertiesToInclude);
          obj.objects = objsToObject;
          return obj;
        },
        render: function(ctx) {
          this._transformDone = true;
          this.callSuper("render", ctx);
          this._transformDone = false;
        },
        shouldCache: function() {
          var ownCache = fabric4.Object.prototype.shouldCache.call(this);
          if (ownCache) {
            for (var i = 0, len = this._objects.length; i < len; i++) {
              if (this._objects[i].willDrawShadow()) {
                this.ownCaching = false;
                return false;
              }
            }
          }
          return ownCache;
        },
        willDrawShadow: function() {
          if (fabric4.Object.prototype.willDrawShadow.call(this)) {
            return true;
          }
          for (var i = 0, len = this._objects.length; i < len; i++) {
            if (this._objects[i].willDrawShadow()) {
              return true;
            }
          }
          return false;
        },
        isOnACache: function() {
          return this.ownCaching || this.group && this.group.isOnACache();
        },
        drawObject: function(ctx) {
          for (var i = 0, len = this._objects.length; i < len; i++) {
            this._objects[i].render(ctx);
          }
          this._drawClipPath(ctx);
        },
        isCacheDirty: function(skipCanvas) {
          if (this.callSuper("isCacheDirty", skipCanvas)) {
            return true;
          }
          if (!this.statefullCache) {
            return false;
          }
          for (var i = 0, len = this._objects.length; i < len; i++) {
            if (this._objects[i].isCacheDirty(true)) {
              if (this._cacheCanvas) {
                var x = this.cacheWidth / this.zoomX, y = this.cacheHeight / this.zoomY;
                this._cacheContext.clearRect(-x / 2, -y / 2, x, y);
              }
              return true;
            }
          }
          return false;
        },
        _restoreObjectsState: function() {
          this._objects.forEach(this._restoreObjectState, this);
          return this;
        },
        realizeTransform: function(object) {
          var matrix = object.calcTransformMatrix(), options = fabric4.util.qrDecompose(matrix), center = new fabric4.Point(options.translateX, options.translateY);
          object.flipX = false;
          object.flipY = false;
          object.set("scaleX", options.scaleX);
          object.set("scaleY", options.scaleY);
          object.skewX = options.skewX;
          object.skewY = options.skewY;
          object.angle = options.angle;
          object.setPositionByOrigin(center, "center", "center");
          return object;
        },
        _restoreObjectState: function(object) {
          this.realizeTransform(object);
          delete object.group;
          object.setCoords();
          return this;
        },
        destroy: function() {
          this._objects.forEach(function(object) {
            object.set("dirty", true);
          });
          return this._restoreObjectsState();
        },
        toActiveSelection: function() {
          if (!this.canvas) {
            return;
          }
          var objects = this._objects, canvas = this.canvas;
          this._objects = [];
          var options = this.toObject();
          delete options.objects;
          var activeSelection = new fabric4.ActiveSelection([]);
          activeSelection.set(options);
          activeSelection.type = "activeSelection";
          canvas.remove(this);
          objects.forEach(function(object) {
            object.group = activeSelection;
            object.dirty = true;
            canvas.add(object);
          });
          activeSelection.canvas = canvas;
          activeSelection._objects = objects;
          canvas._activeObject = activeSelection;
          activeSelection.setCoords();
          return activeSelection;
        },
        ungroupOnCanvas: function() {
          return this._restoreObjectsState();
        },
        setObjectsCoords: function() {
          var skipControls = true;
          this.forEachObject(function(object) {
            object.setCoords(skipControls);
          });
          return this;
        },
        _calcBounds: function(onlyWidthHeight) {
          var aX = [], aY = [], o, prop, props = ["tr", "br", "bl", "tl"], i = 0, iLen = this._objects.length, j, jLen = props.length;
          for (; i < iLen; ++i) {
            o = this._objects[i];
            o.aCoords = o.calcACoords();
            for (j = 0; j < jLen; j++) {
              prop = props[j];
              aX.push(o.aCoords[prop].x);
              aY.push(o.aCoords[prop].y);
            }
          }
          this._getBounds(aX, aY, onlyWidthHeight);
        },
        _getBounds: function(aX, aY, onlyWidthHeight) {
          var minXY = new fabric4.Point(min(aX), min(aY)), maxXY = new fabric4.Point(max(aX), max(aY)), top = minXY.y || 0, left = minXY.x || 0, width = maxXY.x - minXY.x || 0, height = maxXY.y - minXY.y || 0;
          this.width = width;
          this.height = height;
          if (!onlyWidthHeight) {
            this.setPositionByOrigin({x: left, y: top}, "left", "top");
          }
        },
        _toSVG: function(reviver) {
          var svgString = ["<g ", "COMMON_PARTS", " >\n"];
          for (var i = 0, len = this._objects.length; i < len; i++) {
            svgString.push("		", this._objects[i].toSVG(reviver));
          }
          svgString.push("</g>\n");
          return svgString;
        },
        getSvgStyles: function() {
          var opacity = typeof this.opacity !== "undefined" && this.opacity !== 1 ? "opacity: " + this.opacity + ";" : "", visibility = this.visible ? "" : " visibility: hidden;";
          return [
            opacity,
            this.getSvgFilter(),
            visibility
          ].join("");
        },
        toClipPathSVG: function(reviver) {
          var svgString = [];
          for (var i = 0, len = this._objects.length; i < len; i++) {
            svgString.push("	", this._objects[i].toClipPathSVG(reviver));
          }
          return this._createBaseClipPathSVGMarkup(svgString, {reviver});
        }
      });
      fabric4.Group.fromObject = function(object, callback) {
        var objects = object.objects, options = fabric4.util.object.clone(object, true);
        delete options.objects;
        if (typeof objects === "string") {
          fabric4.loadSVGFromURL(objects, function(elements) {
            var group2 = fabric4.util.groupSVGElements(elements, object, objects);
            group2.set(options);
            callback && callback(group2);
          });
          return;
        }
        fabric4.util.enlivenObjects(objects, function(enlivenedObjects) {
          fabric4.util.enlivenObjects([object.clipPath], function(enlivedClipPath) {
            var options2 = fabric4.util.object.clone(object, true);
            options2.clipPath = enlivedClipPath[0];
            delete options2.objects;
            callback && callback(new fabric4.Group(enlivenedObjects, options2, true));
          });
        });
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {});
      if (fabric4.ActiveSelection) {
        return;
      }
      fabric4.ActiveSelection = fabric4.util.createClass(fabric4.Group, {
        type: "activeSelection",
        initialize: function(objects, options) {
          options = options || {};
          this._objects = objects || [];
          for (var i = this._objects.length; i--; ) {
            this._objects[i].group = this;
          }
          if (options.originX) {
            this.originX = options.originX;
          }
          if (options.originY) {
            this.originY = options.originY;
          }
          this._calcBounds();
          this._updateObjectsCoords();
          fabric4.Object.prototype.initialize.call(this, options);
          this.setCoords();
        },
        toGroup: function() {
          var objects = this._objects.concat();
          this._objects = [];
          var options = fabric4.Object.prototype.toObject.call(this);
          var newGroup = new fabric4.Group([]);
          delete options.type;
          newGroup.set(options);
          objects.forEach(function(object) {
            object.canvas.remove(object);
            object.group = newGroup;
          });
          newGroup._objects = objects;
          if (!this.canvas) {
            return newGroup;
          }
          var canvas = this.canvas;
          canvas.add(newGroup);
          canvas._activeObject = newGroup;
          newGroup.setCoords();
          return newGroup;
        },
        onDeselect: function() {
          this.destroy();
          return false;
        },
        toString: function() {
          return "#<fabric.ActiveSelection: (" + this.complexity() + ")>";
        },
        shouldCache: function() {
          return false;
        },
        isOnACache: function() {
          return false;
        },
        _renderControls: function(ctx, styleOverride, childrenOverride) {
          ctx.save();
          ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
          this.callSuper("_renderControls", ctx, styleOverride);
          childrenOverride = childrenOverride || {};
          if (typeof childrenOverride.hasControls === "undefined") {
            childrenOverride.hasControls = false;
          }
          childrenOverride.forActiveSelection = true;
          for (var i = 0, len = this._objects.length; i < len; i++) {
            this._objects[i]._renderControls(ctx, childrenOverride);
          }
          ctx.restore();
        }
      });
      fabric4.ActiveSelection.fromObject = function(object, callback) {
        fabric4.util.enlivenObjects(object.objects, function(enlivenedObjects) {
          delete object.objects;
          callback && callback(new fabric4.ActiveSelection(enlivenedObjects, object, true));
        });
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var extend = fabric3.util.object.extend;
      if (!global2.fabric) {
        global2.fabric = {};
      }
      if (global2.fabric.Image) {
        fabric3.warn("fabric.Image is already defined.");
        return;
      }
      fabric3.Image = fabric3.util.createClass(fabric3.Object, {
        type: "image",
        strokeWidth: 0,
        srcFromAttribute: false,
        _lastScaleX: 1,
        _lastScaleY: 1,
        _filterScalingX: 1,
        _filterScalingY: 1,
        minimumScaleTrigger: 0.5,
        stateProperties: fabric3.Object.prototype.stateProperties.concat("cropX", "cropY"),
        cacheKey: "",
        cropX: 0,
        cropY: 0,
        imageSmoothing: true,
        initialize: function(element, options) {
          options || (options = {});
          this.filters = [];
          this.cacheKey = "texture" + fabric3.Object.__uid++;
          this.callSuper("initialize", options);
          this._initElement(element, options);
        },
        getElement: function() {
          return this._element || {};
        },
        setElement: function(element, options) {
          this.removeTexture(this.cacheKey);
          this.removeTexture(this.cacheKey + "_filtered");
          this._element = element;
          this._originalElement = element;
          this._initConfig(options);
          if (this.filters.length !== 0) {
            this.applyFilters();
          }
          if (this.resizeFilter) {
            this.applyResizeFilters();
          }
          return this;
        },
        removeTexture: function(key) {
          var backend = fabric3.filterBackend;
          if (backend && backend.evictCachesForKey) {
            backend.evictCachesForKey(key);
          }
        },
        dispose: function() {
          this.removeTexture(this.cacheKey);
          this.removeTexture(this.cacheKey + "_filtered");
          this._cacheContext = void 0;
          ["_originalElement", "_element", "_filteredEl", "_cacheCanvas"].forEach(function(element) {
            fabric3.util.cleanUpJsdomNode(this[element]);
            this[element] = void 0;
          }.bind(this));
        },
        getCrossOrigin: function() {
          return this._originalElement && (this._originalElement.crossOrigin || null);
        },
        getOriginalSize: function() {
          var element = this.getElement();
          return {
            width: element.naturalWidth || element.width,
            height: element.naturalHeight || element.height
          };
        },
        _stroke: function(ctx) {
          if (!this.stroke || this.strokeWidth === 0) {
            return;
          }
          var w = this.width / 2, h = this.height / 2;
          ctx.beginPath();
          ctx.moveTo(-w, -h);
          ctx.lineTo(w, -h);
          ctx.lineTo(w, h);
          ctx.lineTo(-w, h);
          ctx.lineTo(-w, -h);
          ctx.closePath();
        },
        _renderDashedStroke: function(ctx) {
          var x = -this.width / 2, y = -this.height / 2, w = this.width, h = this.height;
          ctx.save();
          this._setStrokeStyles(ctx, this);
          ctx.beginPath();
          fabric3.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);
          fabric3.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);
          fabric3.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);
          fabric3.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);
          ctx.closePath();
          ctx.restore();
        },
        toObject: function(propertiesToInclude) {
          var filters = [];
          this.filters.forEach(function(filterObj) {
            if (filterObj) {
              filters.push(filterObj.toObject());
            }
          });
          var object = extend(this.callSuper("toObject", ["cropX", "cropY"].concat(propertiesToInclude)), {
            src: this.getSrc(),
            crossOrigin: this.getCrossOrigin(),
            filters
          });
          if (this.resizeFilter) {
            object.resizeFilter = this.resizeFilter.toObject();
          }
          return object;
        },
        hasCrop: function() {
          return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;
        },
        _toSVG: function() {
          var svgString = [], imageMarkup = [], strokeSvg, element = this._element, x = -this.width / 2, y = -this.height / 2, clipPath = "", imageRendering = "";
          if (!element) {
            return [];
          }
          if (this.hasCrop()) {
            var clipPathId = fabric3.Object.__uid++;
            svgString.push('<clipPath id="imageCrop_' + clipPathId + '">\n', '	<rect x="' + x + '" y="' + y + '" width="' + this.width + '" height="' + this.height + '" />\n', "</clipPath>\n");
            clipPath = ' clip-path="url(#imageCrop_' + clipPathId + ')" ';
          }
          if (!this.imageSmoothing) {
            imageRendering = '" image-rendering="optimizeSpeed';
          }
          imageMarkup.push("	<image ", "COMMON_PARTS", 'xlink:href="', this.getSvgSrc(true), '" x="', x - this.cropX, '" y="', y - this.cropY, '" width="', element.width || element.naturalWidth, '" height="', element.height || element.height, imageRendering, '"', clipPath, "></image>\n");
          if (this.stroke || this.strokeDashArray) {
            var origFill = this.fill;
            this.fill = null;
            strokeSvg = [
              "	<rect ",
              'x="',
              x,
              '" y="',
              y,
              '" width="',
              this.width,
              '" height="',
              this.height,
              '" style="',
              this.getSvgStyles(),
              '"/>\n'
            ];
            this.fill = origFill;
          }
          if (this.paintFirst !== "fill") {
            svgString = svgString.concat(strokeSvg, imageMarkup);
          } else {
            svgString = svgString.concat(imageMarkup, strokeSvg);
          }
          return svgString;
        },
        getSrc: function(filtered) {
          var element = filtered ? this._element : this._originalElement;
          if (element) {
            if (element.toDataURL) {
              return element.toDataURL();
            }
            if (this.srcFromAttribute) {
              return element.getAttribute("src");
            } else {
              return element.src;
            }
          } else {
            return this.src || "";
          }
        },
        setSrc: function(src, callback, options) {
          fabric3.util.loadImage(src, function(img, isError) {
            this.setElement(img, options);
            this._setWidthHeight();
            callback && callback(this, isError);
          }, this, options && options.crossOrigin);
          return this;
        },
        toString: function() {
          return '#<fabric.Image: { src: "' + this.getSrc() + '" }>';
        },
        applyResizeFilters: function() {
          var filter = this.resizeFilter, minimumScale = this.minimumScaleTrigger, objectScale = this.getTotalObjectScaling(), scaleX = objectScale.scaleX, scaleY = objectScale.scaleY, elementToFilter = this._filteredEl || this._originalElement;
          if (this.group) {
            this.set("dirty", true);
          }
          if (!filter || scaleX > minimumScale && scaleY > minimumScale) {
            this._element = elementToFilter;
            this._filterScalingX = 1;
            this._filterScalingY = 1;
            this._lastScaleX = scaleX;
            this._lastScaleY = scaleY;
            return;
          }
          if (!fabric3.filterBackend) {
            fabric3.filterBackend = fabric3.initFilterBackend();
          }
          var canvasEl = fabric3.util.createCanvasElement(), cacheKey = this._filteredEl ? this.cacheKey + "_filtered" : this.cacheKey, sourceWidth = elementToFilter.width, sourceHeight = elementToFilter.height;
          canvasEl.width = sourceWidth;
          canvasEl.height = sourceHeight;
          this._element = canvasEl;
          this._lastScaleX = filter.scaleX = scaleX;
          this._lastScaleY = filter.scaleY = scaleY;
          fabric3.filterBackend.applyFilters([filter], elementToFilter, sourceWidth, sourceHeight, this._element, cacheKey);
          this._filterScalingX = canvasEl.width / this._originalElement.width;
          this._filterScalingY = canvasEl.height / this._originalElement.height;
        },
        applyFilters: function(filters) {
          filters = filters || this.filters || [];
          filters = filters.filter(function(filter) {
            return filter && !filter.isNeutralState();
          });
          this.set("dirty", true);
          this.removeTexture(this.cacheKey + "_filtered");
          if (filters.length === 0) {
            this._element = this._originalElement;
            this._filteredEl = null;
            this._filterScalingX = 1;
            this._filterScalingY = 1;
            return this;
          }
          var imgElement = this._originalElement, sourceWidth = imgElement.naturalWidth || imgElement.width, sourceHeight = imgElement.naturalHeight || imgElement.height;
          if (this._element === this._originalElement) {
            var canvasEl = fabric3.util.createCanvasElement();
            canvasEl.width = sourceWidth;
            canvasEl.height = sourceHeight;
            this._element = canvasEl;
            this._filteredEl = canvasEl;
          } else {
            this._element = this._filteredEl;
            this._filteredEl.getContext("2d").clearRect(0, 0, sourceWidth, sourceHeight);
            this._lastScaleX = 1;
            this._lastScaleY = 1;
          }
          if (!fabric3.filterBackend) {
            fabric3.filterBackend = fabric3.initFilterBackend();
          }
          fabric3.filterBackend.applyFilters(filters, this._originalElement, sourceWidth, sourceHeight, this._element, this.cacheKey);
          if (this._originalElement.width !== this._element.width || this._originalElement.height !== this._element.height) {
            this._filterScalingX = this._element.width / this._originalElement.width;
            this._filterScalingY = this._element.height / this._originalElement.height;
          }
          return this;
        },
        _render: function(ctx) {
          fabric3.util.setImageSmoothing(ctx, this.imageSmoothing);
          if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {
            this.applyResizeFilters();
          }
          this._stroke(ctx);
          this._renderPaintInOrder(ctx);
        },
        drawCacheOnCanvas: function(ctx) {
          fabric3.util.setImageSmoothing(ctx, this.imageSmoothing);
          fabric3.Object.prototype.drawCacheOnCanvas.call(this, ctx);
        },
        shouldCache: function() {
          return this.needsItsOwnCache();
        },
        _renderFill: function(ctx) {
          var elementToDraw = this._element;
          if (!elementToDraw) {
            return;
          }
          var scaleX = this._filterScalingX, scaleY = this._filterScalingY, w = this.width, h = this.height, min = Math.min, max = Math.max, cropX = max(this.cropX, 0), cropY = max(this.cropY, 0), elWidth = elementToDraw.naturalWidth || elementToDraw.width, elHeight = elementToDraw.naturalHeight || elementToDraw.height, sX = cropX * scaleX, sY = cropY * scaleY, sW = min(w * scaleX, elWidth - sX), sH = min(h * scaleY, elHeight - sY), x = -w / 2, y = -h / 2, maxDestW = min(w, elWidth / scaleX - cropX), maxDestH = min(h, elHeight / scaleX - cropY);
          elementToDraw && ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);
        },
        _needsResize: function() {
          var scale = this.getTotalObjectScaling();
          return scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY;
        },
        _resetWidthHeight: function() {
          this.set(this.getOriginalSize());
        },
        _initElement: function(element, options) {
          this.setElement(fabric3.util.getById(element), options);
          fabric3.util.addClass(this.getElement(), fabric3.Image.CSS_CANVAS);
        },
        _initConfig: function(options) {
          options || (options = {});
          this.setOptions(options);
          this._setWidthHeight(options);
        },
        _initFilters: function(filters, callback) {
          if (filters && filters.length) {
            fabric3.util.enlivenObjects(filters, function(enlivenedObjects) {
              callback && callback(enlivenedObjects);
            }, "fabric.Image.filters");
          } else {
            callback && callback();
          }
        },
        _setWidthHeight: function(options) {
          options || (options = {});
          var el2 = this.getElement();
          this.width = options.width || el2.naturalWidth || el2.width || 0;
          this.height = options.height || el2.naturalHeight || el2.height || 0;
        },
        parsePreserveAspectRatioAttribute: function() {
          var pAR = fabric3.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || ""), rWidth = this._element.width, rHeight = this._element.height, scaleX = 1, scaleY = 1, offsetLeft = 0, offsetTop = 0, cropX = 0, cropY = 0, offset, pWidth = this.width, pHeight = this.height, parsedAttributes = {width: pWidth, height: pHeight};
          if (pAR && (pAR.alignX !== "none" || pAR.alignY !== "none")) {
            if (pAR.meetOrSlice === "meet") {
              scaleX = scaleY = fabric3.util.findScaleToFit(this._element, parsedAttributes);
              offset = (pWidth - rWidth * scaleX) / 2;
              if (pAR.alignX === "Min") {
                offsetLeft = -offset;
              }
              if (pAR.alignX === "Max") {
                offsetLeft = offset;
              }
              offset = (pHeight - rHeight * scaleY) / 2;
              if (pAR.alignY === "Min") {
                offsetTop = -offset;
              }
              if (pAR.alignY === "Max") {
                offsetTop = offset;
              }
            }
            if (pAR.meetOrSlice === "slice") {
              scaleX = scaleY = fabric3.util.findScaleToCover(this._element, parsedAttributes);
              offset = rWidth - pWidth / scaleX;
              if (pAR.alignX === "Mid") {
                cropX = offset / 2;
              }
              if (pAR.alignX === "Max") {
                cropX = offset;
              }
              offset = rHeight - pHeight / scaleY;
              if (pAR.alignY === "Mid") {
                cropY = offset / 2;
              }
              if (pAR.alignY === "Max") {
                cropY = offset;
              }
              rWidth = pWidth / scaleX;
              rHeight = pHeight / scaleY;
            }
          } else {
            scaleX = pWidth / rWidth;
            scaleY = pHeight / rHeight;
          }
          return {
            width: rWidth,
            height: rHeight,
            scaleX,
            scaleY,
            offsetLeft,
            offsetTop,
            cropX,
            cropY
          };
        }
      });
      fabric3.Image.CSS_CANVAS = "canvas-img";
      fabric3.Image.prototype.getSvgSrc = fabric3.Image.prototype.getSrc;
      fabric3.Image.fromObject = function(_object, callback) {
        var object = fabric3.util.object.clone(_object);
        fabric3.util.loadImage(object.src, function(img, isError) {
          if (isError) {
            callback && callback(null, true);
            return;
          }
          fabric3.Image.prototype._initFilters.call(object, object.filters, function(filters) {
            object.filters = filters || [];
            fabric3.Image.prototype._initFilters.call(object, [object.resizeFilter], function(resizeFilters) {
              object.resizeFilter = resizeFilters[0];
              fabric3.util.enlivenObjects([object.clipPath], function(enlivedProps) {
                object.clipPath = enlivedProps[0];
                var image = new fabric3.Image(img, object);
                callback(image, false);
              });
            });
          });
        }, null, object.crossOrigin);
      };
      fabric3.Image.fromURL = function(url, callback, imgOptions) {
        fabric3.util.loadImage(url, function(img, isError) {
          callback && callback(new fabric3.Image(img, imgOptions), isError);
        }, null, imgOptions && imgOptions.crossOrigin);
      };
      fabric3.Image.ATTRIBUTE_NAMES = fabric3.SHARED_ATTRIBUTES.concat("x y width height preserveAspectRatio xlink:href crossOrigin image-rendering".split(" "));
      fabric3.Image.fromElement = function(element, callback, options) {
        var parsedAttributes = fabric3.parseAttributes(element, fabric3.Image.ATTRIBUTE_NAMES);
        fabric3.Image.fromURL(parsedAttributes["xlink:href"], callback, extend(options ? fabric3.util.object.clone(options) : {}, parsedAttributes));
      };
    })(typeof exports !== "undefined" ? exports : exports);
    fabric3.util.object.extend(fabric3.Object.prototype, {
      _getAngleValueForStraighten: function() {
        var angle = this.angle % 360;
        if (angle > 0) {
          return Math.round((angle - 1) / 90) * 90;
        }
        return Math.round(angle / 90) * 90;
      },
      straighten: function() {
        this.rotate(this._getAngleValueForStraighten());
        return this;
      },
      fxStraighten: function(callbacks) {
        callbacks = callbacks || {};
        var empty = function() {
        }, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;
        fabric3.util.animate({
          startValue: this.get("angle"),
          endValue: this._getAngleValueForStraighten(),
          duration: this.FX_DURATION,
          onChange: function(value) {
            _this.rotate(value);
            onChange();
          },
          onComplete: function() {
            _this.setCoords();
            onComplete();
          }
        });
        return this;
      }
    });
    fabric3.util.object.extend(fabric3.StaticCanvas.prototype, {
      straightenObject: function(object) {
        object.straighten();
        this.requestRenderAll();
        return this;
      },
      fxStraightenObject: function(object) {
        object.fxStraighten({
          onChange: this.requestRenderAllBound
        });
        return this;
      }
    });
    (function() {
      "use strict";
      function testPrecision(gl, precision) {
        var fragmentSource = "precision " + precision + " float;\nvoid main(){}";
        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fragmentShader, fragmentSource);
        gl.compileShader(fragmentShader);
        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
          return false;
        }
        return true;
      }
      fabric3.isWebglSupported = function(tileSize) {
        if (fabric3.isLikelyNode) {
          return false;
        }
        tileSize = tileSize || fabric3.WebglFilterBackend.prototype.tileSize;
        var canvas = document.createElement("canvas");
        var gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
        var isSupported = false;
        if (gl) {
          fabric3.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
          isSupported = fabric3.maxTextureSize >= tileSize;
          var precisions = ["highp", "mediump", "lowp"];
          for (var i = 0; i < 3; i++) {
            if (testPrecision(gl, precisions[i])) {
              fabric3.webGlPrecision = precisions[i];
              break;
            }
            ;
          }
        }
        this.isSupported = isSupported;
        return isSupported;
      };
      fabric3.WebglFilterBackend = WebglFilterBackend;
      function WebglFilterBackend(options) {
        if (options && options.tileSize) {
          this.tileSize = options.tileSize;
        }
        this.setupGLContext(this.tileSize, this.tileSize);
        this.captureGPUInfo();
      }
      ;
      WebglFilterBackend.prototype = {
        tileSize: 2048,
        resources: {},
        setupGLContext: function(width, height) {
          this.dispose();
          this.createWebGLCanvas(width, height);
          this.aPosition = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);
          this.chooseFastestCopyGLTo2DMethod(width, height);
        },
        chooseFastestCopyGLTo2DMethod: function(width, height) {
          var canMeasurePerf = typeof window.performance !== "undefined", canUseImageData;
          try {
            new ImageData(1, 1);
            canUseImageData = true;
          } catch (e) {
            canUseImageData = false;
          }
          var canUseArrayBuffer = typeof ArrayBuffer !== "undefined";
          var canUseUint8Clamped = typeof Uint8ClampedArray !== "undefined";
          if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {
            return;
          }
          var targetCanvas = fabric3.util.createCanvasElement();
          var imageBuffer = new ArrayBuffer(width * height * 4);
          if (fabric3.forceGLPutImageData) {
            this.imageBuffer = imageBuffer;
            this.copyGLTo2D = copyGLTo2DPutImageData;
            return;
          }
          var testContext = {
            imageBuffer,
            destinationWidth: width,
            destinationHeight: height,
            targetCanvas
          };
          var startTime, drawImageTime, putImageDataTime;
          targetCanvas.width = width;
          targetCanvas.height = height;
          startTime = window.performance.now();
          copyGLTo2DDrawImage.call(testContext, this.gl, testContext);
          drawImageTime = window.performance.now() - startTime;
          startTime = window.performance.now();
          copyGLTo2DPutImageData.call(testContext, this.gl, testContext);
          putImageDataTime = window.performance.now() - startTime;
          if (drawImageTime > putImageDataTime) {
            this.imageBuffer = imageBuffer;
            this.copyGLTo2D = copyGLTo2DPutImageData;
          } else {
            this.copyGLTo2D = copyGLTo2DDrawImage;
          }
        },
        createWebGLCanvas: function(width, height) {
          var canvas = fabric3.util.createCanvasElement();
          canvas.width = width;
          canvas.height = height;
          var glOptions = {
            alpha: true,
            premultipliedAlpha: false,
            depth: false,
            stencil: false,
            antialias: false
          }, gl = canvas.getContext("webgl", glOptions);
          if (!gl) {
            gl = canvas.getContext("experimental-webgl", glOptions);
          }
          if (!gl) {
            return;
          }
          gl.clearColor(0, 0, 0, 0);
          this.canvas = canvas;
          this.gl = gl;
        },
        applyFilters: function(filters, source, width, height, targetCanvas, cacheKey) {
          var gl = this.gl;
          var cachedTexture;
          if (cacheKey) {
            cachedTexture = this.getCachedTexture(cacheKey, source);
          }
          var pipelineState = {
            originalWidth: source.width || source.originalWidth,
            originalHeight: source.height || source.originalHeight,
            sourceWidth: width,
            sourceHeight: height,
            destinationWidth: width,
            destinationHeight: height,
            context: gl,
            sourceTexture: this.createTexture(gl, width, height, !cachedTexture && source),
            targetTexture: this.createTexture(gl, width, height),
            originalTexture: cachedTexture || this.createTexture(gl, width, height, !cachedTexture && source),
            passes: filters.length,
            webgl: true,
            aPosition: this.aPosition,
            programCache: this.programCache,
            pass: 0,
            filterBackend: this,
            targetCanvas
          };
          var tempFbo = gl.createFramebuffer();
          gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);
          filters.forEach(function(filter) {
            filter && filter.applyTo(pipelineState);
          });
          resizeCanvasIfNeeded(pipelineState);
          this.copyGLTo2D(gl, pipelineState);
          gl.bindTexture(gl.TEXTURE_2D, null);
          gl.deleteTexture(pipelineState.sourceTexture);
          gl.deleteTexture(pipelineState.targetTexture);
          gl.deleteFramebuffer(tempFbo);
          targetCanvas.getContext("2d").setTransform(1, 0, 0, 1, 0, 0);
          return pipelineState;
        },
        dispose: function() {
          if (this.canvas) {
            this.canvas = null;
            this.gl = null;
          }
          this.clearWebGLCaches();
        },
        clearWebGLCaches: function() {
          this.programCache = {};
          this.textureCache = {};
        },
        createTexture: function(gl, width, height, textureImageSource) {
          var texture = gl.createTexture();
          gl.bindTexture(gl.TEXTURE_2D, texture);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
          if (textureImageSource) {
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);
          } else {
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
          }
          return texture;
        },
        getCachedTexture: function(uniqueId, textureImageSource) {
          if (this.textureCache[uniqueId]) {
            return this.textureCache[uniqueId];
          } else {
            var texture = this.createTexture(this.gl, textureImageSource.width, textureImageSource.height, textureImageSource);
            this.textureCache[uniqueId] = texture;
            return texture;
          }
        },
        evictCachesForKey: function(cacheKey) {
          if (this.textureCache[cacheKey]) {
            this.gl.deleteTexture(this.textureCache[cacheKey]);
            delete this.textureCache[cacheKey];
          }
        },
        copyGLTo2D: copyGLTo2DDrawImage,
        captureGPUInfo: function() {
          if (this.gpuInfo) {
            return this.gpuInfo;
          }
          var gl = this.gl, gpuInfo = {renderer: "", vendor: ""};
          if (!gl) {
            return gpuInfo;
          }
          var ext = gl.getExtension("WEBGL_debug_renderer_info");
          if (ext) {
            var renderer2 = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);
            var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);
            if (renderer2) {
              gpuInfo.renderer = renderer2.toLowerCase();
            }
            if (vendor) {
              gpuInfo.vendor = vendor.toLowerCase();
            }
          }
          this.gpuInfo = gpuInfo;
          return gpuInfo;
        }
      };
    })();
    function resizeCanvasIfNeeded(pipelineState) {
      var targetCanvas = pipelineState.targetCanvas, width = targetCanvas.width, height = targetCanvas.height, dWidth = pipelineState.destinationWidth, dHeight = pipelineState.destinationHeight;
      if (width !== dWidth || height !== dHeight) {
        targetCanvas.width = dWidth;
        targetCanvas.height = dHeight;
      }
    }
    function copyGLTo2DDrawImage(gl, pipelineState) {
      var glCanvas = gl.canvas, targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext("2d");
      ctx.translate(0, targetCanvas.height);
      ctx.scale(1, -1);
      var sourceY = glCanvas.height - targetCanvas.height;
      ctx.drawImage(glCanvas, 0, sourceY, targetCanvas.width, targetCanvas.height, 0, 0, targetCanvas.width, targetCanvas.height);
    }
    function copyGLTo2DPutImageData(gl, pipelineState) {
      var targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext("2d"), dWidth = pipelineState.destinationWidth, dHeight = pipelineState.destinationHeight, numBytes = dWidth * dHeight * 4;
      var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);
      var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);
      gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);
      var imgData = new ImageData(u8Clamped, dWidth, dHeight);
      ctx.putImageData(imgData, 0, 0);
    }
    (function() {
      "use strict";
      var noop = function() {
      };
      fabric3.Canvas2dFilterBackend = Canvas2dFilterBackend;
      function Canvas2dFilterBackend() {
      }
      ;
      Canvas2dFilterBackend.prototype = {
        evictCachesForKey: noop,
        dispose: noop,
        clearWebGLCaches: noop,
        resources: {},
        applyFilters: function(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {
          var ctx = targetCanvas.getContext("2d");
          ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);
          var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);
          var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);
          var pipelineState = {
            sourceWidth,
            sourceHeight,
            imageData,
            originalEl: sourceElement,
            originalImageData,
            canvasEl: targetCanvas,
            ctx,
            filterBackend: this
          };
          filters.forEach(function(filter) {
            filter.applyTo(pipelineState);
          });
          if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {
            targetCanvas.width = pipelineState.imageData.width;
            targetCanvas.height = pipelineState.imageData.height;
          }
          ctx.putImageData(pipelineState.imageData, 0, 0);
          return pipelineState;
        }
      };
    })();
    fabric3.Image = fabric3.Image || {};
    fabric3.Image.filters = fabric3.Image.filters || {};
    fabric3.Image.filters.BaseFilter = fabric3.util.createClass({
      type: "BaseFilter",
      vertexSource: "attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvoid main() {\nvTexCoord = aPosition;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",
      fragmentSource: "precision highp float;\nvarying vec2 vTexCoord;\nuniform sampler2D uTexture;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\n}",
      initialize: function(options) {
        if (options) {
          this.setOptions(options);
        }
      },
      setOptions: function(options) {
        for (var prop in options) {
          this[prop] = options[prop];
        }
      },
      createProgram: function(gl, fragmentSource, vertexSource) {
        fragmentSource = fragmentSource || this.fragmentSource;
        vertexSource = vertexSource || this.vertexSource;
        if (fabric3.webGlPrecision !== "highp") {
          fragmentSource = fragmentSource.replace(/precision highp float/g, "precision " + fabric3.webGlPrecision + " float");
        }
        var vertexShader = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(vertexShader, vertexSource);
        gl.compileShader(vertexShader);
        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
          throw new Error("Vertex shader compile error for " + this.type + ": " + gl.getShaderInfoLog(vertexShader));
        }
        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fragmentShader, fragmentSource);
        gl.compileShader(fragmentShader);
        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
          throw new Error("Fragment shader compile error for " + this.type + ": " + gl.getShaderInfoLog(fragmentShader));
        }
        var program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        gl.linkProgram(program);
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
          throw new Error('Shader link error for "${this.type}" ' + gl.getProgramInfoLog(program));
        }
        var attributeLocations = this.getAttributeLocations(gl, program);
        var uniformLocations = this.getUniformLocations(gl, program) || {};
        uniformLocations.uStepW = gl.getUniformLocation(program, "uStepW");
        uniformLocations.uStepH = gl.getUniformLocation(program, "uStepH");
        return {
          program,
          attributeLocations,
          uniformLocations
        };
      },
      getAttributeLocations: function(gl, program) {
        return {
          aPosition: gl.getAttribLocation(program, "aPosition")
        };
      },
      getUniformLocations: function() {
        return {};
      },
      sendAttributeData: function(gl, attributeLocations, aPositionData) {
        var attributeLocation = attributeLocations.aPosition;
        var buffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
        gl.enableVertexAttribArray(attributeLocation);
        gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);
        gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);
      },
      _setupFrameBuffer: function(options) {
        var gl = options.context, width, height;
        if (options.passes > 1) {
          width = options.destinationWidth;
          height = options.destinationHeight;
          if (options.sourceWidth !== width || options.sourceHeight !== height) {
            gl.deleteTexture(options.targetTexture);
            options.targetTexture = options.filterBackend.createTexture(gl, width, height);
          }
          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, options.targetTexture, 0);
        } else {
          gl.bindFramebuffer(gl.FRAMEBUFFER, null);
          gl.finish();
        }
      },
      _swapTextures: function(options) {
        options.passes--;
        options.pass++;
        var temp = options.targetTexture;
        options.targetTexture = options.sourceTexture;
        options.sourceTexture = temp;
      },
      isNeutralState: function() {
        var main = this.mainParameter, _class = fabric3.Image.filters[this.type].prototype;
        if (main) {
          if (Array.isArray(_class[main])) {
            for (var i = _class[main].length; i--; ) {
              if (this[main][i] !== _class[main][i]) {
                return false;
              }
            }
            return true;
          } else {
            return _class[main] === this[main];
          }
        } else {
          return false;
        }
      },
      applyTo: function(options) {
        if (options.webgl) {
          this._setupFrameBuffer(options);
          this.applyToWebGL(options);
          this._swapTextures(options);
        } else {
          this.applyTo2d(options);
        }
      },
      retrieveShader: function(options) {
        if (!options.programCache.hasOwnProperty(this.type)) {
          options.programCache[this.type] = this.createProgram(options.context);
        }
        return options.programCache[this.type];
      },
      applyToWebGL: function(options) {
        var gl = options.context;
        var shader = this.retrieveShader(options);
        if (options.pass === 0 && options.originalTexture) {
          gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);
        } else {
          gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);
        }
        gl.useProgram(shader.program);
        this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);
        gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);
        gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);
        this.sendUniformData(gl, shader.uniformLocations);
        gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
      },
      bindAdditionalTexture: function(gl, texture, textureUnit) {
        gl.activeTexture(textureUnit);
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.activeTexture(gl.TEXTURE0);
      },
      unbindAdditionalTexture: function(gl, textureUnit) {
        gl.activeTexture(textureUnit);
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.activeTexture(gl.TEXTURE0);
      },
      getMainParameter: function() {
        return this[this.mainParameter];
      },
      setMainParameter: function(value) {
        this[this.mainParameter] = value;
      },
      sendUniformData: function() {
      },
      createHelpLayer: function(options) {
        if (!options.helpLayer) {
          var helpLayer = document.createElement("canvas");
          helpLayer.width = options.sourceWidth;
          helpLayer.height = options.sourceHeight;
          options.helpLayer = helpLayer;
        }
      },
      toObject: function() {
        var object = {type: this.type}, mainP = this.mainParameter;
        if (mainP) {
          object[mainP] = this[mainP];
        }
        return object;
      },
      toJSON: function() {
        return this.toObject();
      }
    });
    fabric3.Image.filters.BaseFilter.fromObject = function(object, callback) {
      var filter = new fabric3.Image.filters[object.type](object);
      callback && callback(filter);
      return filter;
    };
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.ColorMatrix = createClass(filters.BaseFilter, {
        type: "ColorMatrix",
        fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nuniform mat4 uColorMatrix;\nuniform vec4 uConstants;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor *= uColorMatrix;\ncolor += uConstants;\ngl_FragColor = color;\n}",
        matrix: [
          1,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ],
        mainParameter: "matrix",
        colorsOnly: true,
        initialize: function(options) {
          this.callSuper("initialize", options);
          this.matrix = this.matrix.slice(0);
        },
        applyTo2d: function(options) {
          var imageData = options.imageData, data = imageData.data, iLen = data.length, m = this.matrix, r, g, b, a, i, colorsOnly = this.colorsOnly;
          for (i = 0; i < iLen; i += 4) {
            r = data[i];
            g = data[i + 1];
            b = data[i + 2];
            if (colorsOnly) {
              data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;
              data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;
              data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;
            } else {
              a = data[i + 3];
              data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;
              data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;
              data[i + 2] = r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;
              data[i + 3] = r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;
            }
          }
        },
        getUniformLocations: function(gl, program) {
          return {
            uColorMatrix: gl.getUniformLocation(program, "uColorMatrix"),
            uConstants: gl.getUniformLocation(program, "uConstants")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          var m = this.matrix, matrix = [
            m[0],
            m[1],
            m[2],
            m[3],
            m[5],
            m[6],
            m[7],
            m[8],
            m[10],
            m[11],
            m[12],
            m[13],
            m[15],
            m[16],
            m[17],
            m[18]
          ], constants = [m[4], m[9], m[14], m[19]];
          gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);
          gl.uniform4fv(uniformLocations.uConstants, constants);
        }
      });
      fabric4.Image.filters.ColorMatrix.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.Brightness = createClass(filters.BaseFilter, {
        type: "Brightness",
        fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uBrightness;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += uBrightness;\ngl_FragColor = color;\n}",
        brightness: 0,
        mainParameter: "brightness",
        applyTo2d: function(options) {
          if (this.brightness === 0) {
            return;
          }
          var imageData = options.imageData, data = imageData.data, i, len = data.length, brightness = Math.round(this.brightness * 255);
          for (i = 0; i < len; i += 4) {
            data[i] = data[i] + brightness;
            data[i + 1] = data[i + 1] + brightness;
            data[i + 2] = data[i + 2] + brightness;
          }
        },
        getUniformLocations: function(gl, program) {
          return {
            uBrightness: gl.getUniformLocation(program, "uBrightness")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          gl.uniform1f(uniformLocations.uBrightness, this.brightness);
        }
      });
      fabric4.Image.filters.Brightness.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), extend = fabric4.util.object.extend, filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.Convolute = createClass(filters.BaseFilter, {
        type: "Convolute",
        opaque: false,
        matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],
        fragmentSource: {
          Convolute_3_1: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n}\n}\ngl_FragColor = color;\n}",
          Convolute_3_0: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",
          Convolute_5_1: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n}\n}\ngl_FragColor = color;\n}",
          Convolute_5_0: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",
          Convolute_7_1: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n}\n}\ngl_FragColor = color;\n}",
          Convolute_7_0: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",
          Convolute_9_1: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n}\n}\ngl_FragColor = color;\n}",
          Convolute_9_0: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}"
        },
        retrieveShader: function(options) {
          var size = Math.sqrt(this.matrix.length);
          var cacheKey = this.type + "_" + size + "_" + (this.opaque ? 1 : 0);
          var shaderSource = this.fragmentSource[cacheKey];
          if (!options.programCache.hasOwnProperty(cacheKey)) {
            options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
          }
          return options.programCache[cacheKey];
        },
        applyTo2d: function(options) {
          var imageData = options.imageData, data = imageData.data, weights = this.matrix, side = Math.round(Math.sqrt(weights.length)), halfSide = Math.floor(side / 2), sw = imageData.width, sh = imageData.height, output = options.ctx.createImageData(sw, sh), dst = output.data, alphaFac = this.opaque ? 1 : 0, r, g, b, a, dstOff, scx, scy, srcOff, wt, x, y, cx, cy;
          for (y = 0; y < sh; y++) {
            for (x = 0; x < sw; x++) {
              dstOff = (y * sw + x) * 4;
              r = 0;
              g = 0;
              b = 0;
              a = 0;
              for (cy = 0; cy < side; cy++) {
                for (cx = 0; cx < side; cx++) {
                  scy = y + cy - halfSide;
                  scx = x + cx - halfSide;
                  if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {
                    continue;
                  }
                  srcOff = (scy * sw + scx) * 4;
                  wt = weights[cy * side + cx];
                  r += data[srcOff] * wt;
                  g += data[srcOff + 1] * wt;
                  b += data[srcOff + 2] * wt;
                  if (!alphaFac) {
                    a += data[srcOff + 3] * wt;
                  }
                }
              }
              dst[dstOff] = r;
              dst[dstOff + 1] = g;
              dst[dstOff + 2] = b;
              if (!alphaFac) {
                dst[dstOff + 3] = a;
              } else {
                dst[dstOff + 3] = data[dstOff + 3];
              }
            }
          }
          options.imageData = output;
        },
        getUniformLocations: function(gl, program) {
          return {
            uMatrix: gl.getUniformLocation(program, "uMatrix"),
            uOpaque: gl.getUniformLocation(program, "uOpaque"),
            uHalfSize: gl.getUniformLocation(program, "uHalfSize"),
            uSize: gl.getUniformLocation(program, "uSize")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          gl.uniform1fv(uniformLocations.uMatrix, this.matrix);
        },
        toObject: function() {
          return extend(this.callSuper("toObject"), {
            opaque: this.opaque,
            matrix: this.matrix
          });
        }
      });
      fabric4.Image.filters.Convolute.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.Grayscale = createClass(filters.BaseFilter, {
        type: "Grayscale",
        fragmentSource: {
          average: "precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat average = (color.r + color.b + color.g) / 3.0;\ngl_FragColor = vec4(average, average, average, color.a);\n}",
          lightness: "precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\ngl_FragColor = vec4(average, average, average, col.a);\n}",
          luminosity: "precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\ngl_FragColor = vec4(average, average, average, col.a);\n}"
        },
        mode: "average",
        mainParameter: "mode",
        applyTo2d: function(options) {
          var imageData = options.imageData, data = imageData.data, i, len = data.length, value, mode = this.mode;
          for (i = 0; i < len; i += 4) {
            if (mode === "average") {
              value = (data[i] + data[i + 1] + data[i + 2]) / 3;
            } else if (mode === "lightness") {
              value = (Math.min(data[i], data[i + 1], data[i + 2]) + Math.max(data[i], data[i + 1], data[i + 2])) / 2;
            } else if (mode === "luminosity") {
              value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];
            }
            data[i] = value;
            data[i + 1] = value;
            data[i + 2] = value;
          }
        },
        retrieveShader: function(options) {
          var cacheKey = this.type + "_" + this.mode;
          if (!options.programCache.hasOwnProperty(cacheKey)) {
            var shaderSource = this.fragmentSource[this.mode];
            options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
          }
          return options.programCache[cacheKey];
        },
        getUniformLocations: function(gl, program) {
          return {
            uMode: gl.getUniformLocation(program, "uMode")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          var mode = 1;
          gl.uniform1i(uniformLocations.uMode, mode);
        },
        isNeutralState: function() {
          return false;
        }
      });
      fabric4.Image.filters.Grayscale.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.Invert = createClass(filters.BaseFilter, {
        type: "Invert",
        fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform int uInvert;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nif (uInvert == 1) {\ngl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n} else {\ngl_FragColor = color;\n}\n}",
        invert: true,
        mainParameter: "invert",
        applyTo2d: function(options) {
          var imageData = options.imageData, data = imageData.data, i, len = data.length;
          for (i = 0; i < len; i += 4) {
            data[i] = 255 - data[i];
            data[i + 1] = 255 - data[i + 1];
            data[i + 2] = 255 - data[i + 2];
          }
        },
        isNeutralState: function() {
          return !this.invert;
        },
        getUniformLocations: function(gl, program) {
          return {
            uInvert: gl.getUniformLocation(program, "uInvert")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          gl.uniform1i(uniformLocations.uInvert, this.invert);
        }
      });
      fabric4.Image.filters.Invert.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), extend = fabric4.util.object.extend, filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.Noise = createClass(filters.BaseFilter, {
        type: "Noise",
        fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uStepH;\nuniform float uNoise;\nuniform float uSeed;\nvarying vec2 vTexCoord;\nfloat rand(vec2 co, float seed, float vScale) {\nreturn fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n}\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\ngl_FragColor = color;\n}",
        mainParameter: "noise",
        noise: 0,
        applyTo2d: function(options) {
          if (this.noise === 0) {
            return;
          }
          var imageData = options.imageData, data = imageData.data, i, len = data.length, noise = this.noise, rand;
          for (i = 0, len = data.length; i < len; i += 4) {
            rand = (0.5 - Math.random()) * noise;
            data[i] += rand;
            data[i + 1] += rand;
            data[i + 2] += rand;
          }
        },
        getUniformLocations: function(gl, program) {
          return {
            uNoise: gl.getUniformLocation(program, "uNoise"),
            uSeed: gl.getUniformLocation(program, "uSeed")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          gl.uniform1f(uniformLocations.uNoise, this.noise / 255);
          gl.uniform1f(uniformLocations.uSeed, Math.random());
        },
        toObject: function() {
          return extend(this.callSuper("toObject"), {
            noise: this.noise
          });
        }
      });
      fabric4.Image.filters.Noise.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.Pixelate = createClass(filters.BaseFilter, {
        type: "Pixelate",
        blocksize: 4,
        mainParameter: "blocksize",
        fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uBlocksize;\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nfloat blockW = uBlocksize * uStepW;\nfloat blockH = uBlocksize * uStepW;\nint posX = int(vTexCoord.x / blockW);\nint posY = int(vTexCoord.y / blockH);\nfloat fposX = float(posX);\nfloat fposY = float(posY);\nvec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\nvec4 color = texture2D(uTexture, squareCoords);\ngl_FragColor = color;\n}",
        applyTo2d: function(options) {
          var imageData = options.imageData, data = imageData.data, iLen = imageData.height, jLen = imageData.width, index, i, j, r, g, b, a, _i, _j, _iLen, _jLen;
          for (i = 0; i < iLen; i += this.blocksize) {
            for (j = 0; j < jLen; j += this.blocksize) {
              index = i * 4 * jLen + j * 4;
              r = data[index];
              g = data[index + 1];
              b = data[index + 2];
              a = data[index + 3];
              _iLen = Math.min(i + this.blocksize, iLen);
              _jLen = Math.min(j + this.blocksize, jLen);
              for (_i = i; _i < _iLen; _i++) {
                for (_j = j; _j < _jLen; _j++) {
                  index = _i * 4 * jLen + _j * 4;
                  data[index] = r;
                  data[index + 1] = g;
                  data[index + 2] = b;
                  data[index + 3] = a;
                }
              }
            }
          }
        },
        isNeutralState: function() {
          return this.blocksize === 1;
        },
        getUniformLocations: function(gl, program) {
          return {
            uBlocksize: gl.getUniformLocation(program, "uBlocksize"),
            uStepW: gl.getUniformLocation(program, "uStepW"),
            uStepH: gl.getUniformLocation(program, "uStepH")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);
        }
      });
      fabric4.Image.filters.Pixelate.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), extend = fabric4.util.object.extend, filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.RemoveColor = createClass(filters.BaseFilter, {
        type: "RemoveColor",
        color: "#FFFFFF",
        fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\nif(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\ngl_FragColor.a = 0.0;\n}\n}",
        distance: 0.02,
        useAlpha: false,
        applyTo2d: function(options) {
          var imageData = options.imageData, data = imageData.data, i, distance = this.distance * 255, r, g, b, source = new fabric4.Color(this.color).getSource(), lowC = [
            source[0] - distance,
            source[1] - distance,
            source[2] - distance
          ], highC = [
            source[0] + distance,
            source[1] + distance,
            source[2] + distance
          ];
          for (i = 0; i < data.length; i += 4) {
            r = data[i];
            g = data[i + 1];
            b = data[i + 2];
            if (r > lowC[0] && g > lowC[1] && b > lowC[2] && r < highC[0] && g < highC[1] && b < highC[2]) {
              data[i + 3] = 0;
            }
          }
        },
        getUniformLocations: function(gl, program) {
          return {
            uLow: gl.getUniformLocation(program, "uLow"),
            uHigh: gl.getUniformLocation(program, "uHigh")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          var source = new fabric4.Color(this.color).getSource(), distance = parseFloat(this.distance), lowC = [
            0 + source[0] / 255 - distance,
            0 + source[1] / 255 - distance,
            0 + source[2] / 255 - distance,
            1
          ], highC = [
            source[0] / 255 + distance,
            source[1] / 255 + distance,
            source[2] / 255 + distance,
            1
          ];
          gl.uniform4fv(uniformLocations.uLow, lowC);
          gl.uniform4fv(uniformLocations.uHigh, highC);
        },
        toObject: function() {
          return extend(this.callSuper("toObject"), {
            color: this.color,
            distance: this.distance
          });
        }
      });
      fabric4.Image.filters.RemoveColor.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      var matrices = {
        Brownie: [
          0.5997,
          0.34553,
          -0.27082,
          0,
          0.186,
          -0.0377,
          0.86095,
          0.15059,
          0,
          -0.1449,
          0.24113,
          -0.07441,
          0.44972,
          0,
          -0.02965,
          0,
          0,
          0,
          1,
          0
        ],
        Vintage: [
          0.62793,
          0.32021,
          -0.03965,
          0,
          0.03784,
          0.02578,
          0.64411,
          0.03259,
          0,
          0.02926,
          0.0466,
          -0.08512,
          0.52416,
          0,
          0.02023,
          0,
          0,
          0,
          1,
          0
        ],
        Kodachrome: [
          1.12855,
          -0.39673,
          -0.03992,
          0,
          0.24991,
          -0.16404,
          1.08352,
          -0.05498,
          0,
          0.09698,
          -0.16786,
          -0.56034,
          1.60148,
          0,
          0.13972,
          0,
          0,
          0,
          1,
          0
        ],
        Technicolor: [
          1.91252,
          -0.85453,
          -0.09155,
          0,
          0.04624,
          -0.30878,
          1.76589,
          -0.10601,
          0,
          -0.27589,
          -0.2311,
          -0.75018,
          1.84759,
          0,
          0.12137,
          0,
          0,
          0,
          1,
          0
        ],
        Polaroid: [
          1.438,
          -0.062,
          -0.062,
          0,
          0,
          -0.122,
          1.378,
          -0.122,
          0,
          0,
          -0.016,
          -0.016,
          1.483,
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ],
        Sepia: [
          0.393,
          0.769,
          0.189,
          0,
          0,
          0.349,
          0.686,
          0.168,
          0,
          0,
          0.272,
          0.534,
          0.131,
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ],
        BlackWhite: [
          1.5,
          1.5,
          1.5,
          0,
          -1,
          1.5,
          1.5,
          1.5,
          0,
          -1,
          1.5,
          1.5,
          1.5,
          0,
          -1,
          0,
          0,
          0,
          1,
          0
        ]
      };
      for (var key in matrices) {
        filters[key] = createClass(filters.ColorMatrix, {
          type: key,
          matrix: matrices[key],
          mainParameter: false,
          colorsOnly: true
        });
        fabric4.Image.filters[key].fromObject = fabric4.Image.filters.BaseFilter.fromObject;
      }
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric, filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.BlendColor = createClass(filters.BaseFilter, {
        type: "BlendColor",
        color: "#F95C63",
        mode: "multiply",
        alpha: 1,
        fragmentSource: {
          multiply: "gl_FragColor.rgb *= uColor.rgb;\n",
          screen: "gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\n",
          add: "gl_FragColor.rgb += uColor.rgb;\n",
          diff: "gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\n",
          subtract: "gl_FragColor.rgb -= uColor.rgb;\n",
          lighten: "gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\n",
          darken: "gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\n",
          exclusion: "gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\n",
          overlay: "if (uColor.r < 0.5) {\ngl_FragColor.r *= 2.0 * uColor.r;\n} else {\ngl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n}\nif (uColor.g < 0.5) {\ngl_FragColor.g *= 2.0 * uColor.g;\n} else {\ngl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n}\nif (uColor.b < 0.5) {\ngl_FragColor.b *= 2.0 * uColor.b;\n} else {\ngl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n}\n",
          tint: "gl_FragColor.rgb *= (1.0 - uColor.a);\ngl_FragColor.rgb += uColor.rgb;\n"
        },
        buildSource: function(mode) {
          return "precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ngl_FragColor = color;\nif (color.a > 0.0) {\n" + this.fragmentSource[mode] + "}\n}";
        },
        retrieveShader: function(options) {
          var cacheKey = this.type + "_" + this.mode, shaderSource;
          if (!options.programCache.hasOwnProperty(cacheKey)) {
            shaderSource = this.buildSource(this.mode);
            options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
          }
          return options.programCache[cacheKey];
        },
        applyTo2d: function(options) {
          var imageData = options.imageData, data = imageData.data, iLen = data.length, tr, tg, tb, r, g, b, source, alpha1 = 1 - this.alpha;
          source = new fabric4.Color(this.color).getSource();
          tr = source[0] * this.alpha;
          tg = source[1] * this.alpha;
          tb = source[2] * this.alpha;
          for (var i = 0; i < iLen; i += 4) {
            r = data[i];
            g = data[i + 1];
            b = data[i + 2];
            switch (this.mode) {
              case "multiply":
                data[i] = r * tr / 255;
                data[i + 1] = g * tg / 255;
                data[i + 2] = b * tb / 255;
                break;
              case "screen":
                data[i] = 255 - (255 - r) * (255 - tr) / 255;
                data[i + 1] = 255 - (255 - g) * (255 - tg) / 255;
                data[i + 2] = 255 - (255 - b) * (255 - tb) / 255;
                break;
              case "add":
                data[i] = r + tr;
                data[i + 1] = g + tg;
                data[i + 2] = b + tb;
                break;
              case "diff":
              case "difference":
                data[i] = Math.abs(r - tr);
                data[i + 1] = Math.abs(g - tg);
                data[i + 2] = Math.abs(b - tb);
                break;
              case "subtract":
                data[i] = r - tr;
                data[i + 1] = g - tg;
                data[i + 2] = b - tb;
                break;
              case "darken":
                data[i] = Math.min(r, tr);
                data[i + 1] = Math.min(g, tg);
                data[i + 2] = Math.min(b, tb);
                break;
              case "lighten":
                data[i] = Math.max(r, tr);
                data[i + 1] = Math.max(g, tg);
                data[i + 2] = Math.max(b, tb);
                break;
              case "overlay":
                data[i] = tr < 128 ? 2 * r * tr / 255 : 255 - 2 * (255 - r) * (255 - tr) / 255;
                data[i + 1] = tg < 128 ? 2 * g * tg / 255 : 255 - 2 * (255 - g) * (255 - tg) / 255;
                data[i + 2] = tb < 128 ? 2 * b * tb / 255 : 255 - 2 * (255 - b) * (255 - tb) / 255;
                break;
              case "exclusion":
                data[i] = tr + r - 2 * tr * r / 255;
                data[i + 1] = tg + g - 2 * tg * g / 255;
                data[i + 2] = tb + b - 2 * tb * b / 255;
                break;
              case "tint":
                data[i] = tr + r * alpha1;
                data[i + 1] = tg + g * alpha1;
                data[i + 2] = tb + b * alpha1;
            }
          }
        },
        getUniformLocations: function(gl, program) {
          return {
            uColor: gl.getUniformLocation(program, "uColor")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          var source = new fabric4.Color(this.color).getSource();
          source[0] = this.alpha * source[0] / 255;
          source[1] = this.alpha * source[1] / 255;
          source[2] = this.alpha * source[2] / 255;
          source[3] = this.alpha;
          gl.uniform4fv(uniformLocations.uColor, source);
        },
        toObject: function() {
          return {
            type: this.type,
            color: this.color,
            mode: this.mode,
            alpha: this.alpha
          };
        }
      });
      fabric4.Image.filters.BlendColor.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric, filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.BlendImage = createClass(filters.BaseFilter, {
        type: "BlendImage",
        image: null,
        mode: "multiply",
        alpha: 1,
        vertexSource: "attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nuniform mat3 uTransformMatrix;\nvoid main() {\nvTexCoord = aPosition;\nvTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",
        fragmentSource: {
          multiply: "precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.rgba *= color2.rgba;\ngl_FragColor = color;\n}",
          mask: "precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.a = color2.a;\ngl_FragColor = color;\n}"
        },
        retrieveShader: function(options) {
          var cacheKey = this.type + "_" + this.mode;
          var shaderSource = this.fragmentSource[this.mode];
          if (!options.programCache.hasOwnProperty(cacheKey)) {
            options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
          }
          return options.programCache[cacheKey];
        },
        applyToWebGL: function(options) {
          var gl = options.context, texture = this.createTexture(options.filterBackend, this.image);
          this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);
          this.callSuper("applyToWebGL", options);
          this.unbindAdditionalTexture(gl, gl.TEXTURE1);
        },
        createTexture: function(backend, image) {
          return backend.getCachedTexture(image.cacheKey, image._element);
        },
        calculateMatrix: function() {
          var image = this.image, width = image._element.width, height = image._element.height;
          return [
            1 / image.scaleX,
            0,
            0,
            0,
            1 / image.scaleY,
            0,
            -image.left / width,
            -image.top / height,
            1
          ];
        },
        applyTo2d: function(options) {
          var imageData = options.imageData, resources = options.filterBackend.resources, data = imageData.data, iLen = data.length, width = imageData.width, height = imageData.height, tr, tg, tb, ta, r, g, b, a, canvas1, context, image = this.image, blendData;
          if (!resources.blendImage) {
            resources.blendImage = fabric4.util.createCanvasElement();
          }
          canvas1 = resources.blendImage;
          context = canvas1.getContext("2d");
          if (canvas1.width !== width || canvas1.height !== height) {
            canvas1.width = width;
            canvas1.height = height;
          } else {
            context.clearRect(0, 0, width, height);
          }
          context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);
          context.drawImage(image._element, 0, 0, width, height);
          blendData = context.getImageData(0, 0, width, height).data;
          for (var i = 0; i < iLen; i += 4) {
            r = data[i];
            g = data[i + 1];
            b = data[i + 2];
            a = data[i + 3];
            tr = blendData[i];
            tg = blendData[i + 1];
            tb = blendData[i + 2];
            ta = blendData[i + 3];
            switch (this.mode) {
              case "multiply":
                data[i] = r * tr / 255;
                data[i + 1] = g * tg / 255;
                data[i + 2] = b * tb / 255;
                data[i + 3] = a * ta / 255;
                break;
              case "mask":
                data[i + 3] = ta;
                break;
            }
          }
        },
        getUniformLocations: function(gl, program) {
          return {
            uTransformMatrix: gl.getUniformLocation(program, "uTransformMatrix"),
            uImage: gl.getUniformLocation(program, "uImage")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          var matrix = this.calculateMatrix();
          gl.uniform1i(uniformLocations.uImage, 1);
          gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);
        },
        toObject: function() {
          return {
            type: this.type,
            image: this.image && this.image.toObject(),
            mode: this.mode,
            alpha: this.alpha
          };
        }
      });
      fabric4.Image.filters.BlendImage.fromObject = function(object, callback) {
        fabric4.Image.fromObject(object.image, function(image) {
          var options = fabric4.util.object.clone(object);
          options.image = image;
          callback(new fabric4.Image.filters.BlendImage(options));
        });
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), pow = Math.pow, floor = Math.floor, sqrt = Math.sqrt, abs = Math.abs, round = Math.round, sin = Math.sin, ceil = Math.ceil, filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.Resize = createClass(filters.BaseFilter, {
        type: "Resize",
        resizeType: "hermite",
        scaleX: 1,
        scaleY: 1,
        lanczosLobes: 3,
        getUniformLocations: function(gl, program) {
          return {
            uDelta: gl.getUniformLocation(program, "uDelta"),
            uTaps: gl.getUniformLocation(program, "uTaps")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]);
          gl.uniform1fv(uniformLocations.uTaps, this.taps);
        },
        retrieveShader: function(options) {
          var filterWindow = this.getFilterWindow(), cacheKey = this.type + "_" + filterWindow;
          if (!options.programCache.hasOwnProperty(cacheKey)) {
            var fragmentShader = this.generateShader(filterWindow);
            options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);
          }
          return options.programCache[cacheKey];
        },
        getFilterWindow: function() {
          var scale = this.tempScale;
          return Math.ceil(this.lanczosLobes / scale);
        },
        getTaps: function() {
          var lobeFunction = this.lanczosCreate(this.lanczosLobes), scale = this.tempScale, filterWindow = this.getFilterWindow(), taps = new Array(filterWindow);
          for (var i = 1; i <= filterWindow; i++) {
            taps[i - 1] = lobeFunction(i * scale);
          }
          return taps;
        },
        generateShader: function(filterWindow) {
          var offsets = new Array(filterWindow), fragmentShader = this.fragmentSourceTOP, filterWindow;
          for (var i = 1; i <= filterWindow; i++) {
            offsets[i - 1] = i + ".0 * uDelta";
          }
          fragmentShader += "uniform float uTaps[" + filterWindow + "];\n";
          fragmentShader += "void main() {\n";
          fragmentShader += "  vec4 color = texture2D(uTexture, vTexCoord);\n";
          fragmentShader += "  float sum = 1.0;\n";
          offsets.forEach(function(offset, i2) {
            fragmentShader += "  color += texture2D(uTexture, vTexCoord + " + offset + ") * uTaps[" + i2 + "];\n";
            fragmentShader += "  color += texture2D(uTexture, vTexCoord - " + offset + ") * uTaps[" + i2 + "];\n";
            fragmentShader += "  sum += 2.0 * uTaps[" + i2 + "];\n";
          });
          fragmentShader += "  gl_FragColor = color / sum;\n";
          fragmentShader += "}";
          return fragmentShader;
        },
        fragmentSourceTOP: "precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\n",
        applyTo: function(options) {
          if (options.webgl) {
            options.passes++;
            this.width = options.sourceWidth;
            this.horizontal = true;
            this.dW = Math.round(this.width * this.scaleX);
            this.dH = options.sourceHeight;
            this.tempScale = this.dW / this.width;
            this.taps = this.getTaps();
            options.destinationWidth = this.dW;
            this._setupFrameBuffer(options);
            this.applyToWebGL(options);
            this._swapTextures(options);
            options.sourceWidth = options.destinationWidth;
            this.height = options.sourceHeight;
            this.horizontal = false;
            this.dH = Math.round(this.height * this.scaleY);
            this.tempScale = this.dH / this.height;
            this.taps = this.getTaps();
            options.destinationHeight = this.dH;
            this._setupFrameBuffer(options);
            this.applyToWebGL(options);
            this._swapTextures(options);
            options.sourceHeight = options.destinationHeight;
          } else {
            this.applyTo2d(options);
          }
        },
        isNeutralState: function() {
          return this.scaleX === 1 && this.scaleY === 1;
        },
        lanczosCreate: function(lobes) {
          return function(x) {
            if (x >= lobes || x <= -lobes) {
              return 0;
            }
            if (x < 11920929e-14 && x > -11920929e-14) {
              return 1;
            }
            x *= Math.PI;
            var xx = x / lobes;
            return sin(x) / x * sin(xx) / xx;
          };
        },
        applyTo2d: function(options) {
          var imageData = options.imageData, scaleX = this.scaleX, scaleY = this.scaleY;
          this.rcpScaleX = 1 / scaleX;
          this.rcpScaleY = 1 / scaleY;
          var oW = imageData.width, oH = imageData.height, dW = round(oW * scaleX), dH = round(oH * scaleY), newData;
          if (this.resizeType === "sliceHack") {
            newData = this.sliceByTwo(options, oW, oH, dW, dH);
          } else if (this.resizeType === "hermite") {
            newData = this.hermiteFastResize(options, oW, oH, dW, dH);
          } else if (this.resizeType === "bilinear") {
            newData = this.bilinearFiltering(options, oW, oH, dW, dH);
          } else if (this.resizeType === "lanczos") {
            newData = this.lanczosResize(options, oW, oH, dW, dH);
          }
          options.imageData = newData;
        },
        sliceByTwo: function(options, oW, oH, dW, dH) {
          var imageData = options.imageData, mult = 0.5, doneW = false, doneH = false, stepW = oW * mult, stepH = oH * mult, resources = fabric4.filterBackend.resources, tmpCanvas, ctx, sX = 0, sY = 0, dX = oW, dY = 0;
          if (!resources.sliceByTwo) {
            resources.sliceByTwo = document.createElement("canvas");
          }
          tmpCanvas = resources.sliceByTwo;
          if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {
            tmpCanvas.width = oW * 1.5;
            tmpCanvas.height = oH;
          }
          ctx = tmpCanvas.getContext("2d");
          ctx.clearRect(0, 0, oW * 1.5, oH);
          ctx.putImageData(imageData, 0, 0);
          dW = floor(dW);
          dH = floor(dH);
          while (!doneW || !doneH) {
            oW = stepW;
            oH = stepH;
            if (dW < floor(stepW * mult)) {
              stepW = floor(stepW * mult);
            } else {
              stepW = dW;
              doneW = true;
            }
            if (dH < floor(stepH * mult)) {
              stepH = floor(stepH * mult);
            } else {
              stepH = dH;
              doneH = true;
            }
            ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);
            sX = dX;
            sY = dY;
            dY += stepH;
          }
          return ctx.getImageData(sX, sY, dW, dH);
        },
        lanczosResize: function(options, oW, oH, dW, dH) {
          function process2(u) {
            var v, i, weight, idx, a, red, green, blue, alpha, fX, fY;
            center.x = (u + 0.5) * ratioX;
            icenter.x = floor(center.x);
            for (v = 0; v < dH; v++) {
              center.y = (v + 0.5) * ratioY;
              icenter.y = floor(center.y);
              a = 0;
              red = 0;
              green = 0;
              blue = 0;
              alpha = 0;
              for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {
                if (i < 0 || i >= oW) {
                  continue;
                }
                fX = floor(1e3 * abs(i - center.x));
                if (!cacheLanc[fX]) {
                  cacheLanc[fX] = {};
                }
                for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {
                  if (j < 0 || j >= oH) {
                    continue;
                  }
                  fY = floor(1e3 * abs(j - center.y));
                  if (!cacheLanc[fX][fY]) {
                    cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1e3);
                  }
                  weight = cacheLanc[fX][fY];
                  if (weight > 0) {
                    idx = (j * oW + i) * 4;
                    a += weight;
                    red += weight * srcData[idx];
                    green += weight * srcData[idx + 1];
                    blue += weight * srcData[idx + 2];
                    alpha += weight * srcData[idx + 3];
                  }
                }
              }
              idx = (v * dW + u) * 4;
              destData[idx] = red / a;
              destData[idx + 1] = green / a;
              destData[idx + 2] = blue / a;
              destData[idx + 3] = alpha / a;
            }
            if (++u < dW) {
              return process2(u);
            } else {
              return destImg;
            }
          }
          var srcData = options.imageData.data, destImg = options.ctx.createImageData(dW, dH), destData = destImg.data, lanczos = this.lanczosCreate(this.lanczosLobes), ratioX = this.rcpScaleX, ratioY = this.rcpScaleY, rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY, range2X = ceil(ratioX * this.lanczosLobes / 2), range2Y = ceil(ratioY * this.lanczosLobes / 2), cacheLanc = {}, center = {}, icenter = {};
          return process2(0);
        },
        bilinearFiltering: function(options, oW, oH, dW, dH) {
          var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl, color, offset = 0, origPix, ratioX = this.rcpScaleX, ratioY = this.rcpScaleY, w4 = 4 * (oW - 1), img = options.imageData, pixels = img.data, destImage = options.ctx.createImageData(dW, dH), destPixels = destImage.data;
          for (i = 0; i < dH; i++) {
            for (j = 0; j < dW; j++) {
              x = floor(ratioX * j);
              y = floor(ratioY * i);
              xDiff = ratioX * j - x;
              yDiff = ratioY * i - y;
              origPix = 4 * (y * oW + x);
              for (chnl = 0; chnl < 4; chnl++) {
                a = pixels[origPix + chnl];
                b = pixels[origPix + 4 + chnl];
                c = pixels[origPix + w4 + chnl];
                d = pixels[origPix + w4 + 4 + chnl];
                color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) + c * yDiff * (1 - xDiff) + d * xDiff * yDiff;
                destPixels[offset++] = color;
              }
            }
          }
          return destImage;
        },
        hermiteFastResize: function(options, oW, oH, dW, dH) {
          var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY, ratioWHalf = ceil(ratioW / 2), ratioHHalf = ceil(ratioH / 2), img = options.imageData, data = img.data, img2 = options.ctx.createImageData(dW, dH), data2 = img2.data;
          for (var j = 0; j < dH; j++) {
            for (var i = 0; i < dW; i++) {
              var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0, gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;
              for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {
                var dy = abs(centerY - (yy + 0.5)) / ratioHHalf, centerX = (i + 0.5) * ratioW, w0 = dy * dy;
                for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {
                  var dx = abs(centerX - (xx + 0.5)) / ratioWHalf, w = sqrt(w0 + dx * dx);
                  if (w > 1 && w < -1) {
                    continue;
                  }
                  weight = 2 * w * w * w - 3 * w * w + 1;
                  if (weight > 0) {
                    dx = 4 * (xx + yy * oW);
                    gxA += weight * data[dx + 3];
                    weightsAlpha += weight;
                    if (data[dx + 3] < 255) {
                      weight = weight * data[dx + 3] / 250;
                    }
                    gxR += weight * data[dx];
                    gxG += weight * data[dx + 1];
                    gxB += weight * data[dx + 2];
                    weights += weight;
                  }
                }
              }
              data2[x2] = gxR / weights;
              data2[x2 + 1] = gxG / weights;
              data2[x2 + 2] = gxB / weights;
              data2[x2 + 3] = gxA / weightsAlpha;
            }
          }
          return img2;
        },
        toObject: function() {
          return {
            type: this.type,
            scaleX: this.scaleX,
            scaleY: this.scaleY,
            resizeType: this.resizeType,
            lanczosLobes: this.lanczosLobes
          };
        }
      });
      fabric4.Image.filters.Resize.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.Contrast = createClass(filters.BaseFilter, {
        type: "Contrast",
        fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uContrast;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\ncolor.rgb = contrastF * (color.rgb - 0.5) + 0.5;\ngl_FragColor = color;\n}",
        contrast: 0,
        mainParameter: "contrast",
        applyTo2d: function(options) {
          if (this.contrast === 0) {
            return;
          }
          var imageData = options.imageData, i, len, data = imageData.data, len = data.length, contrast = Math.floor(this.contrast * 255), contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));
          for (i = 0; i < len; i += 4) {
            data[i] = contrastF * (data[i] - 128) + 128;
            data[i + 1] = contrastF * (data[i + 1] - 128) + 128;
            data[i + 2] = contrastF * (data[i + 2] - 128) + 128;
          }
        },
        getUniformLocations: function(gl, program) {
          return {
            uContrast: gl.getUniformLocation(program, "uContrast")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          gl.uniform1f(uniformLocations.uContrast, this.contrast);
        }
      });
      fabric4.Image.filters.Contrast.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.Saturation = createClass(filters.BaseFilter, {
        type: "Saturation",
        fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uSaturation;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat rgMax = max(color.r, color.g);\nfloat rgbMax = max(rgMax, color.b);\ncolor.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\ncolor.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\ncolor.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\ngl_FragColor = color;\n}",
        saturation: 0,
        mainParameter: "saturation",
        applyTo2d: function(options) {
          if (this.saturation === 0) {
            return;
          }
          var imageData = options.imageData, data = imageData.data, len = data.length, adjust = -this.saturation, i, max;
          for (i = 0; i < len; i += 4) {
            max = Math.max(data[i], data[i + 1], data[i + 2]);
            data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;
            data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;
            data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;
          }
        },
        getUniformLocations: function(gl, program) {
          return {
            uSaturation: gl.getUniformLocation(program, "uSaturation")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          gl.uniform1f(uniformLocations.uSaturation, -this.saturation);
        }
      });
      fabric4.Image.filters.Saturation.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.Blur = createClass(filters.BaseFilter, {
        type: "Blur",
        fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\nconst float nSamples = 15.0;\nvec3 v3offset = vec3(12.9898, 78.233, 151.7182);\nfloat random(vec3 scale) {\nreturn fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n}\nvoid main() {\nvec4 color = vec4(0.0);\nfloat total = 0.0;\nfloat offset = random(v3offset);\nfor (float t = -nSamples; t <= nSamples; t++) {\nfloat percent = (t + offset - 0.5) / nSamples;\nfloat weight = 1.0 - abs(percent);\ncolor += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\ntotal += weight;\n}\ngl_FragColor = color / total;\n}",
        blur: 0,
        mainParameter: "blur",
        applyTo: function(options) {
          if (options.webgl) {
            this.aspectRatio = options.sourceWidth / options.sourceHeight;
            options.passes++;
            this._setupFrameBuffer(options);
            this.horizontal = true;
            this.applyToWebGL(options);
            this._swapTextures(options);
            this._setupFrameBuffer(options);
            this.horizontal = false;
            this.applyToWebGL(options);
            this._swapTextures(options);
          } else {
            this.applyTo2d(options);
          }
        },
        applyTo2d: function(options) {
          options.imageData = this.simpleBlur(options);
        },
        simpleBlur: function(options) {
          var resources = options.filterBackend.resources, canvas1, canvas2, width = options.imageData.width, height = options.imageData.height;
          if (!resources.blurLayer1) {
            resources.blurLayer1 = fabric4.util.createCanvasElement();
            resources.blurLayer2 = fabric4.util.createCanvasElement();
          }
          canvas1 = resources.blurLayer1;
          canvas2 = resources.blurLayer2;
          if (canvas1.width !== width || canvas1.height !== height) {
            canvas2.width = canvas1.width = width;
            canvas2.height = canvas1.height = height;
          }
          var ctx1 = canvas1.getContext("2d"), ctx2 = canvas2.getContext("2d"), nSamples = 15, random, percent, j, i, blur = this.blur * 0.06 * 0.5;
          ctx1.putImageData(options.imageData, 0, 0);
          ctx2.clearRect(0, 0, width, height);
          for (i = -nSamples; i <= nSamples; i++) {
            random = (Math.random() - 0.5) / 4;
            percent = i / nSamples;
            j = blur * percent * width + random;
            ctx2.globalAlpha = 1 - Math.abs(percent);
            ctx2.drawImage(canvas1, j, random);
            ctx1.drawImage(canvas2, 0, 0);
            ctx2.globalAlpha = 1;
            ctx2.clearRect(0, 0, canvas2.width, canvas2.height);
          }
          for (i = -nSamples; i <= nSamples; i++) {
            random = (Math.random() - 0.5) / 4;
            percent = i / nSamples;
            j = blur * percent * height + random;
            ctx2.globalAlpha = 1 - Math.abs(percent);
            ctx2.drawImage(canvas1, random, j);
            ctx1.drawImage(canvas2, 0, 0);
            ctx2.globalAlpha = 1;
            ctx2.clearRect(0, 0, canvas2.width, canvas2.height);
          }
          options.ctx.drawImage(canvas1, 0, 0);
          var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);
          ctx1.globalAlpha = 1;
          ctx1.clearRect(0, 0, canvas1.width, canvas1.height);
          return newImageData;
        },
        getUniformLocations: function(gl, program) {
          return {
            delta: gl.getUniformLocation(program, "uDelta")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          var delta = this.chooseRightDelta();
          gl.uniform2fv(uniformLocations.delta, delta);
        },
        chooseRightDelta: function() {
          var blurScale = 1, delta = [0, 0], blur;
          if (this.horizontal) {
            if (this.aspectRatio > 1) {
              blurScale = 1 / this.aspectRatio;
            }
          } else {
            if (this.aspectRatio < 1) {
              blurScale = this.aspectRatio;
            }
          }
          blur = blurScale * this.blur * 0.12;
          if (this.horizontal) {
            delta[0] = blur;
          } else {
            delta[1] = blur;
          }
          return delta;
        }
      });
      filters.Blur.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.Gamma = createClass(filters.BaseFilter, {
        type: "Gamma",
        fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform vec3 uGamma;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec3 correction = (1.0 / uGamma);\ncolor.r = pow(color.r, correction.r);\ncolor.g = pow(color.g, correction.g);\ncolor.b = pow(color.b, correction.b);\ngl_FragColor = color;\ngl_FragColor.rgb *= color.a;\n}",
        gamma: [1, 1, 1],
        mainParameter: "gamma",
        initialize: function(options) {
          this.gamma = [1, 1, 1];
          filters.BaseFilter.prototype.initialize.call(this, options);
        },
        applyTo2d: function(options) {
          var imageData = options.imageData, data = imageData.data, gamma = this.gamma, len = data.length, rInv = 1 / gamma[0], gInv = 1 / gamma[1], bInv = 1 / gamma[2], i;
          if (!this.rVals) {
            this.rVals = new Uint8Array(256);
            this.gVals = new Uint8Array(256);
            this.bVals = new Uint8Array(256);
          }
          for (i = 0, len = 256; i < len; i++) {
            this.rVals[i] = Math.pow(i / 255, rInv) * 255;
            this.gVals[i] = Math.pow(i / 255, gInv) * 255;
            this.bVals[i] = Math.pow(i / 255, bInv) * 255;
          }
          for (i = 0, len = data.length; i < len; i += 4) {
            data[i] = this.rVals[data[i]];
            data[i + 1] = this.gVals[data[i + 1]];
            data[i + 2] = this.bVals[data[i + 2]];
          }
        },
        getUniformLocations: function(gl, program) {
          return {
            uGamma: gl.getUniformLocation(program, "uGamma")
          };
        },
        sendUniformData: function(gl, uniformLocations) {
          gl.uniform3fv(uniformLocations.uGamma, this.gamma);
        }
      });
      fabric4.Image.filters.Gamma.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.Composed = createClass(filters.BaseFilter, {
        type: "Composed",
        subFilters: [],
        initialize: function(options) {
          this.callSuper("initialize", options);
          this.subFilters = this.subFilters.slice(0);
        },
        applyTo: function(options) {
          options.passes += this.subFilters.length - 1;
          this.subFilters.forEach(function(filter) {
            filter.applyTo(options);
          });
        },
        toObject: function() {
          return fabric4.util.object.extend(this.callSuper("toObject"), {
            subFilters: this.subFilters.map(function(filter) {
              return filter.toObject();
            })
          });
        },
        isNeutralState: function() {
          return !this.subFilters.some(function(filter) {
            return !filter.isNeutralState();
          });
        }
      });
      fabric4.Image.filters.Composed.fromObject = function(object, callback) {
        var filters2 = object.subFilters || [], subFilters = filters2.map(function(filter) {
          return new fabric4.Image.filters[filter.type](filter);
        }), instance = new fabric4.Image.filters.Composed({subFilters});
        callback && callback(instance);
        return instance;
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), filters = fabric4.Image.filters, createClass = fabric4.util.createClass;
      filters.HueRotation = createClass(filters.ColorMatrix, {
        type: "HueRotation",
        rotation: 0,
        mainParameter: "rotation",
        calculateMatrix: function() {
          var rad = this.rotation * Math.PI, cos = fabric4.util.cos(rad), sin = fabric4.util.sin(rad), aThird = 1 / 3, aThirdSqtSin = Math.sqrt(aThird) * sin, OneMinusCos = 1 - cos;
          this.matrix = [
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
          ];
          this.matrix[0] = cos + OneMinusCos / 3;
          this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;
          this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;
          this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;
          this.matrix[6] = cos + aThird * OneMinusCos;
          this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;
          this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;
          this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;
          this.matrix[12] = cos + aThird * OneMinusCos;
        },
        isNeutralState: function(options) {
          this.calculateMatrix();
          return filters.BaseFilter.prototype.isNeutralState.call(this, options);
        },
        applyTo: function(options) {
          this.calculateMatrix();
          filters.BaseFilter.prototype.applyTo.call(this, options);
        }
      });
      fabric4.Image.filters.HueRotation.fromObject = fabric4.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {}), clone = fabric4.util.object.clone;
      if (fabric4.Text) {
        fabric4.warn("fabric.Text is already defined");
        return;
      }
      fabric4.Text = fabric4.util.createClass(fabric4.Object, {
        _dimensionAffectingProps: [
          "fontSize",
          "fontWeight",
          "fontFamily",
          "fontStyle",
          "lineHeight",
          "text",
          "charSpacing",
          "textAlign",
          "styles"
        ],
        _reNewline: /\r?\n/,
        _reSpacesAndTabs: /[ \t\r]/g,
        _reSpaceAndTab: /[ \t\r]/,
        _reWords: /\S+/g,
        type: "text",
        fontSize: 40,
        fontWeight: "normal",
        fontFamily: "Times New Roman",
        underline: false,
        overline: false,
        linethrough: false,
        textAlign: "left",
        fontStyle: "normal",
        lineHeight: 1.16,
        superscript: {
          size: 0.6,
          baseline: -0.35
        },
        subscript: {
          size: 0.6,
          baseline: 0.11
        },
        textBackgroundColor: "",
        stateProperties: fabric4.Object.prototype.stateProperties.concat("fontFamily", "fontWeight", "fontSize", "text", "underline", "overline", "linethrough", "textAlign", "fontStyle", "lineHeight", "textBackgroundColor", "charSpacing", "styles"),
        cacheProperties: fabric4.Object.prototype.cacheProperties.concat("fontFamily", "fontWeight", "fontSize", "text", "underline", "overline", "linethrough", "textAlign", "fontStyle", "lineHeight", "textBackgroundColor", "charSpacing", "styles"),
        stroke: null,
        shadow: null,
        _fontSizeFraction: 0.222,
        offsets: {
          underline: 0.1,
          linethrough: -0.315,
          overline: -0.88
        },
        _fontSizeMult: 1.13,
        charSpacing: 0,
        styles: null,
        _measuringContext: null,
        deltaY: 0,
        _styleProperties: [
          "stroke",
          "strokeWidth",
          "fill",
          "fontFamily",
          "fontSize",
          "fontWeight",
          "fontStyle",
          "underline",
          "overline",
          "linethrough",
          "deltaY",
          "textBackgroundColor"
        ],
        __charBounds: [],
        CACHE_FONT_SIZE: 400,
        MIN_TEXT_WIDTH: 2,
        initialize: function(text, options) {
          this.styles = options ? options.styles || {} : {};
          this.text = text;
          this.__skipDimension = true;
          this.callSuper("initialize", options);
          this.__skipDimension = false;
          this.initDimensions();
          this.setCoords();
          this.setupState({propertySet: "_dimensionAffectingProps"});
        },
        getMeasuringContext: function() {
          if (!fabric4._measuringContext) {
            fabric4._measuringContext = this.canvas && this.canvas.contextCache || fabric4.util.createCanvasElement().getContext("2d");
          }
          return fabric4._measuringContext;
        },
        _splitText: function() {
          var newLines = this._splitTextIntoLines(this.text);
          this.textLines = newLines.lines;
          this._textLines = newLines.graphemeLines;
          this._unwrappedTextLines = newLines._unwrappedLines;
          this._text = newLines.graphemeText;
          return newLines;
        },
        initDimensions: function() {
          if (this.__skipDimension) {
            return;
          }
          this._splitText();
          this._clearCache();
          this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;
          if (this.textAlign.indexOf("justify") !== -1) {
            this.enlargeSpaces();
          }
          this.height = this.calcTextHeight();
          this.saveState({propertySet: "_dimensionAffectingProps"});
        },
        enlargeSpaces: function() {
          var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line, charBound, spaces;
          for (var i = 0, len = this._textLines.length; i < len; i++) {
            if (this.textAlign !== "justify" && (i === len - 1 || this.isEndOfWrapping(i))) {
              continue;
            }
            accumulatedSpace = 0;
            line = this._textLines[i];
            currentLineWidth = this.getLineWidth(i);
            if (currentLineWidth < this.width && (spaces = this.textLines[i].match(this._reSpacesAndTabs))) {
              numberOfSpaces = spaces.length;
              diffSpace = (this.width - currentLineWidth) / numberOfSpaces;
              for (var j = 0, jlen = line.length; j <= jlen; j++) {
                charBound = this.__charBounds[i][j];
                if (this._reSpaceAndTab.test(line[j])) {
                  charBound.width += diffSpace;
                  charBound.kernedWidth += diffSpace;
                  charBound.left += accumulatedSpace;
                  accumulatedSpace += diffSpace;
                } else {
                  charBound.left += accumulatedSpace;
                }
              }
            }
          }
        },
        isEndOfWrapping: function(lineIndex) {
          return lineIndex === this._textLines.length - 1;
        },
        missingNewlineOffset: function() {
          return 1;
        },
        toString: function() {
          return "#<fabric.Text (" + this.complexity() + '): { "text": "' + this.text + '", "fontFamily": "' + this.fontFamily + '" }>';
        },
        _getCacheCanvasDimensions: function() {
          var dims = this.callSuper("_getCacheCanvasDimensions");
          var fontSize = this.fontSize;
          dims.width += fontSize * dims.zoomX;
          dims.height += fontSize * dims.zoomY;
          return dims;
        },
        _render: function(ctx) {
          this._setTextStyles(ctx);
          this._renderTextLinesBackground(ctx);
          this._renderTextDecoration(ctx, "underline");
          this._renderText(ctx);
          this._renderTextDecoration(ctx, "overline");
          this._renderTextDecoration(ctx, "linethrough");
        },
        _renderText: function(ctx) {
          if (this.paintFirst === "stroke") {
            this._renderTextStroke(ctx);
            this._renderTextFill(ctx);
          } else {
            this._renderTextFill(ctx);
            this._renderTextStroke(ctx);
          }
        },
        _setTextStyles: function(ctx, charStyle, forMeasuring) {
          ctx.textBaseline = "alphabetic";
          ctx.font = this._getFontDeclaration(charStyle, forMeasuring);
        },
        calcTextWidth: function() {
          var maxWidth = this.getLineWidth(0);
          for (var i = 1, len = this._textLines.length; i < len; i++) {
            var currentLineWidth = this.getLineWidth(i);
            if (currentLineWidth > maxWidth) {
              maxWidth = currentLineWidth;
            }
          }
          return maxWidth;
        },
        _renderTextLine: function(method, ctx, line, left, top, lineIndex) {
          this._renderChars(method, ctx, line, left, top, lineIndex);
        },
        _renderTextLinesBackground: function(ctx) {
          if (!this.textBackgroundColor && !this.styleHas("textBackgroundColor")) {
            return;
          }
          var lineTopOffset = 0, heightOfLine, lineLeftOffset, originalFill = ctx.fillStyle, line, lastColor, leftOffset = this._getLeftOffset(), topOffset = this._getTopOffset(), boxStart = 0, boxWidth = 0, charBox, currentColor;
          for (var i = 0, len = this._textLines.length; i < len; i++) {
            heightOfLine = this.getHeightOfLine(i);
            if (!this.textBackgroundColor && !this.styleHas("textBackgroundColor", i)) {
              lineTopOffset += heightOfLine;
              continue;
            }
            line = this._textLines[i];
            lineLeftOffset = this._getLineLeftOffset(i);
            boxWidth = 0;
            boxStart = 0;
            lastColor = this.getValueOfPropertyAt(i, 0, "textBackgroundColor");
            for (var j = 0, jlen = line.length; j < jlen; j++) {
              charBox = this.__charBounds[i][j];
              currentColor = this.getValueOfPropertyAt(i, j, "textBackgroundColor");
              if (currentColor !== lastColor) {
                ctx.fillStyle = lastColor;
                lastColor && ctx.fillRect(leftOffset + lineLeftOffset + boxStart, topOffset + lineTopOffset, boxWidth, heightOfLine / this.lineHeight);
                boxStart = charBox.left;
                boxWidth = charBox.width;
                lastColor = currentColor;
              } else {
                boxWidth += charBox.kernedWidth;
              }
            }
            if (currentColor) {
              ctx.fillStyle = currentColor;
              ctx.fillRect(leftOffset + lineLeftOffset + boxStart, topOffset + lineTopOffset, boxWidth, heightOfLine / this.lineHeight);
            }
            lineTopOffset += heightOfLine;
          }
          ctx.fillStyle = originalFill;
          this._removeShadow(ctx);
        },
        getFontCache: function(decl) {
          var fontFamily = decl.fontFamily.toLowerCase();
          if (!fabric4.charWidthsCache[fontFamily]) {
            fabric4.charWidthsCache[fontFamily] = {};
          }
          var cache = fabric4.charWidthsCache[fontFamily], cacheProp = decl.fontStyle.toLowerCase() + "_" + (decl.fontWeight + "").toLowerCase();
          if (!cache[cacheProp]) {
            cache[cacheProp] = {};
          }
          return cache[cacheProp];
        },
        _applyCharStyles: function(method, ctx, lineIndex, charIndex, styleDeclaration) {
          this._setFillStyles(ctx, styleDeclaration);
          this._setStrokeStyles(ctx, styleDeclaration);
          ctx.font = this._getFontDeclaration(styleDeclaration);
        },
        _measureChar: function(_char, charStyle, previousChar, prevCharStyle) {
          var fontCache = this.getFontCache(charStyle), fontDeclaration = this._getFontDeclaration(charStyle), previousFontDeclaration = this._getFontDeclaration(prevCharStyle), couple = previousChar + _char, stylesAreEqual = fontDeclaration === previousFontDeclaration, width, coupleWidth, previousWidth, fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE, kernedWidth;
          if (previousChar && fontCache[previousChar] !== void 0) {
            previousWidth = fontCache[previousChar];
          }
          if (fontCache[_char] !== void 0) {
            kernedWidth = width = fontCache[_char];
          }
          if (stylesAreEqual && fontCache[couple] !== void 0) {
            coupleWidth = fontCache[couple];
            kernedWidth = coupleWidth - previousWidth;
          }
          if (width === void 0 || previousWidth === void 0 || coupleWidth === void 0) {
            var ctx = this.getMeasuringContext();
            this._setTextStyles(ctx, charStyle, true);
          }
          if (width === void 0) {
            kernedWidth = width = ctx.measureText(_char).width;
            fontCache[_char] = width;
          }
          if (previousWidth === void 0 && stylesAreEqual && previousChar) {
            previousWidth = ctx.measureText(previousChar).width;
            fontCache[previousChar] = previousWidth;
          }
          if (stylesAreEqual && coupleWidth === void 0) {
            coupleWidth = ctx.measureText(couple).width;
            fontCache[couple] = coupleWidth;
            kernedWidth = coupleWidth - previousWidth;
          }
          return {width: width * fontMultiplier, kernedWidth: kernedWidth * fontMultiplier};
        },
        getHeightOfChar: function(line, _char) {
          return this.getValueOfPropertyAt(line, _char, "fontSize");
        },
        measureLine: function(lineIndex) {
          var lineInfo = this._measureLine(lineIndex);
          if (this.charSpacing !== 0) {
            lineInfo.width -= this._getWidthOfCharSpacing();
          }
          if (lineInfo.width < 0) {
            lineInfo.width = 0;
          }
          return lineInfo;
        },
        _measureLine: function(lineIndex) {
          var width = 0, i, grapheme, line = this._textLines[lineIndex], prevGrapheme, graphemeInfo, numOfSpaces = 0, lineBounds = new Array(line.length);
          this.__charBounds[lineIndex] = lineBounds;
          for (i = 0; i < line.length; i++) {
            grapheme = line[i];
            graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);
            lineBounds[i] = graphemeInfo;
            width += graphemeInfo.kernedWidth;
            prevGrapheme = grapheme;
          }
          lineBounds[i] = {
            left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,
            width: 0,
            kernedWidth: 0,
            height: this.fontSize
          };
          return {width, numOfSpaces};
        },
        _getGraphemeBox: function(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {
          var style = this.getCompleteStyleDeclaration(lineIndex, charIndex), prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : {}, info = this._measureChar(grapheme, style, prevGrapheme, prevStyle), kernedWidth = info.kernedWidth, width = info.width, charSpacing;
          if (this.charSpacing !== 0) {
            charSpacing = this._getWidthOfCharSpacing();
            width += charSpacing;
            kernedWidth += charSpacing;
          }
          var box = {
            width,
            left: 0,
            height: style.fontSize,
            kernedWidth,
            deltaY: style.deltaY
          };
          if (charIndex > 0 && !skipLeft) {
            var previousBox = this.__charBounds[lineIndex][charIndex - 1];
            box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;
          }
          return box;
        },
        getHeightOfLine: function(lineIndex) {
          if (this.__lineHeights[lineIndex]) {
            return this.__lineHeights[lineIndex];
          }
          var line = this._textLines[lineIndex], maxHeight = this.getHeightOfChar(lineIndex, 0);
          for (var i = 1, len = line.length; i < len; i++) {
            maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);
          }
          return this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;
        },
        calcTextHeight: function() {
          var lineHeight, height = 0;
          for (var i = 0, len = this._textLines.length; i < len; i++) {
            lineHeight = this.getHeightOfLine(i);
            height += i === len - 1 ? lineHeight / this.lineHeight : lineHeight;
          }
          return height;
        },
        _getLeftOffset: function() {
          return -this.width / 2;
        },
        _getTopOffset: function() {
          return -this.height / 2;
        },
        _renderTextCommon: function(ctx, method) {
          ctx.save();
          var lineHeights = 0, left = this._getLeftOffset(), top = this._getTopOffset(), offsets = this._applyPatternGradientTransform(ctx, method === "fillText" ? this.fill : this.stroke);
          for (var i = 0, len = this._textLines.length; i < len; i++) {
            var heightOfLine = this.getHeightOfLine(i), maxHeight = heightOfLine / this.lineHeight, leftOffset = this._getLineLeftOffset(i);
            this._renderTextLine(method, ctx, this._textLines[i], left + leftOffset - offsets.offsetX, top + lineHeights + maxHeight - offsets.offsetY, i);
            lineHeights += heightOfLine;
          }
          ctx.restore();
        },
        _renderTextFill: function(ctx) {
          if (!this.fill && !this.styleHas("fill")) {
            return;
          }
          this._renderTextCommon(ctx, "fillText");
        },
        _renderTextStroke: function(ctx) {
          if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {
            return;
          }
          if (this.shadow && !this.shadow.affectStroke) {
            this._removeShadow(ctx);
          }
          ctx.save();
          this._setLineDash(ctx, this.strokeDashArray);
          ctx.beginPath();
          this._renderTextCommon(ctx, "strokeText");
          ctx.closePath();
          ctx.restore();
        },
        _renderChars: function(method, ctx, line, left, top, lineIndex) {
          var lineHeight = this.getHeightOfLine(lineIndex), isJustify = this.textAlign.indexOf("justify") !== -1, actualStyle, nextStyle, charsToRender = "", charBox, boxWidth = 0, timeToRender, shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex);
          ctx.save();
          top -= lineHeight * this._fontSizeFraction / this.lineHeight;
          if (shortCut) {
            this._renderChar(method, ctx, lineIndex, 0, line.join(""), left, top, lineHeight);
            ctx.restore();
            return;
          }
          for (var i = 0, len = line.length - 1; i <= len; i++) {
            timeToRender = i === len || this.charSpacing;
            charsToRender += line[i];
            charBox = this.__charBounds[lineIndex][i];
            if (boxWidth === 0) {
              left += charBox.kernedWidth - charBox.width;
              boxWidth += charBox.width;
            } else {
              boxWidth += charBox.kernedWidth;
            }
            if (isJustify && !timeToRender) {
              if (this._reSpaceAndTab.test(line[i])) {
                timeToRender = true;
              }
            }
            if (!timeToRender) {
              actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);
              nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);
              timeToRender = this._hasStyleChanged(actualStyle, nextStyle);
            }
            if (timeToRender) {
              this._renderChar(method, ctx, lineIndex, i, charsToRender, left, top, lineHeight);
              charsToRender = "";
              actualStyle = nextStyle;
              left += boxWidth;
              boxWidth = 0;
            }
          }
          ctx.restore();
        },
        _renderChar: function(method, ctx, lineIndex, charIndex, _char, left, top) {
          var decl = this._getStyleDeclaration(lineIndex, charIndex), fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex), shouldFill = method === "fillText" && fullDecl.fill, shouldStroke = method === "strokeText" && fullDecl.stroke && fullDecl.strokeWidth;
          if (!shouldStroke && !shouldFill) {
            return;
          }
          decl && ctx.save();
          this._applyCharStyles(method, ctx, lineIndex, charIndex, fullDecl);
          if (decl && decl.textBackgroundColor) {
            this._removeShadow(ctx);
          }
          if (decl && decl.deltaY) {
            top += decl.deltaY;
          }
          shouldFill && ctx.fillText(_char, left, top);
          shouldStroke && ctx.strokeText(_char, left, top);
          decl && ctx.restore();
        },
        setSuperscript: function(start, end) {
          return this._setScript(start, end, this.superscript);
        },
        setSubscript: function(start, end) {
          return this._setScript(start, end, this.subscript);
        },
        _setScript: function(start, end, schema) {
          var loc = this.get2DCursorLocation(start, true), fontSize = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, "fontSize"), dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, "deltaY"), style = {fontSize: fontSize * schema.size, deltaY: dy + fontSize * schema.baseline};
          this.setSelectionStyles(style, start, end);
          return this;
        },
        _hasStyleChanged: function(prevStyle, thisStyle) {
          return prevStyle.fill !== thisStyle.fill || prevStyle.stroke !== thisStyle.stroke || prevStyle.strokeWidth !== thisStyle.strokeWidth || prevStyle.fontSize !== thisStyle.fontSize || prevStyle.fontFamily !== thisStyle.fontFamily || prevStyle.fontWeight !== thisStyle.fontWeight || prevStyle.fontStyle !== thisStyle.fontStyle || prevStyle.deltaY !== thisStyle.deltaY;
        },
        _hasStyleChangedForSvg: function(prevStyle, thisStyle) {
          return this._hasStyleChanged(prevStyle, thisStyle) || prevStyle.overline !== thisStyle.overline || prevStyle.underline !== thisStyle.underline || prevStyle.linethrough !== thisStyle.linethrough;
        },
        _getLineLeftOffset: function(lineIndex) {
          var lineWidth = this.getLineWidth(lineIndex);
          if (this.textAlign === "center") {
            return (this.width - lineWidth) / 2;
          }
          if (this.textAlign === "right") {
            return this.width - lineWidth;
          }
          if (this.textAlign === "justify-center" && this.isEndOfWrapping(lineIndex)) {
            return (this.width - lineWidth) / 2;
          }
          if (this.textAlign === "justify-right" && this.isEndOfWrapping(lineIndex)) {
            return this.width - lineWidth;
          }
          return 0;
        },
        _clearCache: function() {
          this.__lineWidths = [];
          this.__lineHeights = [];
          this.__charBounds = [];
        },
        _shouldClearDimensionCache: function() {
          var shouldClear = this._forceClearCache;
          shouldClear || (shouldClear = this.hasStateChanged("_dimensionAffectingProps"));
          if (shouldClear) {
            this.dirty = true;
            this._forceClearCache = false;
          }
          return shouldClear;
        },
        getLineWidth: function(lineIndex) {
          if (this.__lineWidths[lineIndex]) {
            return this.__lineWidths[lineIndex];
          }
          var width, line = this._textLines[lineIndex], lineInfo;
          if (line === "") {
            width = 0;
          } else {
            lineInfo = this.measureLine(lineIndex);
            width = lineInfo.width;
          }
          this.__lineWidths[lineIndex] = width;
          return width;
        },
        _getWidthOfCharSpacing: function() {
          if (this.charSpacing !== 0) {
            return this.fontSize * this.charSpacing / 1e3;
          }
          return 0;
        },
        getValueOfPropertyAt: function(lineIndex, charIndex, property) {
          var charStyle = this._getStyleDeclaration(lineIndex, charIndex);
          if (charStyle && typeof charStyle[property] !== "undefined") {
            return charStyle[property];
          }
          return this[property];
        },
        _renderTextDecoration: function(ctx, type) {
          if (!this[type] && !this.styleHas(type)) {
            return;
          }
          var heightOfLine, size, _size, lineLeftOffset, dy, _dy, line, lastDecoration, leftOffset = this._getLeftOffset(), topOffset = this._getTopOffset(), top, boxStart, boxWidth, charBox, currentDecoration, maxHeight, currentFill, lastFill, charSpacing = this._getWidthOfCharSpacing();
          for (var i = 0, len = this._textLines.length; i < len; i++) {
            heightOfLine = this.getHeightOfLine(i);
            if (!this[type] && !this.styleHas(type, i)) {
              topOffset += heightOfLine;
              continue;
            }
            line = this._textLines[i];
            maxHeight = heightOfLine / this.lineHeight;
            lineLeftOffset = this._getLineLeftOffset(i);
            boxStart = 0;
            boxWidth = 0;
            lastDecoration = this.getValueOfPropertyAt(i, 0, type);
            lastFill = this.getValueOfPropertyAt(i, 0, "fill");
            top = topOffset + maxHeight * (1 - this._fontSizeFraction);
            size = this.getHeightOfChar(i, 0);
            dy = this.getValueOfPropertyAt(i, 0, "deltaY");
            for (var j = 0, jlen = line.length; j < jlen; j++) {
              charBox = this.__charBounds[i][j];
              currentDecoration = this.getValueOfPropertyAt(i, j, type);
              currentFill = this.getValueOfPropertyAt(i, j, "fill");
              _size = this.getHeightOfChar(i, j);
              _dy = this.getValueOfPropertyAt(i, j, "deltaY");
              if ((currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy) && boxWidth > 0) {
                ctx.fillStyle = lastFill;
                lastDecoration && lastFill && ctx.fillRect(leftOffset + lineLeftOffset + boxStart, top + this.offsets[type] * size + dy, boxWidth, this.fontSize / 15);
                boxStart = charBox.left;
                boxWidth = charBox.width;
                lastDecoration = currentDecoration;
                lastFill = currentFill;
                size = _size;
                dy = _dy;
              } else {
                boxWidth += charBox.kernedWidth;
              }
            }
            ctx.fillStyle = currentFill;
            currentDecoration && currentFill && ctx.fillRect(leftOffset + lineLeftOffset + boxStart, top + this.offsets[type] * size + dy, boxWidth - charSpacing, this.fontSize / 15);
            topOffset += heightOfLine;
          }
          this._removeShadow(ctx);
        },
        _getFontDeclaration: function(styleObject, forMeasuring) {
          var style = styleObject || this, family = this.fontFamily, fontIsGeneric = fabric4.Text.genericFonts.indexOf(family.toLowerCase()) > -1;
          var fontFamily = family === void 0 || family.indexOf("'") > -1 || family.indexOf(",") > -1 || family.indexOf('"') > -1 || fontIsGeneric ? style.fontFamily : '"' + style.fontFamily + '"';
          return [
            fabric4.isLikelyNode ? style.fontWeight : style.fontStyle,
            fabric4.isLikelyNode ? style.fontStyle : style.fontWeight,
            forMeasuring ? this.CACHE_FONT_SIZE + "px" : style.fontSize + "px",
            fontFamily
          ].join(" ");
        },
        render: function(ctx) {
          if (!this.visible) {
            return;
          }
          if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {
            return;
          }
          if (this._shouldClearDimensionCache()) {
            this.initDimensions();
          }
          this.callSuper("render", ctx);
        },
        _splitTextIntoLines: function(text) {
          var lines = text.split(this._reNewline), newLines = new Array(lines.length), newLine = ["\n"], newText = [];
          for (var i = 0; i < lines.length; i++) {
            newLines[i] = fabric4.util.string.graphemeSplit(lines[i]);
            newText = newText.concat(newLines[i], newLine);
          }
          newText.pop();
          return {_unwrappedLines: newLines, lines, graphemeText: newText, graphemeLines: newLines};
        },
        toObject: function(propertiesToInclude) {
          var additionalProperties = [
            "text",
            "fontSize",
            "fontWeight",
            "fontFamily",
            "fontStyle",
            "lineHeight",
            "underline",
            "overline",
            "linethrough",
            "textAlign",
            "textBackgroundColor",
            "charSpacing"
          ].concat(propertiesToInclude);
          var obj = this.callSuper("toObject", additionalProperties);
          obj.styles = clone(this.styles, true);
          return obj;
        },
        set: function(key, value) {
          this.callSuper("set", key, value);
          var needsDims = false;
          if (typeof key === "object") {
            for (var _key in key) {
              needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;
            }
          } else {
            needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;
          }
          if (needsDims) {
            this.initDimensions();
            this.setCoords();
          }
          return this;
        },
        complexity: function() {
          return 1;
        }
      });
      fabric4.Text.ATTRIBUTE_NAMES = fabric4.SHARED_ATTRIBUTES.concat("x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor".split(" "));
      fabric4.Text.DEFAULT_SVG_FONT_SIZE = 16;
      fabric4.Text.fromElement = function(element, callback, options) {
        if (!element) {
          return callback(null);
        }
        var parsedAttributes = fabric4.parseAttributes(element, fabric4.Text.ATTRIBUTE_NAMES), parsedAnchor = parsedAttributes.textAnchor || "left";
        options = fabric4.util.object.extend(options ? clone(options) : {}, parsedAttributes);
        options.top = options.top || 0;
        options.left = options.left || 0;
        if (parsedAttributes.textDecoration) {
          var textDecoration = parsedAttributes.textDecoration;
          if (textDecoration.indexOf("underline") !== -1) {
            options.underline = true;
          }
          if (textDecoration.indexOf("overline") !== -1) {
            options.overline = true;
          }
          if (textDecoration.indexOf("line-through") !== -1) {
            options.linethrough = true;
          }
          delete options.textDecoration;
        }
        if ("dx" in parsedAttributes) {
          options.left += parsedAttributes.dx;
        }
        if ("dy" in parsedAttributes) {
          options.top += parsedAttributes.dy;
        }
        if (!("fontSize" in options)) {
          options.fontSize = fabric4.Text.DEFAULT_SVG_FONT_SIZE;
        }
        var textContent = "";
        if (!("textContent" in element)) {
          if ("firstChild" in element && element.firstChild !== null) {
            if ("data" in element.firstChild && element.firstChild.data !== null) {
              textContent = element.firstChild.data;
            }
          }
        } else {
          textContent = element.textContent;
        }
        textContent = textContent.replace(/^\s+|\s+$|\n+/g, "").replace(/\s+/g, " ");
        var originalStrokeWidth = options.strokeWidth;
        options.strokeWidth = 0;
        var text = new fabric4.Text(textContent, options), textHeightScaleFactor = text.getScaledHeight() / text.height, lineHeightDiff = (text.height + text.strokeWidth) * text.lineHeight - text.height, scaledDiff = lineHeightDiff * textHeightScaleFactor, textHeight = text.getScaledHeight() + scaledDiff, offX = 0;
        if (parsedAnchor === "center") {
          offX = text.getScaledWidth() / 2;
        }
        if (parsedAnchor === "right") {
          offX = text.getScaledWidth();
        }
        text.set({
          left: text.left - offX,
          top: text.top - (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) / text.lineHeight,
          strokeWidth: typeof originalStrokeWidth !== "undefined" ? originalStrokeWidth : 1
        });
        callback(text);
      };
      fabric4.Text.fromObject = function(object, callback) {
        return fabric4.Object._fromObject("Text", object, callback, "text");
      };
      fabric4.Text.genericFonts = ["sans-serif", "serif", "cursive", "fantasy", "monospace"];
      fabric4.util.createAccessors && fabric4.util.createAccessors(fabric4.Text);
    })(typeof exports !== "undefined" ? exports : exports);
    (function() {
      fabric3.util.object.extend(fabric3.Text.prototype, {
        isEmptyStyles: function(lineIndex) {
          if (!this.styles) {
            return true;
          }
          if (typeof lineIndex !== "undefined" && !this.styles[lineIndex]) {
            return true;
          }
          var obj = typeof lineIndex === "undefined" ? this.styles : {line: this.styles[lineIndex]};
          for (var p1 in obj) {
            for (var p2 in obj[p1]) {
              for (var p3 in obj[p1][p2]) {
                return false;
              }
            }
          }
          return true;
        },
        styleHas: function(property, lineIndex) {
          if (!this.styles || !property || property === "") {
            return false;
          }
          if (typeof lineIndex !== "undefined" && !this.styles[lineIndex]) {
            return false;
          }
          var obj = typeof lineIndex === "undefined" ? this.styles : {0: this.styles[lineIndex]};
          for (var p1 in obj) {
            for (var p2 in obj[p1]) {
              if (typeof obj[p1][p2][property] !== "undefined") {
                return true;
              }
            }
          }
          return false;
        },
        cleanStyle: function(property) {
          if (!this.styles || !property || property === "") {
            return false;
          }
          var obj = this.styles, stylesCount = 0, letterCount, stylePropertyValue, allStyleObjectPropertiesMatch = true, graphemeCount = 0, styleObject;
          for (var p1 in obj) {
            letterCount = 0;
            for (var p2 in obj[p1]) {
              var styleObject = obj[p1][p2], stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);
              stylesCount++;
              if (stylePropertyHasBeenSet) {
                if (!stylePropertyValue) {
                  stylePropertyValue = styleObject[property];
                } else if (styleObject[property] !== stylePropertyValue) {
                  allStyleObjectPropertiesMatch = false;
                }
                if (styleObject[property] === this[property]) {
                  delete styleObject[property];
                }
              } else {
                allStyleObjectPropertiesMatch = false;
              }
              if (Object.keys(styleObject).length !== 0) {
                letterCount++;
              } else {
                delete obj[p1][p2];
              }
            }
            if (letterCount === 0) {
              delete obj[p1];
            }
          }
          for (var i = 0; i < this._textLines.length; i++) {
            graphemeCount += this._textLines[i].length;
          }
          if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {
            this[property] = stylePropertyValue;
            this.removeStyle(property);
          }
        },
        removeStyle: function(property) {
          if (!this.styles || !property || property === "") {
            return;
          }
          var obj = this.styles, line, lineNum, charNum;
          for (lineNum in obj) {
            line = obj[lineNum];
            for (charNum in line) {
              delete line[charNum][property];
              if (Object.keys(line[charNum]).length === 0) {
                delete line[charNum];
              }
            }
            if (Object.keys(line).length === 0) {
              delete obj[lineNum];
            }
          }
        },
        _extendStyles: function(index, styles) {
          var loc = this.get2DCursorLocation(index);
          if (!this._getLineStyle(loc.lineIndex)) {
            this._setLineStyle(loc.lineIndex);
          }
          if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {
            this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});
          }
          fabric3.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);
        },
        get2DCursorLocation: function(selectionStart, skipWrapping) {
          if (typeof selectionStart === "undefined") {
            selectionStart = this.selectionStart;
          }
          var lines = skipWrapping ? this._unwrappedTextLines : this._textLines, len = lines.length;
          for (var i = 0; i < len; i++) {
            if (selectionStart <= lines[i].length) {
              return {
                lineIndex: i,
                charIndex: selectionStart
              };
            }
            selectionStart -= lines[i].length + this.missingNewlineOffset(i);
          }
          return {
            lineIndex: i - 1,
            charIndex: lines[i - 1].length < selectionStart ? lines[i - 1].length : selectionStart
          };
        },
        getSelectionStyles: function(startIndex, endIndex, complete) {
          if (typeof startIndex === "undefined") {
            startIndex = this.selectionStart || 0;
          }
          if (typeof endIndex === "undefined") {
            endIndex = this.selectionEnd || startIndex;
          }
          var styles = [];
          for (var i = startIndex; i < endIndex; i++) {
            styles.push(this.getStyleAtPosition(i, complete));
          }
          return styles;
        },
        getStyleAtPosition: function(position, complete) {
          var loc = this.get2DCursorLocation(position), style = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) : this._getStyleDeclaration(loc.lineIndex, loc.charIndex);
          return style || {};
        },
        setSelectionStyles: function(styles, startIndex, endIndex) {
          if (typeof startIndex === "undefined") {
            startIndex = this.selectionStart || 0;
          }
          if (typeof endIndex === "undefined") {
            endIndex = this.selectionEnd || startIndex;
          }
          for (var i = startIndex; i < endIndex; i++) {
            this._extendStyles(i, styles);
          }
          this._forceClearCache = true;
          return this;
        },
        _getStyleDeclaration: function(lineIndex, charIndex) {
          var lineStyle = this.styles && this.styles[lineIndex];
          if (!lineStyle) {
            return null;
          }
          return lineStyle[charIndex];
        },
        getCompleteStyleDeclaration: function(lineIndex, charIndex) {
          var style = this._getStyleDeclaration(lineIndex, charIndex) || {}, styleObject = {}, prop;
          for (var i = 0; i < this._styleProperties.length; i++) {
            prop = this._styleProperties[i];
            styleObject[prop] = typeof style[prop] === "undefined" ? this[prop] : style[prop];
          }
          return styleObject;
        },
        _setStyleDeclaration: function(lineIndex, charIndex, style) {
          this.styles[lineIndex][charIndex] = style;
        },
        _deleteStyleDeclaration: function(lineIndex, charIndex) {
          delete this.styles[lineIndex][charIndex];
        },
        _getLineStyle: function(lineIndex) {
          return !!this.styles[lineIndex];
        },
        _setLineStyle: function(lineIndex) {
          this.styles[lineIndex] = {};
        },
        _deleteLineStyle: function(lineIndex) {
          delete this.styles[lineIndex];
        }
      });
    })();
    (function() {
      function parseDecoration(object) {
        if (object.textDecoration) {
          object.textDecoration.indexOf("underline") > -1 && (object.underline = true);
          object.textDecoration.indexOf("line-through") > -1 && (object.linethrough = true);
          object.textDecoration.indexOf("overline") > -1 && (object.overline = true);
          delete object.textDecoration;
        }
      }
      fabric3.IText = fabric3.util.createClass(fabric3.Text, fabric3.Observable, {
        type: "i-text",
        selectionStart: 0,
        selectionEnd: 0,
        selectionColor: "rgba(17,119,255,0.3)",
        isEditing: false,
        editable: true,
        editingBorderColor: "rgba(102,153,255,0.25)",
        cursorWidth: 2,
        cursorColor: "",
        cursorDelay: 1e3,
        cursorDuration: 600,
        caching: true,
        _reSpace: /\s|\n/,
        _currentCursorOpacity: 0,
        _selectionDirection: null,
        _abortCursorAnimation: false,
        __widthOfSpace: [],
        inCompositionMode: false,
        initialize: function(text, options) {
          this.callSuper("initialize", text, options);
          this.initBehavior();
        },
        setSelectionStart: function(index) {
          index = Math.max(index, 0);
          this._updateAndFire("selectionStart", index);
        },
        setSelectionEnd: function(index) {
          index = Math.min(index, this.text.length);
          this._updateAndFire("selectionEnd", index);
        },
        _updateAndFire: function(property, index) {
          if (this[property] !== index) {
            this._fireSelectionChanged();
            this[property] = index;
          }
          this._updateTextarea();
        },
        _fireSelectionChanged: function() {
          this.fire("selection:changed");
          this.canvas && this.canvas.fire("text:selection:changed", {target: this});
        },
        initDimensions: function() {
          this.isEditing && this.initDelayedCursor();
          this.clearContextTop();
          this.callSuper("initDimensions");
        },
        render: function(ctx) {
          this.clearContextTop();
          this.callSuper("render", ctx);
          this.cursorOffsetCache = {};
          this.renderCursorOrSelection();
        },
        _render: function(ctx) {
          this.callSuper("_render", ctx);
        },
        clearContextTop: function(skipRestore) {
          if (!this.isEditing || !this.canvas || !this.canvas.contextTop) {
            return;
          }
          var ctx = this.canvas.contextTop, v = this.canvas.viewportTransform;
          ctx.save();
          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
          this.transform(ctx);
          this._clearTextArea(ctx);
          skipRestore || ctx.restore();
        },
        renderCursorOrSelection: function() {
          if (!this.isEditing || !this.canvas || !this.canvas.contextTop) {
            return;
          }
          var boundaries = this._getCursorBoundaries(), ctx = this.canvas.contextTop;
          this.clearContextTop(true);
          if (this.selectionStart === this.selectionEnd) {
            this.renderCursor(boundaries, ctx);
          } else {
            this.renderSelection(boundaries, ctx);
          }
          ctx.restore();
        },
        _clearTextArea: function(ctx) {
          var width = this.width + 4, height = this.height + 4;
          ctx.clearRect(-width / 2, -height / 2, width, height);
        },
        _getCursorBoundaries: function(position) {
          if (typeof position === "undefined") {
            position = this.selectionStart;
          }
          var left = this._getLeftOffset(), top = this._getTopOffset(), offsets = this._getCursorBoundariesOffsets(position);
          return {
            left,
            top,
            leftOffset: offsets.left,
            topOffset: offsets.top
          };
        },
        _getCursorBoundariesOffsets: function(position) {
          if (this.cursorOffsetCache && "top" in this.cursorOffsetCache) {
            return this.cursorOffsetCache;
          }
          var lineLeftOffset, lineIndex, charIndex, topOffset = 0, leftOffset = 0, boundaries, cursorPosition = this.get2DCursorLocation(position);
          charIndex = cursorPosition.charIndex;
          lineIndex = cursorPosition.lineIndex;
          for (var i = 0; i < lineIndex; i++) {
            topOffset += this.getHeightOfLine(i);
          }
          lineLeftOffset = this._getLineLeftOffset(lineIndex);
          var bound = this.__charBounds[lineIndex][charIndex];
          bound && (leftOffset = bound.left);
          if (this.charSpacing !== 0 && charIndex === this._textLines[lineIndex].length) {
            leftOffset -= this._getWidthOfCharSpacing();
          }
          boundaries = {
            top: topOffset,
            left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0)
          };
          this.cursorOffsetCache = boundaries;
          return this.cursorOffsetCache;
        },
        renderCursor: function(boundaries, ctx) {
          var cursorLocation = this.get2DCursorLocation(), lineIndex = cursorLocation.lineIndex, charIndex = cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0, charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, "fontSize"), multiplier = this.scaleX * this.canvas.getZoom(), cursorWidth = this.cursorWidth / multiplier, topOffset = boundaries.topOffset, dy = this.getValueOfPropertyAt(lineIndex, charIndex, "deltaY");
          topOffset += (1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex) / this.lineHeight - charHeight * (1 - this._fontSizeFraction);
          if (this.inCompositionMode) {
            this.renderSelection(boundaries, ctx);
          }
          ctx.fillStyle = this.cursorColor || this.getValueOfPropertyAt(lineIndex, charIndex, "fill");
          ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;
          ctx.fillRect(boundaries.left + boundaries.leftOffset - cursorWidth / 2, topOffset + boundaries.top + dy, cursorWidth, charHeight);
        },
        renderSelection: function(boundaries, ctx) {
          var selectionStart = this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart, selectionEnd = this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd, isJustify = this.textAlign.indexOf("justify") !== -1, start = this.get2DCursorLocation(selectionStart), end = this.get2DCursorLocation(selectionEnd), startLine = start.lineIndex, endLine = end.lineIndex, startChar = start.charIndex < 0 ? 0 : start.charIndex, endChar = end.charIndex < 0 ? 0 : end.charIndex;
          for (var i = startLine; i <= endLine; i++) {
            var lineOffset = this._getLineLeftOffset(i) || 0, lineHeight = this.getHeightOfLine(i), realLineHeight = 0, boxStart = 0, boxEnd = 0;
            if (i === startLine) {
              boxStart = this.__charBounds[startLine][startChar].left;
            }
            if (i >= startLine && i < endLine) {
              boxEnd = isJustify && !this.isEndOfWrapping(i) ? this.width : this.getLineWidth(i) || 5;
            } else if (i === endLine) {
              if (endChar === 0) {
                boxEnd = this.__charBounds[endLine][endChar].left;
              } else {
                var charSpacing = this._getWidthOfCharSpacing();
                boxEnd = this.__charBounds[endLine][endChar - 1].left + this.__charBounds[endLine][endChar - 1].width - charSpacing;
              }
            }
            realLineHeight = lineHeight;
            if (this.lineHeight < 1 || i === endLine && this.lineHeight > 1) {
              lineHeight /= this.lineHeight;
            }
            if (this.inCompositionMode) {
              ctx.fillStyle = this.compositionColor || "black";
              ctx.fillRect(boundaries.left + lineOffset + boxStart, boundaries.top + boundaries.topOffset + lineHeight, boxEnd - boxStart, 1);
            } else {
              ctx.fillStyle = this.selectionColor;
              ctx.fillRect(boundaries.left + lineOffset + boxStart, boundaries.top + boundaries.topOffset, boxEnd - boxStart, lineHeight);
            }
            boundaries.topOffset += realLineHeight;
          }
        },
        getCurrentCharFontSize: function() {
          var cp = this._getCurrentCharIndex();
          return this.getValueOfPropertyAt(cp.l, cp.c, "fontSize");
        },
        getCurrentCharColor: function() {
          var cp = this._getCurrentCharIndex();
          return this.getValueOfPropertyAt(cp.l, cp.c, "fill");
        },
        _getCurrentCharIndex: function() {
          var cursorPosition = this.get2DCursorLocation(this.selectionStart, true), charIndex = cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;
          return {l: cursorPosition.lineIndex, c: charIndex};
        }
      });
      fabric3.IText.fromObject = function(object, callback) {
        parseDecoration(object);
        if (object.styles) {
          for (var i in object.styles) {
            for (var j in object.styles[i]) {
              parseDecoration(object.styles[i][j]);
            }
          }
        }
        fabric3.Object._fromObject("IText", object, callback, "text");
      };
    })();
    (function() {
      var clone = fabric3.util.object.clone;
      fabric3.util.object.extend(fabric3.IText.prototype, {
        initBehavior: function() {
          this.initAddedHandler();
          this.initRemovedHandler();
          this.initCursorSelectionHandlers();
          this.initDoubleClickSimulation();
          this.mouseMoveHandler = this.mouseMoveHandler.bind(this);
        },
        onDeselect: function() {
          this.isEditing && this.exitEditing();
          this.selected = false;
        },
        initAddedHandler: function() {
          var _this = this;
          this.on("added", function() {
            var canvas = _this.canvas;
            if (canvas) {
              if (!canvas._hasITextHandlers) {
                canvas._hasITextHandlers = true;
                _this._initCanvasHandlers(canvas);
              }
              canvas._iTextInstances = canvas._iTextInstances || [];
              canvas._iTextInstances.push(_this);
            }
          });
        },
        initRemovedHandler: function() {
          var _this = this;
          this.on("removed", function() {
            var canvas = _this.canvas;
            if (canvas) {
              canvas._iTextInstances = canvas._iTextInstances || [];
              fabric3.util.removeFromArray(canvas._iTextInstances, _this);
              if (canvas._iTextInstances.length === 0) {
                canvas._hasITextHandlers = false;
                _this._removeCanvasHandlers(canvas);
              }
            }
          });
        },
        _initCanvasHandlers: function(canvas) {
          canvas._mouseUpITextHandler = function() {
            if (canvas._iTextInstances) {
              canvas._iTextInstances.forEach(function(obj) {
                obj.__isMousedown = false;
              });
            }
          };
          canvas.on("mouse:up", canvas._mouseUpITextHandler);
        },
        _removeCanvasHandlers: function(canvas) {
          canvas.off("mouse:up", canvas._mouseUpITextHandler);
        },
        _tick: function() {
          this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, "_onTickComplete");
        },
        _animateCursor: function(obj, targetOpacity, duration, completeMethod) {
          var tickState;
          tickState = {
            isAborted: false,
            abort: function() {
              this.isAborted = true;
            }
          };
          obj.animate("_currentCursorOpacity", targetOpacity, {
            duration,
            onComplete: function() {
              if (!tickState.isAborted) {
                obj[completeMethod]();
              }
            },
            onChange: function() {
              if (obj.canvas && obj.selectionStart === obj.selectionEnd) {
                obj.renderCursorOrSelection();
              }
            },
            abort: function() {
              return tickState.isAborted;
            }
          });
          return tickState;
        },
        _onTickComplete: function() {
          var _this = this;
          if (this._cursorTimeout1) {
            clearTimeout(this._cursorTimeout1);
          }
          this._cursorTimeout1 = setTimeout(function() {
            _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, "_tick");
          }, 100);
        },
        initDelayedCursor: function(restart) {
          var _this = this, delay = restart ? 0 : this.cursorDelay;
          this.abortCursorAnimation();
          this._currentCursorOpacity = 1;
          this._cursorTimeout2 = setTimeout(function() {
            _this._tick();
          }, delay);
        },
        abortCursorAnimation: function() {
          var shouldClear = this._currentTickState || this._currentTickCompleteState, canvas = this.canvas;
          this._currentTickState && this._currentTickState.abort();
          this._currentTickCompleteState && this._currentTickCompleteState.abort();
          clearTimeout(this._cursorTimeout1);
          clearTimeout(this._cursorTimeout2);
          this._currentCursorOpacity = 0;
          if (shouldClear && canvas) {
            canvas.clearContext(canvas.contextTop || canvas.contextContainer);
          }
        },
        selectAll: function() {
          this.selectionStart = 0;
          this.selectionEnd = this._text.length;
          this._fireSelectionChanged();
          this._updateTextarea();
          return this;
        },
        getSelectedText: function() {
          return this._text.slice(this.selectionStart, this.selectionEnd).join("");
        },
        findWordBoundaryLeft: function(startFrom) {
          var offset = 0, index = startFrom - 1;
          if (this._reSpace.test(this._text[index])) {
            while (this._reSpace.test(this._text[index])) {
              offset++;
              index--;
            }
          }
          while (/\S/.test(this._text[index]) && index > -1) {
            offset++;
            index--;
          }
          return startFrom - offset;
        },
        findWordBoundaryRight: function(startFrom) {
          var offset = 0, index = startFrom;
          if (this._reSpace.test(this._text[index])) {
            while (this._reSpace.test(this._text[index])) {
              offset++;
              index++;
            }
          }
          while (/\S/.test(this._text[index]) && index < this._text.length) {
            offset++;
            index++;
          }
          return startFrom + offset;
        },
        findLineBoundaryLeft: function(startFrom) {
          var offset = 0, index = startFrom - 1;
          while (!/\n/.test(this._text[index]) && index > -1) {
            offset++;
            index--;
          }
          return startFrom - offset;
        },
        findLineBoundaryRight: function(startFrom) {
          var offset = 0, index = startFrom;
          while (!/\n/.test(this._text[index]) && index < this._text.length) {
            offset++;
            index++;
          }
          return startFrom + offset;
        },
        searchWordBoundary: function(selectionStart, direction) {
          var text = this._text, index = this._reSpace.test(text[selectionStart]) ? selectionStart - 1 : selectionStart, _char = text[index], reNonWord = fabric3.reNonWord;
          while (!reNonWord.test(_char) && index > 0 && index < text.length) {
            index += direction;
            _char = text[index];
          }
          if (reNonWord.test(_char)) {
            index += direction === 1 ? 0 : 1;
          }
          return index;
        },
        selectWord: function(selectionStart) {
          selectionStart = selectionStart || this.selectionStart;
          var newSelectionStart = this.searchWordBoundary(selectionStart, -1), newSelectionEnd = this.searchWordBoundary(selectionStart, 1);
          this.selectionStart = newSelectionStart;
          this.selectionEnd = newSelectionEnd;
          this._fireSelectionChanged();
          this._updateTextarea();
          this.renderCursorOrSelection();
        },
        selectLine: function(selectionStart) {
          selectionStart = selectionStart || this.selectionStart;
          var newSelectionStart = this.findLineBoundaryLeft(selectionStart), newSelectionEnd = this.findLineBoundaryRight(selectionStart);
          this.selectionStart = newSelectionStart;
          this.selectionEnd = newSelectionEnd;
          this._fireSelectionChanged();
          this._updateTextarea();
          return this;
        },
        enterEditing: function(e) {
          if (this.isEditing || !this.editable) {
            return;
          }
          if (this.canvas) {
            this.canvas.calcOffset();
            this.exitEditingOnOthers(this.canvas);
          }
          this.isEditing = true;
          this.initHiddenTextarea(e);
          this.hiddenTextarea.focus();
          this.hiddenTextarea.value = this.text;
          this._updateTextarea();
          this._saveEditingProps();
          this._setEditingProps();
          this._textBeforeEdit = this.text;
          this._tick();
          this.fire("editing:entered");
          this._fireSelectionChanged();
          if (!this.canvas) {
            return this;
          }
          this.canvas.fire("text:editing:entered", {target: this});
          this.initMouseMoveHandler();
          this.canvas.requestRenderAll();
          return this;
        },
        exitEditingOnOthers: function(canvas) {
          if (canvas._iTextInstances) {
            canvas._iTextInstances.forEach(function(obj) {
              obj.selected = false;
              if (obj.isEditing) {
                obj.exitEditing();
              }
            });
          }
        },
        initMouseMoveHandler: function() {
          this.canvas.on("mouse:move", this.mouseMoveHandler);
        },
        mouseMoveHandler: function(options) {
          if (!this.__isMousedown || !this.isEditing) {
            return;
          }
          var newSelectionStart = this.getSelectionStartFromPointer(options.e), currentStart = this.selectionStart, currentEnd = this.selectionEnd;
          if ((newSelectionStart !== this.__selectionStartOnMouseDown || currentStart === currentEnd) && (currentStart === newSelectionStart || currentEnd === newSelectionStart)) {
            return;
          }
          if (newSelectionStart > this.__selectionStartOnMouseDown) {
            this.selectionStart = this.__selectionStartOnMouseDown;
            this.selectionEnd = newSelectionStart;
          } else {
            this.selectionStart = newSelectionStart;
            this.selectionEnd = this.__selectionStartOnMouseDown;
          }
          if (this.selectionStart !== currentStart || this.selectionEnd !== currentEnd) {
            this.restartCursorIfNeeded();
            this._fireSelectionChanged();
            this._updateTextarea();
            this.renderCursorOrSelection();
          }
        },
        _setEditingProps: function() {
          this.hoverCursor = "text";
          if (this.canvas) {
            this.canvas.defaultCursor = this.canvas.moveCursor = "text";
          }
          this.borderColor = this.editingBorderColor;
          this.hasControls = this.selectable = false;
          this.lockMovementX = this.lockMovementY = true;
        },
        fromStringToGraphemeSelection: function(start, end, text) {
          var smallerTextStart = text.slice(0, start), graphemeStart = fabric3.util.string.graphemeSplit(smallerTextStart).length;
          if (start === end) {
            return {selectionStart: graphemeStart, selectionEnd: graphemeStart};
          }
          var smallerTextEnd = text.slice(start, end), graphemeEnd = fabric3.util.string.graphemeSplit(smallerTextEnd).length;
          return {selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd};
        },
        fromGraphemeToStringSelection: function(start, end, _text) {
          var smallerTextStart = _text.slice(0, start), graphemeStart = smallerTextStart.join("").length;
          if (start === end) {
            return {selectionStart: graphemeStart, selectionEnd: graphemeStart};
          }
          var smallerTextEnd = _text.slice(start, end), graphemeEnd = smallerTextEnd.join("").length;
          return {selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd};
        },
        _updateTextarea: function() {
          this.cursorOffsetCache = {};
          if (!this.hiddenTextarea) {
            return;
          }
          if (!this.inCompositionMode) {
            var newSelection = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);
            this.hiddenTextarea.selectionStart = newSelection.selectionStart;
            this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;
          }
          this.updateTextareaPosition();
        },
        updateFromTextArea: function() {
          if (!this.hiddenTextarea) {
            return;
          }
          this.cursorOffsetCache = {};
          this.text = this.hiddenTextarea.value;
          if (this._shouldClearDimensionCache()) {
            this.initDimensions();
            this.setCoords();
          }
          var newSelection = this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value);
          this.selectionEnd = this.selectionStart = newSelection.selectionEnd;
          if (!this.inCompositionMode) {
            this.selectionStart = newSelection.selectionStart;
          }
          this.updateTextareaPosition();
        },
        updateTextareaPosition: function() {
          if (this.selectionStart === this.selectionEnd) {
            var style = this._calcTextareaPosition();
            this.hiddenTextarea.style.left = style.left;
            this.hiddenTextarea.style.top = style.top;
          }
        },
        _calcTextareaPosition: function() {
          if (!this.canvas) {
            return {x: 1, y: 1};
          }
          var desiredPosition = this.inCompositionMode ? this.compositionStart : this.selectionStart, boundaries = this._getCursorBoundaries(desiredPosition), cursorLocation = this.get2DCursorLocation(desiredPosition), lineIndex = cursorLocation.lineIndex, charIndex = cursorLocation.charIndex, charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, "fontSize") * this.lineHeight, leftOffset = boundaries.leftOffset, m = this.calcTransformMatrix(), p = {
            x: boundaries.left + leftOffset,
            y: boundaries.top + boundaries.topOffset + charHeight
          }, retinaScaling = this.canvas.getRetinaScaling(), upperCanvas = this.canvas.upperCanvasEl, upperCanvasWidth = upperCanvas.width / retinaScaling, upperCanvasHeight = upperCanvas.height / retinaScaling, maxWidth = upperCanvasWidth - charHeight, maxHeight = upperCanvasHeight - charHeight, scaleX = upperCanvas.clientWidth / upperCanvasWidth, scaleY = upperCanvas.clientHeight / upperCanvasHeight;
          p = fabric3.util.transformPoint(p, m);
          p = fabric3.util.transformPoint(p, this.canvas.viewportTransform);
          p.x *= scaleX;
          p.y *= scaleY;
          if (p.x < 0) {
            p.x = 0;
          }
          if (p.x > maxWidth) {
            p.x = maxWidth;
          }
          if (p.y < 0) {
            p.y = 0;
          }
          if (p.y > maxHeight) {
            p.y = maxHeight;
          }
          p.x += this.canvas._offset.left;
          p.y += this.canvas._offset.top;
          return {left: p.x + "px", top: p.y + "px", fontSize: charHeight + "px", charHeight};
        },
        _saveEditingProps: function() {
          this._savedProps = {
            hasControls: this.hasControls,
            borderColor: this.borderColor,
            lockMovementX: this.lockMovementX,
            lockMovementY: this.lockMovementY,
            hoverCursor: this.hoverCursor,
            selectable: this.selectable,
            defaultCursor: this.canvas && this.canvas.defaultCursor,
            moveCursor: this.canvas && this.canvas.moveCursor
          };
        },
        _restoreEditingProps: function() {
          if (!this._savedProps) {
            return;
          }
          this.hoverCursor = this._savedProps.hoverCursor;
          this.hasControls = this._savedProps.hasControls;
          this.borderColor = this._savedProps.borderColor;
          this.selectable = this._savedProps.selectable;
          this.lockMovementX = this._savedProps.lockMovementX;
          this.lockMovementY = this._savedProps.lockMovementY;
          if (this.canvas) {
            this.canvas.defaultCursor = this._savedProps.defaultCursor;
            this.canvas.moveCursor = this._savedProps.moveCursor;
          }
        },
        exitEditing: function() {
          var isTextChanged = this._textBeforeEdit !== this.text;
          var hiddenTextarea = this.hiddenTextarea;
          this.selected = false;
          this.isEditing = false;
          this.selectionEnd = this.selectionStart;
          if (hiddenTextarea) {
            hiddenTextarea.blur && hiddenTextarea.blur();
            hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
          }
          this.hiddenTextarea = null;
          this.abortCursorAnimation();
          this._restoreEditingProps();
          this._currentCursorOpacity = 0;
          if (this._shouldClearDimensionCache()) {
            this.initDimensions();
            this.setCoords();
          }
          this.fire("editing:exited");
          isTextChanged && this.fire("modified");
          if (this.canvas) {
            this.canvas.off("mouse:move", this.mouseMoveHandler);
            this.canvas.fire("text:editing:exited", {target: this});
            isTextChanged && this.canvas.fire("object:modified", {target: this});
          }
          return this;
        },
        _removeExtraneousStyles: function() {
          for (var prop in this.styles) {
            if (!this._textLines[prop]) {
              delete this.styles[prop];
            }
          }
        },
        removeStyleFromTo: function(start, end) {
          var cursorStart = this.get2DCursorLocation(start, true), cursorEnd = this.get2DCursorLocation(end, true), lineStart = cursorStart.lineIndex, charStart = cursorStart.charIndex, lineEnd = cursorEnd.lineIndex, charEnd = cursorEnd.charIndex, i, styleObj;
          if (lineStart !== lineEnd) {
            if (this.styles[lineStart]) {
              for (i = charStart; i < this._unwrappedTextLines[lineStart].length; i++) {
                delete this.styles[lineStart][i];
              }
            }
            if (this.styles[lineEnd]) {
              for (i = charEnd; i < this._unwrappedTextLines[lineEnd].length; i++) {
                styleObj = this.styles[lineEnd][i];
                if (styleObj) {
                  this.styles[lineStart] || (this.styles[lineStart] = {});
                  this.styles[lineStart][charStart + i - charEnd] = styleObj;
                }
              }
            }
            for (i = lineStart + 1; i <= lineEnd; i++) {
              delete this.styles[i];
            }
            this.shiftLineStyles(lineEnd, lineStart - lineEnd);
          } else {
            if (this.styles[lineStart]) {
              styleObj = this.styles[lineStart];
              var diff = charEnd - charStart, numericChar, _char;
              for (i = charStart; i < charEnd; i++) {
                delete styleObj[i];
              }
              for (_char in this.styles[lineStart]) {
                numericChar = parseInt(_char, 10);
                if (numericChar >= charEnd) {
                  styleObj[numericChar - diff] = styleObj[_char];
                  delete styleObj[_char];
                }
              }
            }
          }
        },
        shiftLineStyles: function(lineIndex, offset) {
          var clonedStyles = clone(this.styles);
          for (var line in this.styles) {
            var numericLine = parseInt(line, 10);
            if (numericLine > lineIndex) {
              this.styles[numericLine + offset] = clonedStyles[numericLine];
              if (!clonedStyles[numericLine - offset]) {
                delete this.styles[numericLine];
              }
            }
          }
        },
        restartCursorIfNeeded: function() {
          if (!this._currentTickState || this._currentTickState.isAborted || !this._currentTickCompleteState || this._currentTickCompleteState.isAborted) {
            this.initDelayedCursor();
          }
        },
        insertNewlineStyleObject: function(lineIndex, charIndex, qty, copiedStyle) {
          var currentCharStyle, newLineStyles = {}, somethingAdded = false, isEndOfLine = this._unwrappedTextLines[lineIndex].length === charIndex;
          qty || (qty = 1);
          this.shiftLineStyles(lineIndex, qty);
          if (this.styles[lineIndex]) {
            currentCharStyle = this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1];
          }
          for (var index in this.styles[lineIndex]) {
            var numIndex = parseInt(index, 10);
            if (numIndex >= charIndex) {
              somethingAdded = true;
              newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];
              if (!(isEndOfLine && charIndex === 0)) {
                delete this.styles[lineIndex][index];
              }
            }
          }
          var styleCarriedOver = false;
          if (somethingAdded && !isEndOfLine) {
            this.styles[lineIndex + qty] = newLineStyles;
            styleCarriedOver = true;
          }
          if (styleCarriedOver) {
            qty--;
          }
          while (qty > 0) {
            if (copiedStyle && copiedStyle[qty - 1]) {
              this.styles[lineIndex + qty] = {0: clone(copiedStyle[qty - 1])};
            } else if (currentCharStyle) {
              this.styles[lineIndex + qty] = {0: clone(currentCharStyle)};
            } else {
              delete this.styles[lineIndex + qty];
            }
            qty--;
          }
          this._forceClearCache = true;
        },
        insertCharStyleObject: function(lineIndex, charIndex, quantity, copiedStyle) {
          if (!this.styles) {
            this.styles = {};
          }
          var currentLineStyles = this.styles[lineIndex], currentLineStylesCloned = currentLineStyles ? clone(currentLineStyles) : {};
          quantity || (quantity = 1);
          for (var index in currentLineStylesCloned) {
            var numericIndex = parseInt(index, 10);
            if (numericIndex >= charIndex) {
              currentLineStyles[numericIndex + quantity] = currentLineStylesCloned[numericIndex];
              if (!currentLineStylesCloned[numericIndex - quantity]) {
                delete currentLineStyles[numericIndex];
              }
            }
          }
          this._forceClearCache = true;
          if (copiedStyle) {
            while (quantity--) {
              if (!Object.keys(copiedStyle[quantity]).length) {
                continue;
              }
              if (!this.styles[lineIndex]) {
                this.styles[lineIndex] = {};
              }
              this.styles[lineIndex][charIndex + quantity] = clone(copiedStyle[quantity]);
            }
            return;
          }
          if (!currentLineStyles) {
            return;
          }
          var newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];
          while (newStyle && quantity--) {
            this.styles[lineIndex][charIndex + quantity] = clone(newStyle);
          }
        },
        insertNewStyleBlock: function(insertedText, start, copiedStyle) {
          var cursorLoc = this.get2DCursorLocation(start, true), addedLines = [0], linesLength = 0;
          for (var i = 0; i < insertedText.length; i++) {
            if (insertedText[i] === "\n") {
              linesLength++;
              addedLines[linesLength] = 0;
            } else {
              addedLines[linesLength]++;
            }
          }
          if (addedLines[0] > 0) {
            this.insertCharStyleObject(cursorLoc.lineIndex, cursorLoc.charIndex, addedLines[0], copiedStyle);
            copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);
          }
          linesLength && this.insertNewlineStyleObject(cursorLoc.lineIndex, cursorLoc.charIndex + addedLines[0], linesLength);
          for (var i = 1; i < linesLength; i++) {
            if (addedLines[i] > 0) {
              this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);
            } else if (copiedStyle) {
              this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];
            }
            copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);
          }
          if (addedLines[i] > 0) {
            this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);
          }
        },
        setSelectionStartEndWithShift: function(start, end, newSelection) {
          if (newSelection <= start) {
            if (end === start) {
              this._selectionDirection = "left";
            } else if (this._selectionDirection === "right") {
              this._selectionDirection = "left";
              this.selectionEnd = start;
            }
            this.selectionStart = newSelection;
          } else if (newSelection > start && newSelection < end) {
            if (this._selectionDirection === "right") {
              this.selectionEnd = newSelection;
            } else {
              this.selectionStart = newSelection;
            }
          } else {
            if (end === start) {
              this._selectionDirection = "right";
            } else if (this._selectionDirection === "left") {
              this._selectionDirection = "right";
              this.selectionStart = end;
            }
            this.selectionEnd = newSelection;
          }
        },
        setSelectionInBoundaries: function() {
          var length = this.text.length;
          if (this.selectionStart > length) {
            this.selectionStart = length;
          } else if (this.selectionStart < 0) {
            this.selectionStart = 0;
          }
          if (this.selectionEnd > length) {
            this.selectionEnd = length;
          } else if (this.selectionEnd < 0) {
            this.selectionEnd = 0;
          }
        }
      });
    })();
    fabric3.util.object.extend(fabric3.IText.prototype, {
      initDoubleClickSimulation: function() {
        this.__lastClickTime = +new Date();
        this.__lastLastClickTime = +new Date();
        this.__lastPointer = {};
        this.on("mousedown", this.onMouseDown);
      },
      onMouseDown: function(options) {
        if (!this.canvas) {
          return;
        }
        this.__newClickTime = +new Date();
        var newPointer = options.pointer;
        if (this.isTripleClick(newPointer)) {
          this.fire("tripleclick", options);
          this._stopEvent(options.e);
        }
        this.__lastLastClickTime = this.__lastClickTime;
        this.__lastClickTime = this.__newClickTime;
        this.__lastPointer = newPointer;
        this.__lastIsEditing = this.isEditing;
        this.__lastSelected = this.selected;
      },
      isTripleClick: function(newPointer) {
        return this.__newClickTime - this.__lastClickTime < 500 && this.__lastClickTime - this.__lastLastClickTime < 500 && this.__lastPointer.x === newPointer.x && this.__lastPointer.y === newPointer.y;
      },
      _stopEvent: function(e) {
        e.preventDefault && e.preventDefault();
        e.stopPropagation && e.stopPropagation();
      },
      initCursorSelectionHandlers: function() {
        this.initMousedownHandler();
        this.initMouseupHandler();
        this.initClicks();
      },
      doubleClickHandler: function(options) {
        if (!this.isEditing) {
          return;
        }
        this.selectWord(this.getSelectionStartFromPointer(options.e));
      },
      tripleClickHandler: function(options) {
        if (!this.isEditing) {
          return;
        }
        this.selectLine(this.getSelectionStartFromPointer(options.e));
      },
      initClicks: function() {
        this.on("mousedblclick", this.doubleClickHandler);
        this.on("tripleclick", this.tripleClickHandler);
      },
      _mouseDownHandler: function(options) {
        if (!this.canvas || !this.editable || options.e.button && options.e.button !== 1) {
          return;
        }
        this.__isMousedown = true;
        if (this.selected) {
          this.inCompositionMode = false;
          this.setCursorByClick(options.e);
        }
        if (this.isEditing) {
          this.__selectionStartOnMouseDown = this.selectionStart;
          if (this.selectionStart === this.selectionEnd) {
            this.abortCursorAnimation();
          }
          this.renderCursorOrSelection();
        }
      },
      _mouseDownHandlerBefore: function(options) {
        if (!this.canvas || !this.editable || options.e.button && options.e.button !== 1) {
          return;
        }
        this.selected = this === this.canvas._activeObject;
      },
      initMousedownHandler: function() {
        this.on("mousedown", this._mouseDownHandler);
        this.on("mousedown:before", this._mouseDownHandlerBefore);
      },
      initMouseupHandler: function() {
        this.on("mouseup", this.mouseUpHandler);
      },
      mouseUpHandler: function(options) {
        this.__isMousedown = false;
        if (!this.editable || this.group || options.transform && options.transform.actionPerformed || options.e.button && options.e.button !== 1) {
          return;
        }
        if (this.canvas) {
          var currentActive = this.canvas._activeObject;
          if (currentActive && currentActive !== this) {
            return;
          }
        }
        if (this.__lastSelected && !this.__corner) {
          this.selected = false;
          this.__lastSelected = false;
          this.enterEditing(options.e);
          if (this.selectionStart === this.selectionEnd) {
            this.initDelayedCursor(true);
          } else {
            this.renderCursorOrSelection();
          }
        } else {
          this.selected = true;
        }
      },
      setCursorByClick: function(e) {
        var newSelection = this.getSelectionStartFromPointer(e), start = this.selectionStart, end = this.selectionEnd;
        if (e.shiftKey) {
          this.setSelectionStartEndWithShift(start, end, newSelection);
        } else {
          this.selectionStart = newSelection;
          this.selectionEnd = newSelection;
        }
        if (this.isEditing) {
          this._fireSelectionChanged();
          this._updateTextarea();
        }
      },
      getSelectionStartFromPointer: function(e) {
        var mouseOffset = this.getLocalPointer(e), prevWidth = 0, width = 0, height = 0, charIndex = 0, lineIndex = 0, lineLeftOffset, line;
        for (var i = 0, len = this._textLines.length; i < len; i++) {
          if (height <= mouseOffset.y) {
            height += this.getHeightOfLine(i) * this.scaleY;
            lineIndex = i;
            if (i > 0) {
              charIndex += this._textLines[i - 1].length + this.missingNewlineOffset(i - 1);
            }
          } else {
            break;
          }
        }
        lineLeftOffset = this._getLineLeftOffset(lineIndex);
        width = lineLeftOffset * this.scaleX;
        line = this._textLines[lineIndex];
        for (var j = 0, jlen = line.length; j < jlen; j++) {
          prevWidth = width;
          width += this.__charBounds[lineIndex][j].kernedWidth * this.scaleX;
          if (width <= mouseOffset.x) {
            charIndex++;
          } else {
            break;
          }
        }
        return this._getNewSelectionStartFromOffset(mouseOffset, prevWidth, width, charIndex, jlen);
      },
      _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width, index, jlen) {
        var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth, distanceBtwNextCharAndCursor = width - mouseOffset.x, offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor || distanceBtwNextCharAndCursor < 0 ? 0 : 1, newSelectionStart = index + offset;
        if (this.flipX) {
          newSelectionStart = jlen - newSelectionStart;
        }
        if (newSelectionStart > this._text.length) {
          newSelectionStart = this._text.length;
        }
        return newSelectionStart;
      }
    });
    fabric3.util.object.extend(fabric3.IText.prototype, {
      initHiddenTextarea: function() {
        this.hiddenTextarea = fabric3.document.createElement("textarea");
        this.hiddenTextarea.setAttribute("autocapitalize", "off");
        this.hiddenTextarea.setAttribute("autocorrect", "off");
        this.hiddenTextarea.setAttribute("autocomplete", "off");
        this.hiddenTextarea.setAttribute("spellcheck", "false");
        this.hiddenTextarea.setAttribute("data-fabric-hiddentextarea", "");
        this.hiddenTextarea.setAttribute("wrap", "off");
        var style = this._calcTextareaPosition();
        this.hiddenTextarea.style.cssText = "position: absolute; top: " + style.top + "; left: " + style.left + "; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding\uFF70top: " + style.fontSize + ";";
        fabric3.document.body.appendChild(this.hiddenTextarea);
        fabric3.util.addListener(this.hiddenTextarea, "keydown", this.onKeyDown.bind(this));
        fabric3.util.addListener(this.hiddenTextarea, "keyup", this.onKeyUp.bind(this));
        fabric3.util.addListener(this.hiddenTextarea, "input", this.onInput.bind(this));
        fabric3.util.addListener(this.hiddenTextarea, "copy", this.copy.bind(this));
        fabric3.util.addListener(this.hiddenTextarea, "cut", this.copy.bind(this));
        fabric3.util.addListener(this.hiddenTextarea, "paste", this.paste.bind(this));
        fabric3.util.addListener(this.hiddenTextarea, "compositionstart", this.onCompositionStart.bind(this));
        fabric3.util.addListener(this.hiddenTextarea, "compositionupdate", this.onCompositionUpdate.bind(this));
        fabric3.util.addListener(this.hiddenTextarea, "compositionend", this.onCompositionEnd.bind(this));
        if (!this._clickHandlerInitialized && this.canvas) {
          fabric3.util.addListener(this.canvas.upperCanvasEl, "click", this.onClick.bind(this));
          this._clickHandlerInitialized = true;
        }
      },
      keysMap: {
        9: "exitEditing",
        27: "exitEditing",
        33: "moveCursorUp",
        34: "moveCursorDown",
        35: "moveCursorRight",
        36: "moveCursorLeft",
        37: "moveCursorLeft",
        38: "moveCursorUp",
        39: "moveCursorRight",
        40: "moveCursorDown"
      },
      ctrlKeysMapUp: {
        67: "copy",
        88: "cut"
      },
      ctrlKeysMapDown: {
        65: "selectAll"
      },
      onClick: function() {
        this.hiddenTextarea && this.hiddenTextarea.focus();
      },
      onKeyDown: function(e) {
        if (!this.isEditing) {
          return;
        }
        if (e.keyCode in this.keysMap) {
          this[this.keysMap[e.keyCode]](e);
        } else if (e.keyCode in this.ctrlKeysMapDown && (e.ctrlKey || e.metaKey)) {
          this[this.ctrlKeysMapDown[e.keyCode]](e);
        } else {
          return;
        }
        e.stopImmediatePropagation();
        e.preventDefault();
        if (e.keyCode >= 33 && e.keyCode <= 40) {
          this.inCompositionMode = false;
          this.clearContextTop();
          this.renderCursorOrSelection();
        } else {
          this.canvas && this.canvas.requestRenderAll();
        }
      },
      onKeyUp: function(e) {
        if (!this.isEditing || this._copyDone || this.inCompositionMode) {
          this._copyDone = false;
          return;
        }
        if (e.keyCode in this.ctrlKeysMapUp && (e.ctrlKey || e.metaKey)) {
          this[this.ctrlKeysMapUp[e.keyCode]](e);
        } else {
          return;
        }
        e.stopImmediatePropagation();
        e.preventDefault();
        this.canvas && this.canvas.requestRenderAll();
      },
      onInput: function(e) {
        var fromPaste = this.fromPaste;
        this.fromPaste = false;
        e && e.stopPropagation();
        if (!this.isEditing) {
          return;
        }
        var nextText = this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText, charCount = this._text.length, nextCharCount = nextText.length, removedText, insertedText, charDiff = nextCharCount - charCount, selectionStart = this.selectionStart, selectionEnd = this.selectionEnd, selection = selectionStart !== selectionEnd, copiedStyle, removeFrom, removeTo;
        if (this.hiddenTextarea.value === "") {
          this.styles = {};
          this.updateFromTextArea();
          this.fire("changed");
          if (this.canvas) {
            this.canvas.fire("text:changed", {target: this});
            this.canvas.requestRenderAll();
          }
          return;
        }
        var textareaSelection = this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value);
        var backDelete = selectionStart > textareaSelection.selectionStart;
        if (selection) {
          removedText = this._text.slice(selectionStart, selectionEnd);
          charDiff += selectionEnd - selectionStart;
        } else if (nextCharCount < charCount) {
          if (backDelete) {
            removedText = this._text.slice(selectionEnd + charDiff, selectionEnd);
          } else {
            removedText = this._text.slice(selectionStart, selectionStart - charDiff);
          }
        }
        insertedText = nextText.slice(textareaSelection.selectionEnd - charDiff, textareaSelection.selectionEnd);
        if (removedText && removedText.length) {
          if (insertedText.length) {
            copiedStyle = this.getSelectionStyles(selectionStart, selectionStart + 1, false);
            copiedStyle = insertedText.map(function() {
              return copiedStyle[0];
            });
          }
          if (selection) {
            removeFrom = selectionStart;
            removeTo = selectionEnd;
          } else if (backDelete) {
            removeFrom = selectionEnd - removedText.length;
            removeTo = selectionEnd;
          } else {
            removeFrom = selectionEnd;
            removeTo = selectionEnd + removedText.length;
          }
          this.removeStyleFromTo(removeFrom, removeTo);
        }
        if (insertedText.length) {
          if (fromPaste && insertedText.join("") === fabric3.copiedText && !fabric3.disableStyleCopyPaste) {
            copiedStyle = fabric3.copiedTextStyle;
          }
          this.insertNewStyleBlock(insertedText, selectionStart, copiedStyle);
        }
        this.updateFromTextArea();
        this.fire("changed");
        if (this.canvas) {
          this.canvas.fire("text:changed", {target: this});
          this.canvas.requestRenderAll();
        }
      },
      onCompositionStart: function() {
        this.inCompositionMode = true;
      },
      onCompositionEnd: function() {
        this.inCompositionMode = false;
      },
      onCompositionUpdate: function(e) {
        this.compositionStart = e.target.selectionStart;
        this.compositionEnd = e.target.selectionEnd;
        this.updateTextareaPosition();
      },
      copy: function() {
        if (this.selectionStart === this.selectionEnd) {
          return;
        }
        fabric3.copiedText = this.getSelectedText();
        if (!fabric3.disableStyleCopyPaste) {
          fabric3.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, true);
        } else {
          fabric3.copiedTextStyle = null;
        }
        this._copyDone = true;
      },
      paste: function() {
        this.fromPaste = true;
      },
      _getClipboardData: function(e) {
        return e && e.clipboardData || fabric3.window.clipboardData;
      },
      _getWidthBeforeCursor: function(lineIndex, charIndex) {
        var widthBeforeCursor = this._getLineLeftOffset(lineIndex), bound;
        if (charIndex > 0) {
          bound = this.__charBounds[lineIndex][charIndex - 1];
          widthBeforeCursor += bound.left + bound.width;
        }
        return widthBeforeCursor;
      },
      getDownCursorOffset: function(e, isRight) {
        var selectionProp = this._getSelectionForOffset(e, isRight), cursorLocation = this.get2DCursorLocation(selectionProp), lineIndex = cursorLocation.lineIndex;
        if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {
          return this._text.length - selectionProp;
        }
        var charIndex = cursorLocation.charIndex, widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex), indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor), textAfterCursor = this._textLines[lineIndex].slice(charIndex);
        return textAfterCursor.length + indexOnOtherLine + 1 + this.missingNewlineOffset(lineIndex);
      },
      _getSelectionForOffset: function(e, isRight) {
        if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {
          return this.selectionEnd;
        } else {
          return this.selectionStart;
        }
      },
      getUpCursorOffset: function(e, isRight) {
        var selectionProp = this._getSelectionForOffset(e, isRight), cursorLocation = this.get2DCursorLocation(selectionProp), lineIndex = cursorLocation.lineIndex;
        if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {
          return -selectionProp;
        }
        var charIndex = cursorLocation.charIndex, widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex), indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor), textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex), missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);
        return -this._textLines[lineIndex - 1].length + indexOnOtherLine - textBeforeCursor.length + (1 - missingNewlineOffset);
      },
      _getIndexOnLine: function(lineIndex, width) {
        var line = this._textLines[lineIndex], lineLeftOffset = this._getLineLeftOffset(lineIndex), widthOfCharsOnLine = lineLeftOffset, indexOnLine = 0, charWidth, foundMatch;
        for (var j = 0, jlen = line.length; j < jlen; j++) {
          charWidth = this.__charBounds[lineIndex][j].width;
          widthOfCharsOnLine += charWidth;
          if (widthOfCharsOnLine > width) {
            foundMatch = true;
            var leftEdge = widthOfCharsOnLine - charWidth, rightEdge = widthOfCharsOnLine, offsetFromLeftEdge = Math.abs(leftEdge - width), offsetFromRightEdge = Math.abs(rightEdge - width);
            indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : j - 1;
            break;
          }
        }
        if (!foundMatch) {
          indexOnLine = line.length - 1;
        }
        return indexOnLine;
      },
      moveCursorDown: function(e) {
        if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {
          return;
        }
        this._moveCursorUpOrDown("Down", e);
      },
      moveCursorUp: function(e) {
        if (this.selectionStart === 0 && this.selectionEnd === 0) {
          return;
        }
        this._moveCursorUpOrDown("Up", e);
      },
      _moveCursorUpOrDown: function(direction, e) {
        var action2 = "get" + direction + "CursorOffset", offset = this[action2](e, this._selectionDirection === "right");
        if (e.shiftKey) {
          this.moveCursorWithShift(offset);
        } else {
          this.moveCursorWithoutShift(offset);
        }
        if (offset !== 0) {
          this.setSelectionInBoundaries();
          this.abortCursorAnimation();
          this._currentCursorOpacity = 1;
          this.initDelayedCursor();
          this._fireSelectionChanged();
          this._updateTextarea();
        }
      },
      moveCursorWithShift: function(offset) {
        var newSelection = this._selectionDirection === "left" ? this.selectionStart + offset : this.selectionEnd + offset;
        this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, newSelection);
        return offset !== 0;
      },
      moveCursorWithoutShift: function(offset) {
        if (offset < 0) {
          this.selectionStart += offset;
          this.selectionEnd = this.selectionStart;
        } else {
          this.selectionEnd += offset;
          this.selectionStart = this.selectionEnd;
        }
        return offset !== 0;
      },
      moveCursorLeft: function(e) {
        if (this.selectionStart === 0 && this.selectionEnd === 0) {
          return;
        }
        this._moveCursorLeftOrRight("Left", e);
      },
      _move: function(e, prop, direction) {
        var newValue;
        if (e.altKey) {
          newValue = this["findWordBoundary" + direction](this[prop]);
        } else if (e.metaKey || e.keyCode === 35 || e.keyCode === 36) {
          newValue = this["findLineBoundary" + direction](this[prop]);
        } else {
          this[prop] += direction === "Left" ? -1 : 1;
          return true;
        }
        if (typeof newValue !== void 0 && this[prop] !== newValue) {
          this[prop] = newValue;
          return true;
        }
      },
      _moveLeft: function(e, prop) {
        return this._move(e, prop, "Left");
      },
      _moveRight: function(e, prop) {
        return this._move(e, prop, "Right");
      },
      moveCursorLeftWithoutShift: function(e) {
        var change = true;
        this._selectionDirection = "left";
        if (this.selectionEnd === this.selectionStart && this.selectionStart !== 0) {
          change = this._moveLeft(e, "selectionStart");
        }
        this.selectionEnd = this.selectionStart;
        return change;
      },
      moveCursorLeftWithShift: function(e) {
        if (this._selectionDirection === "right" && this.selectionStart !== this.selectionEnd) {
          return this._moveLeft(e, "selectionEnd");
        } else if (this.selectionStart !== 0) {
          this._selectionDirection = "left";
          return this._moveLeft(e, "selectionStart");
        }
      },
      moveCursorRight: function(e) {
        if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {
          return;
        }
        this._moveCursorLeftOrRight("Right", e);
      },
      _moveCursorLeftOrRight: function(direction, e) {
        var actionName = "moveCursor" + direction + "With";
        this._currentCursorOpacity = 1;
        if (e.shiftKey) {
          actionName += "Shift";
        } else {
          actionName += "outShift";
        }
        if (this[actionName](e)) {
          this.abortCursorAnimation();
          this.initDelayedCursor();
          this._fireSelectionChanged();
          this._updateTextarea();
        }
      },
      moveCursorRightWithShift: function(e) {
        if (this._selectionDirection === "left" && this.selectionStart !== this.selectionEnd) {
          return this._moveRight(e, "selectionStart");
        } else if (this.selectionEnd !== this._text.length) {
          this._selectionDirection = "right";
          return this._moveRight(e, "selectionEnd");
        }
      },
      moveCursorRightWithoutShift: function(e) {
        var changed = true;
        this._selectionDirection = "right";
        if (this.selectionStart === this.selectionEnd) {
          changed = this._moveRight(e, "selectionStart");
          this.selectionEnd = this.selectionStart;
        } else {
          this.selectionStart = this.selectionEnd;
        }
        return changed;
      },
      removeChars: function(start, end) {
        if (typeof end === "undefined") {
          end = start + 1;
        }
        this.removeStyleFromTo(start, end);
        this._text.splice(start, end - start);
        this.text = this._text.join("");
        this.set("dirty", true);
        if (this._shouldClearDimensionCache()) {
          this.initDimensions();
          this.setCoords();
        }
        this._removeExtraneousStyles();
      },
      insertChars: function(text, style, start, end) {
        if (typeof end === "undefined") {
          end = start;
        }
        if (end > start) {
          this.removeStyleFromTo(start, end);
        }
        var graphemes = fabric3.util.string.graphemeSplit(text);
        this.insertNewStyleBlock(graphemes, start, style);
        this._text = [].concat(this._text.slice(0, start), graphemes, this._text.slice(end));
        this.text = this._text.join("");
        this.set("dirty", true);
        if (this._shouldClearDimensionCache()) {
          this.initDimensions();
          this.setCoords();
        }
        this._removeExtraneousStyles();
      }
    });
    (function() {
      var toFixed = fabric3.util.toFixed, multipleSpacesRegex = /  +/g;
      fabric3.util.object.extend(fabric3.Text.prototype, {
        _toSVG: function() {
          var offsets = this._getSVGLeftTopOffsets(), textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);
          return this._wrapSVGTextAndBg(textAndBg);
        },
        toSVG: function(reviver) {
          return this._createBaseSVGMarkup(this._toSVG(), {reviver, noStyle: true, withShadow: true});
        },
        _getSVGLeftTopOffsets: function() {
          return {
            textLeft: -this.width / 2,
            textTop: -this.height / 2,
            lineTop: this.getHeightOfLine(0)
          };
        },
        _wrapSVGTextAndBg: function(textAndBg) {
          var noShadow = true, textDecoration = this.getSvgTextDecoration(this);
          return [
            textAndBg.textBgRects.join(""),
            '		<text xml:space="preserve" ',
            this.fontFamily ? 'font-family="' + this.fontFamily.replace(/"/g, "'") + '" ' : "",
            this.fontSize ? 'font-size="' + this.fontSize + '" ' : "",
            this.fontStyle ? 'font-style="' + this.fontStyle + '" ' : "",
            this.fontWeight ? 'font-weight="' + this.fontWeight + '" ' : "",
            textDecoration ? 'text-decoration="' + textDecoration + '" ' : "",
            'style="',
            this.getSvgStyles(noShadow),
            '"',
            this.addPaintOrder(),
            " >",
            textAndBg.textSpans.join(""),
            "</text>\n"
          ];
        },
        _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {
          var textSpans = [], textBgRects = [], height = textTopOffset, lineOffset;
          this._setSVGBg(textBgRects);
          for (var i = 0, len = this._textLines.length; i < len; i++) {
            lineOffset = this._getLineLeftOffset(i);
            if (this.textBackgroundColor || this.styleHas("textBackgroundColor", i)) {
              this._setSVGTextLineBg(textBgRects, i, textLeftOffset + lineOffset, height);
            }
            this._setSVGTextLineText(textSpans, i, textLeftOffset + lineOffset, height);
            height += this.getHeightOfLine(i);
          }
          return {
            textSpans,
            textBgRects
          };
        },
        _createTextCharSpan: function(_char, styleDecl, left, top) {
          var shouldUseWhitespace = _char !== _char.trim() || _char.match(multipleSpacesRegex), styleProps = this.getSvgSpanStyles(styleDecl, shouldUseWhitespace), fillStyles = styleProps ? 'style="' + styleProps + '"' : "", dy = styleDecl.deltaY, dySpan = "", NUM_FRACTION_DIGITS = fabric3.Object.NUM_FRACTION_DIGITS;
          if (dy) {
            dySpan = ' dy="' + toFixed(dy, NUM_FRACTION_DIGITS) + '" ';
          }
          return [
            '<tspan x="',
            toFixed(left, NUM_FRACTION_DIGITS),
            '" y="',
            toFixed(top, NUM_FRACTION_DIGITS),
            '" ',
            dySpan,
            fillStyles,
            ">",
            fabric3.util.string.escapeXml(_char),
            "</tspan>"
          ].join("");
        },
        _setSVGTextLineText: function(textSpans, lineIndex, textLeftOffset, textTopOffset) {
          var lineHeight = this.getHeightOfLine(lineIndex), isJustify = this.textAlign.indexOf("justify") !== -1, actualStyle, nextStyle, charsToRender = "", charBox, style, boxWidth = 0, line = this._textLines[lineIndex], timeToRender;
          textTopOffset += lineHeight * (1 - this._fontSizeFraction) / this.lineHeight;
          for (var i = 0, len = line.length - 1; i <= len; i++) {
            timeToRender = i === len || this.charSpacing;
            charsToRender += line[i];
            charBox = this.__charBounds[lineIndex][i];
            if (boxWidth === 0) {
              textLeftOffset += charBox.kernedWidth - charBox.width;
              boxWidth += charBox.width;
            } else {
              boxWidth += charBox.kernedWidth;
            }
            if (isJustify && !timeToRender) {
              if (this._reSpaceAndTab.test(line[i])) {
                timeToRender = true;
              }
            }
            if (!timeToRender) {
              actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);
              nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);
              timeToRender = this._hasStyleChangedForSvg(actualStyle, nextStyle);
            }
            if (timeToRender) {
              style = this._getStyleDeclaration(lineIndex, i) || {};
              textSpans.push(this._createTextCharSpan(charsToRender, style, textLeftOffset, textTopOffset));
              charsToRender = "";
              actualStyle = nextStyle;
              textLeftOffset += boxWidth;
              boxWidth = 0;
            }
          }
        },
        _pushTextBgRect: function(textBgRects, color, left, top, width, height) {
          var NUM_FRACTION_DIGITS = fabric3.Object.NUM_FRACTION_DIGITS;
          textBgRects.push("		<rect ", this._getFillAttributes(color), ' x="', toFixed(left, NUM_FRACTION_DIGITS), '" y="', toFixed(top, NUM_FRACTION_DIGITS), '" width="', toFixed(width, NUM_FRACTION_DIGITS), '" height="', toFixed(height, NUM_FRACTION_DIGITS), '"></rect>\n');
        },
        _setSVGTextLineBg: function(textBgRects, i, leftOffset, textTopOffset) {
          var line = this._textLines[i], heightOfLine = this.getHeightOfLine(i) / this.lineHeight, boxWidth = 0, boxStart = 0, charBox, currentColor, lastColor = this.getValueOfPropertyAt(i, 0, "textBackgroundColor");
          for (var j = 0, jlen = line.length; j < jlen; j++) {
            charBox = this.__charBounds[i][j];
            currentColor = this.getValueOfPropertyAt(i, j, "textBackgroundColor");
            if (currentColor !== lastColor) {
              lastColor && this._pushTextBgRect(textBgRects, lastColor, leftOffset + boxStart, textTopOffset, boxWidth, heightOfLine);
              boxStart = charBox.left;
              boxWidth = charBox.width;
              lastColor = currentColor;
            } else {
              boxWidth += charBox.kernedWidth;
            }
          }
          currentColor && this._pushTextBgRect(textBgRects, currentColor, leftOffset + boxStart, textTopOffset, boxWidth, heightOfLine);
        },
        _getFillAttributes: function(value) {
          var fillColor = value && typeof value === "string" ? new fabric3.Color(value) : "";
          if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {
            return 'fill="' + value + '"';
          }
          return 'opacity="' + fillColor.getAlpha() + '" fill="' + fillColor.setAlpha(1).toRgb() + '"';
        },
        _getSVGLineTopOffset: function(lineIndex) {
          var lineTopOffset = 0, lastHeight = 0;
          for (var j = 0; j < lineIndex; j++) {
            lineTopOffset += this.getHeightOfLine(j);
          }
          lastHeight = this.getHeightOfLine(j);
          return {
            lineTop: lineTopOffset,
            offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)
          };
        },
        getSvgStyles: function(skipShadow) {
          var svgStyle = fabric3.Object.prototype.getSvgStyles.call(this, skipShadow);
          return svgStyle + " white-space: pre;";
        }
      });
    })();
    (function(global2) {
      "use strict";
      var fabric4 = global2.fabric || (global2.fabric = {});
      fabric4.Textbox = fabric4.util.createClass(fabric4.IText, fabric4.Observable, {
        type: "textbox",
        minWidth: 20,
        dynamicMinWidth: 2,
        __cachedLines: null,
        lockScalingFlip: true,
        noScaleCache: false,
        _dimensionAffectingProps: fabric4.Text.prototype._dimensionAffectingProps.concat("width"),
        _wordJoiners: /[ \t\r]/,
        splitByGrapheme: false,
        initDimensions: function() {
          if (this.__skipDimension) {
            return;
          }
          this.isEditing && this.initDelayedCursor();
          this.clearContextTop();
          this._clearCache();
          this.dynamicMinWidth = 0;
          this._styleMap = this._generateStyleMap(this._splitText());
          if (this.dynamicMinWidth > this.width) {
            this._set("width", this.dynamicMinWidth);
          }
          if (this.textAlign.indexOf("justify") !== -1) {
            this.enlargeSpaces();
          }
          this.height = this.calcTextHeight();
          this.saveState({propertySet: "_dimensionAffectingProps"});
        },
        _generateStyleMap: function(textInfo) {
          var realLineCount = 0, realLineCharCount = 0, charCount = 0, map = {};
          for (var i = 0; i < textInfo.graphemeLines.length; i++) {
            if (textInfo.graphemeText[charCount] === "\n" && i > 0) {
              realLineCharCount = 0;
              charCount++;
              realLineCount++;
            } else if (!this.splitByGrapheme && this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) && i > 0) {
              realLineCharCount++;
              charCount++;
            }
            map[i] = {line: realLineCount, offset: realLineCharCount};
            charCount += textInfo.graphemeLines[i].length;
            realLineCharCount += textInfo.graphemeLines[i].length;
          }
          return map;
        },
        styleHas: function(property, lineIndex) {
          if (this._styleMap && !this.isWrapping) {
            var map = this._styleMap[lineIndex];
            if (map) {
              lineIndex = map.line;
            }
          }
          return fabric4.Text.prototype.styleHas.call(this, property, lineIndex);
        },
        isEmptyStyles: function(lineIndex) {
          if (!this.styles) {
            return true;
          }
          var offset = 0, nextLineIndex = lineIndex + 1, nextOffset, obj, shouldLimit = false, map = this._styleMap[lineIndex], mapNextLine = this._styleMap[lineIndex + 1];
          if (map) {
            lineIndex = map.line;
            offset = map.offset;
          }
          if (mapNextLine) {
            nextLineIndex = mapNextLine.line;
            shouldLimit = nextLineIndex === lineIndex;
            nextOffset = mapNextLine.offset;
          }
          obj = typeof lineIndex === "undefined" ? this.styles : {line: this.styles[lineIndex]};
          for (var p1 in obj) {
            for (var p2 in obj[p1]) {
              if (p2 >= offset && (!shouldLimit || p2 < nextOffset)) {
                for (var p3 in obj[p1][p2]) {
                  return false;
                }
              }
            }
          }
          return true;
        },
        _getStyleDeclaration: function(lineIndex, charIndex) {
          if (this._styleMap && !this.isWrapping) {
            var map = this._styleMap[lineIndex];
            if (!map) {
              return null;
            }
            lineIndex = map.line;
            charIndex = map.offset + charIndex;
          }
          return this.callSuper("_getStyleDeclaration", lineIndex, charIndex);
        },
        _setStyleDeclaration: function(lineIndex, charIndex, style) {
          var map = this._styleMap[lineIndex];
          lineIndex = map.line;
          charIndex = map.offset + charIndex;
          this.styles[lineIndex][charIndex] = style;
        },
        _deleteStyleDeclaration: function(lineIndex, charIndex) {
          var map = this._styleMap[lineIndex];
          lineIndex = map.line;
          charIndex = map.offset + charIndex;
          delete this.styles[lineIndex][charIndex];
        },
        _getLineStyle: function(lineIndex) {
          var map = this._styleMap[lineIndex];
          return !!this.styles[map.line];
        },
        _setLineStyle: function(lineIndex) {
          var map = this._styleMap[lineIndex];
          this.styles[map.line] = {};
        },
        _wrapText: function(lines, desiredWidth) {
          var wrapped = [], i;
          this.isWrapping = true;
          for (i = 0; i < lines.length; i++) {
            wrapped = wrapped.concat(this._wrapLine(lines[i], i, desiredWidth));
          }
          this.isWrapping = false;
          return wrapped;
        },
        _measureWord: function(word, lineIndex, charOffset) {
          var width = 0, prevGrapheme, skipLeft = true;
          charOffset = charOffset || 0;
          for (var i = 0, len = word.length; i < len; i++) {
            var box = this._getGraphemeBox(word[i], lineIndex, i + charOffset, prevGrapheme, skipLeft);
            width += box.kernedWidth;
            prevGrapheme = word[i];
          }
          return width;
        },
        _wrapLine: function(_line, lineIndex, desiredWidth, reservedSpace) {
          var lineWidth = 0, splitByGrapheme = this.splitByGrapheme, graphemeLines = [], line = [], words = splitByGrapheme ? fabric4.util.string.graphemeSplit(_line) : _line.split(this._wordJoiners), word = "", offset = 0, infix = splitByGrapheme ? "" : " ", wordWidth = 0, infixWidth = 0, largestWordWidth = 0, lineJustStarted = true, additionalSpace = this._getWidthOfCharSpacing(), reservedSpace = reservedSpace || 0;
          if (words.length === 0) {
            words.push([]);
          }
          desiredWidth -= reservedSpace;
          for (var i = 0; i < words.length; i++) {
            word = splitByGrapheme ? words[i] : fabric4.util.string.graphemeSplit(words[i]);
            wordWidth = this._measureWord(word, lineIndex, offset);
            offset += word.length;
            lineWidth += infixWidth + wordWidth - additionalSpace;
            if (lineWidth >= desiredWidth && !lineJustStarted) {
              graphemeLines.push(line);
              line = [];
              lineWidth = wordWidth;
              lineJustStarted = true;
            } else {
              lineWidth += additionalSpace;
            }
            if (!lineJustStarted && !splitByGrapheme) {
              line.push(infix);
            }
            line = line.concat(word);
            infixWidth = splitByGrapheme ? 0 : this._measureWord([infix], lineIndex, offset);
            offset++;
            lineJustStarted = false;
            if (wordWidth > largestWordWidth) {
              largestWordWidth = wordWidth;
            }
          }
          i && graphemeLines.push(line);
          if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {
            this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;
          }
          return graphemeLines;
        },
        isEndOfWrapping: function(lineIndex) {
          if (!this._styleMap[lineIndex + 1]) {
            return true;
          }
          if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {
            return true;
          }
          return false;
        },
        missingNewlineOffset: function(lineIndex) {
          if (this.splitByGrapheme) {
            return this.isEndOfWrapping(lineIndex) ? 1 : 0;
          }
          return 1;
        },
        _splitTextIntoLines: function(text) {
          var newText = fabric4.Text.prototype._splitTextIntoLines.call(this, text), graphemeLines = this._wrapText(newText.lines, this.width), lines = new Array(graphemeLines.length);
          for (var i = 0; i < graphemeLines.length; i++) {
            lines[i] = graphemeLines[i].join("");
          }
          newText.lines = lines;
          newText.graphemeLines = graphemeLines;
          return newText;
        },
        getMinWidth: function() {
          return Math.max(this.minWidth, this.dynamicMinWidth);
        },
        _removeExtraneousStyles: function() {
          var linesToKeep = {};
          for (var prop in this._styleMap) {
            if (this._textLines[prop]) {
              linesToKeep[this._styleMap[prop].line] = 1;
            }
          }
          for (var prop in this.styles) {
            if (!linesToKeep[prop]) {
              delete this.styles[prop];
            }
          }
        },
        toObject: function(propertiesToInclude) {
          return this.callSuper("toObject", ["minWidth", "splitByGrapheme"].concat(propertiesToInclude));
        }
      });
      fabric4.Textbox.fromObject = function(object, callback) {
        return fabric4.Object._fromObject("Textbox", object, callback, "text");
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function() {
      var controlsUtils = fabric3.controlsUtils, scaleSkewStyleHandler = controlsUtils.scaleSkewCursorStyleHandler, scaleStyleHandler = controlsUtils.scaleCursorStyleHandler, scalingEqually = controlsUtils.scalingEqually, scalingYOrSkewingX = controlsUtils.scalingYOrSkewingX, scalingXOrSkewingY = controlsUtils.scalingXOrSkewingY, scaleOrSkewActionName = controlsUtils.scaleOrSkewActionName, objectControls = fabric3.Object.prototype.controls;
      objectControls.ml = new fabric3.Control({
        x: -0.5,
        y: 0,
        cursorStyleHandler: scaleSkewStyleHandler,
        actionHandler: scalingXOrSkewingY,
        getActionName: scaleOrSkewActionName
      });
      objectControls.mr = new fabric3.Control({
        x: 0.5,
        y: 0,
        cursorStyleHandler: scaleSkewStyleHandler,
        actionHandler: scalingXOrSkewingY,
        getActionName: scaleOrSkewActionName
      });
      objectControls.mb = new fabric3.Control({
        x: 0,
        y: 0.5,
        cursorStyleHandler: scaleSkewStyleHandler,
        actionHandler: scalingYOrSkewingX,
        getActionName: scaleOrSkewActionName
      });
      objectControls.mt = new fabric3.Control({
        x: 0,
        y: -0.5,
        cursorStyleHandler: scaleSkewStyleHandler,
        actionHandler: scalingYOrSkewingX,
        getActionName: scaleOrSkewActionName
      });
      objectControls.tl = new fabric3.Control({
        x: -0.5,
        y: -0.5,
        cursorStyleHandler: scaleStyleHandler,
        actionHandler: scalingEqually
      });
      objectControls.tr = new fabric3.Control({
        x: 0.5,
        y: -0.5,
        cursorStyleHandler: scaleStyleHandler,
        actionHandler: scalingEqually
      });
      objectControls.bl = new fabric3.Control({
        x: -0.5,
        y: 0.5,
        cursorStyleHandler: scaleStyleHandler,
        actionHandler: scalingEqually
      });
      objectControls.br = new fabric3.Control({
        x: 0.5,
        y: 0.5,
        cursorStyleHandler: scaleStyleHandler,
        actionHandler: scalingEqually
      });
      objectControls.mtr = new fabric3.Control({
        x: 0,
        y: -0.5,
        actionHandler: controlsUtils.rotationWithSnapping,
        cursorStyleHandler: controlsUtils.rotationStyleHandler,
        offsetY: -40,
        withConnection: true,
        actionName: "rotate"
      });
      if (fabric3.Textbox) {
        var textBoxControls = fabric3.Textbox.prototype.controls = {};
        textBoxControls.mtr = objectControls.mtr;
        textBoxControls.tr = objectControls.tr;
        textBoxControls.br = objectControls.br;
        textBoxControls.tl = objectControls.tl;
        textBoxControls.bl = objectControls.bl;
        textBoxControls.mt = objectControls.mt;
        textBoxControls.mb = objectControls.mb;
        textBoxControls.mr = new fabric3.Control({
          x: 0.5,
          y: 0,
          actionHandler: controlsUtils.changeWidth,
          cursorStyleHandler: scaleSkewStyleHandler,
          actionName: "resizing"
        });
        textBoxControls.ml = new fabric3.Control({
          x: -0.5,
          y: 0,
          actionHandler: controlsUtils.changeWidth,
          cursorStyleHandler: scaleSkewStyleHandler,
          actionName: "resizing"
        });
      }
    })();
  });

  // app/settings.js
  var settings = {
    document_title: "AAA-21: PROCESSING ARCHITECTURE",
    title: `//&nbsp;PROCESSING ARCHITECTURE`
  };

  // app/actions.js
  var actions_exports = {};
  __export(actions_exports, {
    action: () => action,
    clear_content: () => clear_content,
    hide_render_student: () => hide_render_student,
    render_live: () => render_live,
    render_student: () => render_student,
    render_students: () => render_students,
    render_text: () => render_text,
    render_videos: () => render_videos,
    setStudentSelected: () => setStudentSelected
  });

  // app/data/students.js
  var DATA_STUDENTS = [
    {
      id: "4008524",
      studio: "1A",
      name: "Tim Greentree",
      theme: "1",
      title: "(Perma)culture",
      stub: "tim-greentree"
    },
    {
      id: "4000500",
      studio: "1A",
      name: "Nikolai Thyregaard Nielsen",
      theme: "5",
      title: "Total Landscape - Case Study Herning",
      stub: "nikolai-thyregaard-nielsen"
    },
    {
      id: "4003467",
      studio: "1A",
      name: "Sofie Dalsgaard Jensen",
      theme: "3",
      title: "N\xE5r borgerne driver v\xE6rket / En selvbygget bydel i \xC5rhus",
      stub: "sofie-dalsgaard-jensen"
    },
    {
      id: "4004320",
      studio: "1A",
      name: "Christine Berg Steffensen",
      theme: "5",
      title: "Det stille LANDSKAB - Jammerbugten",
      stub: "christine-berg-steffensen"
    },
    {
      id: "4001986",
      studio: "1A",
      name: "Maria Lunde \xD8rris",
      theme: "5",
      title: "Vildrenens forsvundne territorier",
      stub: "maria-lunde-oerris"
    },
    {
      id: "4008528",
      studio: "1A",
      name: "Eleanor Margot Gibson",
      theme: "5",
      title: "Reimagining the Company Town: A model for future landscapes of coexistence",
      stub: "eleanor-margot-gibson"
    },
    {
      id: "4003893",
      studio: "1A",
      name: "Sebastian Remme Yeoman",
      theme: "3",
      title: "EN BYDEL FORANKRET I HISTORIEN - Transformation af Aalborg Universitetshospital Nord",
      stub: "sebastian-remme-yeoman"
    },
    {
      id: "4007496",
      studio: "1A",
      name: "Huiru Huang",
      theme: "5",
      title: "Responsible Mining Landscape in Greenland for Sustainable Future",
      stub: "huiru-huang"
    },
    {
      id: "4002812",
      studio: "1A",
      name: "Simone Stell\xF4 Stels\xF8 Lauridsen",
      theme: "5",
      title: "LAND & VAND - Landskabet p\xE5 MOLS",
      stub: "simone-stello-stelsoe-lauridsen"
    },
    {
      id: "4003455",
      studio: "1B",
      name: "Vibeke Vildbrad Kristiansen",
      theme: "6",
      title: "Restaurering af Klingeb\xE6kg\xE5rd",
      stub: "vibeke-vildbrad-kristiansen"
    },
    {
      id: "4003574",
      studio: "1B",
      name: "Solveig Vangen Paulsen",
      theme: "6",
      title: "Deichmanske Bibliotek",
      stub: "solveig-vangen-paulsen"
    },
    {
      id: "4003590",
      studio: "1B",
      name: "Tora Hay Walseng",
      theme: "6",
      title: "Deichmanske Bibliotek",
      stub: "tora-hay-walseng"
    },
    {
      id: "4004125",
      studio: "1C",
      name: "Nora Regine Sund Dyrvik",
      theme: "2",
      title: "Fra museum til musikk- og kulturhus. En radikal transformasjon av Munchmuseet",
      stub: "nora-regine-sund-dyrvik"
    },
    {
      id: "4003780",
      studio: "1C",
      name: "Patrick Bunke",
      theme: "3",
      title: "Immervad - Et Klimatorium i \xC5dalen",
      stub: "patrick-bunke"
    },
    {
      id: "4003939",
      studio: "1C",
      name: "Thomas Maagaard",
      theme: "3",
      title: "Immervad - Et Klimatorium i \xC5dalen",
      stub: "thomas-maagaard"
    },
    {
      id: "4003444",
      studio: "1C",
      name: "Simon Rode Gregersen",
      theme: "2",
      title: "Krigens lag \u2013 transformation af Field Station Berlin",
      stub: "simon-rode-gregersen"
    },
    {
      id: "4002854",
      studio: "1C",
      name: "Tonje Benedicte Madsen",
      theme: "2",
      title: "Akropolis-h\xF8yden \u2013 En radikal transformasjon av et kulturelt landemerke i Stavanger",
      stub: "tonje-benedicte-madsen"
    },
    {
      id: "4003564",
      studio: "1C",
      name: "Silja Nordv\xE5g",
      theme: "2",
      title: "Alfheim Satellitt Universitet - en radikal transformasjon av en senmodernistisk sv\xF8mmehall",
      stub: "silja-nordvaag"
    },
    {
      id: "4004177",
      studio: "1C",
      name: "Kathrine Grundahl Hansen",
      theme: "1",
      title: "ET MARITIMT CENTER - En transformation af siloerne ved Lilleb\xE6lt",
      stub: "kathrine-grundahl-hansen"
    },
    {
      id: "4003946",
      studio: "1C",
      name: "Jacob Haugaard Mikkelsen",
      theme: "3",
      title: "Ankomsten til Aarhus fra \xD8st - Omdannelse af silokompleks til terminal for skibsturisme",
      stub: "jacob-haugaard-mikkelsen"
    },
    {
      id: "4002766",
      studio: "2A",
      name: "Julie \xC6rth\xF8j Velling",
      theme: "4",
      title: "A Matter of Proportions",
      stub: "julie-aerthoej-velling"
    },
    {
      id: "4000127",
      studio: "2A",
      name: "Anne S\xF8by Nielsen",
      theme: "5",
      title: "Architecture for Contested Sites: the Case of Grindsted",
      stub: "anne-soeby-nielsen"
    },
    {
      id: "4003774",
      studio: "2A",
      name: "Lucas Philip Edwards",
      theme: "2",
      title: "Song to Song \u2014 an observatory for forestry",
      stub: "lucas-philip-edwards"
    },
    {
      id: "4003790",
      studio: "2A",
      name: "Malene Thornemann Johansen",
      theme: "2",
      title: "Formet af vand - Et center for bev\xE6gelse",
      stub: "malene-thornemann-johansen"
    },
    {
      id: "4004348",
      studio: "2A",
      name: "Mathilde Ballegaard Lehrmann",
      theme: "1",
      title: "In between life and death - Spaces of transition",
      stub: "mathilde-ballegaard-lehrmann"
    },
    {
      id: "4004084",
      studio: "2A",
      name: "Julie H\xF8j Holk",
      theme: "1",
      title: "Motivation til interaktion - et ressourcest\xE6rkt f\xE6llesskab",
      stub: "julie-hoej-holk"
    },
    {
      id: "4003465",
      studio: "2A",
      name: "Alexander Hejgaard Fagerholt",
      theme: "3",
      title: "In between typologies - The future challenges at Refshale\xF8en",
      stub: "alexander-hejgaard-fagerholt"
    },
    {
      id: "4003484",
      studio: "2A",
      name: "Pernille Dambo",
      theme: "4",
      title: "From Linear to Circular - A rethinking of the waste station",
      stub: "pernille-dambo"
    },
    {
      id: "4006503",
      studio: "2A",
      name: "Rosa Prichard",
      theme: "5",
      title: "Decentering The Visitor: A Critical Reframing of Bornholm's Extracted Landscapes",
      stub: "rosa-prichard"
    },
    {
      id: "4003709",
      studio: "2B",
      name: "Elias Johan Hamann",
      theme: "7",
      title: "RSDO-1-21 / ENVISIONING THE RECONSTRUCTION OF SPACE DEBRIS IN ORBIT TO A SPACE HABITAT",
      stub: "elias-johan-hamann"
    },
    {
      id: "4002805",
      studio: "2B",
      name: "Jesper Asferg Scheel",
      theme: "2",
      title: "\u2018ROUND AND ROUND WE GO\u2019 - The velodrome imagined as an homage to the legacy, sounds and emotions of cycling.",
      stub: "jesper-asferg-scheel"
    },
    {
      id: "4004000",
      studio: "2B",
      name: "Jens Toft Madsen",
      theme: "2",
      title: "New Arrivals - Establishing a connection between sea & city",
      stub: "jens-toft-madsen"
    },
    {
      id: "4004158",
      studio: "2B",
      name: "Carl J\xF8rgen Steen Holst",
      theme: "4",
      title: "Disappearing Snow - The Norwegian Ski Culture in a Changing Climate",
      stub: "carl-joergen-steen-holst"
    },
    {
      id: "4003805",
      studio: "2B",
      name: "Kristoffer Holmgaard Gade",
      theme: "7",
      title: "AN UNWELCOME GUEST - A PARASITIC HABITAT FOR A NUCLEAR REACTOR",
      stub: "kristoffer-holmgaard-gade"
    },
    {
      id: "4000080",
      studio: "2C",
      name: "Chris Jongberg Johansen",
      theme: "1",
      title: "Ask cohousing- A part of the village Ask bof\xE6llesskab",
      stub: "chris-jongberg-johansen"
    },
    {
      id: "4003408",
      studio: "2C",
      name: "Thorlak Solberg",
      theme: "",
      title: "T\xE6ttere p\xE5 naturen: H\xF8jskolen som m\xF8dested og mulighedsrum",
      stub: "thorlak-solberg"
    },
    {
      id: "4003696",
      studio: "2C",
      name: "Sarah Knudsen Ghobadi-Salehbeglou",
      theme: "1",
      title: "Den N\xE6re Arbejdsplads: Et Bokoncept til fremme af Hjemmearbejde og Lokalmilj\xF8",
      stub: "sarah-knudsen-ghobadi-salehbeglou"
    },
    {
      id: "4003277",
      studio: "2C",
      name: "Jesper Andreas Christiansen",
      theme: "",
      title: "Dumb Suburbia? Recalibrating the suburban settlement of Skjoldh\xF8jparken",
      stub: "jesper-andreas-christiansen"
    },
    {
      id: "4003432",
      studio: "2C",
      name: "Jakob Vad",
      theme: "",
      title: "Dumb Suburbia? Recalibrating the suburban settlement of Skjoldh\xF8jparken",
      stub: "jakob-vad"
    },
    {
      id: "4003739",
      studio: "2C",
      name: "Morten Aggerholm Andersen",
      theme: "1",
      title: "EN MENINGSGIVENDE FUSIONERING AF TO KOMUNALE INSTITUTION",
      stub: "morten-aggerholm-andersen"
    },
    {
      id: "4003759",
      studio: "2C",
      name: "Simon Kobberup Smedsmo",
      theme: "2",
      title: "Sport- og naturfaciliteter i s\xF8omr\xE5de i Holstebro",
      stub: "simon-kobberup-smedsmo"
    },
    {
      id: "4003461",
      studio: "2C",
      name: "Khadar Yusuf Awil",
      theme: "2",
      title: "Livet mellem reolerne: et lokalbibliotek i Aalborg Vestby",
      stub: "khadar-yusuf-awil"
    },
    {
      id: "4003812",
      studio: "2C",
      name: "Tanja Tofte Thomsen",
      theme: "2",
      title: "Et naturvandrehjem p\xE5 R\xF8sn\xE6s - med plads til fordybelse",
      stub: "tanja-tofte-thomsen"
    },
    {
      id: "4003817",
      studio: "2C",
      name: "Helena Feld",
      theme: "1",
      title: "Veteranernes Hjem - naturens heling af krigens s\xE5r",
      stub: "helena-feld"
    },
    {
      id: "4003493",
      studio: "2C",
      name: "Clara Holm Lange",
      theme: "3",
      title: "Nyholm i Forandring - Tradition, kultur og uddannelse",
      stub: "clara-holm-lange"
    },
    {
      id: "4003872",
      studio: "2C",
      name: "Tanja Haugstrup Hansen",
      theme: "",
      title: "3 generationer under samme tag - p\xE5 kanten af by og land",
      stub: "tanja-haugstrup-hansen"
    },
    {
      id: "4003889",
      studio: "2C",
      name: "Daniel Nielsen",
      theme: "1",
      title: "House, two Homes",
      stub: "daniel-nielsen"
    },
    {
      id: "4002808",
      studio: "2C",
      name: "Vilde Livsdatter S\xF8nderland",
      theme: "1",
      title: "Food as a social catalyst in an urban environment",
      stub: "vilde-livsdatter-soenderland"
    },
    {
      id: "4004118",
      studio: "3",
      name: "Karl Henrik Kobbeltvedt",
      theme: "",
      title: "Knubben - The rehabilitation of an old essential",
      stub: "karl-henrik-kobbeltvedt"
    },
    {
      id: "4003416",
      studio: "3",
      name: "Malene J\xF8rs Nielsen",
      theme: "4",
      title: "A Tidal Encounter on Mand\xF8",
      stub: "malene-joers-nielsen"
    },
    {
      id: "4003711",
      studio: "3",
      name: "Marlene Abild Hindsted",
      theme: "4",
      title: "A Production from the Seabed",
      stub: "marlene-abild-hindsted"
    },
    {
      id: "4004042",
      studio: "3",
      name: "Charlotte Lyberth Jensen",
      theme: "",
      title: "friRUM - a new join-in centre for socially vulnerable in Aarhus",
      stub: "charlotte-lyberth-jensen"
    },
    {
      id: "4003445",
      studio: "3",
      name: "Michelle Skov Justesen",
      theme: "3",
      title: "Rebirth and transformation of Randers Harbour",
      stub: "michelle-skov-justesen"
    },
    {
      id: "4001983",
      studio: "3",
      name: "Stine N\xF8rgaard Skovbjerg",
      theme: "",
      title: "The New Old Way - A School for Self-Sustainable Farming",
      stub: "stine-noergaard-skovbjerg"
    },
    {
      id: "4003441",
      studio: "2A",
      name: "Michelle Rosenvinge",
      theme: "1",
      title: "Perception in the Absence of Sight : Rehabilitation for the Visually Impaired",
      stub: "michelle-rosenvinge"
    },
    {
      id: "4002814",
      studio: "1B",
      name: "Lisa Christine Sippli",
      theme: "",
      title: "Zeche Gneisenau - en revitalisering af det gamle kulmineanl\xE6g i Dortmund Derne",
      stub: "lisa-christine-sippli"
    },
    {
      id: "4003947",
      studio: "2C",
      name: "Mischa Josefine St\xE6hr",
      theme: "",
      title: "",
      stub: "mischa-josefine-staehr"
    }
  ];

  // app/data/themes.js
  var THEMES_EN = [
    {id: "1", slug: "new-commons", name: "NEW COMMONS"},
    {id: "2", slug: "building-for-culture", name: "BUILDING FOR CULTURE"},
    {id: "3", slug: "development", name: "DEVELOPMENT"},
    {id: "4", slug: "sustainable-architecture", name: "SUSTAINABLE ARCHITECTURE"},
    {id: "5", slug: "landscapes-in-transition", name: "LANDSCAPES IN TRANSITION"},
    {id: "6", slug: "heritage", name: "HERITAGE"},
    {id: "7", slug: "extreme-architecture", name: "EXTREME ARCHITECTURE"}
  ];

  // app/data/about.js
  var DATA_ABOUT = `
PROCESSING ARCHITECTURE

<br />
For the first time Aarhus School of Architecture presents its traditional Graduation Show in a 100% digital format. The digital exhibition is a consequence of the lock down caused by COVID19, that with a flap of a butterfly\u2019s wing, all of a sudden united and divided the world in to a new reality of fear, isolation and death, leaving stations, stadiums, schools and streets desolate, dramatically changing our behavior.

<br /><br />
Under normal circumstances an exhibition on architecture consists of the physical encounter with drawings, models and materials, so, how can a digital exhibition replace that experience? The answer is: It cannot. But perhaps it can something else. In any case, every effort has been made to create an exhibition that embraces the spatial and the sensory, going from the usual physical support structures to a digital interface, developed by gamers and programmers.

<br /><br />
The question is, how will the temporarily imposed Social Distancing affect architecture in the future. Is it even possible to go from developing architecture that connects people, to architecture that disables human relations? And, what is the role of architecture in this challenging situation? It is too early to find the answers in the Exhibition, but you will find the answers to other urgent questions among this year\xB4s projects.

<br /><br />
WDAcomprises a space of columns designed specifically for the Exhibition by the new Architects, where the school constitutes the foundation of the space, \u2013 but they are the pillars on which the architecture of tomorrow is built.

<br /><br />
WELCOME > THE EXHIBITION IS (ALWAYS) OPEN!

<br /><br />
Karen Kjaergaard, WDA2020

`;

  // app/actions.js
  var container;
  var themeFilter = null;
  var studentSelected = null;
  var action = (trigger, action2, id, args = []) => {
    console.log("action():", trigger, action2, id);
    container = document.querySelector("#content");
    document.querySelector("#overlay").style.pointerEvents = "none";
    if (trigger === "clearThemeSelection") {
      clearThemeSelection();
    }
    if (trigger === "clearFeatSelection") {
      clearFeatSelection();
    }
    if (trigger === "filter:feat") {
      window.location.href = "#" + id;
      if (action2 === "hide") {
        container.innerHTML = "";
        window.app.pauseRendering = false;
        return;
      }
      if (action2 === "show") {
        if (id === "about")
          render_text(id);
        if (id === "live")
          render_live(id);
        if (id === "videos")
          render_videos(id);
        if (id === "students")
          render_students(id);
      }
    }
    if (trigger === "filter:theme") {
      const theme = THEMES_EN.filter((t) => t.id === id)[0];
      window.location.href = "#theme:" + theme.name.toLowerCase().replace(/ /g, "-");
      if (action2 === "hide") {
        render_theme(false);
      }
      if (action2 === "show") {
        render_theme(id);
      }
    }
  };
  var setStudentSelected = (s) => {
    console.log("setStudentSelected", s);
    studentSelected = s ? s : null;
  };
  var clearFeatSelection = () => {
    console.log("@sidebar clearFeatSelection");
    Array.from(document.querySelectorAll(`#sidebar [data-trigger="filter:feat"]`)).forEach((el2) => {
      el2.classList.remove("selected");
    });
  };
  var clearThemeSelection = () => {
    console.log("@sidebar clearThemeSelection");
    Array.from(document.querySelectorAll(`#sidebar [data-trigger="filter:theme"]`)).forEach((el2) => {
      el2.classList.remove("selected");
    });
  };
  var render_theme = (val) => {
    themeFilter = val;
    window.app.animation.applyFilter("theme", val);
    let studentsToggleSelected = document.querySelector('#sidebar [data-key="students"]').classList.contains("selected");
    console.log("studentsToggleSelected", studentsToggleSelected);
    if (studentsToggleSelected) {
      render_students();
    }
  };
  var clear_content = () => {
    window.toFree();
    document.querySelector("#content").innerHTML = "";
    document.querySelector("#content").classList = "hide";
    document.querySelector("#overlay").style.pointerEvents = "none";
    window.app.pauseRendering = false;
  };
  var render_text = (id) => {
    console.log("render_text", id);
    container = document.querySelector("#content");
    if (id === "about") {
      container.innerHTML = DATA_ABOUT;
      container.classList = "show";
      container.style.overflowY = "auto";
      document.querySelector("#curtain").classList = "black";
      document.querySelector("#overlay").style.pointerEvents = "all";
      setTimeout(() => {
        window.app.pauseRendering = true;
      }, 500);
    }
  };
  var render_live = (id) => {
    container = document.querySelector("#content");
    container.classList = id;
    container.innerHTML = `<iframe
    src="https://player.twitch.tv/?channel=jorgenskogmo&parent=vibrant-nobel-c7d9ea.netlify.app"
    height="600"
    width="800"
    frameborder="yes"
    scrolling="auto"
    allowfullscreen="true">`;
  };
  var render_videos = (id) => {
    container = document.querySelector("#content");
    container.classList = id;
    container.innerHTML = "render_videos";
  };
  var render_student = (stub) => {
    const s = DATA_STUDENTS.filter((student) => student.stub === stub)[0];
    console.log("render_student", stub, s);
    const html = `

		<div class="studentinfo">

			<div class="div1">

				<span class="name">${s.name}</span>
				
				<br />
				<br />
				<span class="theme">GRADUATION PROJECT:<br />
				${s.title}
				</span>

				<br />
				<br />
				<span class="studio">PROGRAMME:<br />
				${s.studio} [todo: map studio-id to studio-data]
				</span>

				<br />
				<br />
				<span class="studio">CONTACT:<br />
				${s.id}@stud.aarch.dk
				</span>
			</div>

			<div class="div2">
				<a class="projectlink" href="http://wp/${s.stub}">SE PROJECT</a>
			</div>
			
			<div class="div3">
				<div class="projectimage">
					<img alt="${s.title}" src="images/${s.id}-${s.stub}.png" />
				</div>
			</div>

			<div class="div4">
				(pdf-link?)
			</div>

		</div>


	`;
    content.classList = "hide";
    document.querySelector("#curtain").classList = "show";
    setTimeout(() => {
      content.innerHTML = html;
      content.classList = "show";
    }, 750);
  };
  var hide_render_student = () => {
    document.querySelector("#curtain").classList = "hide";
    content.innerHTML = "";
  };
  var render_students = (id) => {
    console.log("render_students", id, studentSelected);
    container = document.querySelector("#content");
    container.classList = id;
    let html = "";
    DATA_STUDENTS.forEach((s) => {
      if (themeFilter) {
        if (s.theme === themeFilter) {
          if (studentSelected && s.stub === studentSelected.stub) {
            html += `<a class="student selectedHilite" href="/#${s.stub}">${s.name}</a><br />`;
          } else {
            html += `<a class="student" href="/#${s.stub}">${s.name}</a><br />`;
          }
        }
      } else {
        html += `<a class="student" href="/#${s.stub}">${s.name}</a><br />`;
      }
    });
    container.innerHTML = html;
  };

  // app/routes.js
  var handleHash = (rawHash) => {
    let hash = rawHash.replace("#", "");
    console.log("handleHash:", hash);
    const b = window.app.balls.filter((b2) => b2.el.userData.data.stub === hash)[0];
    if (b) {
      const accepted = window.toNode(b.i);
      console.log("OnHashChanged #4 accepted", accepted);
      if (accepted) {
        const btn = document.querySelector(`#sidebar [data-trigger="filter:theme"][data-key="${b.el.userData.data.theme}"]`);
        if (btn) {
          btn.classList.add("selected");
        }
      }
    } else if (hash.indexOf("theme:") === 0) {
      hash = hash.split(":")[1];
      const slug = hash.toLowerCase().replace(/ /g, "-");
      const theme = THEMES_EN.filter((t) => t.slug === slug)[0];
      console.log("OnHashChanged theme:", hash, slug, theme);
      document.querySelectorAll("#sidebar [data-trigger]").forEach((el2) => {
        el2.classList.remove("selected");
      });
      const btn = document.querySelector(`#sidebar [data-trigger="theme"][data-key="${slug}"]`);
      if (btn) {
        btn.classList.add("selected");
      }
      window.app.animation.applyFilter("theme", theme.id);
    } else if (hash != "") {
      console.log("OnHashChanged page", hash);
      document.querySelectorAll("#sidebar [data-trigger]").forEach((el2) => {
        el2.classList.remove("selected");
      });
      const btn = document.querySelector(`#sidebar [data-trigger="feat"][data-key="${hash}"]`);
      if (btn) {
        btn.classList.add("selected");
      }
      window.app.actions.clear_content();
      if (hash === "about")
        window.app.actions.render_text(hash);
      if (hash === "live")
        window.app.actions.render_live(hash);
      if (hash === "videos")
        window.app.actions.render_videos(hash);
      if (hash === "graduates")
        window.app.actions.render_students(hash);
    }
  };

  // lib/Router.js
  var Router = class {
    constructor(routeFunction) {
      this.history = [];
      if (!routeFunction)
        console.error("Router Error: You must provide a routing funtion");
      this.routeFunction = routeFunction;
      window.addEventListener("hashchange", this.OnHashChanged.bind(this));
      this.OnHashChanged();
    }
    OnHashChanged() {
      const h = window.location.hash;
      this.history.push(h);
      this.routeFunction(h);
    }
    routeFunction(hash) {
      console.warn("Router default routeFunction called. Should be overridden! hash:", hash);
    }
    back() {
      window.location.hash = this.history.pop();
    }
  };

  // lib/sidebar/index.js
  var FEATS = [
    {id: "about", name: "ABOUT"},
    {id: "live", name: "LIVE"},
    {id: "videos", name: "VIDEOS"},
    {id: "graduates", name: "GRADUATES"}
  ];
  var themes2 = THEMES_EN;
  var init = () => {
    let html = "";
    FEATS.forEach((t) => {
      html += `
			<div class="toggle twoline" data-trigger="feat" data-key="${t.id}">
				<span class="circle"> <span class="label">${t.name}</span> </span>
			</div>`;
    });
    document.querySelector("#feats-menu").innerHTML = html;
    html = "";
    THEMES_EN.forEach((t) => {
      html += `
			<div class="toggle twoline" data-trigger="theme" data-key="${t.slug}">
				<span class="circle"> <span class="label">${t.name}</span> </span>
			</div>`;
    });
    document.querySelector("#themes-menu").innerHTML = html;
    document.querySelectorAll("#sidebar [data-trigger]").forEach((el2) => {
      el2.addEventListener("click", (evnt) => {
        const trigger = evnt.target.getAttribute("data-trigger");
        const key = evnt.target.getAttribute("data-key");
        const hash = trigger === "theme" ? `#theme:${key}` : `#${key}`;
        if (window.location.hash === hash) {
          window.location.hash = "";
        } else {
          window.location.hash = hash;
        }
      });
    });
    document.querySelector("#showhide").addEventListener("click", () => {
      const sb = document.querySelector("#sidebar");
      if (sb.classList.contains("closed")) {
        sb.classList.remove("closed");
        document.querySelector("#showhide").innerHTML = "-";
        console.log("show sidebar +");
      } else {
        sb.classList.add("closed");
        document.querySelector("#showhide").innerHTML = "+";
        console.log("hide sidebar");
      }
    });
    document.querySelector("#sidebar").style.display = "block";
  };

  // lib/anim/index.js
  var anim_exports = {};
  __export(anim_exports, {
    applyFilter: () => applyFilter,
    initAnimation: () => initAnimation,
    setFilter: () => setFilter
  });

  // node_modules/three/build/three.module.js
  var REVISION = "123";
  var MOUSE = {LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2};
  var TOUCH = {ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3};
  var CullFaceNone = 0;
  var CullFaceBack = 1;
  var CullFaceFront = 2;
  var PCFShadowMap = 1;
  var PCFSoftShadowMap = 2;
  var VSMShadowMap = 3;
  var FrontSide = 0;
  var BackSide = 1;
  var DoubleSide = 2;
  var FlatShading = 1;
  var NoBlending = 0;
  var NormalBlending = 1;
  var AdditiveBlending = 2;
  var SubtractiveBlending = 3;
  var MultiplyBlending = 4;
  var CustomBlending = 5;
  var AddEquation = 100;
  var SubtractEquation = 101;
  var ReverseSubtractEquation = 102;
  var MinEquation = 103;
  var MaxEquation = 104;
  var ZeroFactor = 200;
  var OneFactor = 201;
  var SrcColorFactor = 202;
  var OneMinusSrcColorFactor = 203;
  var SrcAlphaFactor = 204;
  var OneMinusSrcAlphaFactor = 205;
  var DstAlphaFactor = 206;
  var OneMinusDstAlphaFactor = 207;
  var DstColorFactor = 208;
  var OneMinusDstColorFactor = 209;
  var SrcAlphaSaturateFactor = 210;
  var NeverDepth = 0;
  var AlwaysDepth = 1;
  var LessDepth = 2;
  var LessEqualDepth = 3;
  var EqualDepth = 4;
  var GreaterEqualDepth = 5;
  var GreaterDepth = 6;
  var NotEqualDepth = 7;
  var MultiplyOperation = 0;
  var MixOperation = 1;
  var AddOperation = 2;
  var NoToneMapping = 0;
  var LinearToneMapping = 1;
  var ReinhardToneMapping = 2;
  var CineonToneMapping = 3;
  var ACESFilmicToneMapping = 4;
  var CustomToneMapping = 5;
  var UVMapping = 300;
  var CubeReflectionMapping = 301;
  var CubeRefractionMapping = 302;
  var EquirectangularReflectionMapping = 303;
  var EquirectangularRefractionMapping = 304;
  var CubeUVReflectionMapping = 306;
  var CubeUVRefractionMapping = 307;
  var RepeatWrapping = 1e3;
  var ClampToEdgeWrapping = 1001;
  var MirroredRepeatWrapping = 1002;
  var NearestFilter = 1003;
  var NearestMipmapNearestFilter = 1004;
  var NearestMipmapLinearFilter = 1005;
  var LinearFilter = 1006;
  var LinearMipmapNearestFilter = 1007;
  var LinearMipmapLinearFilter = 1008;
  var UnsignedByteType = 1009;
  var ByteType = 1010;
  var ShortType = 1011;
  var UnsignedShortType = 1012;
  var IntType = 1013;
  var UnsignedIntType = 1014;
  var FloatType = 1015;
  var HalfFloatType = 1016;
  var UnsignedShort4444Type = 1017;
  var UnsignedShort5551Type = 1018;
  var UnsignedShort565Type = 1019;
  var UnsignedInt248Type = 1020;
  var AlphaFormat = 1021;
  var RGBFormat = 1022;
  var RGBAFormat = 1023;
  var LuminanceFormat = 1024;
  var LuminanceAlphaFormat = 1025;
  var DepthFormat = 1026;
  var DepthStencilFormat = 1027;
  var RedFormat = 1028;
  var RedIntegerFormat = 1029;
  var RGFormat = 1030;
  var RGIntegerFormat = 1031;
  var RGBIntegerFormat = 1032;
  var RGBAIntegerFormat = 1033;
  var RGB_S3TC_DXT1_Format = 33776;
  var RGBA_S3TC_DXT1_Format = 33777;
  var RGBA_S3TC_DXT3_Format = 33778;
  var RGBA_S3TC_DXT5_Format = 33779;
  var RGB_PVRTC_4BPPV1_Format = 35840;
  var RGB_PVRTC_2BPPV1_Format = 35841;
  var RGBA_PVRTC_4BPPV1_Format = 35842;
  var RGBA_PVRTC_2BPPV1_Format = 35843;
  var RGB_ETC1_Format = 36196;
  var RGB_ETC2_Format = 37492;
  var RGBA_ETC2_EAC_Format = 37496;
  var RGBA_ASTC_4x4_Format = 37808;
  var RGBA_ASTC_5x4_Format = 37809;
  var RGBA_ASTC_5x5_Format = 37810;
  var RGBA_ASTC_6x5_Format = 37811;
  var RGBA_ASTC_6x6_Format = 37812;
  var RGBA_ASTC_8x5_Format = 37813;
  var RGBA_ASTC_8x6_Format = 37814;
  var RGBA_ASTC_8x8_Format = 37815;
  var RGBA_ASTC_10x5_Format = 37816;
  var RGBA_ASTC_10x6_Format = 37817;
  var RGBA_ASTC_10x8_Format = 37818;
  var RGBA_ASTC_10x10_Format = 37819;
  var RGBA_ASTC_12x10_Format = 37820;
  var RGBA_ASTC_12x12_Format = 37821;
  var RGBA_BPTC_Format = 36492;
  var SRGB8_ALPHA8_ASTC_4x4_Format = 37840;
  var SRGB8_ALPHA8_ASTC_5x4_Format = 37841;
  var SRGB8_ALPHA8_ASTC_5x5_Format = 37842;
  var SRGB8_ALPHA8_ASTC_6x5_Format = 37843;
  var SRGB8_ALPHA8_ASTC_6x6_Format = 37844;
  var SRGB8_ALPHA8_ASTC_8x5_Format = 37845;
  var SRGB8_ALPHA8_ASTC_8x6_Format = 37846;
  var SRGB8_ALPHA8_ASTC_8x8_Format = 37847;
  var SRGB8_ALPHA8_ASTC_10x5_Format = 37848;
  var SRGB8_ALPHA8_ASTC_10x6_Format = 37849;
  var SRGB8_ALPHA8_ASTC_10x8_Format = 37850;
  var SRGB8_ALPHA8_ASTC_10x10_Format = 37851;
  var SRGB8_ALPHA8_ASTC_12x10_Format = 37852;
  var SRGB8_ALPHA8_ASTC_12x12_Format = 37853;
  var LoopOnce = 2200;
  var LoopRepeat = 2201;
  var LoopPingPong = 2202;
  var InterpolateDiscrete = 2300;
  var InterpolateLinear = 2301;
  var InterpolateSmooth = 2302;
  var ZeroCurvatureEnding = 2400;
  var ZeroSlopeEnding = 2401;
  var WrapAroundEnding = 2402;
  var NormalAnimationBlendMode = 2500;
  var AdditiveAnimationBlendMode = 2501;
  var TrianglesDrawMode = 0;
  var LinearEncoding = 3e3;
  var sRGBEncoding = 3001;
  var GammaEncoding = 3007;
  var RGBEEncoding = 3002;
  var LogLuvEncoding = 3003;
  var RGBM7Encoding = 3004;
  var RGBM16Encoding = 3005;
  var RGBDEncoding = 3006;
  var BasicDepthPacking = 3200;
  var RGBADepthPacking = 3201;
  var TangentSpaceNormalMap = 0;
  var ObjectSpaceNormalMap = 1;
  var KeepStencilOp = 7680;
  var AlwaysStencilFunc = 519;
  var StaticDrawUsage = 35044;
  var DynamicDrawUsage = 35048;
  var GLSL3 = "300 es";
  function EventDispatcher() {
  }
  Object.assign(EventDispatcher.prototype, {
    addEventListener: function(type, listener) {
      if (this._listeners === void 0)
        this._listeners = {};
      const listeners = this._listeners;
      if (listeners[type] === void 0) {
        listeners[type] = [];
      }
      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    },
    hasEventListener: function(type, listener) {
      if (this._listeners === void 0)
        return false;
      const listeners = this._listeners;
      return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
    },
    removeEventListener: function(type, listener) {
      if (this._listeners === void 0)
        return;
      const listeners = this._listeners;
      const listenerArray = listeners[type];
      if (listenerArray !== void 0) {
        const index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    },
    dispatchEvent: function(event) {
      if (this._listeners === void 0)
        return;
      const listeners = this._listeners;
      const listenerArray = listeners[event.type];
      if (listenerArray !== void 0) {
        event.target = this;
        const array = listenerArray.slice(0);
        for (let i = 0, l = array.length; i < l; i++) {
          array[i].call(this, event);
        }
      }
    }
  });
  var _lut = [];
  for (let i = 0; i < 256; i++) {
    _lut[i] = (i < 16 ? "0" : "") + i.toString(16);
  }
  var _seed = 1234567;
  var MathUtils = {
    DEG2RAD: Math.PI / 180,
    RAD2DEG: 180 / Math.PI,
    generateUUID: function() {
      const d0 = Math.random() * 4294967295 | 0;
      const d1 = Math.random() * 4294967295 | 0;
      const d2 = Math.random() * 4294967295 | 0;
      const d3 = Math.random() * 4294967295 | 0;
      const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
      return uuid.toUpperCase();
    },
    clamp: function(value, min, max) {
      return Math.max(min, Math.min(max, value));
    },
    euclideanModulo: function(n, m) {
      return (n % m + m) % m;
    },
    mapLinear: function(x, a1, a2, b1, b2) {
      return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
    },
    lerp: function(x, y, t) {
      return (1 - t) * x + t * y;
    },
    smoothstep: function(x, min, max) {
      if (x <= min)
        return 0;
      if (x >= max)
        return 1;
      x = (x - min) / (max - min);
      return x * x * (3 - 2 * x);
    },
    smootherstep: function(x, min, max) {
      if (x <= min)
        return 0;
      if (x >= max)
        return 1;
      x = (x - min) / (max - min);
      return x * x * x * (x * (x * 6 - 15) + 10);
    },
    randInt: function(low, high) {
      return low + Math.floor(Math.random() * (high - low + 1));
    },
    randFloat: function(low, high) {
      return low + Math.random() * (high - low);
    },
    randFloatSpread: function(range) {
      return range * (0.5 - Math.random());
    },
    seededRandom: function(s) {
      if (s !== void 0)
        _seed = s % 2147483647;
      _seed = _seed * 16807 % 2147483647;
      return (_seed - 1) / 2147483646;
    },
    degToRad: function(degrees) {
      return degrees * MathUtils.DEG2RAD;
    },
    radToDeg: function(radians) {
      return radians * MathUtils.RAD2DEG;
    },
    isPowerOfTwo: function(value) {
      return (value & value - 1) === 0 && value !== 0;
    },
    ceilPowerOfTwo: function(value) {
      return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
    },
    floorPowerOfTwo: function(value) {
      return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
    },
    setQuaternionFromProperEuler: function(q, a, b, c, order) {
      const cos = Math.cos;
      const sin = Math.sin;
      const c2 = cos(b / 2);
      const s2 = sin(b / 2);
      const c13 = cos((a + c) / 2);
      const s13 = sin((a + c) / 2);
      const c1_3 = cos((a - c) / 2);
      const s1_3 = sin((a - c) / 2);
      const c3_1 = cos((c - a) / 2);
      const s3_1 = sin((c - a) / 2);
      switch (order) {
        case "XYX":
          q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
          break;
        case "YZY":
          q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
          break;
        case "ZXZ":
          q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
          break;
        case "XZX":
          q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
          break;
        case "YXY":
          q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
          break;
        case "ZYZ":
          q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
          break;
        default:
          console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
      }
    }
  };
  var Vector2 = class {
    constructor(x = 0, y = 0) {
      Object.defineProperty(this, "isVector2", {value: true});
      this.x = x;
      this.y = y;
    }
    get width() {
      return this.x;
    }
    set width(value) {
      this.x = value;
    }
    get height() {
      return this.y;
    }
    set height(value) {
      this.y = value;
    }
    set(x, y) {
      this.x = x;
      this.y = y;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      return this;
    }
    add(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
        return this.addVectors(v, w);
      }
      this.x += v.x;
      this.y += v.y;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      return this;
    }
    sub(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
        return this.subVectors(v, w);
      }
      this.x -= v.x;
      this.y -= v.y;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      return this;
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    applyMatrix3(m) {
      const x = this.x, y = this.y;
      const e = m.elements;
      this.x = e[0] * x + e[3] * y + e[6];
      this.y = e[1] * x + e[4] * y + e[7];
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      return this;
    }
    clamp(min, max) {
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      return this;
    }
    roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y;
    }
    cross(v) {
      return this.x * v.y - this.y * v.x;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    angle() {
      const angle = Math.atan2(-this.y, -this.x) + Math.PI;
      return angle;
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y;
      return dx * dx + dy * dy;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      return array;
    }
    fromBufferAttribute(attribute, index, offset) {
      if (offset !== void 0) {
        console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");
      }
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      return this;
    }
    rotateAround(center, angle) {
      const c = Math.cos(angle), s = Math.sin(angle);
      const x = this.x - center.x;
      const y = this.y - center.y;
      this.x = x * c - y * s + center.x;
      this.y = x * s + y * c + center.y;
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      return this;
    }
  };
  var Matrix3 = class {
    constructor() {
      Object.defineProperty(this, "isMatrix3", {value: true});
      this.elements = [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      ];
      if (arguments.length > 0) {
        console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
      }
    }
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      const te = this.elements;
      te[0] = n11;
      te[1] = n21;
      te[2] = n31;
      te[3] = n12;
      te[4] = n22;
      te[5] = n32;
      te[6] = n13;
      te[7] = n23;
      te[8] = n33;
      return this;
    }
    identity() {
      this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
      return this;
    }
    clone() {
      return new this.constructor().fromArray(this.elements);
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrix3Column(this, 0);
      yAxis.setFromMatrix3Column(this, 1);
      zAxis.setFromMatrix3Column(this, 2);
      return this;
    }
    setFromMatrix4(m) {
      const me = m.elements;
      this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[3], a13 = ae[6];
      const a21 = ae[1], a22 = ae[4], a23 = ae[7];
      const a31 = ae[2], a32 = ae[5], a33 = ae[8];
      const b11 = be[0], b12 = be[3], b13 = be[6];
      const b21 = be[1], b22 = be[4], b23 = be[7];
      const b31 = be[2], b32 = be[5], b33 = be[8];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31;
      te[3] = a11 * b12 + a12 * b22 + a13 * b32;
      te[6] = a11 * b13 + a12 * b23 + a13 * b33;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31;
      te[4] = a21 * b12 + a22 * b22 + a23 * b32;
      te[7] = a21 * b13 + a22 * b23 + a23 * b33;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31;
      te[5] = a31 * b12 + a32 * b22 + a33 * b32;
      te[8] = a31 * b13 + a32 * b23 + a33 * b33;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[3] *= s;
      te[6] *= s;
      te[1] *= s;
      te[4] *= s;
      te[7] *= s;
      te[2] *= s;
      te[5] *= s;
      te[8] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];
      return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
      if (det === 0)
        return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n31 * n23 - n33 * n21) * detInv;
      te[2] = (n32 * n21 - n31 * n22) * detInv;
      te[3] = t12 * detInv;
      te[4] = (n33 * n11 - n31 * n13) * detInv;
      te[5] = (n31 * n12 - n32 * n11) * detInv;
      te[6] = t13 * detInv;
      te[7] = (n21 * n13 - n23 * n11) * detInv;
      te[8] = (n22 * n11 - n21 * n12) * detInv;
      return this;
    }
    transpose() {
      let tmp2;
      const m = this.elements;
      tmp2 = m[1];
      m[1] = m[3];
      m[3] = tmp2;
      tmp2 = m[2];
      m[2] = m[6];
      m[6] = tmp2;
      tmp2 = m[5];
      m[5] = m[7];
      m[7] = tmp2;
      return this;
    }
    getNormalMatrix(matrix4) {
      return this.setFromMatrix4(matrix4).copy(this).invert().transpose();
    }
    transposeIntoArray(r) {
      const m = this.elements;
      r[0] = m[0];
      r[1] = m[3];
      r[2] = m[6];
      r[3] = m[1];
      r[4] = m[4];
      r[5] = m[7];
      r[6] = m[2];
      r[7] = m[5];
      r[8] = m[8];
      return this;
    }
    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
      const c = Math.cos(rotation);
      const s = Math.sin(rotation);
      this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);
    }
    scale(sx, sy) {
      const te = this.elements;
      te[0] *= sx;
      te[3] *= sx;
      te[6] *= sx;
      te[1] *= sy;
      te[4] *= sy;
      te[7] *= sy;
      return this;
    }
    rotate(theta) {
      const c = Math.cos(theta);
      const s = Math.sin(theta);
      const te = this.elements;
      const a11 = te[0], a12 = te[3], a13 = te[6];
      const a21 = te[1], a22 = te[4], a23 = te[7];
      te[0] = c * a11 + s * a21;
      te[3] = c * a12 + s * a22;
      te[6] = c * a13 + s * a23;
      te[1] = -s * a11 + c * a21;
      te[4] = -s * a12 + c * a22;
      te[7] = -s * a13 + c * a23;
      return this;
    }
    translate(tx, ty) {
      const te = this.elements;
      te[0] += tx * te[2];
      te[3] += tx * te[5];
      te[6] += tx * te[8];
      te[1] += ty * te[2];
      te[4] += ty * te[5];
      te[7] += ty * te[8];
      return this;
    }
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i = 0; i < 9; i++) {
        if (te[i] !== me[i])
          return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i = 0; i < 9; i++) {
        this.elements[i] = array[i + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      return array;
    }
  };
  var _canvas;
  var ImageUtils = {
    getDataURL: function(image) {
      if (/^data:/i.test(image.src)) {
        return image.src;
      }
      if (typeof HTMLCanvasElement == "undefined") {
        return image.src;
      }
      let canvas;
      if (image instanceof HTMLCanvasElement) {
        canvas = image;
      } else {
        if (_canvas === void 0)
          _canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
        _canvas.width = image.width;
        _canvas.height = image.height;
        const context = _canvas.getContext("2d");
        if (image instanceof ImageData) {
          context.putImageData(image, 0, 0);
        } else {
          context.drawImage(image, 0, 0, image.width, image.height);
        }
        canvas = _canvas;
      }
      if (canvas.width > 2048 || canvas.height > 2048) {
        return canvas.toDataURL("image/jpeg", 0.6);
      } else {
        return canvas.toDataURL("image/png");
      }
    }
  };
  var textureId = 0;
  function Texture(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {
    Object.defineProperty(this, "id", {value: textureId++});
    this.uuid = MathUtils.generateUUID();
    this.name = "";
    this.image = image;
    this.mipmaps = [];
    this.mapping = mapping;
    this.wrapS = wrapS;
    this.wrapT = wrapT;
    this.magFilter = magFilter;
    this.minFilter = minFilter;
    this.anisotropy = anisotropy;
    this.format = format;
    this.internalFormat = null;
    this.type = type;
    this.offset = new Vector2(0, 0);
    this.repeat = new Vector2(1, 1);
    this.center = new Vector2(0, 0);
    this.rotation = 0;
    this.matrixAutoUpdate = true;
    this.matrix = new Matrix3();
    this.generateMipmaps = true;
    this.premultiplyAlpha = false;
    this.flipY = true;
    this.unpackAlignment = 4;
    this.encoding = encoding;
    this.version = 0;
    this.onUpdate = null;
  }
  Texture.DEFAULT_IMAGE = void 0;
  Texture.DEFAULT_MAPPING = UVMapping;
  Texture.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
    constructor: Texture,
    isTexture: true,
    updateMatrix: function() {
      this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    },
    clone: function() {
      return new this.constructor().copy(this);
    },
    copy: function(source) {
      this.name = source.name;
      this.image = source.image;
      this.mipmaps = source.mipmaps.slice(0);
      this.mapping = source.mapping;
      this.wrapS = source.wrapS;
      this.wrapT = source.wrapT;
      this.magFilter = source.magFilter;
      this.minFilter = source.minFilter;
      this.anisotropy = source.anisotropy;
      this.format = source.format;
      this.internalFormat = source.internalFormat;
      this.type = source.type;
      this.offset.copy(source.offset);
      this.repeat.copy(source.repeat);
      this.center.copy(source.center);
      this.rotation = source.rotation;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrix.copy(source.matrix);
      this.generateMipmaps = source.generateMipmaps;
      this.premultiplyAlpha = source.premultiplyAlpha;
      this.flipY = source.flipY;
      this.unpackAlignment = source.unpackAlignment;
      this.encoding = source.encoding;
      return this;
    },
    toJSON: function(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.textures[this.uuid] !== void 0) {
        return meta.textures[this.uuid];
      }
      const output = {
        metadata: {
          version: 4.5,
          type: "Texture",
          generator: "Texture.toJSON"
        },
        uuid: this.uuid,
        name: this.name,
        mapping: this.mapping,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        center: [this.center.x, this.center.y],
        rotation: this.rotation,
        wrap: [this.wrapS, this.wrapT],
        format: this.format,
        type: this.type,
        encoding: this.encoding,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY,
        premultiplyAlpha: this.premultiplyAlpha,
        unpackAlignment: this.unpackAlignment
      };
      if (this.image !== void 0) {
        const image = this.image;
        if (image.uuid === void 0) {
          image.uuid = MathUtils.generateUUID();
        }
        if (!isRootObject && meta.images[image.uuid] === void 0) {
          let url;
          if (Array.isArray(image)) {
            url = [];
            for (let i = 0, l = image.length; i < l; i++) {
              if (image[i].isDataTexture) {
                url.push(serializeImage(image[i].image));
              } else {
                url.push(serializeImage(image[i]));
              }
            }
          } else {
            url = serializeImage(image);
          }
          meta.images[image.uuid] = {
            uuid: image.uuid,
            url
          };
        }
        output.image = image.uuid;
      }
      if (!isRootObject) {
        meta.textures[this.uuid] = output;
      }
      return output;
    },
    dispose: function() {
      this.dispatchEvent({type: "dispose"});
    },
    transformUv: function(uv) {
      if (this.mapping !== UVMapping)
        return uv;
      uv.applyMatrix3(this.matrix);
      if (uv.x < 0 || uv.x > 1) {
        switch (this.wrapS) {
          case RepeatWrapping:
            uv.x = uv.x - Math.floor(uv.x);
            break;
          case ClampToEdgeWrapping:
            uv.x = uv.x < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.x) % 2) === 1) {
              uv.x = Math.ceil(uv.x) - uv.x;
            } else {
              uv.x = uv.x - Math.floor(uv.x);
            }
            break;
        }
      }
      if (uv.y < 0 || uv.y > 1) {
        switch (this.wrapT) {
          case RepeatWrapping:
            uv.y = uv.y - Math.floor(uv.y);
            break;
          case ClampToEdgeWrapping:
            uv.y = uv.y < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.y) % 2) === 1) {
              uv.y = Math.ceil(uv.y) - uv.y;
            } else {
              uv.y = uv.y - Math.floor(uv.y);
            }
            break;
        }
      }
      if (this.flipY) {
        uv.y = 1 - uv.y;
      }
      return uv;
    }
  });
  Object.defineProperty(Texture.prototype, "needsUpdate", {
    set: function(value) {
      if (value === true)
        this.version++;
    }
  });
  function serializeImage(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      return ImageUtils.getDataURL(image);
    } else {
      if (image.data) {
        return {
          data: Array.prototype.slice.call(image.data),
          width: image.width,
          height: image.height,
          type: image.data.constructor.name
        };
      } else {
        console.warn("THREE.Texture: Unable to serialize Texture.");
        return {};
      }
    }
  }
  var Vector4 = class {
    constructor(x = 0, y = 0, z = 0, w = 1) {
      Object.defineProperty(this, "isVector4", {value: true});
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
    }
    get width() {
      return this.z;
    }
    set width(value) {
      this.z = value;
    }
    get height() {
      return this.w;
    }
    set height(value) {
      this.w = value;
    }
    set(x, y, z, w) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      this.w = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setW(w) {
      this.w = w;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        case 3:
          this.w = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        case 3:
          return this.w;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      this.w = v.w !== void 0 ? v.w : 1;
      return this;
    }
    add(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
        return this.addVectors(v, w);
      }
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      this.w += v.w;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      this.w += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      this.w = a.w + b.w;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      this.w += v.w * s;
      return this;
    }
    sub(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
        return this.subVectors(v, w);
      }
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      this.w -= v.w;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      this.w -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      this.w = a.w - b.w;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      this.w *= scalar;
      return this;
    }
    applyMatrix4(m) {
      const x = this.x, y = this.y, z = this.z, w = this.w;
      const e = m.elements;
      this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
      this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
      this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
      this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    setAxisAngleFromQuaternion(q) {
      this.w = 2 * Math.acos(q.w);
      const s = Math.sqrt(1 - q.w * q.w);
      if (s < 1e-4) {
        this.x = 1;
        this.y = 0;
        this.z = 0;
      } else {
        this.x = q.x / s;
        this.y = q.y / s;
        this.z = q.z / s;
      }
      return this;
    }
    setAxisAngleFromRotationMatrix(m) {
      let angle, x, y, z;
      const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
      if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
        if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
          this.set(1, 0, 0, 0);
          return this;
        }
        angle = Math.PI;
        const xx = (m11 + 1) / 2;
        const yy = (m22 + 1) / 2;
        const zz = (m33 + 1) / 2;
        const xy = (m12 + m21) / 4;
        const xz = (m13 + m31) / 4;
        const yz = (m23 + m32) / 4;
        if (xx > yy && xx > zz) {
          if (xx < epsilon) {
            x = 0;
            y = 0.707106781;
            z = 0.707106781;
          } else {
            x = Math.sqrt(xx);
            y = xy / x;
            z = xz / x;
          }
        } else if (yy > zz) {
          if (yy < epsilon) {
            x = 0.707106781;
            y = 0;
            z = 0.707106781;
          } else {
            y = Math.sqrt(yy);
            x = xy / y;
            z = yz / y;
          }
        } else {
          if (zz < epsilon) {
            x = 0.707106781;
            y = 0.707106781;
            z = 0;
          } else {
            z = Math.sqrt(zz);
            x = xz / z;
            y = yz / z;
          }
        }
        this.set(x, y, z, angle);
        return this;
      }
      let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
      if (Math.abs(s) < 1e-3)
        s = 1;
      this.x = (m32 - m23) / s;
      this.y = (m13 - m31) / s;
      this.z = (m21 - m12) / s;
      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      this.w = Math.min(this.w, v.w);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      this.w = Math.max(this.w, v.w);
      return this;
    }
    clamp(min, max) {
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      this.z = Math.max(min.z, Math.min(max.z, this.z));
      this.w = Math.max(min.w, Math.min(max.w, this.w));
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      this.z = Math.max(minVal, Math.min(maxVal, this.z));
      this.w = Math.max(minVal, Math.min(maxVal, this.w));
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      this.w = Math.floor(this.w);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      this.w = Math.ceil(this.w);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      this.w = Math.round(this.w);
      return this;
    }
    roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
      this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      this.w = -this.w;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      this.w += (v.w - this.w) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      this.w = v1.w + (v2.w - v1.w) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      this.w = array[offset + 3];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      array[offset + 3] = this.w;
      return array;
    }
    fromBufferAttribute(attribute, index, offset) {
      if (offset !== void 0) {
        console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");
      }
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      this.w = attribute.getW(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      this.w = Math.random();
      return this;
    }
  };
  function WebGLRenderTarget(width, height, options) {
    this.width = width;
    this.height = height;
    this.scissor = new Vector4(0, 0, width, height);
    this.scissorTest = false;
    this.viewport = new Vector4(0, 0, width, height);
    options = options || {};
    this.texture = new Texture(void 0, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
    this.texture.image = {};
    this.texture.image.width = width;
    this.texture.image.height = height;
    this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
    this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
    this.depthBuffer = options.depthBuffer !== void 0 ? options.depthBuffer : true;
    this.stencilBuffer = options.stencilBuffer !== void 0 ? options.stencilBuffer : false;
    this.depthTexture = options.depthTexture !== void 0 ? options.depthTexture : null;
  }
  WebGLRenderTarget.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
    constructor: WebGLRenderTarget,
    isWebGLRenderTarget: true,
    setSize: function(width, height) {
      if (this.width !== width || this.height !== height) {
        this.width = width;
        this.height = height;
        this.texture.image.width = width;
        this.texture.image.height = height;
        this.dispose();
      }
      this.viewport.set(0, 0, width, height);
      this.scissor.set(0, 0, width, height);
    },
    clone: function() {
      return new this.constructor().copy(this);
    },
    copy: function(source) {
      this.width = source.width;
      this.height = source.height;
      this.viewport.copy(source.viewport);
      this.texture = source.texture.clone();
      this.depthBuffer = source.depthBuffer;
      this.stencilBuffer = source.stencilBuffer;
      this.depthTexture = source.depthTexture;
      return this;
    },
    dispose: function() {
      this.dispatchEvent({type: "dispose"});
    }
  });
  function WebGLMultisampleRenderTarget(width, height, options) {
    WebGLRenderTarget.call(this, width, height, options);
    this.samples = 4;
  }
  WebGLMultisampleRenderTarget.prototype = Object.assign(Object.create(WebGLRenderTarget.prototype), {
    constructor: WebGLMultisampleRenderTarget,
    isWebGLMultisampleRenderTarget: true,
    copy: function(source) {
      WebGLRenderTarget.prototype.copy.call(this, source);
      this.samples = source.samples;
      return this;
    }
  });
  var Quaternion = class {
    constructor(x = 0, y = 0, z = 0, w = 1) {
      Object.defineProperty(this, "isQuaternion", {value: true});
      this._x = x;
      this._y = y;
      this._z = z;
      this._w = w;
    }
    static slerp(qa, qb, qm, t) {
      return qm.copy(qa).slerp(qb, t);
    }
    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
      let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
        let s = 1 - t;
        const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
        if (sqrSin > Number.EPSILON) {
          const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
          s = Math.sin(s * len) / sin;
          t = Math.sin(t * len) / sin;
        }
        const tDir = t * dir;
        x0 = x0 * s + x1 * tDir;
        y0 = y0 * s + y1 * tDir;
        z0 = z0 * s + z1 * tDir;
        w0 = w0 * s + w1 * tDir;
        if (s === 1 - t) {
          const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
          x0 *= f;
          y0 *= f;
          z0 *= f;
          w0 *= f;
        }
      }
      dst[dstOffset] = x0;
      dst[dstOffset + 1] = y0;
      dst[dstOffset + 2] = z0;
      dst[dstOffset + 3] = w0;
    }
    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
      const x0 = src0[srcOffset0];
      const y0 = src0[srcOffset0 + 1];
      const z0 = src0[srcOffset0 + 2];
      const w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1];
      const y1 = src1[srcOffset1 + 1];
      const z1 = src1[srcOffset1 + 2];
      const w1 = src1[srcOffset1 + 3];
      dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
      return dst;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get w() {
      return this._w;
    }
    set w(value) {
      this._w = value;
      this._onChangeCallback();
    }
    set(x, y, z, w) {
      this._x = x;
      this._y = y;
      this._z = z;
      this._w = w;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(quaternion) {
      this._x = quaternion.x;
      this._y = quaternion.y;
      this._z = quaternion.z;
      this._w = quaternion.w;
      this._onChangeCallback();
      return this;
    }
    setFromEuler(euler, update2) {
      if (!(euler && euler.isEuler)) {
        throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
      }
      const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
      const cos = Math.cos;
      const sin = Math.sin;
      const c1 = cos(x / 2);
      const c2 = cos(y / 2);
      const c3 = cos(z / 2);
      const s1 = sin(x / 2);
      const s2 = sin(y / 2);
      const s3 = sin(z / 2);
      switch (order) {
        case "XYZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "YXZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "ZXY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "ZYX":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "YZX":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "XZY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        default:
          console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
      }
      if (update2 !== false)
        this._onChangeCallback();
      return this;
    }
    setFromAxisAngle(axis, angle) {
      const halfAngle = angle / 2, s = Math.sin(halfAngle);
      this._x = axis.x * s;
      this._y = axis.y * s;
      this._z = axis.z * s;
      this._w = Math.cos(halfAngle);
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m) {
      const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
      if (trace > 0) {
        const s = 0.5 / Math.sqrt(trace + 1);
        this._w = 0.25 / s;
        this._x = (m32 - m23) * s;
        this._y = (m13 - m31) * s;
        this._z = (m21 - m12) * s;
      } else if (m11 > m22 && m11 > m33) {
        const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
        this._w = (m32 - m23) / s;
        this._x = 0.25 * s;
        this._y = (m12 + m21) / s;
        this._z = (m13 + m31) / s;
      } else if (m22 > m33) {
        const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
        this._w = (m13 - m31) / s;
        this._x = (m12 + m21) / s;
        this._y = 0.25 * s;
        this._z = (m23 + m32) / s;
      } else {
        const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
        this._w = (m21 - m12) / s;
        this._x = (m13 + m31) / s;
        this._y = (m23 + m32) / s;
        this._z = 0.25 * s;
      }
      this._onChangeCallback();
      return this;
    }
    setFromUnitVectors(vFrom, vTo) {
      const EPS = 1e-6;
      let r = vFrom.dot(vTo) + 1;
      if (r < EPS) {
        r = 0;
        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
          this._x = -vFrom.y;
          this._y = vFrom.x;
          this._z = 0;
          this._w = r;
        } else {
          this._x = 0;
          this._y = -vFrom.z;
          this._z = vFrom.y;
          this._w = r;
        }
      } else {
        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
        this._w = r;
      }
      return this.normalize();
    }
    angleTo(q) {
      return 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));
    }
    rotateTowards(q, step) {
      const angle = this.angleTo(q);
      if (angle === 0)
        return this;
      const t = Math.min(1, step / angle);
      this.slerp(q, t);
      return this;
    }
    identity() {
      return this.set(0, 0, 0, 1);
    }
    invert() {
      return this.conjugate();
    }
    conjugate() {
      this._x *= -1;
      this._y *= -1;
      this._z *= -1;
      this._onChangeCallback();
      return this;
    }
    dot(v) {
      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    }
    lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
      let l = this.length();
      if (l === 0) {
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._w = 1;
      } else {
        l = 1 / l;
        this._x = this._x * l;
        this._y = this._y * l;
        this._z = this._z * l;
        this._w = this._w * l;
      }
      this._onChangeCallback();
      return this;
    }
    multiply(q, p) {
      if (p !== void 0) {
        console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.");
        return this.multiplyQuaternions(q, p);
      }
      return this.multiplyQuaternions(this, q);
    }
    premultiply(q) {
      return this.multiplyQuaternions(q, this);
    }
    multiplyQuaternions(a, b) {
      const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
      const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
      this._onChangeCallback();
      return this;
    }
    slerp(qb, t) {
      if (t === 0)
        return this;
      if (t === 1)
        return this.copy(qb);
      const x = this._x, y = this._y, z = this._z, w = this._w;
      let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
      if (cosHalfTheta < 0) {
        this._w = -qb._w;
        this._x = -qb._x;
        this._y = -qb._y;
        this._z = -qb._z;
        cosHalfTheta = -cosHalfTheta;
      } else {
        this.copy(qb);
      }
      if (cosHalfTheta >= 1) {
        this._w = w;
        this._x = x;
        this._y = y;
        this._z = z;
        return this;
      }
      const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
      if (sqrSinHalfTheta <= Number.EPSILON) {
        const s = 1 - t;
        this._w = s * w + t * this._w;
        this._x = s * x + t * this._x;
        this._y = s * y + t * this._y;
        this._z = s * z + t * this._z;
        this.normalize();
        this._onChangeCallback();
        return this;
      }
      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
      const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
      const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
      this._w = w * ratioA + this._w * ratioB;
      this._x = x * ratioA + this._x * ratioB;
      this._y = y * ratioA + this._y * ratioB;
      this._z = z * ratioA + this._z * ratioB;
      this._onChangeCallback();
      return this;
    }
    equals(quaternion) {
      return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
    fromArray(array, offset = 0) {
      this._x = array[offset];
      this._y = array[offset + 1];
      this._z = array[offset + 2];
      this._w = array[offset + 3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this._x = attribute.getX(index);
      this._y = attribute.getY(index);
      this._z = attribute.getZ(index);
      this._w = attribute.getW(index);
      return this;
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
  };
  var Vector3 = class {
    constructor(x = 0, y = 0, z = 0) {
      Object.defineProperty(this, "isVector3", {value: true});
      this.x = x;
      this.y = y;
      this.z = z;
    }
    set(x, y, z) {
      if (z === void 0)
        z = this.z;
      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
    }
    add(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
        return this.addVectors(v, w);
      }
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      return this;
    }
    sub(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
        return this.subVectors(v, w);
      }
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      return this;
    }
    multiply(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.");
        return this.multiplyVectors(v, w);
      }
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      return this;
    }
    multiplyVectors(a, b) {
      this.x = a.x * b.x;
      this.y = a.y * b.y;
      this.z = a.z * b.z;
      return this;
    }
    applyEuler(euler) {
      if (!(euler && euler.isEuler)) {
        console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
      }
      return this.applyQuaternion(_quaternion.setFromEuler(euler));
    }
    applyAxisAngle(axis, angle) {
      return this.applyQuaternion(_quaternion.setFromAxisAngle(axis, angle));
    }
    applyMatrix3(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x + e[3] * y + e[6] * z;
      this.y = e[1] * x + e[4] * y + e[7] * z;
      this.z = e[2] * x + e[5] * y + e[8] * z;
      return this;
    }
    applyNormalMatrix(m) {
      return this.applyMatrix3(m).normalize();
    }
    applyMatrix4(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
      this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
      this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
      this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
      return this;
    }
    applyQuaternion(q) {
      const x = this.x, y = this.y, z = this.z;
      const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
      const ix = qw * x + qy * z - qz * y;
      const iy = qw * y + qz * x - qx * z;
      const iz = qw * z + qx * y - qy * x;
      const iw = -qx * x - qy * y - qz * z;
      this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
      return this;
    }
    project(camera2) {
      return this.applyMatrix4(camera2.matrixWorldInverse).applyMatrix4(camera2.projectionMatrix);
    }
    unproject(camera2) {
      return this.applyMatrix4(camera2.projectionMatrixInverse).applyMatrix4(camera2.matrixWorld);
    }
    transformDirection(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x + e[4] * y + e[8] * z;
      this.y = e[1] * x + e[5] * y + e[9] * z;
      this.z = e[2] * x + e[6] * y + e[10] * z;
      return this.normalize();
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      return this;
    }
    clamp(min, max) {
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      this.z = Math.max(min.z, Math.min(max.z, this.z));
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      this.z = Math.max(minVal, Math.min(maxVal, this.z));
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      return this;
    }
    roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      return this;
    }
    cross(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.");
        return this.crossVectors(v, w);
      }
      return this.crossVectors(this, v);
    }
    crossVectors(a, b) {
      const ax = a.x, ay = a.y, az = a.z;
      const bx = b.x, by = b.y, bz = b.z;
      this.x = ay * bz - az * by;
      this.y = az * bx - ax * bz;
      this.z = ax * by - ay * bx;
      return this;
    }
    projectOnVector(v) {
      const denominator = v.lengthSq();
      if (denominator === 0)
        return this.set(0, 0, 0);
      const scalar = v.dot(this) / denominator;
      return this.copy(v).multiplyScalar(scalar);
    }
    projectOnPlane(planeNormal) {
      _vector.copy(this).projectOnVector(planeNormal);
      return this.sub(_vector);
    }
    reflect(normal) {
      return this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0)
        return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(MathUtils.clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
      return dx * dx + dy * dy + dz * dz;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
    }
    setFromSpherical(s) {
      return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
    }
    setFromSphericalCoords(radius, phi, theta) {
      const sinPhiRadius = Math.sin(phi) * radius;
      this.x = sinPhiRadius * Math.sin(theta);
      this.y = Math.cos(phi) * radius;
      this.z = sinPhiRadius * Math.cos(theta);
      return this;
    }
    setFromCylindrical(c) {
      return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
    }
    setFromCylindricalCoords(radius, theta, y) {
      this.x = radius * Math.sin(theta);
      this.y = y;
      this.z = radius * Math.cos(theta);
      return this;
    }
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      return this;
    }
    setFromMatrixScale(m) {
      const sx = this.setFromMatrixColumn(m, 0).length();
      const sy = this.setFromMatrixColumn(m, 1).length();
      const sz = this.setFromMatrixColumn(m, 2).length();
      this.x = sx;
      this.y = sy;
      this.z = sz;
      return this;
    }
    setFromMatrixColumn(m, index) {
      return this.fromArray(m.elements, index * 4);
    }
    setFromMatrix3Column(m, index) {
      return this.fromArray(m.elements, index * 3);
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      return array;
    }
    fromBufferAttribute(attribute, index, offset) {
      if (offset !== void 0) {
        console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");
      }
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      return this;
    }
  };
  var _vector = /* @__PURE__ */ new Vector3();
  var _quaternion = /* @__PURE__ */ new Quaternion();
  var Box3 = class {
    constructor(min, max) {
      Object.defineProperty(this, "isBox3", {value: true});
      this.min = min !== void 0 ? min : new Vector3(Infinity, Infinity, Infinity);
      this.max = max !== void 0 ? max : new Vector3(-Infinity, -Infinity, -Infinity);
    }
    set(min, max) {
      this.min.copy(min);
      this.max.copy(max);
      return this;
    }
    setFromArray(array) {
      let minX = Infinity;
      let minY = Infinity;
      let minZ = Infinity;
      let maxX = -Infinity;
      let maxY = -Infinity;
      let maxZ = -Infinity;
      for (let i = 0, l = array.length; i < l; i += 3) {
        const x = array[i];
        const y = array[i + 1];
        const z = array[i + 2];
        if (x < minX)
          minX = x;
        if (y < minY)
          minY = y;
        if (z < minZ)
          minZ = z;
        if (x > maxX)
          maxX = x;
        if (y > maxY)
          maxY = y;
        if (z > maxZ)
          maxZ = z;
      }
      this.min.set(minX, minY, minZ);
      this.max.set(maxX, maxY, maxZ);
      return this;
    }
    setFromBufferAttribute(attribute) {
      let minX = Infinity;
      let minY = Infinity;
      let minZ = Infinity;
      let maxX = -Infinity;
      let maxY = -Infinity;
      let maxZ = -Infinity;
      for (let i = 0, l = attribute.count; i < l; i++) {
        const x = attribute.getX(i);
        const y = attribute.getY(i);
        const z = attribute.getZ(i);
        if (x < minX)
          minX = x;
        if (y < minY)
          minY = y;
        if (z < minZ)
          minZ = z;
        if (x > maxX)
          maxX = x;
        if (y > maxY)
          maxY = y;
        if (z > maxZ)
          maxZ = z;
      }
      this.min.set(minX, minY, minZ);
      this.max.set(maxX, maxY, maxZ);
      return this;
    }
    setFromPoints(points) {
      this.makeEmpty();
      for (let i = 0, il = points.length; i < il; i++) {
        this.expandByPoint(points[i]);
      }
      return this;
    }
    setFromCenterAndSize(center, size) {
      const halfSize = _vector$1.copy(size).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
    setFromObject(object) {
      this.makeEmpty();
      return this.expandByObject(object);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
    makeEmpty() {
      this.min.x = this.min.y = this.min.z = Infinity;
      this.max.x = this.max.y = this.max.z = -Infinity;
      return this;
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(target) {
      if (target === void 0) {
        console.warn("THREE.Box3: .getCenter() target is now required");
        target = new Vector3();
      }
      return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
      if (target === void 0) {
        console.warn("THREE.Box3: .getSize() target is now required");
        target = new Vector3();
      }
      return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
    expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
    expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
    expandByObject(object) {
      object.updateWorldMatrix(false, false);
      const geometry = object.geometry;
      if (geometry !== void 0) {
        if (geometry.boundingBox === null) {
          geometry.computeBoundingBox();
        }
        _box.copy(geometry.boundingBox);
        _box.applyMatrix4(object.matrixWorld);
        this.union(_box);
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        this.expandByObject(children[i]);
      }
      return this;
    }
    containsPoint(point) {
      return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
    }
    containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
    }
    getParameter(point, target) {
      if (target === void 0) {
        console.warn("THREE.Box3: .getParameter() target is now required");
        target = new Vector3();
      }
      return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
    }
    intersectsBox(box) {
      return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
    }
    intersectsSphere(sphere) {
      this.clampPoint(sphere.center, _vector$1);
      return _vector$1.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    }
    intersectsPlane(plane) {
      let min, max;
      if (plane.normal.x > 0) {
        min = plane.normal.x * this.min.x;
        max = plane.normal.x * this.max.x;
      } else {
        min = plane.normal.x * this.max.x;
        max = plane.normal.x * this.min.x;
      }
      if (plane.normal.y > 0) {
        min += plane.normal.y * this.min.y;
        max += plane.normal.y * this.max.y;
      } else {
        min += plane.normal.y * this.max.y;
        max += plane.normal.y * this.min.y;
      }
      if (plane.normal.z > 0) {
        min += plane.normal.z * this.min.z;
        max += plane.normal.z * this.max.z;
      } else {
        min += plane.normal.z * this.max.z;
        max += plane.normal.z * this.min.z;
      }
      return min <= -plane.constant && max >= -plane.constant;
    }
    intersectsTriangle(triangle) {
      if (this.isEmpty()) {
        return false;
      }
      this.getCenter(_center);
      _extents.subVectors(this.max, _center);
      _v0.subVectors(triangle.a, _center);
      _v1.subVectors(triangle.b, _center);
      _v2.subVectors(triangle.c, _center);
      _f0.subVectors(_v1, _v0);
      _f1.subVectors(_v2, _v1);
      _f2.subVectors(_v0, _v2);
      let axes = [
        0,
        -_f0.z,
        _f0.y,
        0,
        -_f1.z,
        _f1.y,
        0,
        -_f2.z,
        _f2.y,
        _f0.z,
        0,
        -_f0.x,
        _f1.z,
        0,
        -_f1.x,
        _f2.z,
        0,
        -_f2.x,
        -_f0.y,
        _f0.x,
        0,
        -_f1.y,
        _f1.x,
        0,
        -_f2.y,
        _f2.x,
        0
      ];
      if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {
        return false;
      }
      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {
        return false;
      }
      _triangleNormal.crossVectors(_f0, _f1);
      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
      return satForAxes(axes, _v0, _v1, _v2, _extents);
    }
    clampPoint(point, target) {
      if (target === void 0) {
        console.warn("THREE.Box3: .clampPoint() target is now required");
        target = new Vector3();
      }
      return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
      const clampedPoint = _vector$1.copy(point).clamp(this.min, this.max);
      return clampedPoint.sub(point).length();
    }
    getBoundingSphere(target) {
      if (target === void 0) {
        console.error("THREE.Box3: .getBoundingSphere() target is now required");
      }
      this.getCenter(target.center);
      target.radius = this.getSize(_vector$1).length() * 0.5;
      return target;
    }
    intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max);
      if (this.isEmpty())
        this.makeEmpty();
      return this;
    }
    union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
    applyMatrix4(matrix) {
      if (this.isEmpty())
        return this;
      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
      this.setFromPoints(_points);
      return this;
    }
    translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
    equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  };
  function satForAxes(axes, v0, v1, v2, extents) {
    for (let i = 0, j = axes.length - 3; i <= j; i += 3) {
      _testAxis.fromArray(axes, i);
      const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
      const p0 = v0.dot(_testAxis);
      const p1 = v1.dot(_testAxis);
      const p2 = v2.dot(_testAxis);
      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
        return false;
      }
    }
    return true;
  }
  var _points = [
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3()
  ];
  var _vector$1 = /* @__PURE__ */ new Vector3();
  var _box = /* @__PURE__ */ new Box3();
  var _v0 = /* @__PURE__ */ new Vector3();
  var _v1 = /* @__PURE__ */ new Vector3();
  var _v2 = /* @__PURE__ */ new Vector3();
  var _f0 = /* @__PURE__ */ new Vector3();
  var _f1 = /* @__PURE__ */ new Vector3();
  var _f2 = /* @__PURE__ */ new Vector3();
  var _center = /* @__PURE__ */ new Vector3();
  var _extents = /* @__PURE__ */ new Vector3();
  var _triangleNormal = /* @__PURE__ */ new Vector3();
  var _testAxis = /* @__PURE__ */ new Vector3();
  var _box$1 = /* @__PURE__ */ new Box3();
  var Sphere = class {
    constructor(center, radius) {
      this.center = center !== void 0 ? center : new Vector3();
      this.radius = radius !== void 0 ? radius : -1;
    }
    set(center, radius) {
      this.center.copy(center);
      this.radius = radius;
      return this;
    }
    setFromPoints(points, optionalCenter) {
      const center = this.center;
      if (optionalCenter !== void 0) {
        center.copy(optionalCenter);
      } else {
        _box$1.setFromPoints(points).getCenter(center);
      }
      let maxRadiusSq = 0;
      for (let i = 0, il = points.length; i < il; i++) {
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
      }
      this.radius = Math.sqrt(maxRadiusSq);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(sphere) {
      this.center.copy(sphere.center);
      this.radius = sphere.radius;
      return this;
    }
    isEmpty() {
      return this.radius < 0;
    }
    makeEmpty() {
      this.center.set(0, 0, 0);
      this.radius = -1;
      return this;
    }
    containsPoint(point) {
      return point.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(point) {
      return point.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(sphere) {
      const radiusSum = this.radius + sphere.radius;
      return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
    intersectsBox(box) {
      return box.intersectsSphere(this);
    }
    intersectsPlane(plane) {
      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(point, target) {
      const deltaLengthSq = this.center.distanceToSquared(point);
      if (target === void 0) {
        console.warn("THREE.Sphere: .clampPoint() target is now required");
        target = new Vector3();
      }
      target.copy(point);
      if (deltaLengthSq > this.radius * this.radius) {
        target.sub(this.center).normalize();
        target.multiplyScalar(this.radius).add(this.center);
      }
      return target;
    }
    getBoundingBox(target) {
      if (target === void 0) {
        console.warn("THREE.Sphere: .getBoundingBox() target is now required");
        target = new Box3();
      }
      if (this.isEmpty()) {
        target.makeEmpty();
        return target;
      }
      target.set(this.center, this.center);
      target.expandByScalar(this.radius);
      return target;
    }
    applyMatrix4(matrix) {
      this.center.applyMatrix4(matrix);
      this.radius = this.radius * matrix.getMaxScaleOnAxis();
      return this;
    }
    translate(offset) {
      this.center.add(offset);
      return this;
    }
    equals(sphere) {
      return sphere.center.equals(this.center) && sphere.radius === this.radius;
    }
  };
  var _vector$2 = /* @__PURE__ */ new Vector3();
  var _segCenter = /* @__PURE__ */ new Vector3();
  var _segDir = /* @__PURE__ */ new Vector3();
  var _diff = /* @__PURE__ */ new Vector3();
  var _edge1 = /* @__PURE__ */ new Vector3();
  var _edge2 = /* @__PURE__ */ new Vector3();
  var _normal = /* @__PURE__ */ new Vector3();
  var Ray = class {
    constructor(origin, direction) {
      this.origin = origin !== void 0 ? origin : new Vector3();
      this.direction = direction !== void 0 ? direction : new Vector3(0, 0, -1);
    }
    set(origin, direction) {
      this.origin.copy(origin);
      this.direction.copy(direction);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(ray) {
      this.origin.copy(ray.origin);
      this.direction.copy(ray.direction);
      return this;
    }
    at(t, target) {
      if (target === void 0) {
        console.warn("THREE.Ray: .at() target is now required");
        target = new Vector3();
      }
      return target.copy(this.direction).multiplyScalar(t).add(this.origin);
    }
    lookAt(v) {
      this.direction.copy(v).sub(this.origin).normalize();
      return this;
    }
    recast(t) {
      this.origin.copy(this.at(t, _vector$2));
      return this;
    }
    closestPointToPoint(point, target) {
      if (target === void 0) {
        console.warn("THREE.Ray: .closestPointToPoint() target is now required");
        target = new Vector3();
      }
      target.subVectors(point, this.origin);
      const directionDistance = target.dot(this.direction);
      if (directionDistance < 0) {
        return target.copy(this.origin);
      }
      return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
    }
    distanceToPoint(point) {
      return Math.sqrt(this.distanceSqToPoint(point));
    }
    distanceSqToPoint(point) {
      const directionDistance = _vector$2.subVectors(point, this.origin).dot(this.direction);
      if (directionDistance < 0) {
        return this.origin.distanceToSquared(point);
      }
      _vector$2.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
      return _vector$2.distanceToSquared(point);
    }
    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
      _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
      _segDir.copy(v1).sub(v0).normalize();
      _diff.copy(this.origin).sub(_segCenter);
      const segExtent = v0.distanceTo(v1) * 0.5;
      const a01 = -this.direction.dot(_segDir);
      const b0 = _diff.dot(this.direction);
      const b1 = -_diff.dot(_segDir);
      const c = _diff.lengthSq();
      const det = Math.abs(1 - a01 * a01);
      let s0, s1, sqrDist, extDet;
      if (det > 0) {
        s0 = a01 * b1 - b0;
        s1 = a01 * b0 - b1;
        extDet = segExtent * det;
        if (s0 >= 0) {
          if (s1 >= -extDet) {
            if (s1 <= extDet) {
              const invDet = 1 / det;
              s0 *= invDet;
              s1 *= invDet;
              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
            } else {
              s1 = segExtent;
              s0 = Math.max(0, -(a01 * s1 + b0));
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          } else {
            s1 = -segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        } else {
          if (s1 <= -extDet) {
            s0 = Math.max(0, -(-a01 * segExtent + b0));
            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          } else if (s1 <= extDet) {
            s0 = 0;
            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = s1 * (s1 + 2 * b1) + c;
          } else {
            s0 = Math.max(0, -(a01 * segExtent + b0));
            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        }
      } else {
        s1 = a01 > 0 ? -segExtent : segExtent;
        s0 = Math.max(0, -(a01 * s1 + b0));
        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
      }
      if (optionalPointOnRay) {
        optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);
      }
      if (optionalPointOnSegment) {
        optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);
      }
      return sqrDist;
    }
    intersectSphere(sphere, target) {
      _vector$2.subVectors(sphere.center, this.origin);
      const tca = _vector$2.dot(this.direction);
      const d2 = _vector$2.dot(_vector$2) - tca * tca;
      const radius2 = sphere.radius * sphere.radius;
      if (d2 > radius2)
        return null;
      const thc = Math.sqrt(radius2 - d2);
      const t0 = tca - thc;
      const t1 = tca + thc;
      if (t0 < 0 && t1 < 0)
        return null;
      if (t0 < 0)
        return this.at(t1, target);
      return this.at(t0, target);
    }
    intersectsSphere(sphere) {
      return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
    }
    distanceToPlane(plane) {
      const denominator = plane.normal.dot(this.direction);
      if (denominator === 0) {
        if (plane.distanceToPoint(this.origin) === 0) {
          return 0;
        }
        return null;
      }
      const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
      return t >= 0 ? t : null;
    }
    intersectPlane(plane, target) {
      const t = this.distanceToPlane(plane);
      if (t === null) {
        return null;
      }
      return this.at(t, target);
    }
    intersectsPlane(plane) {
      const distToPoint = plane.distanceToPoint(this.origin);
      if (distToPoint === 0) {
        return true;
      }
      const denominator = plane.normal.dot(this.direction);
      if (denominator * distToPoint < 0) {
        return true;
      }
      return false;
    }
    intersectBox(box, target) {
      let tmin, tmax, tymin, tymax, tzmin, tzmax;
      const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
      const origin = this.origin;
      if (invdirx >= 0) {
        tmin = (box.min.x - origin.x) * invdirx;
        tmax = (box.max.x - origin.x) * invdirx;
      } else {
        tmin = (box.max.x - origin.x) * invdirx;
        tmax = (box.min.x - origin.x) * invdirx;
      }
      if (invdiry >= 0) {
        tymin = (box.min.y - origin.y) * invdiry;
        tymax = (box.max.y - origin.y) * invdiry;
      } else {
        tymin = (box.max.y - origin.y) * invdiry;
        tymax = (box.min.y - origin.y) * invdiry;
      }
      if (tmin > tymax || tymin > tmax)
        return null;
      if (tymin > tmin || tmin !== tmin)
        tmin = tymin;
      if (tymax < tmax || tmax !== tmax)
        tmax = tymax;
      if (invdirz >= 0) {
        tzmin = (box.min.z - origin.z) * invdirz;
        tzmax = (box.max.z - origin.z) * invdirz;
      } else {
        tzmin = (box.max.z - origin.z) * invdirz;
        tzmax = (box.min.z - origin.z) * invdirz;
      }
      if (tmin > tzmax || tzmin > tmax)
        return null;
      if (tzmin > tmin || tmin !== tmin)
        tmin = tzmin;
      if (tzmax < tmax || tmax !== tmax)
        tmax = tzmax;
      if (tmax < 0)
        return null;
      return this.at(tmin >= 0 ? tmin : tmax, target);
    }
    intersectsBox(box) {
      return this.intersectBox(box, _vector$2) !== null;
    }
    intersectTriangle(a, b, c, backfaceCulling, target) {
      _edge1.subVectors(b, a);
      _edge2.subVectors(c, a);
      _normal.crossVectors(_edge1, _edge2);
      let DdN = this.direction.dot(_normal);
      let sign2;
      if (DdN > 0) {
        if (backfaceCulling)
          return null;
        sign2 = 1;
      } else if (DdN < 0) {
        sign2 = -1;
        DdN = -DdN;
      } else {
        return null;
      }
      _diff.subVectors(this.origin, a);
      const DdQxE2 = sign2 * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
      if (DdQxE2 < 0) {
        return null;
      }
      const DdE1xQ = sign2 * this.direction.dot(_edge1.cross(_diff));
      if (DdE1xQ < 0) {
        return null;
      }
      if (DdQxE2 + DdE1xQ > DdN) {
        return null;
      }
      const QdN = -sign2 * _diff.dot(_normal);
      if (QdN < 0) {
        return null;
      }
      return this.at(QdN / DdN, target);
    }
    applyMatrix4(matrix4) {
      this.origin.applyMatrix4(matrix4);
      this.direction.transformDirection(matrix4);
      return this;
    }
    equals(ray) {
      return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
    }
  };
  var Matrix4 = class {
    constructor() {
      Object.defineProperty(this, "isMatrix4", {value: true});
      this.elements = [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ];
      if (arguments.length > 0) {
        console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
      }
    }
    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      const te = this.elements;
      te[0] = n11;
      te[4] = n12;
      te[8] = n13;
      te[12] = n14;
      te[1] = n21;
      te[5] = n22;
      te[9] = n23;
      te[13] = n24;
      te[2] = n31;
      te[6] = n32;
      te[10] = n33;
      te[14] = n34;
      te[3] = n41;
      te[7] = n42;
      te[11] = n43;
      te[15] = n44;
      return this;
    }
    identity() {
      this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      return this;
    }
    clone() {
      return new Matrix4().fromArray(this.elements);
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      te[9] = me[9];
      te[10] = me[10];
      te[11] = me[11];
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      te[15] = me[15];
      return this;
    }
    copyPosition(m) {
      const te = this.elements, me = m.elements;
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrixColumn(this, 0);
      yAxis.setFromMatrixColumn(this, 1);
      zAxis.setFromMatrixColumn(this, 2);
      return this;
    }
    makeBasis(xAxis, yAxis, zAxis) {
      this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
      return this;
    }
    extractRotation(m) {
      const te = this.elements;
      const me = m.elements;
      const scaleX = 1 / _v1$1.setFromMatrixColumn(m, 0).length();
      const scaleY = 1 / _v1$1.setFromMatrixColumn(m, 1).length();
      const scaleZ = 1 / _v1$1.setFromMatrixColumn(m, 2).length();
      te[0] = me[0] * scaleX;
      te[1] = me[1] * scaleX;
      te[2] = me[2] * scaleX;
      te[3] = 0;
      te[4] = me[4] * scaleY;
      te[5] = me[5] * scaleY;
      te[6] = me[6] * scaleY;
      te[7] = 0;
      te[8] = me[8] * scaleZ;
      te[9] = me[9] * scaleZ;
      te[10] = me[10] * scaleZ;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromEuler(euler) {
      if (!(euler && euler.isEuler)) {
        console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
      }
      const te = this.elements;
      const x = euler.x, y = euler.y, z = euler.z;
      const a = Math.cos(x), b = Math.sin(x);
      const c = Math.cos(y), d = Math.sin(y);
      const e = Math.cos(z), f = Math.sin(z);
      if (euler.order === "XYZ") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = -c * f;
        te[8] = d;
        te[1] = af + be * d;
        te[5] = ae - bf * d;
        te[9] = -b * c;
        te[2] = bf - ae * d;
        te[6] = be + af * d;
        te[10] = a * c;
      } else if (euler.order === "YXZ") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce + df * b;
        te[4] = de * b - cf;
        te[8] = a * d;
        te[1] = a * f;
        te[5] = a * e;
        te[9] = -b;
        te[2] = cf * b - de;
        te[6] = df + ce * b;
        te[10] = a * c;
      } else if (euler.order === "ZXY") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce - df * b;
        te[4] = -a * f;
        te[8] = de + cf * b;
        te[1] = cf + de * b;
        te[5] = a * e;
        te[9] = df - ce * b;
        te[2] = -a * d;
        te[6] = b;
        te[10] = a * c;
      } else if (euler.order === "ZYX") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = be * d - af;
        te[8] = ae * d + bf;
        te[1] = c * f;
        te[5] = bf * d + ae;
        te[9] = af * d - be;
        te[2] = -d;
        te[6] = b * c;
        te[10] = a * c;
      } else if (euler.order === "YZX") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = bd - ac * f;
        te[8] = bc * f + ad;
        te[1] = f;
        te[5] = a * e;
        te[9] = -b * e;
        te[2] = -d * e;
        te[6] = ad * f + bc;
        te[10] = ac - bd * f;
      } else if (euler.order === "XZY") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = -f;
        te[8] = d * e;
        te[1] = ac * f + bd;
        te[5] = a * e;
        te[9] = ad * f - bc;
        te[2] = bc * f - ad;
        te[6] = b * e;
        te[10] = bd * f + ac;
      }
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromQuaternion(q) {
      return this.compose(_zero, q, _one);
    }
    lookAt(eye, target, up) {
      const te = this.elements;
      _z.subVectors(eye, target);
      if (_z.lengthSq() === 0) {
        _z.z = 1;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
      if (_x.lengthSq() === 0) {
        if (Math.abs(up.z) === 1) {
          _z.x += 1e-4;
        } else {
          _z.z += 1e-4;
        }
        _z.normalize();
        _x.crossVectors(up, _z);
      }
      _x.normalize();
      _y.crossVectors(_z, _x);
      te[0] = _x.x;
      te[4] = _y.x;
      te[8] = _z.x;
      te[1] = _x.y;
      te[5] = _y.y;
      te[9] = _z.y;
      te[2] = _x.z;
      te[6] = _y.z;
      te[10] = _z.z;
      return this;
    }
    multiply(m, n) {
      if (n !== void 0) {
        console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.");
        return this.multiplyMatrices(m, n);
      }
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
      const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
      const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
      const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
      const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
      const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
      const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
      const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[4] *= s;
      te[8] *= s;
      te[12] *= s;
      te[1] *= s;
      te[5] *= s;
      te[9] *= s;
      te[13] *= s;
      te[2] *= s;
      te[6] *= s;
      te[10] *= s;
      te[14] *= s;
      te[3] *= s;
      te[7] *= s;
      te[11] *= s;
      te[15] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
      const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
      const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
      const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
      return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
    transpose() {
      const te = this.elements;
      let tmp2;
      tmp2 = te[1];
      te[1] = te[4];
      te[4] = tmp2;
      tmp2 = te[2];
      te[2] = te[8];
      te[8] = tmp2;
      tmp2 = te[6];
      te[6] = te[9];
      te[9] = tmp2;
      tmp2 = te[3];
      te[3] = te[12];
      te[12] = tmp2;
      tmp2 = te[7];
      te[7] = te[13];
      te[13] = tmp2;
      tmp2 = te[11];
      te[11] = te[14];
      te[14] = tmp2;
      return this;
    }
    setPosition(x, y, z) {
      const te = this.elements;
      if (x.isVector3) {
        te[12] = x.x;
        te[13] = x.y;
        te[14] = x.z;
      } else {
        te[12] = x;
        te[13] = y;
        te[14] = z;
      }
      return this;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
      const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
      if (det === 0)
        return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
      te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
      te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
      te[4] = t12 * detInv;
      te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
      te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
      te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
      te[8] = t13 * detInv;
      te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
      te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
      te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
      te[12] = t14 * detInv;
      te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
      te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
      te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
      return this;
    }
    scale(v) {
      const te = this.elements;
      const x = v.x, y = v.y, z = v.z;
      te[0] *= x;
      te[4] *= y;
      te[8] *= z;
      te[1] *= x;
      te[5] *= y;
      te[9] *= z;
      te[2] *= x;
      te[6] *= y;
      te[10] *= z;
      te[3] *= x;
      te[7] *= y;
      te[11] *= z;
      return this;
    }
    getMaxScaleOnAxis() {
      const te = this.elements;
      const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
      const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
      const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    makeTranslation(x, y, z) {
      this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
      return this;
    }
    makeRotationX(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
      return this;
    }
    makeRotationY(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
      return this;
    }
    makeRotationZ(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      return this;
    }
    makeRotationAxis(axis, angle) {
      const c = Math.cos(angle);
      const s = Math.sin(angle);
      const t = 1 - c;
      const x = axis.x, y = axis.y, z = axis.z;
      const tx = t * x, ty = t * y;
      this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
      return this;
    }
    makeScale(x, y, z) {
      this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
      return this;
    }
    makeShear(x, y, z) {
      this.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);
      return this;
    }
    compose(position, quaternion, scale) {
      const te = this.elements;
      const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
      const x2 = x + x, y2 = y + y, z2 = z + z;
      const xx = x * x2, xy = x * y2, xz = x * z2;
      const yy = y * y2, yz = y * z2, zz = z * z2;
      const wx = w * x2, wy = w * y2, wz = w * z2;
      const sx = scale.x, sy = scale.y, sz = scale.z;
      te[0] = (1 - (yy + zz)) * sx;
      te[1] = (xy + wz) * sx;
      te[2] = (xz - wy) * sx;
      te[3] = 0;
      te[4] = (xy - wz) * sy;
      te[5] = (1 - (xx + zz)) * sy;
      te[6] = (yz + wx) * sy;
      te[7] = 0;
      te[8] = (xz + wy) * sz;
      te[9] = (yz - wx) * sz;
      te[10] = (1 - (xx + yy)) * sz;
      te[11] = 0;
      te[12] = position.x;
      te[13] = position.y;
      te[14] = position.z;
      te[15] = 1;
      return this;
    }
    decompose(position, quaternion, scale) {
      const te = this.elements;
      let sx = _v1$1.set(te[0], te[1], te[2]).length();
      const sy = _v1$1.set(te[4], te[5], te[6]).length();
      const sz = _v1$1.set(te[8], te[9], te[10]).length();
      const det = this.determinant();
      if (det < 0)
        sx = -sx;
      position.x = te[12];
      position.y = te[13];
      position.z = te[14];
      _m1.copy(this);
      const invSX = 1 / sx;
      const invSY = 1 / sy;
      const invSZ = 1 / sz;
      _m1.elements[0] *= invSX;
      _m1.elements[1] *= invSX;
      _m1.elements[2] *= invSX;
      _m1.elements[4] *= invSY;
      _m1.elements[5] *= invSY;
      _m1.elements[6] *= invSY;
      _m1.elements[8] *= invSZ;
      _m1.elements[9] *= invSZ;
      _m1.elements[10] *= invSZ;
      quaternion.setFromRotationMatrix(_m1);
      scale.x = sx;
      scale.y = sy;
      scale.z = sz;
      return this;
    }
    makePerspective(left, right, top, bottom, near, far) {
      if (far === void 0) {
        console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
      }
      const te = this.elements;
      const x = 2 * near / (right - left);
      const y = 2 * near / (top - bottom);
      const a = (right + left) / (right - left);
      const b = (top + bottom) / (top - bottom);
      const c = -(far + near) / (far - near);
      const d = -2 * far * near / (far - near);
      te[0] = x;
      te[4] = 0;
      te[8] = a;
      te[12] = 0;
      te[1] = 0;
      te[5] = y;
      te[9] = b;
      te[13] = 0;
      te[2] = 0;
      te[6] = 0;
      te[10] = c;
      te[14] = d;
      te[3] = 0;
      te[7] = 0;
      te[11] = -1;
      te[15] = 0;
      return this;
    }
    makeOrthographic(left, right, top, bottom, near, far) {
      const te = this.elements;
      const w = 1 / (right - left);
      const h = 1 / (top - bottom);
      const p = 1 / (far - near);
      const x = (right + left) * w;
      const y = (top + bottom) * h;
      const z = (far + near) * p;
      te[0] = 2 * w;
      te[4] = 0;
      te[8] = 0;
      te[12] = -x;
      te[1] = 0;
      te[5] = 2 * h;
      te[9] = 0;
      te[13] = -y;
      te[2] = 0;
      te[6] = 0;
      te[10] = -2 * p;
      te[14] = -z;
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[15] = 1;
      return this;
    }
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i = 0; i < 16; i++) {
        if (te[i] !== me[i])
          return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i = 0; i < 16; i++) {
        this.elements[i] = array[i + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      array[offset + 9] = te[9];
      array[offset + 10] = te[10];
      array[offset + 11] = te[11];
      array[offset + 12] = te[12];
      array[offset + 13] = te[13];
      array[offset + 14] = te[14];
      array[offset + 15] = te[15];
      return array;
    }
  };
  var _v1$1 = /* @__PURE__ */ new Vector3();
  var _m1 = /* @__PURE__ */ new Matrix4();
  var _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
  var _one = /* @__PURE__ */ new Vector3(1, 1, 1);
  var _x = /* @__PURE__ */ new Vector3();
  var _y = /* @__PURE__ */ new Vector3();
  var _z = /* @__PURE__ */ new Vector3();
  var Euler = class {
    constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {
      Object.defineProperty(this, "isEuler", {value: true});
      this._x = x;
      this._y = y;
      this._z = z;
      this._order = order;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get order() {
      return this._order;
    }
    set order(value) {
      this._order = value;
      this._onChangeCallback();
    }
    set(x, y, z, order) {
      this._x = x;
      this._y = y;
      this._z = z;
      this._order = order || this._order;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(euler) {
      this._x = euler._x;
      this._y = euler._y;
      this._z = euler._z;
      this._order = euler._order;
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m, order, update2) {
      const clamp = MathUtils.clamp;
      const te = m.elements;
      const m11 = te[0], m12 = te[4], m13 = te[8];
      const m21 = te[1], m22 = te[5], m23 = te[9];
      const m31 = te[2], m32 = te[6], m33 = te[10];
      order = order || this._order;
      switch (order) {
        case "XYZ":
          this._y = Math.asin(clamp(m13, -1, 1));
          if (Math.abs(m13) < 0.9999999) {
            this._x = Math.atan2(-m23, m33);
            this._z = Math.atan2(-m12, m11);
          } else {
            this._x = Math.atan2(m32, m22);
            this._z = 0;
          }
          break;
        case "YXZ":
          this._x = Math.asin(-clamp(m23, -1, 1));
          if (Math.abs(m23) < 0.9999999) {
            this._y = Math.atan2(m13, m33);
            this._z = Math.atan2(m21, m22);
          } else {
            this._y = Math.atan2(-m31, m11);
            this._z = 0;
          }
          break;
        case "ZXY":
          this._x = Math.asin(clamp(m32, -1, 1));
          if (Math.abs(m32) < 0.9999999) {
            this._y = Math.atan2(-m31, m33);
            this._z = Math.atan2(-m12, m22);
          } else {
            this._y = 0;
            this._z = Math.atan2(m21, m11);
          }
          break;
        case "ZYX":
          this._y = Math.asin(-clamp(m31, -1, 1));
          if (Math.abs(m31) < 0.9999999) {
            this._x = Math.atan2(m32, m33);
            this._z = Math.atan2(m21, m11);
          } else {
            this._x = 0;
            this._z = Math.atan2(-m12, m22);
          }
          break;
        case "YZX":
          this._z = Math.asin(clamp(m21, -1, 1));
          if (Math.abs(m21) < 0.9999999) {
            this._x = Math.atan2(-m23, m22);
            this._y = Math.atan2(-m31, m11);
          } else {
            this._x = 0;
            this._y = Math.atan2(m13, m33);
          }
          break;
        case "XZY":
          this._z = Math.asin(-clamp(m12, -1, 1));
          if (Math.abs(m12) < 0.9999999) {
            this._x = Math.atan2(m32, m22);
            this._y = Math.atan2(m13, m11);
          } else {
            this._x = Math.atan2(-m23, m33);
            this._y = 0;
          }
          break;
        default:
          console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
      }
      this._order = order;
      if (update2 !== false)
        this._onChangeCallback();
      return this;
    }
    setFromQuaternion(q, order, update2) {
      _matrix.makeRotationFromQuaternion(q);
      return this.setFromRotationMatrix(_matrix, order, update2);
    }
    setFromVector3(v, order) {
      return this.set(v.x, v.y, v.z, order || this._order);
    }
    reorder(newOrder) {
      _quaternion$1.setFromEuler(this);
      return this.setFromQuaternion(_quaternion$1, newOrder);
    }
    equals(euler) {
      return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
    }
    fromArray(array) {
      this._x = array[0];
      this._y = array[1];
      this._z = array[2];
      if (array[3] !== void 0)
        this._order = array[3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._order;
      return array;
    }
    toVector3(optionalResult) {
      if (optionalResult) {
        return optionalResult.set(this._x, this._y, this._z);
      } else {
        return new Vector3(this._x, this._y, this._z);
      }
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
  };
  Euler.DefaultOrder = "XYZ";
  Euler.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"];
  var _matrix = /* @__PURE__ */ new Matrix4();
  var _quaternion$1 = /* @__PURE__ */ new Quaternion();
  var Layers = class {
    constructor() {
      this.mask = 1 | 0;
    }
    set(channel) {
      this.mask = 1 << channel | 0;
    }
    enable(channel) {
      this.mask |= 1 << channel | 0;
    }
    enableAll() {
      this.mask = 4294967295 | 0;
    }
    toggle(channel) {
      this.mask ^= 1 << channel | 0;
    }
    disable(channel) {
      this.mask &= ~(1 << channel | 0);
    }
    disableAll() {
      this.mask = 0;
    }
    test(layers) {
      return (this.mask & layers.mask) !== 0;
    }
  };
  var _object3DId = 0;
  var _v1$2 = new Vector3();
  var _q1 = new Quaternion();
  var _m1$1 = new Matrix4();
  var _target = new Vector3();
  var _position = new Vector3();
  var _scale = new Vector3();
  var _quaternion$2 = new Quaternion();
  var _xAxis = new Vector3(1, 0, 0);
  var _yAxis = new Vector3(0, 1, 0);
  var _zAxis = new Vector3(0, 0, 1);
  var _addedEvent = {type: "added"};
  var _removedEvent = {type: "removed"};
  function Object3D() {
    Object.defineProperty(this, "id", {value: _object3DId++});
    this.uuid = MathUtils.generateUUID();
    this.name = "";
    this.type = "Object3D";
    this.parent = null;
    this.children = [];
    this.up = Object3D.DefaultUp.clone();
    const position = new Vector3();
    const rotation = new Euler();
    const quaternion = new Quaternion();
    const scale = new Vector3(1, 1, 1);
    function onRotationChange() {
      quaternion.setFromEuler(rotation, false);
    }
    function onQuaternionChange() {
      rotation.setFromQuaternion(quaternion, void 0, false);
    }
    rotation._onChange(onRotationChange);
    quaternion._onChange(onQuaternionChange);
    Object.defineProperties(this, {
      position: {
        configurable: true,
        enumerable: true,
        value: position
      },
      rotation: {
        configurable: true,
        enumerable: true,
        value: rotation
      },
      quaternion: {
        configurable: true,
        enumerable: true,
        value: quaternion
      },
      scale: {
        configurable: true,
        enumerable: true,
        value: scale
      },
      modelViewMatrix: {
        value: new Matrix4()
      },
      normalMatrix: {
        value: new Matrix3()
      }
    });
    this.matrix = new Matrix4();
    this.matrixWorld = new Matrix4();
    this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
    this.matrixWorldNeedsUpdate = false;
    this.layers = new Layers();
    this.visible = true;
    this.castShadow = false;
    this.receiveShadow = false;
    this.frustumCulled = true;
    this.renderOrder = 0;
    this.animations = [];
    this.userData = {};
  }
  Object3D.DefaultUp = new Vector3(0, 1, 0);
  Object3D.DefaultMatrixAutoUpdate = true;
  Object3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
    constructor: Object3D,
    isObject3D: true,
    onBeforeRender: function() {
    },
    onAfterRender: function() {
    },
    applyMatrix4: function(matrix) {
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      this.matrix.premultiply(matrix);
      this.matrix.decompose(this.position, this.quaternion, this.scale);
    },
    applyQuaternion: function(q) {
      this.quaternion.premultiply(q);
      return this;
    },
    setRotationFromAxisAngle: function(axis, angle) {
      this.quaternion.setFromAxisAngle(axis, angle);
    },
    setRotationFromEuler: function(euler) {
      this.quaternion.setFromEuler(euler, true);
    },
    setRotationFromMatrix: function(m) {
      this.quaternion.setFromRotationMatrix(m);
    },
    setRotationFromQuaternion: function(q) {
      this.quaternion.copy(q);
    },
    rotateOnAxis: function(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.multiply(_q1);
      return this;
    },
    rotateOnWorldAxis: function(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.premultiply(_q1);
      return this;
    },
    rotateX: function(angle) {
      return this.rotateOnAxis(_xAxis, angle);
    },
    rotateY: function(angle) {
      return this.rotateOnAxis(_yAxis, angle);
    },
    rotateZ: function(angle) {
      return this.rotateOnAxis(_zAxis, angle);
    },
    translateOnAxis: function(axis, distance) {
      _v1$2.copy(axis).applyQuaternion(this.quaternion);
      this.position.add(_v1$2.multiplyScalar(distance));
      return this;
    },
    translateX: function(distance) {
      return this.translateOnAxis(_xAxis, distance);
    },
    translateY: function(distance) {
      return this.translateOnAxis(_yAxis, distance);
    },
    translateZ: function(distance) {
      return this.translateOnAxis(_zAxis, distance);
    },
    localToWorld: function(vector) {
      return vector.applyMatrix4(this.matrixWorld);
    },
    worldToLocal: function(vector) {
      return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
    },
    lookAt: function(x, y, z) {
      if (x.isVector3) {
        _target.copy(x);
      } else {
        _target.set(x, y, z);
      }
      const parent = this.parent;
      this.updateWorldMatrix(true, false);
      _position.setFromMatrixPosition(this.matrixWorld);
      if (this.isCamera || this.isLight) {
        _m1$1.lookAt(_position, _target, this.up);
      } else {
        _m1$1.lookAt(_target, _position, this.up);
      }
      this.quaternion.setFromRotationMatrix(_m1$1);
      if (parent) {
        _m1$1.extractRotation(parent.matrixWorld);
        _q1.setFromRotationMatrix(_m1$1);
        this.quaternion.premultiply(_q1.invert());
      }
    },
    add: function(object) {
      if (arguments.length > 1) {
        for (let i = 0; i < arguments.length; i++) {
          this.add(arguments[i]);
        }
        return this;
      }
      if (object === this) {
        console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
        return this;
      }
      if (object && object.isObject3D) {
        if (object.parent !== null) {
          object.parent.remove(object);
        }
        object.parent = this;
        this.children.push(object);
        object.dispatchEvent(_addedEvent);
      } else {
        console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
      }
      return this;
    },
    remove: function(object) {
      if (arguments.length > 1) {
        for (let i = 0; i < arguments.length; i++) {
          this.remove(arguments[i]);
        }
        return this;
      }
      const index = this.children.indexOf(object);
      if (index !== -1) {
        object.parent = null;
        this.children.splice(index, 1);
        object.dispatchEvent(_removedEvent);
      }
      return this;
    },
    clear: function() {
      for (let i = 0; i < this.children.length; i++) {
        const object = this.children[i];
        object.parent = null;
        object.dispatchEvent(_removedEvent);
      }
      this.children.length = 0;
      return this;
    },
    attach: function(object) {
      this.updateWorldMatrix(true, false);
      _m1$1.copy(this.matrixWorld).invert();
      if (object.parent !== null) {
        object.parent.updateWorldMatrix(true, false);
        _m1$1.multiply(object.parent.matrixWorld);
      }
      object.applyMatrix4(_m1$1);
      object.updateWorldMatrix(false, false);
      this.add(object);
      return this;
    },
    getObjectById: function(id) {
      return this.getObjectByProperty("id", id);
    },
    getObjectByName: function(name) {
      return this.getObjectByProperty("name", name);
    },
    getObjectByProperty: function(name, value) {
      if (this[name] === value)
        return this;
      for (let i = 0, l = this.children.length; i < l; i++) {
        const child = this.children[i];
        const object = child.getObjectByProperty(name, value);
        if (object !== void 0) {
          return object;
        }
      }
      return void 0;
    },
    getWorldPosition: function(target) {
      if (target === void 0) {
        console.warn("THREE.Object3D: .getWorldPosition() target is now required");
        target = new Vector3();
      }
      this.updateWorldMatrix(true, false);
      return target.setFromMatrixPosition(this.matrixWorld);
    },
    getWorldQuaternion: function(target) {
      if (target === void 0) {
        console.warn("THREE.Object3D: .getWorldQuaternion() target is now required");
        target = new Quaternion();
      }
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position, target, _scale);
      return target;
    },
    getWorldScale: function(target) {
      if (target === void 0) {
        console.warn("THREE.Object3D: .getWorldScale() target is now required");
        target = new Vector3();
      }
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position, _quaternion$2, target);
      return target;
    },
    getWorldDirection: function(target) {
      if (target === void 0) {
        console.warn("THREE.Object3D: .getWorldDirection() target is now required");
        target = new Vector3();
      }
      this.updateWorldMatrix(true, false);
      const e = this.matrixWorld.elements;
      return target.set(e[8], e[9], e[10]).normalize();
    },
    raycast: function() {
    },
    traverse: function(callback) {
      callback(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].traverse(callback);
      }
    },
    traverseVisible: function(callback) {
      if (this.visible === false)
        return;
      callback(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].traverseVisible(callback);
      }
    },
    traverseAncestors: function(callback) {
      const parent = this.parent;
      if (parent !== null) {
        callback(parent);
        parent.traverseAncestors(callback);
      }
    },
    updateMatrix: function() {
      this.matrix.compose(this.position, this.quaternion, this.scale);
      this.matrixWorldNeedsUpdate = true;
    },
    updateMatrixWorld: function(force) {
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      if (this.matrixWorldNeedsUpdate || force) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
        this.matrixWorldNeedsUpdate = false;
        force = true;
      }
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].updateMatrixWorld(force);
      }
    },
    updateWorldMatrix: function(updateParents, updateChildren) {
      const parent = this.parent;
      if (updateParents === true && parent !== null) {
        parent.updateWorldMatrix(true, false);
      }
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      if (this.parent === null) {
        this.matrixWorld.copy(this.matrix);
      } else {
        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      }
      if (updateChildren === true) {
        const children = this.children;
        for (let i = 0, l = children.length; i < l; i++) {
          children[i].updateWorldMatrix(false, true);
        }
      }
    },
    toJSON: function(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      const output = {};
      if (isRootObject) {
        meta = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
          shapes: {},
          skeletons: {},
          animations: {}
        };
        output.metadata = {
          version: 4.5,
          type: "Object",
          generator: "Object3D.toJSON"
        };
      }
      const object = {};
      object.uuid = this.uuid;
      object.type = this.type;
      if (this.name !== "")
        object.name = this.name;
      if (this.castShadow === true)
        object.castShadow = true;
      if (this.receiveShadow === true)
        object.receiveShadow = true;
      if (this.visible === false)
        object.visible = false;
      if (this.frustumCulled === false)
        object.frustumCulled = false;
      if (this.renderOrder !== 0)
        object.renderOrder = this.renderOrder;
      if (JSON.stringify(this.userData) !== "{}")
        object.userData = this.userData;
      object.layers = this.layers.mask;
      object.matrix = this.matrix.toArray();
      if (this.matrixAutoUpdate === false)
        object.matrixAutoUpdate = false;
      if (this.isInstancedMesh) {
        object.type = "InstancedMesh";
        object.count = this.count;
        object.instanceMatrix = this.instanceMatrix.toJSON();
      }
      function serialize(library, element) {
        if (library[element.uuid] === void 0) {
          library[element.uuid] = element.toJSON(meta);
        }
        return element.uuid;
      }
      if (this.isMesh || this.isLine || this.isPoints) {
        object.geometry = serialize(meta.geometries, this.geometry);
        const parameters = this.geometry.parameters;
        if (parameters !== void 0 && parameters.shapes !== void 0) {
          const shapes = parameters.shapes;
          if (Array.isArray(shapes)) {
            for (let i = 0, l = shapes.length; i < l; i++) {
              const shape = shapes[i];
              serialize(meta.shapes, shape);
            }
          } else {
            serialize(meta.shapes, shapes);
          }
        }
      }
      if (this.isSkinnedMesh) {
        object.bindMode = this.bindMode;
        object.bindMatrix = this.bindMatrix.toArray();
        if (this.skeleton !== void 0) {
          serialize(meta.skeletons, this.skeleton);
          object.skeleton = this.skeleton.uuid;
        }
      }
      if (this.material !== void 0) {
        if (Array.isArray(this.material)) {
          const uuids = [];
          for (let i = 0, l = this.material.length; i < l; i++) {
            uuids.push(serialize(meta.materials, this.material[i]));
          }
          object.material = uuids;
        } else {
          object.material = serialize(meta.materials, this.material);
        }
      }
      if (this.children.length > 0) {
        object.children = [];
        for (let i = 0; i < this.children.length; i++) {
          object.children.push(this.children[i].toJSON(meta).object);
        }
      }
      if (this.animations.length > 0) {
        object.animations = [];
        for (let i = 0; i < this.animations.length; i++) {
          const animation = this.animations[i];
          object.animations.push(serialize(meta.animations, animation));
        }
      }
      if (isRootObject) {
        const geometries = extractFromCache(meta.geometries);
        const materials = extractFromCache(meta.materials);
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        const shapes = extractFromCache(meta.shapes);
        const skeletons = extractFromCache(meta.skeletons);
        const animations = extractFromCache(meta.animations);
        if (geometries.length > 0)
          output.geometries = geometries;
        if (materials.length > 0)
          output.materials = materials;
        if (textures.length > 0)
          output.textures = textures;
        if (images.length > 0)
          output.images = images;
        if (shapes.length > 0)
          output.shapes = shapes;
        if (skeletons.length > 0)
          output.skeletons = skeletons;
        if (animations.length > 0)
          output.animations = animations;
      }
      output.object = object;
      return output;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data = cache[key];
          delete data.metadata;
          values.push(data);
        }
        return values;
      }
    },
    clone: function(recursive) {
      return new this.constructor().copy(this, recursive);
    },
    copy: function(source, recursive = true) {
      this.name = source.name;
      this.up.copy(source.up);
      this.position.copy(source.position);
      this.rotation.order = source.rotation.order;
      this.quaternion.copy(source.quaternion);
      this.scale.copy(source.scale);
      this.matrix.copy(source.matrix);
      this.matrixWorld.copy(source.matrixWorld);
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
      this.layers.mask = source.layers.mask;
      this.visible = source.visible;
      this.castShadow = source.castShadow;
      this.receiveShadow = source.receiveShadow;
      this.frustumCulled = source.frustumCulled;
      this.renderOrder = source.renderOrder;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      if (recursive === true) {
        for (let i = 0; i < source.children.length; i++) {
          const child = source.children[i];
          this.add(child.clone());
        }
      }
      return this;
    }
  });
  var _vector1 = /* @__PURE__ */ new Vector3();
  var _vector2 = /* @__PURE__ */ new Vector3();
  var _normalMatrix = /* @__PURE__ */ new Matrix3();
  var Plane = class {
    constructor(normal, constant) {
      Object.defineProperty(this, "isPlane", {value: true});
      this.normal = normal !== void 0 ? normal : new Vector3(1, 0, 0);
      this.constant = constant !== void 0 ? constant : 0;
    }
    set(normal, constant) {
      this.normal.copy(normal);
      this.constant = constant;
      return this;
    }
    setComponents(x, y, z, w) {
      this.normal.set(x, y, z);
      this.constant = w;
      return this;
    }
    setFromNormalAndCoplanarPoint(normal, point) {
      this.normal.copy(normal);
      this.constant = -point.dot(this.normal);
      return this;
    }
    setFromCoplanarPoints(a, b, c) {
      const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
      this.setFromNormalAndCoplanarPoint(normal, a);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(plane) {
      this.normal.copy(plane.normal);
      this.constant = plane.constant;
      return this;
    }
    normalize() {
      const inverseNormalLength = 1 / this.normal.length();
      this.normal.multiplyScalar(inverseNormalLength);
      this.constant *= inverseNormalLength;
      return this;
    }
    negate() {
      this.constant *= -1;
      this.normal.negate();
      return this;
    }
    distanceToPoint(point) {
      return this.normal.dot(point) + this.constant;
    }
    distanceToSphere(sphere) {
      return this.distanceToPoint(sphere.center) - sphere.radius;
    }
    projectPoint(point, target) {
      if (target === void 0) {
        console.warn("THREE.Plane: .projectPoint() target is now required");
        target = new Vector3();
      }
      return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);
    }
    intersectLine(line, target) {
      if (target === void 0) {
        console.warn("THREE.Plane: .intersectLine() target is now required");
        target = new Vector3();
      }
      const direction = line.delta(_vector1);
      const denominator = this.normal.dot(direction);
      if (denominator === 0) {
        if (this.distanceToPoint(line.start) === 0) {
          return target.copy(line.start);
        }
        return void 0;
      }
      const t = -(line.start.dot(this.normal) + this.constant) / denominator;
      if (t < 0 || t > 1) {
        return void 0;
      }
      return target.copy(direction).multiplyScalar(t).add(line.start);
    }
    intersectsLine(line) {
      const startSign = this.distanceToPoint(line.start);
      const endSign = this.distanceToPoint(line.end);
      return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
    }
    intersectsBox(box) {
      return box.intersectsPlane(this);
    }
    intersectsSphere(sphere) {
      return sphere.intersectsPlane(this);
    }
    coplanarPoint(target) {
      if (target === void 0) {
        console.warn("THREE.Plane: .coplanarPoint() target is now required");
        target = new Vector3();
      }
      return target.copy(this.normal).multiplyScalar(-this.constant);
    }
    applyMatrix4(matrix, optionalNormalMatrix) {
      const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
      const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
      const normal = this.normal.applyMatrix3(normalMatrix).normalize();
      this.constant = -referencePoint.dot(normal);
      return this;
    }
    translate(offset) {
      this.constant -= offset.dot(this.normal);
      return this;
    }
    equals(plane) {
      return plane.normal.equals(this.normal) && plane.constant === this.constant;
    }
  };
  var _v0$1 = /* @__PURE__ */ new Vector3();
  var _v1$3 = /* @__PURE__ */ new Vector3();
  var _v2$1 = /* @__PURE__ */ new Vector3();
  var _v3 = /* @__PURE__ */ new Vector3();
  var _vab = /* @__PURE__ */ new Vector3();
  var _vac = /* @__PURE__ */ new Vector3();
  var _vbc = /* @__PURE__ */ new Vector3();
  var _vap = /* @__PURE__ */ new Vector3();
  var _vbp = /* @__PURE__ */ new Vector3();
  var _vcp = /* @__PURE__ */ new Vector3();
  var Triangle = class {
    constructor(a, b, c) {
      this.a = a !== void 0 ? a : new Vector3();
      this.b = b !== void 0 ? b : new Vector3();
      this.c = c !== void 0 ? c : new Vector3();
    }
    static getNormal(a, b, c, target) {
      if (target === void 0) {
        console.warn("THREE.Triangle: .getNormal() target is now required");
        target = new Vector3();
      }
      target.subVectors(c, b);
      _v0$1.subVectors(a, b);
      target.cross(_v0$1);
      const targetLengthSq = target.lengthSq();
      if (targetLengthSq > 0) {
        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
      }
      return target.set(0, 0, 0);
    }
    static getBarycoord(point, a, b, c, target) {
      _v0$1.subVectors(c, a);
      _v1$3.subVectors(b, a);
      _v2$1.subVectors(point, a);
      const dot00 = _v0$1.dot(_v0$1);
      const dot01 = _v0$1.dot(_v1$3);
      const dot02 = _v0$1.dot(_v2$1);
      const dot11 = _v1$3.dot(_v1$3);
      const dot12 = _v1$3.dot(_v2$1);
      const denom = dot00 * dot11 - dot01 * dot01;
      if (target === void 0) {
        console.warn("THREE.Triangle: .getBarycoord() target is now required");
        target = new Vector3();
      }
      if (denom === 0) {
        return target.set(-2, -1, -1);
      }
      const invDenom = 1 / denom;
      const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
      const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
      return target.set(1 - u - v, v, u);
    }
    static containsPoint(point, a, b, c) {
      this.getBarycoord(point, a, b, c, _v3);
      return _v3.x >= 0 && _v3.y >= 0 && _v3.x + _v3.y <= 1;
    }
    static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
      this.getBarycoord(point, p1, p2, p3, _v3);
      target.set(0, 0);
      target.addScaledVector(uv1, _v3.x);
      target.addScaledVector(uv2, _v3.y);
      target.addScaledVector(uv3, _v3.z);
      return target;
    }
    static isFrontFacing(a, b, c, direction) {
      _v0$1.subVectors(c, b);
      _v1$3.subVectors(a, b);
      return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
    }
    set(a, b, c) {
      this.a.copy(a);
      this.b.copy(b);
      this.c.copy(c);
      return this;
    }
    setFromPointsAndIndices(points, i0, i1, i2) {
      this.a.copy(points[i0]);
      this.b.copy(points[i1]);
      this.c.copy(points[i2]);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(triangle) {
      this.a.copy(triangle.a);
      this.b.copy(triangle.b);
      this.c.copy(triangle.c);
      return this;
    }
    getArea() {
      _v0$1.subVectors(this.c, this.b);
      _v1$3.subVectors(this.a, this.b);
      return _v0$1.cross(_v1$3).length() * 0.5;
    }
    getMidpoint(target) {
      if (target === void 0) {
        console.warn("THREE.Triangle: .getMidpoint() target is now required");
        target = new Vector3();
      }
      return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(target) {
      return Triangle.getNormal(this.a, this.b, this.c, target);
    }
    getPlane(target) {
      if (target === void 0) {
        console.warn("THREE.Triangle: .getPlane() target is now required");
        target = new Plane();
      }
      return target.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(point, target) {
      return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
    }
    getUV(point, uv1, uv2, uv3, target) {
      return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
    }
    containsPoint(point) {
      return Triangle.containsPoint(point, this.a, this.b, this.c);
    }
    isFrontFacing(direction) {
      return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
    }
    intersectsBox(box) {
      return box.intersectsTriangle(this);
    }
    closestPointToPoint(p, target) {
      if (target === void 0) {
        console.warn("THREE.Triangle: .closestPointToPoint() target is now required");
        target = new Vector3();
      }
      const a = this.a, b = this.b, c = this.c;
      let v, w;
      _vab.subVectors(b, a);
      _vac.subVectors(c, a);
      _vap.subVectors(p, a);
      const d1 = _vab.dot(_vap);
      const d2 = _vac.dot(_vap);
      if (d1 <= 0 && d2 <= 0) {
        return target.copy(a);
      }
      _vbp.subVectors(p, b);
      const d3 = _vab.dot(_vbp);
      const d4 = _vac.dot(_vbp);
      if (d3 >= 0 && d4 <= d3) {
        return target.copy(b);
      }
      const vc = d1 * d4 - d3 * d2;
      if (vc <= 0 && d1 >= 0 && d3 <= 0) {
        v = d1 / (d1 - d3);
        return target.copy(a).addScaledVector(_vab, v);
      }
      _vcp.subVectors(p, c);
      const d5 = _vab.dot(_vcp);
      const d6 = _vac.dot(_vcp);
      if (d6 >= 0 && d5 <= d6) {
        return target.copy(c);
      }
      const vb = d5 * d2 - d1 * d6;
      if (vb <= 0 && d2 >= 0 && d6 <= 0) {
        w = d2 / (d2 - d6);
        return target.copy(a).addScaledVector(_vac, w);
      }
      const va = d3 * d6 - d5 * d4;
      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
        _vbc.subVectors(c, b);
        w = (d4 - d3) / (d4 - d3 + (d5 - d6));
        return target.copy(b).addScaledVector(_vbc, w);
      }
      const denom = 1 / (va + vb + vc);
      v = vb * denom;
      w = vc * denom;
      return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
    }
    equals(triangle) {
      return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
    }
  };
  var _colorKeywords = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  var _hslA = {h: 0, s: 0, l: 0};
  var _hslB = {h: 0, s: 0, l: 0};
  function hue2rgb(p, q, t) {
    if (t < 0)
      t += 1;
    if (t > 1)
      t -= 1;
    if (t < 1 / 6)
      return p + (q - p) * 6 * t;
    if (t < 1 / 2)
      return q;
    if (t < 2 / 3)
      return p + (q - p) * 6 * (2 / 3 - t);
    return p;
  }
  function SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
  }
  function LinearToSRGB(c) {
    return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
  }
  var Color = class {
    constructor(r, g, b) {
      Object.defineProperty(this, "isColor", {value: true});
      if (g === void 0 && b === void 0) {
        return this.set(r);
      }
      return this.setRGB(r, g, b);
    }
    set(value) {
      if (value && value.isColor) {
        this.copy(value);
      } else if (typeof value === "number") {
        this.setHex(value);
      } else if (typeof value === "string") {
        this.setStyle(value);
      }
      return this;
    }
    setScalar(scalar) {
      this.r = scalar;
      this.g = scalar;
      this.b = scalar;
      return this;
    }
    setHex(hex) {
      hex = Math.floor(hex);
      this.r = (hex >> 16 & 255) / 255;
      this.g = (hex >> 8 & 255) / 255;
      this.b = (hex & 255) / 255;
      return this;
    }
    setRGB(r, g, b) {
      this.r = r;
      this.g = g;
      this.b = b;
      return this;
    }
    setHSL(h, s, l) {
      h = MathUtils.euclideanModulo(h, 1);
      s = MathUtils.clamp(s, 0, 1);
      l = MathUtils.clamp(l, 0, 1);
      if (s === 0) {
        this.r = this.g = this.b = l;
      } else {
        const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
        const q = 2 * l - p;
        this.r = hue2rgb(q, p, h + 1 / 3);
        this.g = hue2rgb(q, p, h);
        this.b = hue2rgb(q, p, h - 1 / 3);
      }
      return this;
    }
    setStyle(style) {
      function handleAlpha(string) {
        if (string === void 0)
          return;
        if (parseFloat(string) < 1) {
          console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
        }
      }
      let m;
      if (m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(style)) {
        let color;
        const name = m[1];
        const components = m[2];
        switch (name) {
          case "rgb":
          case "rgba":
            if (color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
              this.r = Math.min(255, parseInt(color[1], 10)) / 255;
              this.g = Math.min(255, parseInt(color[2], 10)) / 255;
              this.b = Math.min(255, parseInt(color[3], 10)) / 255;
              handleAlpha(color[5]);
              return this;
            }
            if (color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
              this.r = Math.min(100, parseInt(color[1], 10)) / 100;
              this.g = Math.min(100, parseInt(color[2], 10)) / 100;
              this.b = Math.min(100, parseInt(color[3], 10)) / 100;
              handleAlpha(color[5]);
              return this;
            }
            break;
          case "hsl":
          case "hsla":
            if (color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
              const h = parseFloat(color[1]) / 360;
              const s = parseInt(color[2], 10) / 100;
              const l = parseInt(color[3], 10) / 100;
              handleAlpha(color[5]);
              return this.setHSL(h, s, l);
            }
            break;
        }
      } else if (m = /^\#([A-Fa-f0-9]+)$/.exec(style)) {
        const hex = m[1];
        const size = hex.length;
        if (size === 3) {
          this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
          this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
          this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;
          return this;
        } else if (size === 6) {
          this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
          this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
          this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;
          return this;
        }
      }
      if (style && style.length > 0) {
        return this.setColorName(style);
      }
      return this;
    }
    setColorName(style) {
      const hex = _colorKeywords[style];
      if (hex !== void 0) {
        this.setHex(hex);
      } else {
        console.warn("THREE.Color: Unknown color " + style);
      }
      return this;
    }
    clone() {
      return new this.constructor(this.r, this.g, this.b);
    }
    copy(color) {
      this.r = color.r;
      this.g = color.g;
      this.b = color.b;
      return this;
    }
    copyGammaToLinear(color, gammaFactor = 2) {
      this.r = Math.pow(color.r, gammaFactor);
      this.g = Math.pow(color.g, gammaFactor);
      this.b = Math.pow(color.b, gammaFactor);
      return this;
    }
    copyLinearToGamma(color, gammaFactor = 2) {
      const safeInverse = gammaFactor > 0 ? 1 / gammaFactor : 1;
      this.r = Math.pow(color.r, safeInverse);
      this.g = Math.pow(color.g, safeInverse);
      this.b = Math.pow(color.b, safeInverse);
      return this;
    }
    convertGammaToLinear(gammaFactor) {
      this.copyGammaToLinear(this, gammaFactor);
      return this;
    }
    convertLinearToGamma(gammaFactor) {
      this.copyLinearToGamma(this, gammaFactor);
      return this;
    }
    copySRGBToLinear(color) {
      this.r = SRGBToLinear(color.r);
      this.g = SRGBToLinear(color.g);
      this.b = SRGBToLinear(color.b);
      return this;
    }
    copyLinearToSRGB(color) {
      this.r = LinearToSRGB(color.r);
      this.g = LinearToSRGB(color.g);
      this.b = LinearToSRGB(color.b);
      return this;
    }
    convertSRGBToLinear() {
      this.copySRGBToLinear(this);
      return this;
    }
    convertLinearToSRGB() {
      this.copyLinearToSRGB(this);
      return this;
    }
    getHex() {
      return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
    }
    getHexString() {
      return ("000000" + this.getHex().toString(16)).slice(-6);
    }
    getHSL(target) {
      if (target === void 0) {
        console.warn("THREE.Color: .getHSL() target is now required");
        target = {h: 0, s: 0, l: 0};
      }
      const r = this.r, g = this.g, b = this.b;
      const max = Math.max(r, g, b);
      const min = Math.min(r, g, b);
      let hue, saturation;
      const lightness = (min + max) / 2;
      if (min === max) {
        hue = 0;
        saturation = 0;
      } else {
        const delta = max - min;
        saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
        switch (max) {
          case r:
            hue = (g - b) / delta + (g < b ? 6 : 0);
            break;
          case g:
            hue = (b - r) / delta + 2;
            break;
          case b:
            hue = (r - g) / delta + 4;
            break;
        }
        hue /= 6;
      }
      target.h = hue;
      target.s = saturation;
      target.l = lightness;
      return target;
    }
    getStyle() {
      return "rgb(" + (this.r * 255 | 0) + "," + (this.g * 255 | 0) + "," + (this.b * 255 | 0) + ")";
    }
    offsetHSL(h, s, l) {
      this.getHSL(_hslA);
      _hslA.h += h;
      _hslA.s += s;
      _hslA.l += l;
      this.setHSL(_hslA.h, _hslA.s, _hslA.l);
      return this;
    }
    add(color) {
      this.r += color.r;
      this.g += color.g;
      this.b += color.b;
      return this;
    }
    addColors(color1, color2) {
      this.r = color1.r + color2.r;
      this.g = color1.g + color2.g;
      this.b = color1.b + color2.b;
      return this;
    }
    addScalar(s) {
      this.r += s;
      this.g += s;
      this.b += s;
      return this;
    }
    sub(color) {
      this.r = Math.max(0, this.r - color.r);
      this.g = Math.max(0, this.g - color.g);
      this.b = Math.max(0, this.b - color.b);
      return this;
    }
    multiply(color) {
      this.r *= color.r;
      this.g *= color.g;
      this.b *= color.b;
      return this;
    }
    multiplyScalar(s) {
      this.r *= s;
      this.g *= s;
      this.b *= s;
      return this;
    }
    lerp(color, alpha) {
      this.r += (color.r - this.r) * alpha;
      this.g += (color.g - this.g) * alpha;
      this.b += (color.b - this.b) * alpha;
      return this;
    }
    lerpHSL(color, alpha) {
      this.getHSL(_hslA);
      color.getHSL(_hslB);
      const h = MathUtils.lerp(_hslA.h, _hslB.h, alpha);
      const s = MathUtils.lerp(_hslA.s, _hslB.s, alpha);
      const l = MathUtils.lerp(_hslA.l, _hslB.l, alpha);
      this.setHSL(h, s, l);
      return this;
    }
    equals(c) {
      return c.r === this.r && c.g === this.g && c.b === this.b;
    }
    fromArray(array, offset = 0) {
      this.r = array[offset];
      this.g = array[offset + 1];
      this.b = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.r;
      array[offset + 1] = this.g;
      array[offset + 2] = this.b;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.r = attribute.getX(index);
      this.g = attribute.getY(index);
      this.b = attribute.getZ(index);
      if (attribute.normalized === true) {
        this.r /= 255;
        this.g /= 255;
        this.b /= 255;
      }
      return this;
    }
    toJSON() {
      return this.getHex();
    }
  };
  Color.NAMES = _colorKeywords;
  Color.prototype.r = 1;
  Color.prototype.g = 1;
  Color.prototype.b = 1;
  var Face3 = class {
    constructor(a, b, c, normal, color, materialIndex = 0) {
      this.a = a;
      this.b = b;
      this.c = c;
      this.normal = normal && normal.isVector3 ? normal : new Vector3();
      this.vertexNormals = Array.isArray(normal) ? normal : [];
      this.color = color && color.isColor ? color : new Color();
      this.vertexColors = Array.isArray(color) ? color : [];
      this.materialIndex = materialIndex;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.a = source.a;
      this.b = source.b;
      this.c = source.c;
      this.normal.copy(source.normal);
      this.color.copy(source.color);
      this.materialIndex = source.materialIndex;
      for (let i = 0, il = source.vertexNormals.length; i < il; i++) {
        this.vertexNormals[i] = source.vertexNormals[i].clone();
      }
      for (let i = 0, il = source.vertexColors.length; i < il; i++) {
        this.vertexColors[i] = source.vertexColors[i].clone();
      }
      return this;
    }
  };
  var materialId = 0;
  function Material() {
    Object.defineProperty(this, "id", {value: materialId++});
    this.uuid = MathUtils.generateUUID();
    this.name = "";
    this.type = "Material";
    this.fog = true;
    this.blending = NormalBlending;
    this.side = FrontSide;
    this.flatShading = false;
    this.vertexColors = false;
    this.opacity = 1;
    this.transparent = false;
    this.blendSrc = SrcAlphaFactor;
    this.blendDst = OneMinusSrcAlphaFactor;
    this.blendEquation = AddEquation;
    this.blendSrcAlpha = null;
    this.blendDstAlpha = null;
    this.blendEquationAlpha = null;
    this.depthFunc = LessEqualDepth;
    this.depthTest = true;
    this.depthWrite = true;
    this.stencilWriteMask = 255;
    this.stencilFunc = AlwaysStencilFunc;
    this.stencilRef = 0;
    this.stencilFuncMask = 255;
    this.stencilFail = KeepStencilOp;
    this.stencilZFail = KeepStencilOp;
    this.stencilZPass = KeepStencilOp;
    this.stencilWrite = false;
    this.clippingPlanes = null;
    this.clipIntersection = false;
    this.clipShadows = false;
    this.shadowSide = null;
    this.colorWrite = true;
    this.precision = null;
    this.polygonOffset = false;
    this.polygonOffsetFactor = 0;
    this.polygonOffsetUnits = 0;
    this.dithering = false;
    this.alphaTest = 0;
    this.premultipliedAlpha = false;
    this.visible = true;
    this.toneMapped = true;
    this.userData = {};
    this.version = 0;
  }
  Material.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
    constructor: Material,
    isMaterial: true,
    onBeforeCompile: function() {
    },
    customProgramCacheKey: function() {
      return this.onBeforeCompile.toString();
    },
    setValues: function(values) {
      if (values === void 0)
        return;
      for (const key in values) {
        const newValue = values[key];
        if (newValue === void 0) {
          console.warn("THREE.Material: '" + key + "' parameter is undefined.");
          continue;
        }
        if (key === "shading") {
          console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
          this.flatShading = newValue === FlatShading ? true : false;
          continue;
        }
        const currentValue = this[key];
        if (currentValue === void 0) {
          console.warn("THREE." + this.type + ": '" + key + "' is not a property of this material.");
          continue;
        }
        if (currentValue && currentValue.isColor) {
          currentValue.set(newValue);
        } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
          currentValue.copy(newValue);
        } else {
          this[key] = newValue;
        }
      }
    },
    toJSON: function(meta) {
      const isRoot = meta === void 0 || typeof meta === "string";
      if (isRoot) {
        meta = {
          textures: {},
          images: {}
        };
      }
      const data = {
        metadata: {
          version: 4.5,
          type: "Material",
          generator: "Material.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "")
        data.name = this.name;
      if (this.color && this.color.isColor)
        data.color = this.color.getHex();
      if (this.roughness !== void 0)
        data.roughness = this.roughness;
      if (this.metalness !== void 0)
        data.metalness = this.metalness;
      if (this.sheen && this.sheen.isColor)
        data.sheen = this.sheen.getHex();
      if (this.emissive && this.emissive.isColor)
        data.emissive = this.emissive.getHex();
      if (this.emissiveIntensity && this.emissiveIntensity !== 1)
        data.emissiveIntensity = this.emissiveIntensity;
      if (this.specular && this.specular.isColor)
        data.specular = this.specular.getHex();
      if (this.shininess !== void 0)
        data.shininess = this.shininess;
      if (this.clearcoat !== void 0)
        data.clearcoat = this.clearcoat;
      if (this.clearcoatRoughness !== void 0)
        data.clearcoatRoughness = this.clearcoatRoughness;
      if (this.clearcoatMap && this.clearcoatMap.isTexture) {
        data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
      }
      if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
        data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
      }
      if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
        data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
        data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
      }
      if (this.map && this.map.isTexture)
        data.map = this.map.toJSON(meta).uuid;
      if (this.matcap && this.matcap.isTexture)
        data.matcap = this.matcap.toJSON(meta).uuid;
      if (this.alphaMap && this.alphaMap.isTexture)
        data.alphaMap = this.alphaMap.toJSON(meta).uuid;
      if (this.lightMap && this.lightMap.isTexture)
        data.lightMap = this.lightMap.toJSON(meta).uuid;
      if (this.aoMap && this.aoMap.isTexture) {
        data.aoMap = this.aoMap.toJSON(meta).uuid;
        data.aoMapIntensity = this.aoMapIntensity;
      }
      if (this.bumpMap && this.bumpMap.isTexture) {
        data.bumpMap = this.bumpMap.toJSON(meta).uuid;
        data.bumpScale = this.bumpScale;
      }
      if (this.normalMap && this.normalMap.isTexture) {
        data.normalMap = this.normalMap.toJSON(meta).uuid;
        data.normalMapType = this.normalMapType;
        data.normalScale = this.normalScale.toArray();
      }
      if (this.displacementMap && this.displacementMap.isTexture) {
        data.displacementMap = this.displacementMap.toJSON(meta).uuid;
        data.displacementScale = this.displacementScale;
        data.displacementBias = this.displacementBias;
      }
      if (this.roughnessMap && this.roughnessMap.isTexture)
        data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
      if (this.metalnessMap && this.metalnessMap.isTexture)
        data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
      if (this.emissiveMap && this.emissiveMap.isTexture)
        data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
      if (this.specularMap && this.specularMap.isTexture)
        data.specularMap = this.specularMap.toJSON(meta).uuid;
      if (this.envMap && this.envMap.isTexture) {
        data.envMap = this.envMap.toJSON(meta).uuid;
        data.reflectivity = this.reflectivity;
        data.refractionRatio = this.refractionRatio;
        if (this.combine !== void 0)
          data.combine = this.combine;
        if (this.envMapIntensity !== void 0)
          data.envMapIntensity = this.envMapIntensity;
      }
      if (this.gradientMap && this.gradientMap.isTexture) {
        data.gradientMap = this.gradientMap.toJSON(meta).uuid;
      }
      if (this.size !== void 0)
        data.size = this.size;
      if (this.sizeAttenuation !== void 0)
        data.sizeAttenuation = this.sizeAttenuation;
      if (this.blending !== NormalBlending)
        data.blending = this.blending;
      if (this.flatShading === true)
        data.flatShading = this.flatShading;
      if (this.side !== FrontSide)
        data.side = this.side;
      if (this.vertexColors)
        data.vertexColors = true;
      if (this.opacity < 1)
        data.opacity = this.opacity;
      if (this.transparent === true)
        data.transparent = this.transparent;
      data.depthFunc = this.depthFunc;
      data.depthTest = this.depthTest;
      data.depthWrite = this.depthWrite;
      data.stencilWrite = this.stencilWrite;
      data.stencilWriteMask = this.stencilWriteMask;
      data.stencilFunc = this.stencilFunc;
      data.stencilRef = this.stencilRef;
      data.stencilFuncMask = this.stencilFuncMask;
      data.stencilFail = this.stencilFail;
      data.stencilZFail = this.stencilZFail;
      data.stencilZPass = this.stencilZPass;
      if (this.rotation && this.rotation !== 0)
        data.rotation = this.rotation;
      if (this.polygonOffset === true)
        data.polygonOffset = true;
      if (this.polygonOffsetFactor !== 0)
        data.polygonOffsetFactor = this.polygonOffsetFactor;
      if (this.polygonOffsetUnits !== 0)
        data.polygonOffsetUnits = this.polygonOffsetUnits;
      if (this.linewidth && this.linewidth !== 1)
        data.linewidth = this.linewidth;
      if (this.dashSize !== void 0)
        data.dashSize = this.dashSize;
      if (this.gapSize !== void 0)
        data.gapSize = this.gapSize;
      if (this.scale !== void 0)
        data.scale = this.scale;
      if (this.dithering === true)
        data.dithering = true;
      if (this.alphaTest > 0)
        data.alphaTest = this.alphaTest;
      if (this.premultipliedAlpha === true)
        data.premultipliedAlpha = this.premultipliedAlpha;
      if (this.wireframe === true)
        data.wireframe = this.wireframe;
      if (this.wireframeLinewidth > 1)
        data.wireframeLinewidth = this.wireframeLinewidth;
      if (this.wireframeLinecap !== "round")
        data.wireframeLinecap = this.wireframeLinecap;
      if (this.wireframeLinejoin !== "round")
        data.wireframeLinejoin = this.wireframeLinejoin;
      if (this.morphTargets === true)
        data.morphTargets = true;
      if (this.morphNormals === true)
        data.morphNormals = true;
      if (this.skinning === true)
        data.skinning = true;
      if (this.visible === false)
        data.visible = false;
      if (this.toneMapped === false)
        data.toneMapped = false;
      if (JSON.stringify(this.userData) !== "{}")
        data.userData = this.userData;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data2 = cache[key];
          delete data2.metadata;
          values.push(data2);
        }
        return values;
      }
      if (isRoot) {
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        if (textures.length > 0)
          data.textures = textures;
        if (images.length > 0)
          data.images = images;
      }
      return data;
    },
    clone: function() {
      return new this.constructor().copy(this);
    },
    copy: function(source) {
      this.name = source.name;
      this.fog = source.fog;
      this.blending = source.blending;
      this.side = source.side;
      this.flatShading = source.flatShading;
      this.vertexColors = source.vertexColors;
      this.opacity = source.opacity;
      this.transparent = source.transparent;
      this.blendSrc = source.blendSrc;
      this.blendDst = source.blendDst;
      this.blendEquation = source.blendEquation;
      this.blendSrcAlpha = source.blendSrcAlpha;
      this.blendDstAlpha = source.blendDstAlpha;
      this.blendEquationAlpha = source.blendEquationAlpha;
      this.depthFunc = source.depthFunc;
      this.depthTest = source.depthTest;
      this.depthWrite = source.depthWrite;
      this.stencilWriteMask = source.stencilWriteMask;
      this.stencilFunc = source.stencilFunc;
      this.stencilRef = source.stencilRef;
      this.stencilFuncMask = source.stencilFuncMask;
      this.stencilFail = source.stencilFail;
      this.stencilZFail = source.stencilZFail;
      this.stencilZPass = source.stencilZPass;
      this.stencilWrite = source.stencilWrite;
      const srcPlanes = source.clippingPlanes;
      let dstPlanes = null;
      if (srcPlanes !== null) {
        const n = srcPlanes.length;
        dstPlanes = new Array(n);
        for (let i = 0; i !== n; ++i) {
          dstPlanes[i] = srcPlanes[i].clone();
        }
      }
      this.clippingPlanes = dstPlanes;
      this.clipIntersection = source.clipIntersection;
      this.clipShadows = source.clipShadows;
      this.shadowSide = source.shadowSide;
      this.colorWrite = source.colorWrite;
      this.precision = source.precision;
      this.polygonOffset = source.polygonOffset;
      this.polygonOffsetFactor = source.polygonOffsetFactor;
      this.polygonOffsetUnits = source.polygonOffsetUnits;
      this.dithering = source.dithering;
      this.alphaTest = source.alphaTest;
      this.premultipliedAlpha = source.premultipliedAlpha;
      this.visible = source.visible;
      this.toneMapped = source.toneMapped;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      return this;
    },
    dispose: function() {
      this.dispatchEvent({type: "dispose"});
    }
  });
  Object.defineProperty(Material.prototype, "needsUpdate", {
    set: function(value) {
      if (value === true)
        this.version++;
    }
  });
  function MeshBasicMaterial(parameters) {
    Material.call(this);
    this.type = "MeshBasicMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.combine = MultiplyOperation;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.skinning = false;
    this.morphTargets = false;
    this.setValues(parameters);
  }
  MeshBasicMaterial.prototype = Object.create(Material.prototype);
  MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;
  MeshBasicMaterial.prototype.isMeshBasicMaterial = true;
  MeshBasicMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    return this;
  };
  var _vector$3 = new Vector3();
  var _vector2$1 = new Vector2();
  function BufferAttribute(array, itemSize, normalized) {
    if (Array.isArray(array)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.name = "";
    this.array = array;
    this.itemSize = itemSize;
    this.count = array !== void 0 ? array.length / itemSize : 0;
    this.normalized = normalized === true;
    this.usage = StaticDrawUsage;
    this.updateRange = {offset: 0, count: -1};
    this.version = 0;
  }
  Object.defineProperty(BufferAttribute.prototype, "needsUpdate", {
    set: function(value) {
      if (value === true)
        this.version++;
    }
  });
  Object.assign(BufferAttribute.prototype, {
    isBufferAttribute: true,
    onUploadCallback: function() {
    },
    setUsage: function(value) {
      this.usage = value;
      return this;
    },
    copy: function(source) {
      this.name = source.name;
      this.array = new source.array.constructor(source.array);
      this.itemSize = source.itemSize;
      this.count = source.count;
      this.normalized = source.normalized;
      this.usage = source.usage;
      return this;
    },
    copyAt: function(index1, attribute, index2) {
      index1 *= this.itemSize;
      index2 *= attribute.itemSize;
      for (let i = 0, l = this.itemSize; i < l; i++) {
        this.array[index1 + i] = attribute.array[index2 + i];
      }
      return this;
    },
    copyArray: function(array) {
      this.array.set(array);
      return this;
    },
    copyColorsArray: function(colors) {
      const array = this.array;
      let offset = 0;
      for (let i = 0, l = colors.length; i < l; i++) {
        let color = colors[i];
        if (color === void 0) {
          console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i);
          color = new Color();
        }
        array[offset++] = color.r;
        array[offset++] = color.g;
        array[offset++] = color.b;
      }
      return this;
    },
    copyVector2sArray: function(vectors) {
      const array = this.array;
      let offset = 0;
      for (let i = 0, l = vectors.length; i < l; i++) {
        let vector = vectors[i];
        if (vector === void 0) {
          console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i);
          vector = new Vector2();
        }
        array[offset++] = vector.x;
        array[offset++] = vector.y;
      }
      return this;
    },
    copyVector3sArray: function(vectors) {
      const array = this.array;
      let offset = 0;
      for (let i = 0, l = vectors.length; i < l; i++) {
        let vector = vectors[i];
        if (vector === void 0) {
          console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i);
          vector = new Vector3();
        }
        array[offset++] = vector.x;
        array[offset++] = vector.y;
        array[offset++] = vector.z;
      }
      return this;
    },
    copyVector4sArray: function(vectors) {
      const array = this.array;
      let offset = 0;
      for (let i = 0, l = vectors.length; i < l; i++) {
        let vector = vectors[i];
        if (vector === void 0) {
          console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i);
          vector = new Vector4();
        }
        array[offset++] = vector.x;
        array[offset++] = vector.y;
        array[offset++] = vector.z;
        array[offset++] = vector.w;
      }
      return this;
    },
    applyMatrix3: function(m) {
      if (this.itemSize === 2) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector2$1.fromBufferAttribute(this, i);
          _vector2$1.applyMatrix3(m);
          this.setXY(i, _vector2$1.x, _vector2$1.y);
        }
      } else if (this.itemSize === 3) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector$3.fromBufferAttribute(this, i);
          _vector$3.applyMatrix3(m);
          this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
        }
      }
      return this;
    },
    applyMatrix4: function(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$3.x = this.getX(i);
        _vector$3.y = this.getY(i);
        _vector$3.z = this.getZ(i);
        _vector$3.applyMatrix4(m);
        this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
      }
      return this;
    },
    applyNormalMatrix: function(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$3.x = this.getX(i);
        _vector$3.y = this.getY(i);
        _vector$3.z = this.getZ(i);
        _vector$3.applyNormalMatrix(m);
        this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
      }
      return this;
    },
    transformDirection: function(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$3.x = this.getX(i);
        _vector$3.y = this.getY(i);
        _vector$3.z = this.getZ(i);
        _vector$3.transformDirection(m);
        this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
      }
      return this;
    },
    set: function(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    },
    getX: function(index) {
      return this.array[index * this.itemSize];
    },
    setX: function(index, x) {
      this.array[index * this.itemSize] = x;
      return this;
    },
    getY: function(index) {
      return this.array[index * this.itemSize + 1];
    },
    setY: function(index, y) {
      this.array[index * this.itemSize + 1] = y;
      return this;
    },
    getZ: function(index) {
      return this.array[index * this.itemSize + 2];
    },
    setZ: function(index, z) {
      this.array[index * this.itemSize + 2] = z;
      return this;
    },
    getW: function(index) {
      return this.array[index * this.itemSize + 3];
    },
    setW: function(index, w) {
      this.array[index * this.itemSize + 3] = w;
      return this;
    },
    setXY: function(index, x, y) {
      index *= this.itemSize;
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      return this;
    },
    setXYZ: function(index, x, y, z) {
      index *= this.itemSize;
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      return this;
    },
    setXYZW: function(index, x, y, z, w) {
      index *= this.itemSize;
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      this.array[index + 3] = w;
      return this;
    },
    onUpload: function(callback) {
      this.onUploadCallback = callback;
      return this;
    },
    clone: function() {
      return new this.constructor(this.array, this.itemSize).copy(this);
    },
    toJSON: function() {
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: Array.prototype.slice.call(this.array),
        normalized: this.normalized
      };
    }
  });
  function Int8BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Int8Array(array), itemSize, normalized);
  }
  Int8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;
  function Uint8BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);
  }
  Uint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;
  function Uint8ClampedBufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);
  }
  Uint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;
  function Int16BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Int16Array(array), itemSize, normalized);
  }
  Int16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;
  function Uint16BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);
  }
  Uint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;
  function Int32BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Int32Array(array), itemSize, normalized);
  }
  Int32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;
  function Uint32BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);
  }
  Uint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;
  function Float16BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);
  }
  Float16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Float16BufferAttribute.prototype.constructor = Float16BufferAttribute;
  Float16BufferAttribute.prototype.isFloat16BufferAttribute = true;
  function Float32BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Float32Array(array), itemSize, normalized);
  }
  Float32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;
  function Float64BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Float64Array(array), itemSize, normalized);
  }
  Float64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;
  var DirectGeometry = class {
    constructor() {
      this.vertices = [];
      this.normals = [];
      this.colors = [];
      this.uvs = [];
      this.uvs2 = [];
      this.groups = [];
      this.morphTargets = {};
      this.skinWeights = [];
      this.skinIndices = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      this.verticesNeedUpdate = false;
      this.normalsNeedUpdate = false;
      this.colorsNeedUpdate = false;
      this.uvsNeedUpdate = false;
      this.groupsNeedUpdate = false;
    }
    computeGroups(geometry) {
      const groups = [];
      let group2, i;
      let materialIndex = void 0;
      const faces = geometry.faces;
      for (i = 0; i < faces.length; i++) {
        const face = faces[i];
        if (face.materialIndex !== materialIndex) {
          materialIndex = face.materialIndex;
          if (group2 !== void 0) {
            group2.count = i * 3 - group2.start;
            groups.push(group2);
          }
          group2 = {
            start: i * 3,
            materialIndex
          };
        }
      }
      if (group2 !== void 0) {
        group2.count = i * 3 - group2.start;
        groups.push(group2);
      }
      this.groups = groups;
    }
    fromGeometry(geometry) {
      const faces = geometry.faces;
      const vertices = geometry.vertices;
      const faceVertexUvs = geometry.faceVertexUvs;
      const hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;
      const hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0;
      const morphTargets = geometry.morphTargets;
      const morphTargetsLength = morphTargets.length;
      let morphTargetsPosition;
      if (morphTargetsLength > 0) {
        morphTargetsPosition = [];
        for (let i = 0; i < morphTargetsLength; i++) {
          morphTargetsPosition[i] = {
            name: morphTargets[i].name,
            data: []
          };
        }
        this.morphTargets.position = morphTargetsPosition;
      }
      const morphNormals = geometry.morphNormals;
      const morphNormalsLength = morphNormals.length;
      let morphTargetsNormal;
      if (morphNormalsLength > 0) {
        morphTargetsNormal = [];
        for (let i = 0; i < morphNormalsLength; i++) {
          morphTargetsNormal[i] = {
            name: morphNormals[i].name,
            data: []
          };
        }
        this.morphTargets.normal = morphTargetsNormal;
      }
      const skinIndices = geometry.skinIndices;
      const skinWeights = geometry.skinWeights;
      const hasSkinIndices = skinIndices.length === vertices.length;
      const hasSkinWeights = skinWeights.length === vertices.length;
      if (vertices.length > 0 && faces.length === 0) {
        console.error("THREE.DirectGeometry: Faceless geometries are not supported.");
      }
      for (let i = 0; i < faces.length; i++) {
        const face = faces[i];
        this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);
        const vertexNormals = face.vertexNormals;
        if (vertexNormals.length === 3) {
          this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);
        } else {
          const normal = face.normal;
          this.normals.push(normal, normal, normal);
        }
        const vertexColors = face.vertexColors;
        if (vertexColors.length === 3) {
          this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);
        } else {
          const color = face.color;
          this.colors.push(color, color, color);
        }
        if (hasFaceVertexUv === true) {
          const vertexUvs = faceVertexUvs[0][i];
          if (vertexUvs !== void 0) {
            this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);
          } else {
            console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", i);
            this.uvs.push(new Vector2(), new Vector2(), new Vector2());
          }
        }
        if (hasFaceVertexUv2 === true) {
          const vertexUvs = faceVertexUvs[1][i];
          if (vertexUvs !== void 0) {
            this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);
          } else {
            console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", i);
            this.uvs2.push(new Vector2(), new Vector2(), new Vector2());
          }
        }
        for (let j = 0; j < morphTargetsLength; j++) {
          const morphTarget = morphTargets[j].vertices;
          morphTargetsPosition[j].data.push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);
        }
        for (let j = 0; j < morphNormalsLength; j++) {
          const morphNormal = morphNormals[j].vertexNormals[i];
          morphTargetsNormal[j].data.push(morphNormal.a, morphNormal.b, morphNormal.c);
        }
        if (hasSkinIndices) {
          this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);
        }
        if (hasSkinWeights) {
          this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);
        }
      }
      this.computeGroups(geometry);
      this.verticesNeedUpdate = geometry.verticesNeedUpdate;
      this.normalsNeedUpdate = geometry.normalsNeedUpdate;
      this.colorsNeedUpdate = geometry.colorsNeedUpdate;
      this.uvsNeedUpdate = geometry.uvsNeedUpdate;
      this.groupsNeedUpdate = geometry.groupsNeedUpdate;
      if (geometry.boundingSphere !== null) {
        this.boundingSphere = geometry.boundingSphere.clone();
      }
      if (geometry.boundingBox !== null) {
        this.boundingBox = geometry.boundingBox.clone();
      }
      return this;
    }
  };
  function arrayMax(array) {
    if (array.length === 0)
      return -Infinity;
    let max = array[0];
    for (let i = 1, l = array.length; i < l; ++i) {
      if (array[i] > max)
        max = array[i];
    }
    return max;
  }
  var TYPED_ARRAYS = {
    Int8Array,
    Uint8Array,
    Uint8ClampedArray: typeof Uint8ClampedArray !== "undefined" ? Uint8ClampedArray : Uint8Array,
    Int16Array,
    Uint16Array,
    Int32Array,
    Uint32Array,
    Float32Array,
    Float64Array
  };
  function getTypedArray(type, buffer) {
    return new TYPED_ARRAYS[type](buffer);
  }
  var _bufferGeometryId = 1;
  var _m1$2 = new Matrix4();
  var _obj = new Object3D();
  var _offset = new Vector3();
  var _box$2 = new Box3();
  var _boxMorphTargets = new Box3();
  var _vector$4 = new Vector3();
  function BufferGeometry() {
    Object.defineProperty(this, "id", {value: _bufferGeometryId += 2});
    this.uuid = MathUtils.generateUUID();
    this.name = "";
    this.type = "BufferGeometry";
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.morphTargetsRelative = false;
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    this.drawRange = {start: 0, count: Infinity};
    this.userData = {};
  }
  BufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
    constructor: BufferGeometry,
    isBufferGeometry: true,
    getIndex: function() {
      return this.index;
    },
    setIndex: function(index) {
      if (Array.isArray(index)) {
        this.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
      } else {
        this.index = index;
      }
      return this;
    },
    getAttribute: function(name) {
      return this.attributes[name];
    },
    setAttribute: function(name, attribute) {
      this.attributes[name] = attribute;
      return this;
    },
    deleteAttribute: function(name) {
      delete this.attributes[name];
      return this;
    },
    hasAttribute: function(name) {
      return this.attributes[name] !== void 0;
    },
    addGroup: function(start, count, materialIndex = 0) {
      this.groups.push({
        start,
        count,
        materialIndex
      });
    },
    clearGroups: function() {
      this.groups = [];
    },
    setDrawRange: function(start, count) {
      this.drawRange.start = start;
      this.drawRange.count = count;
    },
    applyMatrix4: function(matrix) {
      const position = this.attributes.position;
      if (position !== void 0) {
        position.applyMatrix4(matrix);
        position.needsUpdate = true;
      }
      const normal = this.attributes.normal;
      if (normal !== void 0) {
        const normalMatrix = new Matrix3().getNormalMatrix(matrix);
        normal.applyNormalMatrix(normalMatrix);
        normal.needsUpdate = true;
      }
      const tangent = this.attributes.tangent;
      if (tangent !== void 0) {
        tangent.transformDirection(matrix);
        tangent.needsUpdate = true;
      }
      if (this.boundingBox !== null) {
        this.computeBoundingBox();
      }
      if (this.boundingSphere !== null) {
        this.computeBoundingSphere();
      }
      return this;
    },
    rotateX: function(angle) {
      _m1$2.makeRotationX(angle);
      this.applyMatrix4(_m1$2);
      return this;
    },
    rotateY: function(angle) {
      _m1$2.makeRotationY(angle);
      this.applyMatrix4(_m1$2);
      return this;
    },
    rotateZ: function(angle) {
      _m1$2.makeRotationZ(angle);
      this.applyMatrix4(_m1$2);
      return this;
    },
    translate: function(x, y, z) {
      _m1$2.makeTranslation(x, y, z);
      this.applyMatrix4(_m1$2);
      return this;
    },
    scale: function(x, y, z) {
      _m1$2.makeScale(x, y, z);
      this.applyMatrix4(_m1$2);
      return this;
    },
    lookAt: function(vector) {
      _obj.lookAt(vector);
      _obj.updateMatrix();
      this.applyMatrix4(_obj.matrix);
      return this;
    },
    center: function() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(_offset).negate();
      this.translate(_offset.x, _offset.y, _offset.z);
      return this;
    },
    setFromObject: function(object) {
      const geometry = object.geometry;
      if (object.isPoints || object.isLine) {
        const positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);
        const colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);
        this.setAttribute("position", positions.copyVector3sArray(geometry.vertices));
        this.setAttribute("color", colors.copyColorsArray(geometry.colors));
        if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {
          const lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);
          this.setAttribute("lineDistance", lineDistances.copyArray(geometry.lineDistances));
        }
        if (geometry.boundingSphere !== null) {
          this.boundingSphere = geometry.boundingSphere.clone();
        }
        if (geometry.boundingBox !== null) {
          this.boundingBox = geometry.boundingBox.clone();
        }
      } else if (object.isMesh) {
        if (geometry && geometry.isGeometry) {
          this.fromGeometry(geometry);
        }
      }
      return this;
    },
    setFromPoints: function(points) {
      const position = [];
      for (let i = 0, l = points.length; i < l; i++) {
        const point = points[i];
        position.push(point.x, point.y, point.z || 0);
      }
      this.setAttribute("position", new Float32BufferAttribute(position, 3));
      return this;
    },
    updateFromObject: function(object) {
      let geometry = object.geometry;
      if (object.isMesh) {
        let direct = geometry.__directGeometry;
        if (geometry.elementsNeedUpdate === true) {
          direct = void 0;
          geometry.elementsNeedUpdate = false;
        }
        if (direct === void 0) {
          return this.fromGeometry(geometry);
        }
        direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
        direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
        direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
        direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
        direct.groupsNeedUpdate = geometry.groupsNeedUpdate;
        geometry.verticesNeedUpdate = false;
        geometry.normalsNeedUpdate = false;
        geometry.colorsNeedUpdate = false;
        geometry.uvsNeedUpdate = false;
        geometry.groupsNeedUpdate = false;
        geometry = direct;
      }
      if (geometry.verticesNeedUpdate === true) {
        const attribute = this.attributes.position;
        if (attribute !== void 0) {
          attribute.copyVector3sArray(geometry.vertices);
          attribute.needsUpdate = true;
        }
        geometry.verticesNeedUpdate = false;
      }
      if (geometry.normalsNeedUpdate === true) {
        const attribute = this.attributes.normal;
        if (attribute !== void 0) {
          attribute.copyVector3sArray(geometry.normals);
          attribute.needsUpdate = true;
        }
        geometry.normalsNeedUpdate = false;
      }
      if (geometry.colorsNeedUpdate === true) {
        const attribute = this.attributes.color;
        if (attribute !== void 0) {
          attribute.copyColorsArray(geometry.colors);
          attribute.needsUpdate = true;
        }
        geometry.colorsNeedUpdate = false;
      }
      if (geometry.uvsNeedUpdate) {
        const attribute = this.attributes.uv;
        if (attribute !== void 0) {
          attribute.copyVector2sArray(geometry.uvs);
          attribute.needsUpdate = true;
        }
        geometry.uvsNeedUpdate = false;
      }
      if (geometry.lineDistancesNeedUpdate) {
        const attribute = this.attributes.lineDistance;
        if (attribute !== void 0) {
          attribute.copyArray(geometry.lineDistances);
          attribute.needsUpdate = true;
        }
        geometry.lineDistancesNeedUpdate = false;
      }
      if (geometry.groupsNeedUpdate) {
        geometry.computeGroups(object.geometry);
        this.groups = geometry.groups;
        geometry.groupsNeedUpdate = false;
      }
      return this;
    },
    fromGeometry: function(geometry) {
      geometry.__directGeometry = new DirectGeometry().fromGeometry(geometry);
      return this.fromDirectGeometry(geometry.__directGeometry);
    },
    fromDirectGeometry: function(geometry) {
      const positions = new Float32Array(geometry.vertices.length * 3);
      this.setAttribute("position", new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));
      if (geometry.normals.length > 0) {
        const normals = new Float32Array(geometry.normals.length * 3);
        this.setAttribute("normal", new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));
      }
      if (geometry.colors.length > 0) {
        const colors = new Float32Array(geometry.colors.length * 3);
        this.setAttribute("color", new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));
      }
      if (geometry.uvs.length > 0) {
        const uvs = new Float32Array(geometry.uvs.length * 2);
        this.setAttribute("uv", new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));
      }
      if (geometry.uvs2.length > 0) {
        const uvs2 = new Float32Array(geometry.uvs2.length * 2);
        this.setAttribute("uv2", new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));
      }
      this.groups = geometry.groups;
      for (const name in geometry.morphTargets) {
        const array = [];
        const morphTargets = geometry.morphTargets[name];
        for (let i = 0, l = morphTargets.length; i < l; i++) {
          const morphTarget = morphTargets[i];
          const attribute = new Float32BufferAttribute(morphTarget.data.length * 3, 3);
          attribute.name = morphTarget.name;
          array.push(attribute.copyVector3sArray(morphTarget.data));
        }
        this.morphAttributes[name] = array;
      }
      if (geometry.skinIndices.length > 0) {
        const skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);
        this.setAttribute("skinIndex", skinIndices.copyVector4sArray(geometry.skinIndices));
      }
      if (geometry.skinWeights.length > 0) {
        const skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);
        this.setAttribute("skinWeight", skinWeights.copyVector4sArray(geometry.skinWeights));
      }
      if (geometry.boundingSphere !== null) {
        this.boundingSphere = geometry.boundingSphere.clone();
      }
      if (geometry.boundingBox !== null) {
        this.boundingBox = geometry.boundingBox.clone();
      }
      return this;
    },
    computeBoundingBox: function() {
      if (this.boundingBox === null) {
        this.boundingBox = new Box3();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
        this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(Infinity, Infinity, Infinity));
        return;
      }
      if (position !== void 0) {
        this.boundingBox.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            _box$2.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$4.addVectors(this.boundingBox.min, _box$2.min);
              this.boundingBox.expandByPoint(_vector$4);
              _vector$4.addVectors(this.boundingBox.max, _box$2.max);
              this.boundingBox.expandByPoint(_vector$4);
            } else {
              this.boundingBox.expandByPoint(_box$2.min);
              this.boundingBox.expandByPoint(_box$2.max);
            }
          }
        }
      } else {
        this.boundingBox.makeEmpty();
      }
      if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
      }
    },
    computeBoundingSphere: function() {
      if (this.boundingSphere === null) {
        this.boundingSphere = new Sphere();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
        this.boundingSphere.set(new Vector3(), Infinity);
        return;
      }
      if (position) {
        const center = this.boundingSphere.center;
        _box$2.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            _boxMorphTargets.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$4.addVectors(_box$2.min, _boxMorphTargets.min);
              _box$2.expandByPoint(_vector$4);
              _vector$4.addVectors(_box$2.max, _boxMorphTargets.max);
              _box$2.expandByPoint(_vector$4);
            } else {
              _box$2.expandByPoint(_boxMorphTargets.min);
              _box$2.expandByPoint(_boxMorphTargets.max);
            }
          }
        }
        _box$2.getCenter(center);
        let maxRadiusSq = 0;
        for (let i = 0, il = position.count; i < il; i++) {
          _vector$4.fromBufferAttribute(position, i);
          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));
        }
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            const morphTargetsRelative = this.morphTargetsRelative;
            for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
              _vector$4.fromBufferAttribute(morphAttribute, j);
              if (morphTargetsRelative) {
                _offset.fromBufferAttribute(position, j);
                _vector$4.add(_offset);
              }
              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));
            }
          }
        }
        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
        if (isNaN(this.boundingSphere.radius)) {
          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      }
    },
    computeFaceNormals: function() {
    },
    computeVertexNormals: function() {
      const index = this.index;
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute !== void 0) {
        let normalAttribute = this.getAttribute("normal");
        if (normalAttribute === void 0) {
          normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
          this.setAttribute("normal", normalAttribute);
        } else {
          for (let i = 0, il = normalAttribute.count; i < il; i++) {
            normalAttribute.setXYZ(i, 0, 0, 0);
          }
        }
        const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
        const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
        const cb = new Vector3(), ab = new Vector3();
        if (index) {
          for (let i = 0, il = index.count; i < il; i += 3) {
            const vA = index.getX(i + 0);
            const vB = index.getX(i + 1);
            const vC = index.getX(i + 2);
            pA.fromBufferAttribute(positionAttribute, vA);
            pB.fromBufferAttribute(positionAttribute, vB);
            pC.fromBufferAttribute(positionAttribute, vC);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            nA.fromBufferAttribute(normalAttribute, vA);
            nB.fromBufferAttribute(normalAttribute, vB);
            nC.fromBufferAttribute(normalAttribute, vC);
            nA.add(cb);
            nB.add(cb);
            nC.add(cb);
            normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
            normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
            normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
          }
        } else {
          for (let i = 0, il = positionAttribute.count; i < il; i += 3) {
            pA.fromBufferAttribute(positionAttribute, i + 0);
            pB.fromBufferAttribute(positionAttribute, i + 1);
            pC.fromBufferAttribute(positionAttribute, i + 2);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
          }
        }
        this.normalizeNormals();
        normalAttribute.needsUpdate = true;
      }
    },
    merge: function(geometry, offset) {
      if (!(geometry && geometry.isBufferGeometry)) {
        console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", geometry);
        return;
      }
      if (offset === void 0) {
        offset = 0;
        console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.");
      }
      const attributes = this.attributes;
      for (const key in attributes) {
        if (geometry.attributes[key] === void 0)
          continue;
        const attribute1 = attributes[key];
        const attributeArray1 = attribute1.array;
        const attribute2 = geometry.attributes[key];
        const attributeArray2 = attribute2.array;
        const attributeOffset = attribute2.itemSize * offset;
        const length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);
        for (let i = 0, j = attributeOffset; i < length; i++, j++) {
          attributeArray1[j] = attributeArray2[i];
        }
      }
      return this;
    },
    normalizeNormals: function() {
      const normals = this.attributes.normal;
      for (let i = 0, il = normals.count; i < il; i++) {
        _vector$4.fromBufferAttribute(normals, i);
        _vector$4.normalize();
        normals.setXYZ(i, _vector$4.x, _vector$4.y, _vector$4.z);
      }
    },
    toNonIndexed: function() {
      function convertBufferAttribute(attribute, indices2) {
        const array = attribute.array;
        const itemSize = attribute.itemSize;
        const normalized = attribute.normalized;
        const array2 = new array.constructor(indices2.length * itemSize);
        let index = 0, index2 = 0;
        for (let i = 0, l = indices2.length; i < l; i++) {
          index = indices2[i] * itemSize;
          for (let j = 0; j < itemSize; j++) {
            array2[index2++] = array[index++];
          }
        }
        return new BufferAttribute(array2, itemSize, normalized);
      }
      if (this.index === null) {
        console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.");
        return this;
      }
      const geometry2 = new BufferGeometry();
      const indices = this.index.array;
      const attributes = this.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        const newAttribute = convertBufferAttribute(attribute, indices);
        geometry2.setAttribute(name, newAttribute);
      }
      const morphAttributes = this.morphAttributes;
      for (const name in morphAttributes) {
        const morphArray = [];
        const morphAttribute = morphAttributes[name];
        for (let i = 0, il = morphAttribute.length; i < il; i++) {
          const attribute = morphAttribute[i];
          const newAttribute = convertBufferAttribute(attribute, indices);
          morphArray.push(newAttribute);
        }
        geometry2.morphAttributes[name] = morphArray;
      }
      geometry2.morphTargetsRelative = this.morphTargetsRelative;
      const groups = this.groups;
      for (let i = 0, l = groups.length; i < l; i++) {
        const group2 = groups[i];
        geometry2.addGroup(group2.start, group2.count, group2.materialIndex);
      }
      return geometry2;
    },
    toJSON: function() {
      const data = {
        metadata: {
          version: 4.5,
          type: "BufferGeometry",
          generator: "BufferGeometry.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "")
        data.name = this.name;
      if (Object.keys(this.userData).length > 0)
        data.userData = this.userData;
      if (this.parameters !== void 0) {
        const parameters = this.parameters;
        for (const key in parameters) {
          if (parameters[key] !== void 0)
            data[key] = parameters[key];
        }
        return data;
      }
      data.data = {attributes: {}};
      const index = this.index;
      if (index !== null) {
        data.data.index = {
          type: index.array.constructor.name,
          array: Array.prototype.slice.call(index.array)
        };
      }
      const attributes = this.attributes;
      for (const key in attributes) {
        const attribute = attributes[key];
        const attributeData = attribute.toJSON(data.data);
        if (attribute.name !== "")
          attributeData.name = attribute.name;
        data.data.attributes[key] = attributeData;
      }
      const morphAttributes = {};
      let hasMorphAttributes = false;
      for (const key in this.morphAttributes) {
        const attributeArray = this.morphAttributes[key];
        const array = [];
        for (let i = 0, il = attributeArray.length; i < il; i++) {
          const attribute = attributeArray[i];
          const attributeData = attribute.toJSON(data.data);
          if (attribute.name !== "")
            attributeData.name = attribute.name;
          array.push(attributeData);
        }
        if (array.length > 0) {
          morphAttributes[key] = array;
          hasMorphAttributes = true;
        }
      }
      if (hasMorphAttributes) {
        data.data.morphAttributes = morphAttributes;
        data.data.morphTargetsRelative = this.morphTargetsRelative;
      }
      const groups = this.groups;
      if (groups.length > 0) {
        data.data.groups = JSON.parse(JSON.stringify(groups));
      }
      const boundingSphere = this.boundingSphere;
      if (boundingSphere !== null) {
        data.data.boundingSphere = {
          center: boundingSphere.center.toArray(),
          radius: boundingSphere.radius
        };
      }
      return data;
    },
    clone: function() {
      return new BufferGeometry().copy(this);
    },
    copy: function(source) {
      this.index = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      const data = {};
      this.name = source.name;
      const index = source.index;
      if (index !== null) {
        this.setIndex(index.clone(data));
      }
      const attributes = source.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        this.setAttribute(name, attribute.clone(data));
      }
      const morphAttributes = source.morphAttributes;
      for (const name in morphAttributes) {
        const array = [];
        const morphAttribute = morphAttributes[name];
        for (let i = 0, l = morphAttribute.length; i < l; i++) {
          array.push(morphAttribute[i].clone(data));
        }
        this.morphAttributes[name] = array;
      }
      this.morphTargetsRelative = source.morphTargetsRelative;
      const groups = source.groups;
      for (let i = 0, l = groups.length; i < l; i++) {
        const group2 = groups[i];
        this.addGroup(group2.start, group2.count, group2.materialIndex);
      }
      const boundingBox = source.boundingBox;
      if (boundingBox !== null) {
        this.boundingBox = boundingBox.clone();
      }
      const boundingSphere = source.boundingSphere;
      if (boundingSphere !== null) {
        this.boundingSphere = boundingSphere.clone();
      }
      this.drawRange.start = source.drawRange.start;
      this.drawRange.count = source.drawRange.count;
      this.userData = source.userData;
      return this;
    },
    dispose: function() {
      this.dispatchEvent({type: "dispose"});
    }
  });
  var _inverseMatrix = new Matrix4();
  var _ray = new Ray();
  var _sphere = new Sphere();
  var _vA = new Vector3();
  var _vB = new Vector3();
  var _vC = new Vector3();
  var _tempA = new Vector3();
  var _tempB = new Vector3();
  var _tempC = new Vector3();
  var _morphA = new Vector3();
  var _morphB = new Vector3();
  var _morphC = new Vector3();
  var _uvA = new Vector2();
  var _uvB = new Vector2();
  var _uvC = new Vector2();
  var _intersectionPoint = new Vector3();
  var _intersectionPointWorld = new Vector3();
  function Mesh(geometry, material) {
    Object3D.call(this);
    this.type = "Mesh";
    this.geometry = geometry !== void 0 ? geometry : new BufferGeometry();
    this.material = material !== void 0 ? material : new MeshBasicMaterial();
    this.updateMorphTargets();
  }
  Mesh.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Mesh,
    isMesh: true,
    copy: function(source) {
      Object3D.prototype.copy.call(this, source);
      if (source.morphTargetInfluences !== void 0) {
        this.morphTargetInfluences = source.morphTargetInfluences.slice();
      }
      if (source.morphTargetDictionary !== void 0) {
        this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
      }
      this.material = source.material;
      this.geometry = source.geometry;
      return this;
    },
    updateMorphTargets: function() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
          const morphAttribute = morphAttributes[keys[0]];
          if (morphAttribute !== void 0) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
              const name = morphAttribute[m].name || String(m);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m;
            }
          }
        }
      } else {
        const morphTargets = geometry.morphTargets;
        if (morphTargets !== void 0 && morphTargets.length > 0) {
          console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
      }
    },
    raycast: function(raycaster2, intersects2) {
      const geometry = this.geometry;
      const material = this.material;
      const matrixWorld = this.matrixWorld;
      if (material === void 0)
        return;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere.copy(geometry.boundingSphere);
      _sphere.applyMatrix4(matrixWorld);
      if (raycaster2.ray.intersectsSphere(_sphere) === false)
        return;
      _inverseMatrix.copy(matrixWorld).invert();
      _ray.copy(raycaster2.ray).applyMatrix4(_inverseMatrix);
      if (geometry.boundingBox !== null) {
        if (_ray.intersectsBox(geometry.boundingBox) === false)
          return;
      }
      let intersection;
      if (geometry.isBufferGeometry) {
        const index = geometry.index;
        const position = geometry.attributes.position;
        const morphPosition = geometry.morphAttributes.position;
        const morphTargetsRelative = geometry.morphTargetsRelative;
        const uv = geometry.attributes.uv;
        const uv2 = geometry.attributes.uv2;
        const groups = geometry.groups;
        const drawRange = geometry.drawRange;
        if (index !== null) {
          if (Array.isArray(material)) {
            for (let i = 0, il = groups.length; i < il; i++) {
              const group2 = groups[i];
              const groupMaterial = material[group2.materialIndex];
              const start = Math.max(group2.start, drawRange.start);
              const end = Math.min(group2.start + group2.count, drawRange.start + drawRange.count);
              for (let j = start, jl = end; j < jl; j += 3) {
                const a = index.getX(j);
                const b = index.getX(j + 1);
                const c = index.getX(j + 2);
                intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster2, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
                if (intersection) {
                  intersection.faceIndex = Math.floor(j / 3);
                  intersection.face.materialIndex = group2.materialIndex;
                  intersects2.push(intersection);
                }
              }
            }
          } else {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(index.count, drawRange.start + drawRange.count);
            for (let i = start, il = end; i < il; i += 3) {
              const a = index.getX(i);
              const b = index.getX(i + 1);
              const c = index.getX(i + 2);
              intersection = checkBufferGeometryIntersection(this, material, raycaster2, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(i / 3);
                intersects2.push(intersection);
              }
            }
          }
        } else if (position !== void 0) {
          if (Array.isArray(material)) {
            for (let i = 0, il = groups.length; i < il; i++) {
              const group2 = groups[i];
              const groupMaterial = material[group2.materialIndex];
              const start = Math.max(group2.start, drawRange.start);
              const end = Math.min(group2.start + group2.count, drawRange.start + drawRange.count);
              for (let j = start, jl = end; j < jl; j += 3) {
                const a = j;
                const b = j + 1;
                const c = j + 2;
                intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster2, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
                if (intersection) {
                  intersection.faceIndex = Math.floor(j / 3);
                  intersection.face.materialIndex = group2.materialIndex;
                  intersects2.push(intersection);
                }
              }
            }
          } else {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(position.count, drawRange.start + drawRange.count);
            for (let i = start, il = end; i < il; i += 3) {
              const a = i;
              const b = i + 1;
              const c = i + 2;
              intersection = checkBufferGeometryIntersection(this, material, raycaster2, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(i / 3);
                intersects2.push(intersection);
              }
            }
          }
        }
      } else if (geometry.isGeometry) {
        const isMultiMaterial = Array.isArray(material);
        const vertices = geometry.vertices;
        const faces = geometry.faces;
        let uvs;
        const faceVertexUvs = geometry.faceVertexUvs[0];
        if (faceVertexUvs.length > 0)
          uvs = faceVertexUvs;
        for (let f = 0, fl = faces.length; f < fl; f++) {
          const face = faces[f];
          const faceMaterial = isMultiMaterial ? material[face.materialIndex] : material;
          if (faceMaterial === void 0)
            continue;
          const fvA = vertices[face.a];
          const fvB = vertices[face.b];
          const fvC = vertices[face.c];
          intersection = checkIntersection(this, faceMaterial, raycaster2, _ray, fvA, fvB, fvC, _intersectionPoint);
          if (intersection) {
            if (uvs && uvs[f]) {
              const uvs_f = uvs[f];
              _uvA.copy(uvs_f[0]);
              _uvB.copy(uvs_f[1]);
              _uvC.copy(uvs_f[2]);
              intersection.uv = Triangle.getUV(_intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2());
            }
            intersection.face = face;
            intersection.faceIndex = f;
            intersects2.push(intersection);
          }
        }
      }
    }
  });
  function checkIntersection(object, material, raycaster2, ray, pA, pB, pC, point) {
    let intersect;
    if (material.side === BackSide) {
      intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    } else {
      intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);
    }
    if (intersect === null)
      return null;
    _intersectionPointWorld.copy(point);
    _intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance = raycaster2.ray.origin.distanceTo(_intersectionPointWorld);
    if (distance < raycaster2.near || distance > raycaster2.far)
      return null;
    return {
      distance,
      point: _intersectionPointWorld.clone(),
      object
    };
  }
  function checkBufferGeometryIntersection(object, material, raycaster2, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {
    _vA.fromBufferAttribute(position, a);
    _vB.fromBufferAttribute(position, b);
    _vC.fromBufferAttribute(position, c);
    const morphInfluences = object.morphTargetInfluences;
    if (material.morphTargets && morphPosition && morphInfluences) {
      _morphA.set(0, 0, 0);
      _morphB.set(0, 0, 0);
      _morphC.set(0, 0, 0);
      for (let i = 0, il = morphPosition.length; i < il; i++) {
        const influence = morphInfluences[i];
        const morphAttribute = morphPosition[i];
        if (influence === 0)
          continue;
        _tempA.fromBufferAttribute(morphAttribute, a);
        _tempB.fromBufferAttribute(morphAttribute, b);
        _tempC.fromBufferAttribute(morphAttribute, c);
        if (morphTargetsRelative) {
          _morphA.addScaledVector(_tempA, influence);
          _morphB.addScaledVector(_tempB, influence);
          _morphC.addScaledVector(_tempC, influence);
        } else {
          _morphA.addScaledVector(_tempA.sub(_vA), influence);
          _morphB.addScaledVector(_tempB.sub(_vB), influence);
          _morphC.addScaledVector(_tempC.sub(_vC), influence);
        }
      }
      _vA.add(_morphA);
      _vB.add(_morphB);
      _vC.add(_morphC);
    }
    if (object.isSkinnedMesh) {
      object.boneTransform(a, _vA);
      object.boneTransform(b, _vB);
      object.boneTransform(c, _vC);
    }
    const intersection = checkIntersection(object, material, raycaster2, ray, _vA, _vB, _vC, _intersectionPoint);
    if (intersection) {
      if (uv) {
        _uvA.fromBufferAttribute(uv, a);
        _uvB.fromBufferAttribute(uv, b);
        _uvC.fromBufferAttribute(uv, c);
        intersection.uv = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());
      }
      if (uv2) {
        _uvA.fromBufferAttribute(uv2, a);
        _uvB.fromBufferAttribute(uv2, b);
        _uvC.fromBufferAttribute(uv2, c);
        intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());
      }
      const face = new Face3(a, b, c);
      Triangle.getNormal(_vA, _vB, _vC, face.normal);
      intersection.face = face;
    }
    return intersection;
  }
  var BoxBufferGeometry = class extends BufferGeometry {
    constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
      super();
      this.type = "BoxBufferGeometry";
      this.parameters = {
        width,
        height,
        depth,
        widthSegments,
        heightSegments,
        depthSegments
      };
      const scope = this;
      widthSegments = Math.floor(widthSegments);
      heightSegments = Math.floor(heightSegments);
      depthSegments = Math.floor(depthSegments);
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      let numberOfVertices = 0;
      let groupStart = 0;
      buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0);
      buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1);
      buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2);
      buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3);
      buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4);
      buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5);
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      function buildPlane(u, v, w, udir, vdir, width2, height2, depth2, gridX, gridY, materialIndex) {
        const segmentWidth = width2 / gridX;
        const segmentHeight = height2 / gridY;
        const widthHalf = width2 / 2;
        const heightHalf = height2 / 2;
        const depthHalf = depth2 / 2;
        const gridX1 = gridX + 1;
        const gridY1 = gridY + 1;
        let vertexCounter = 0;
        let groupCount = 0;
        const vector = new Vector3();
        for (let iy = 0; iy < gridY1; iy++) {
          const y = iy * segmentHeight - heightHalf;
          for (let ix = 0; ix < gridX1; ix++) {
            const x = ix * segmentWidth - widthHalf;
            vector[u] = x * udir;
            vector[v] = y * vdir;
            vector[w] = depthHalf;
            vertices.push(vector.x, vector.y, vector.z);
            vector[u] = 0;
            vector[v] = 0;
            vector[w] = depth2 > 0 ? 1 : -1;
            normals.push(vector.x, vector.y, vector.z);
            uvs.push(ix / gridX);
            uvs.push(1 - iy / gridY);
            vertexCounter += 1;
          }
        }
        for (let iy = 0; iy < gridY; iy++) {
          for (let ix = 0; ix < gridX; ix++) {
            const a = numberOfVertices + ix + gridX1 * iy;
            const b = numberOfVertices + ix + gridX1 * (iy + 1);
            const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
            const d = numberOfVertices + (ix + 1) + gridX1 * iy;
            indices.push(a, b, d);
            indices.push(b, c, d);
            groupCount += 6;
          }
        }
        scope.addGroup(groupStart, groupCount, materialIndex);
        groupStart += groupCount;
        numberOfVertices += vertexCounter;
      }
    }
  };
  function cloneUniforms(src) {
    const dst = {};
    for (const u in src) {
      dst[u] = {};
      for (const p in src[u]) {
        const property = src[u][p];
        if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture)) {
          dst[u][p] = property.clone();
        } else if (Array.isArray(property)) {
          dst[u][p] = property.slice();
        } else {
          dst[u][p] = property;
        }
      }
    }
    return dst;
  }
  function mergeUniforms(uniforms) {
    const merged = {};
    for (let u = 0; u < uniforms.length; u++) {
      const tmp2 = cloneUniforms(uniforms[u]);
      for (const p in tmp2) {
        merged[p] = tmp2[p];
      }
    }
    return merged;
  }
  var UniformsUtils = {clone: cloneUniforms, merge: mergeUniforms};
  var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
  var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
  function ShaderMaterial(parameters) {
    Material.call(this);
    this.type = "ShaderMaterial";
    this.defines = {};
    this.uniforms = {};
    this.vertexShader = default_vertex;
    this.fragmentShader = default_fragment;
    this.linewidth = 1;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.fog = false;
    this.lights = false;
    this.clipping = false;
    this.skinning = false;
    this.morphTargets = false;
    this.morphNormals = false;
    this.extensions = {
      derivatives: false,
      fragDepth: false,
      drawBuffers: false,
      shaderTextureLOD: false
    };
    this.defaultAttributeValues = {
      color: [1, 1, 1],
      uv: [0, 0],
      uv2: [0, 0]
    };
    this.index0AttributeName = void 0;
    this.uniformsNeedUpdate = false;
    this.glslVersion = null;
    if (parameters !== void 0) {
      if (parameters.attributes !== void 0) {
        console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.");
      }
      this.setValues(parameters);
    }
  }
  ShaderMaterial.prototype = Object.create(Material.prototype);
  ShaderMaterial.prototype.constructor = ShaderMaterial;
  ShaderMaterial.prototype.isShaderMaterial = true;
  ShaderMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.fragmentShader = source.fragmentShader;
    this.vertexShader = source.vertexShader;
    this.uniforms = cloneUniforms(source.uniforms);
    this.defines = Object.assign({}, source.defines);
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.lights = source.lights;
    this.clipping = source.clipping;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.morphNormals = source.morphNormals;
    this.extensions = Object.assign({}, source.extensions);
    this.glslVersion = source.glslVersion;
    return this;
  };
  ShaderMaterial.prototype.toJSON = function(meta) {
    const data = Material.prototype.toJSON.call(this, meta);
    data.glslVersion = this.glslVersion;
    data.uniforms = {};
    for (const name in this.uniforms) {
      const uniform = this.uniforms[name];
      const value = uniform.value;
      if (value && value.isTexture) {
        data.uniforms[name] = {
          type: "t",
          value: value.toJSON(meta).uuid
        };
      } else if (value && value.isColor) {
        data.uniforms[name] = {
          type: "c",
          value: value.getHex()
        };
      } else if (value && value.isVector2) {
        data.uniforms[name] = {
          type: "v2",
          value: value.toArray()
        };
      } else if (value && value.isVector3) {
        data.uniforms[name] = {
          type: "v3",
          value: value.toArray()
        };
      } else if (value && value.isVector4) {
        data.uniforms[name] = {
          type: "v4",
          value: value.toArray()
        };
      } else if (value && value.isMatrix3) {
        data.uniforms[name] = {
          type: "m3",
          value: value.toArray()
        };
      } else if (value && value.isMatrix4) {
        data.uniforms[name] = {
          type: "m4",
          value: value.toArray()
        };
      } else {
        data.uniforms[name] = {
          value
        };
      }
    }
    if (Object.keys(this.defines).length > 0)
      data.defines = this.defines;
    data.vertexShader = this.vertexShader;
    data.fragmentShader = this.fragmentShader;
    const extensions = {};
    for (const key in this.extensions) {
      if (this.extensions[key] === true)
        extensions[key] = true;
    }
    if (Object.keys(extensions).length > 0)
      data.extensions = extensions;
    return data;
  };
  function Camera() {
    Object3D.call(this);
    this.type = "Camera";
    this.matrixWorldInverse = new Matrix4();
    this.projectionMatrix = new Matrix4();
    this.projectionMatrixInverse = new Matrix4();
  }
  Camera.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Camera,
    isCamera: true,
    copy: function(source, recursive) {
      Object3D.prototype.copy.call(this, source, recursive);
      this.matrixWorldInverse.copy(source.matrixWorldInverse);
      this.projectionMatrix.copy(source.projectionMatrix);
      this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
      return this;
    },
    getWorldDirection: function(target) {
      if (target === void 0) {
        console.warn("THREE.Camera: .getWorldDirection() target is now required");
        target = new Vector3();
      }
      this.updateWorldMatrix(true, false);
      const e = this.matrixWorld.elements;
      return target.set(-e[8], -e[9], -e[10]).normalize();
    },
    updateMatrixWorld: function(force) {
      Object3D.prototype.updateMatrixWorld.call(this, force);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    },
    updateWorldMatrix: function(updateParents, updateChildren) {
      Object3D.prototype.updateWorldMatrix.call(this, updateParents, updateChildren);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    },
    clone: function() {
      return new this.constructor().copy(this);
    }
  });
  function PerspectiveCamera(fov2 = 50, aspect2 = 1, near = 0.1, far = 2e3) {
    Camera.call(this);
    this.type = "PerspectiveCamera";
    this.fov = fov2;
    this.zoom = 1;
    this.near = near;
    this.far = far;
    this.focus = 10;
    this.aspect = aspect2;
    this.view = null;
    this.filmGauge = 35;
    this.filmOffset = 0;
    this.updateProjectionMatrix();
  }
  PerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {
    constructor: PerspectiveCamera,
    isPerspectiveCamera: true,
    copy: function(source, recursive) {
      Camera.prototype.copy.call(this, source, recursive);
      this.fov = source.fov;
      this.zoom = source.zoom;
      this.near = source.near;
      this.far = source.far;
      this.focus = source.focus;
      this.aspect = source.aspect;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      this.filmGauge = source.filmGauge;
      this.filmOffset = source.filmOffset;
      return this;
    },
    setFocalLength: function(focalLength) {
      const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
      this.fov = MathUtils.RAD2DEG * 2 * Math.atan(vExtentSlope);
      this.updateProjectionMatrix();
    },
    getFocalLength: function() {
      const vExtentSlope = Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov);
      return 0.5 * this.getFilmHeight() / vExtentSlope;
    },
    getEffectiveFOV: function() {
      return MathUtils.RAD2DEG * 2 * Math.atan(Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom);
    },
    getFilmWidth: function() {
      return this.filmGauge * Math.min(this.aspect, 1);
    },
    getFilmHeight: function() {
      return this.filmGauge / Math.max(this.aspect, 1);
    },
    setViewOffset: function(fullWidth, fullHeight, x, y, width, height) {
      this.aspect = fullWidth / fullHeight;
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }
      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x;
      this.view.offsetY = y;
      this.view.width = width;
      this.view.height = height;
      this.updateProjectionMatrix();
    },
    clearViewOffset: function() {
      if (this.view !== null) {
        this.view.enabled = false;
      }
      this.updateProjectionMatrix();
    },
    updateProjectionMatrix: function() {
      const near = this.near;
      let top = near * Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom;
      let height = 2 * top;
      let width = this.aspect * height;
      let left = -0.5 * width;
      const view = this.view;
      if (this.view !== null && this.view.enabled) {
        const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
        left += view.offsetX * width / fullWidth;
        top -= view.offsetY * height / fullHeight;
        width *= view.width / fullWidth;
        height *= view.height / fullHeight;
      }
      const skew = this.filmOffset;
      if (skew !== 0)
        left += near * skew / this.getFilmWidth();
      this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    },
    toJSON: function(meta) {
      const data = Object3D.prototype.toJSON.call(this, meta);
      data.object.fov = this.fov;
      data.object.zoom = this.zoom;
      data.object.near = this.near;
      data.object.far = this.far;
      data.object.focus = this.focus;
      data.object.aspect = this.aspect;
      if (this.view !== null)
        data.object.view = Object.assign({}, this.view);
      data.object.filmGauge = this.filmGauge;
      data.object.filmOffset = this.filmOffset;
      return data;
    }
  });
  var fov = 90;
  var aspect = 1;
  function CubeCamera(near, far, renderTarget) {
    Object3D.call(this);
    this.type = "CubeCamera";
    if (renderTarget.isWebGLCubeRenderTarget !== true) {
      console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");
      return;
    }
    this.renderTarget = renderTarget;
    const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
    cameraPX.layers = this.layers;
    cameraPX.up.set(0, -1, 0);
    cameraPX.lookAt(new Vector3(1, 0, 0));
    this.add(cameraPX);
    const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
    cameraNX.layers = this.layers;
    cameraNX.up.set(0, -1, 0);
    cameraNX.lookAt(new Vector3(-1, 0, 0));
    this.add(cameraNX);
    const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
    cameraPY.layers = this.layers;
    cameraPY.up.set(0, 0, 1);
    cameraPY.lookAt(new Vector3(0, 1, 0));
    this.add(cameraPY);
    const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
    cameraNY.layers = this.layers;
    cameraNY.up.set(0, 0, -1);
    cameraNY.lookAt(new Vector3(0, -1, 0));
    this.add(cameraNY);
    const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
    cameraPZ.layers = this.layers;
    cameraPZ.up.set(0, -1, 0);
    cameraPZ.lookAt(new Vector3(0, 0, 1));
    this.add(cameraPZ);
    const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
    cameraNZ.layers = this.layers;
    cameraNZ.up.set(0, -1, 0);
    cameraNZ.lookAt(new Vector3(0, 0, -1));
    this.add(cameraNZ);
    this.update = function(renderer2, scene2) {
      if (this.parent === null)
        this.updateMatrixWorld();
      const currentXrEnabled = renderer2.xr.enabled;
      const currentRenderTarget = renderer2.getRenderTarget();
      renderer2.xr.enabled = false;
      const generateMipmaps = renderTarget.texture.generateMipmaps;
      renderTarget.texture.generateMipmaps = false;
      renderer2.setRenderTarget(renderTarget, 0);
      renderer2.render(scene2, cameraPX);
      renderer2.setRenderTarget(renderTarget, 1);
      renderer2.render(scene2, cameraNX);
      renderer2.setRenderTarget(renderTarget, 2);
      renderer2.render(scene2, cameraPY);
      renderer2.setRenderTarget(renderTarget, 3);
      renderer2.render(scene2, cameraNY);
      renderer2.setRenderTarget(renderTarget, 4);
      renderer2.render(scene2, cameraPZ);
      renderTarget.texture.generateMipmaps = generateMipmaps;
      renderer2.setRenderTarget(renderTarget, 5);
      renderer2.render(scene2, cameraNZ);
      renderer2.setRenderTarget(currentRenderTarget);
      renderer2.xr.enabled = currentXrEnabled;
    };
  }
  CubeCamera.prototype = Object.create(Object3D.prototype);
  CubeCamera.prototype.constructor = CubeCamera;
  function CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
    images = images !== void 0 ? images : [];
    mapping = mapping !== void 0 ? mapping : CubeReflectionMapping;
    format = format !== void 0 ? format : RGBFormat;
    Texture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
    this.flipY = false;
    this._needsFlipEnvMap = true;
  }
  CubeTexture.prototype = Object.create(Texture.prototype);
  CubeTexture.prototype.constructor = CubeTexture;
  CubeTexture.prototype.isCubeTexture = true;
  Object.defineProperty(CubeTexture.prototype, "images", {
    get: function() {
      return this.image;
    },
    set: function(value) {
      this.image = value;
    }
  });
  function WebGLCubeRenderTarget(size, options, dummy) {
    if (Number.isInteger(options)) {
      console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )");
      options = dummy;
    }
    WebGLRenderTarget.call(this, size, size, options);
    options = options || {};
    this.texture = new CubeTexture(void 0, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
    this.texture._needsFlipEnvMap = false;
  }
  WebGLCubeRenderTarget.prototype = Object.create(WebGLRenderTarget.prototype);
  WebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;
  WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;
  WebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function(renderer2, texture) {
    this.texture.type = texture.type;
    this.texture.format = RGBAFormat;
    this.texture.encoding = texture.encoding;
    this.texture.generateMipmaps = texture.generateMipmaps;
    this.texture.minFilter = texture.minFilter;
    this.texture.magFilter = texture.magFilter;
    const shader = {
      uniforms: {
        tEquirect: {value: null}
      },
      vertexShader: `

			varying vec3 vWorldDirection;

			vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

				return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

			}

			void main() {

				vWorldDirection = transformDirection( position, modelMatrix );

				#include <begin_vertex>
				#include <project_vertex>

			}
		`,
      fragmentShader: `

			uniform sampler2D tEquirect;

			varying vec3 vWorldDirection;

			#include <common>

			void main() {

				vec3 direction = normalize( vWorldDirection );

				vec2 sampleUV = equirectUv( direction );

				gl_FragColor = texture2D( tEquirect, sampleUV );

			}
		`
    };
    const geometry = new BoxBufferGeometry(5, 5, 5);
    const material = new ShaderMaterial({
      name: "CubemapFromEquirect",
      uniforms: cloneUniforms(shader.uniforms),
      vertexShader: shader.vertexShader,
      fragmentShader: shader.fragmentShader,
      side: BackSide,
      blending: NoBlending
    });
    material.uniforms.tEquirect.value = texture;
    const mesh = new Mesh(geometry, material);
    const currentMinFilter = texture.minFilter;
    if (texture.minFilter === LinearMipmapLinearFilter)
      texture.minFilter = LinearFilter;
    const camera2 = new CubeCamera(1, 10, this);
    camera2.update(renderer2, mesh);
    texture.minFilter = currentMinFilter;
    mesh.geometry.dispose();
    mesh.material.dispose();
    return this;
  };
  WebGLCubeRenderTarget.prototype.clear = function(renderer2, color, depth, stencil) {
    const currentRenderTarget = renderer2.getRenderTarget();
    for (let i = 0; i < 6; i++) {
      renderer2.setRenderTarget(this, i);
      renderer2.clear(color, depth, stencil);
    }
    renderer2.setRenderTarget(currentRenderTarget);
  };
  function DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
    Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
    this.image = {data: data || null, width: width || 1, height: height || 1};
    this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
    this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
    this.generateMipmaps = false;
    this.flipY = false;
    this.unpackAlignment = 1;
    this.needsUpdate = true;
  }
  DataTexture.prototype = Object.create(Texture.prototype);
  DataTexture.prototype.constructor = DataTexture;
  DataTexture.prototype.isDataTexture = true;
  var _sphere$1 = /* @__PURE__ */ new Sphere();
  var _vector$5 = /* @__PURE__ */ new Vector3();
  var Frustum = class {
    constructor(p0, p1, p2, p3, p4, p5) {
      this.planes = [
        p0 !== void 0 ? p0 : new Plane(),
        p1 !== void 0 ? p1 : new Plane(),
        p2 !== void 0 ? p2 : new Plane(),
        p3 !== void 0 ? p3 : new Plane(),
        p4 !== void 0 ? p4 : new Plane(),
        p5 !== void 0 ? p5 : new Plane()
      ];
    }
    set(p0, p1, p2, p3, p4, p5) {
      const planes = this.planes;
      planes[0].copy(p0);
      planes[1].copy(p1);
      planes[2].copy(p2);
      planes[3].copy(p3);
      planes[4].copy(p4);
      planes[5].copy(p5);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(frustum) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        planes[i].copy(frustum.planes[i]);
      }
      return this;
    }
    setFromProjectionMatrix(m) {
      const planes = this.planes;
      const me = m.elements;
      const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
      const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
      const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
      const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
      planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
      planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
      planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
      planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
      planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
      planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
      return this;
    }
    intersectsObject(object) {
      const geometry = object.geometry;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere$1.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
      return this.intersectsSphere(_sphere$1);
    }
    intersectsSprite(sprite) {
      _sphere$1.center.set(0, 0, 0);
      _sphere$1.radius = 0.7071067811865476;
      _sphere$1.applyMatrix4(sprite.matrixWorld);
      return this.intersectsSphere(_sphere$1);
    }
    intersectsSphere(sphere) {
      const planes = this.planes;
      const center = sphere.center;
      const negRadius = -sphere.radius;
      for (let i = 0; i < 6; i++) {
        const distance = planes[i].distanceToPoint(center);
        if (distance < negRadius) {
          return false;
        }
      }
      return true;
    }
    intersectsBox(box) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        const plane = planes[i];
        _vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;
        _vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;
        _vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;
        if (plane.distanceToPoint(_vector$5) < 0) {
          return false;
        }
      }
      return true;
    }
    containsPoint(point) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        if (planes[i].distanceToPoint(point) < 0) {
          return false;
        }
      }
      return true;
    }
  };
  function WebGLAnimation() {
    let context = null;
    let isAnimating = false;
    let animationLoop = null;
    let requestId = null;
    function onAnimationFrame(time, frame) {
      animationLoop(time, frame);
      requestId = context.requestAnimationFrame(onAnimationFrame);
    }
    return {
      start: function() {
        if (isAnimating === true)
          return;
        if (animationLoop === null)
          return;
        requestId = context.requestAnimationFrame(onAnimationFrame);
        isAnimating = true;
      },
      stop: function() {
        context.cancelAnimationFrame(requestId);
        isAnimating = false;
      },
      setAnimationLoop: function(callback) {
        animationLoop = callback;
      },
      setContext: function(value) {
        context = value;
      }
    };
  }
  function WebGLAttributes(gl, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    const buffers = new WeakMap();
    function createBuffer(attribute, bufferType) {
      const array = attribute.array;
      const usage = attribute.usage;
      const buffer = gl.createBuffer();
      gl.bindBuffer(bufferType, buffer);
      gl.bufferData(bufferType, array, usage);
      attribute.onUploadCallback();
      let type = 5126;
      if (array instanceof Float32Array) {
        type = 5126;
      } else if (array instanceof Float64Array) {
        console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.");
      } else if (array instanceof Uint16Array) {
        if (attribute.isFloat16BufferAttribute) {
          if (isWebGL2) {
            type = 5131;
          } else {
            console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
          }
        } else {
          type = 5123;
        }
      } else if (array instanceof Int16Array) {
        type = 5122;
      } else if (array instanceof Uint32Array) {
        type = 5125;
      } else if (array instanceof Int32Array) {
        type = 5124;
      } else if (array instanceof Int8Array) {
        type = 5120;
      } else if (array instanceof Uint8Array) {
        type = 5121;
      }
      return {
        buffer,
        type,
        bytesPerElement: array.BYTES_PER_ELEMENT,
        version: attribute.version
      };
    }
    function updateBuffer(buffer, attribute, bufferType) {
      const array = attribute.array;
      const updateRange = attribute.updateRange;
      gl.bindBuffer(bufferType, buffer);
      if (updateRange.count === -1) {
        gl.bufferSubData(bufferType, 0, array);
      } else {
        if (isWebGL2) {
          gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);
        } else {
          gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
        }
        updateRange.count = -1;
      }
    }
    function get(attribute) {
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      return buffers.get(attribute);
    }
    function remove(attribute) {
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      const data = buffers.get(attribute);
      if (data) {
        gl.deleteBuffer(data.buffer);
        buffers.delete(attribute);
      }
    }
    function update2(attribute, bufferType) {
      if (attribute.isGLBufferAttribute) {
        const cached = buffers.get(attribute);
        if (!cached || cached.version < attribute.version) {
          buffers.set(attribute, {
            buffer: attribute.buffer,
            type: attribute.type,
            bytesPerElement: attribute.elementSize,
            version: attribute.version
          });
        }
        return;
      }
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      const data = buffers.get(attribute);
      if (data === void 0) {
        buffers.set(attribute, createBuffer(attribute, bufferType));
      } else if (data.version < attribute.version) {
        updateBuffer(data.buffer, attribute, bufferType);
        data.version = attribute.version;
      }
    }
    return {
      get,
      remove,
      update: update2
    };
  }
  var PlaneBufferGeometry = class extends BufferGeometry {
    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
      super();
      this.type = "PlaneBufferGeometry";
      this.parameters = {
        width,
        height,
        widthSegments,
        heightSegments
      };
      const width_half = width / 2;
      const height_half = height / 2;
      const gridX = Math.floor(widthSegments);
      const gridY = Math.floor(heightSegments);
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      const segment_width = width / gridX;
      const segment_height = height / gridY;
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      for (let iy = 0; iy < gridY1; iy++) {
        const y = iy * segment_height - height_half;
        for (let ix = 0; ix < gridX1; ix++) {
          const x = ix * segment_width - width_half;
          vertices.push(x, -y, 0);
          normals.push(0, 0, 1);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a = ix + gridX1 * iy;
          const b = ix + gridX1 * (iy + 1);
          const c = ix + 1 + gridX1 * (iy + 1);
          const d = ix + 1 + gridX1 * iy;
          indices.push(a, b, d);
          indices.push(b, c, d);
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
  };
  var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
  var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
  var alphatest_fragment = "#ifdef ALPHATEST\n	if ( diffuseColor.a < ALPHATEST ) discard;\n#endif";
  var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n	#endif\n#endif";
  var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
  var begin_vertex = "vec3 transformed = vec3( position );";
  var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
  var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	return vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n	if( cutoffDistance > 0.0 ) {\n		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n	}\n	return distanceFalloff;\n#else\n	if( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n		return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n	}\n	return 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n	float fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n	vec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n	return Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	return 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( incidentLight.direction + viewDir );\n	float dotNL = saturate( dot( normal, incidentLight.direction ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n	return specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	vec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n	vec3 FssEss = F * brdf.x + brdf.y;\n	float Ess = brdf.x + brdf.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n	float invAlpha = 1.0 / roughness;\n	float cos2h = NoH * NoH;\n	float sin2h = max(1.0 - cos2h, 0.0078125);	return (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n	return saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n	vec3 N = geometry.normal;\n	vec3 V = geometry.viewDir;\n	vec3 H = normalize( V + L );\n	float dotNH = saturate( dot( N, H ) );\n	return specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif";
  var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 );\n		fDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
  var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif";
  var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
  var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
  var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
  var color_fragment = "#ifdef USE_COLOR\n	diffuseColor.rgb *= vColor;\n#endif";
  var color_pars_fragment = "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif";
  var color_pars_vertex = "#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";
  var color_vertex = "#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor.xyz *= color.xyz;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";
  var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	float distance = dot( planeNormal, point - pointOnPlane );\n	return - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n	return dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}";
  var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_maxMipLevel 8.0\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_maxTileSize 256.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n		vec2 f = fract( uv );\n		uv += 0.5 - f;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		if ( mipInt < cubeUV_maxMipLevel ) {\n			uv.y += 2.0 * cubeUV_maxTileSize;\n		}\n		uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n		uv *= texelSize;\n		vec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.x += texelSize;\n		vec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.y += texelSize;\n		vec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.x -= texelSize;\n		vec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		vec3 tm = mix( tl, tr, f.x );\n		vec3 bm = mix( bl, br, f.x );\n		return mix( tm, bm, f.y );\n	}\n	#define r0 1.0\n	#define v0 0.339\n	#define m0 - 2.0\n	#define r1 0.8\n	#define v1 0.276\n	#define m1 - 1.0\n	#define r4 0.4\n	#define v4 0.046\n	#define m4 2.0\n	#define r5 0.305\n	#define v5 0.016\n	#define m5 3.0\n	#define r6 0.21\n	#define v6 0.0038\n	#define m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= r1 ) {\n			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n		} else if ( roughness >= r4 ) {\n			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n		} else if ( roughness >= r5 ) {\n			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n		} else if ( roughness >= r6 ) {\n			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
  var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
  var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
  var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";
  var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
  var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
  var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
  var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n	float maxComponent = max( max( value.r, value.g ), value.b );\n	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.r, max( value.g, value.b ) );\n	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n	M = ceil( M * 255.0 ) / 255.0;\n	return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.r, max( value.g, value.b ) );\n	float D = max( maxRange / maxRGB, 1.0 );\n	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n	vec4 vResult;\n	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n	vResult.w = fract( Le );\n	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n	return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n	float Le = value.z * 255.0 + value.w;\n	vec3 Xp_Y_XYZp;\n	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n	return vec4( max( vRGB, 0.0 ), 1.0 );\n}";
  var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifndef ENVMAP_TYPE_CUBE_UV\n		envColor = envMapTexelToLinear( envColor );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
  var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform int maxMipLevel;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
  var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
  var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
  var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
  var fog_vertex = "#ifdef USE_FOG\n	fogDepth = - mvPosition.z;\n#endif";
  var fog_pars_vertex = "#ifdef USE_FOG\n	varying float fogDepth;\n#endif";
  var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
  var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float fogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
  var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return texture2D( gradientMap, coord ).rgb;\n	#else\n		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n	#endif\n}";
  var lightmap_fragment = "#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n	reflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif";
  var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
  var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n	vIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		#ifdef DOUBLE_SIDED\n			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif";
  var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n	vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	return irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		directLight.color = directionalLight.color;\n		directLight.direction = directionalLight.direction;\n		directLight.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		directLight.color = pointLight.color;\n		directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n		directLight.visible = ( directLight.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		float angleCos = dot( directLight.direction, spotLight.direction );\n		if ( angleCos > spotLight.coneCos ) {\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n			directLight.color = spotLight.color;\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n		float dotNL = dot( geometry.normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			irradiance *= PI;\n		#endif\n		return irradiance;\n	}\n#endif";
  var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n	#ifdef ENVMAP_MODE_REFRACTION\n		uniform float refractionRatio;\n	#endif\n	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n		#else\n			vec4 envMapColor = vec4( 0.0 );\n		#endif\n		return PI * envMapColor.rgb * envMapIntensity;\n	}\n	float getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n		float maxMIPLevelScalar = float( maxMIPLevel );\n		float sigma = PI * roughness * roughness / ( 1.0 + roughness );\n		float desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n	}\n	vec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( -viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n		#else\n			vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n		#endif\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n		float specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n		#endif\n		return envMapColor.rgb * envMapIntensity;\n	}\n#endif";
  var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
  var lights_toon_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )	(0)";
  var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
  var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)";
  var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheen;\n#endif";
  var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float specularRoughness;\n	vec3 specularColor;\n#ifdef CLEARCOAT\n	float clearcoat;\n	float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n	vec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n	return DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.specularRoughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	#ifdef CLEARCOAT\n		float ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = ccDotNL * directLight.color;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			ccIrradiance *= PI;\n		#endif\n		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n		reflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n	#else\n		float clearcoatDHR = 0.0;\n	#endif\n	#ifdef USE_SHEEN\n		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n			material.specularRoughness,\n			directLight.direction,\n			geometry,\n			material.sheenColor\n		);\n	#else\n		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n	#endif\n	reflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef CLEARCOAT\n		float ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n		float ccDotNL = ccDotNV;\n		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n	#else\n		float clearcoatDHR = 0.0;\n	#endif\n	float clearcoatInv = 1.0 - clearcoatDHR;\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	BRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n	reflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
  var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointDirectLightIrradiance( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
  var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	radiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n	#ifdef CLEARCOAT\n		clearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n	#endif\n#endif";
  var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
  var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
  var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
  var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";
  var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";
  var map_fragment = "#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor = mapTexelToLinear( texelColor );\n	diffuseColor *= texelColor;\n#endif";
  var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
  var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n	vec4 mapTexel = texture2D( map, uv );\n	diffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
  var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	uniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
  var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
  var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
  var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n	objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n	objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n	objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif";
  var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifndef USE_MORPHNORMALS\n		uniform float morphTargetInfluences[ 8 ];\n	#else\n		uniform float morphTargetInfluences[ 4 ];\n	#endif\n#endif";
  var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n	transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n	transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n	transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n	#ifndef USE_MORPHNORMALS\n		transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n		transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n		transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n		transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n	#endif\n#endif";
  var normal_fragment_begin = "#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#endif\n	#ifdef USE_TANGENT\n		vec3 tangent = normalize( vTangent );\n		vec3 bitangent = normalize( vBitangent );\n		#ifdef DOUBLE_SIDED\n			tangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n			bitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		#endif\n		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n			mat3 vTBN = mat3( tangent, bitangent, normal );\n		#endif\n	#endif\n#endif\nvec3 geometryNormal = normal;";
  var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	#ifdef USE_TANGENT\n		normal = normalize( vTBN * mapN );\n	#else\n		normal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n	#endif\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";
  var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		float scale = sign( st1.t * st0.s - st0.t * st1.s );\n		vec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n		vec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n		vec3 N = normalize( surf_norm );\n		mat3 tsn = mat3( S, T, N );\n		mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		return normalize( tsn * mapN );\n	}\n#endif";
  var clearcoat_normal_fragment_begin = "#ifdef CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif";
  var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	#ifdef USE_TANGENT\n		clearcoatNormal = normalize( vTBN * clearcoatMapN );\n	#else\n		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n	#endif\n#endif";
  var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif";
  var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n	return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
  var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
  var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
  var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
  var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
  var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
  var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
  var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";
  var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
  var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		vec4 shadowWorldPosition;\n	#endif\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n#endif";
  var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
  var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
  var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform highp sampler2D boneTexture;\n		uniform int boneTextureSize;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureSize ) );\n			float y = floor( j / float( boneTextureSize ) );\n			float dx = 1.0 / float( boneTextureSize );\n			float dy = 1.0 / float( boneTextureSize );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif";
  var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
  var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
  var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
  var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
  var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
  var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
  var transmissionmap_fragment = "#ifdef USE_TRANSMISSIONMAP\n	totalTransmission *= texture2D( transmissionMap, vUv ).r;\n#endif";
  var transmissionmap_pars_fragment = "#ifdef USE_TRANSMISSIONMAP\n	uniform sampler2D transmissionMap;\n#endif";
  var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n	varying vec2 vUv;\n#endif";
  var uv_pars_vertex = "#ifdef USE_UV\n	#ifdef UVS_VERTEX_ONLY\n		vec2 vUv;\n	#else\n		varying vec2 vUv;\n	#endif\n	uniform mat3 uvTransform;\n#endif";
  var uv_vertex = "#ifdef USE_UV\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
  var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif";
  var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n	uniform mat3 uv2Transform;\n#endif";
  var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";
  var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
  var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	gl_FragColor = mapTexelToLinear( texColor );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
  var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
  var cube_frag = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	vec3 vReflect = vWorldDirection;\n	#include <envmap_fragment>\n	gl_FragColor = envColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
  var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
  var depth_frag = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";
  var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
  var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
  var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
  var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	vec4 texColor = texture2D( tEquirect, sampleUV );\n	gl_FragColor = mapTexelToLinear( texColor );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
  var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
  var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
  var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
  var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n	\n		vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_ENVMAP\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
  var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	#ifdef DOUBLE_SIDED\n		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n	#else\n		reflectedLight.indirectDiffuse += vIndirectFront;\n	#endif\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n		matcapColor = matcapTexelToLinear( matcapColor );\n	#else\n		vec4 matcapColor = vec4( 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#ifndef FLAT_SHADED\n		vNormal = normalize( transformedNormal );\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
  var meshtoon_frag = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var meshtoon_vert = "#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var meshphysical_frag = "#define STANDARD\n#ifdef PHYSICAL\n	#define REFLECTIVITY\n	#define CLEARCOAT\n	#define TRANSMISSION\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSMISSION\n	uniform float transmission;\n#endif\n#ifdef REFLECTIVITY\n	uniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <transmissionmap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#ifdef TRANSMISSION\n		float totalTransmission = transmission;\n	#endif\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <transmissionmap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#ifdef TRANSMISSION\n		diffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\n	#endif\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var meshphysical_vert = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";
  var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
  var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
  var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
  var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
  var shadow_vert = "#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
  var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
  var ShaderChunk = {
    alphamap_fragment,
    alphamap_pars_fragment,
    alphatest_fragment,
    aomap_fragment,
    aomap_pars_fragment,
    begin_vertex,
    beginnormal_vertex,
    bsdfs,
    bumpmap_pars_fragment,
    clipping_planes_fragment,
    clipping_planes_pars_fragment,
    clipping_planes_pars_vertex,
    clipping_planes_vertex,
    color_fragment,
    color_pars_fragment,
    color_pars_vertex,
    color_vertex,
    common,
    cube_uv_reflection_fragment,
    defaultnormal_vertex,
    displacementmap_pars_vertex,
    displacementmap_vertex,
    emissivemap_fragment,
    emissivemap_pars_fragment,
    encodings_fragment,
    encodings_pars_fragment,
    envmap_fragment,
    envmap_common_pars_fragment,
    envmap_pars_fragment,
    envmap_pars_vertex,
    envmap_physical_pars_fragment,
    envmap_vertex,
    fog_vertex,
    fog_pars_vertex,
    fog_fragment,
    fog_pars_fragment,
    gradientmap_pars_fragment,
    lightmap_fragment,
    lightmap_pars_fragment,
    lights_lambert_vertex,
    lights_pars_begin,
    lights_toon_fragment,
    lights_toon_pars_fragment,
    lights_phong_fragment,
    lights_phong_pars_fragment,
    lights_physical_fragment,
    lights_physical_pars_fragment,
    lights_fragment_begin,
    lights_fragment_maps,
    lights_fragment_end,
    logdepthbuf_fragment,
    logdepthbuf_pars_fragment,
    logdepthbuf_pars_vertex,
    logdepthbuf_vertex,
    map_fragment,
    map_pars_fragment,
    map_particle_fragment,
    map_particle_pars_fragment,
    metalnessmap_fragment,
    metalnessmap_pars_fragment,
    morphnormal_vertex,
    morphtarget_pars_vertex,
    morphtarget_vertex,
    normal_fragment_begin,
    normal_fragment_maps,
    normalmap_pars_fragment,
    clearcoat_normal_fragment_begin,
    clearcoat_normal_fragment_maps,
    clearcoat_pars_fragment,
    packing,
    premultiplied_alpha_fragment,
    project_vertex,
    dithering_fragment,
    dithering_pars_fragment,
    roughnessmap_fragment,
    roughnessmap_pars_fragment,
    shadowmap_pars_fragment,
    shadowmap_pars_vertex,
    shadowmap_vertex,
    shadowmask_pars_fragment,
    skinbase_vertex,
    skinning_pars_vertex,
    skinning_vertex,
    skinnormal_vertex,
    specularmap_fragment,
    specularmap_pars_fragment,
    tonemapping_fragment,
    tonemapping_pars_fragment,
    transmissionmap_fragment,
    transmissionmap_pars_fragment,
    uv_pars_fragment,
    uv_pars_vertex,
    uv_vertex,
    uv2_pars_fragment,
    uv2_pars_vertex,
    uv2_vertex,
    worldpos_vertex,
    background_frag,
    background_vert,
    cube_frag,
    cube_vert,
    depth_frag,
    depth_vert,
    distanceRGBA_frag,
    distanceRGBA_vert,
    equirect_frag,
    equirect_vert,
    linedashed_frag,
    linedashed_vert,
    meshbasic_frag,
    meshbasic_vert,
    meshlambert_frag,
    meshlambert_vert,
    meshmatcap_frag,
    meshmatcap_vert,
    meshtoon_frag,
    meshtoon_vert,
    meshphong_frag,
    meshphong_vert,
    meshphysical_frag,
    meshphysical_vert,
    normal_frag,
    normal_vert,
    points_frag,
    points_vert,
    shadow_frag,
    shadow_vert,
    sprite_frag,
    sprite_vert
  };
  var UniformsLib = {
    common: {
      diffuse: {value: new Color(15658734)},
      opacity: {value: 1},
      map: {value: null},
      uvTransform: {value: new Matrix3()},
      uv2Transform: {value: new Matrix3()},
      alphaMap: {value: null}
    },
    specularmap: {
      specularMap: {value: null}
    },
    envmap: {
      envMap: {value: null},
      flipEnvMap: {value: -1},
      reflectivity: {value: 1},
      refractionRatio: {value: 0.98},
      maxMipLevel: {value: 0}
    },
    aomap: {
      aoMap: {value: null},
      aoMapIntensity: {value: 1}
    },
    lightmap: {
      lightMap: {value: null},
      lightMapIntensity: {value: 1}
    },
    emissivemap: {
      emissiveMap: {value: null}
    },
    bumpmap: {
      bumpMap: {value: null},
      bumpScale: {value: 1}
    },
    normalmap: {
      normalMap: {value: null},
      normalScale: {value: new Vector2(1, 1)}
    },
    displacementmap: {
      displacementMap: {value: null},
      displacementScale: {value: 1},
      displacementBias: {value: 0}
    },
    roughnessmap: {
      roughnessMap: {value: null}
    },
    metalnessmap: {
      metalnessMap: {value: null}
    },
    gradientmap: {
      gradientMap: {value: null}
    },
    fog: {
      fogDensity: {value: 25e-5},
      fogNear: {value: 1},
      fogFar: {value: 2e3},
      fogColor: {value: new Color(16777215)}
    },
    lights: {
      ambientLightColor: {value: []},
      lightProbe: {value: []},
      directionalLights: {value: [], properties: {
        direction: {},
        color: {}
      }},
      directionalLightShadows: {value: [], properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      }},
      directionalShadowMap: {value: []},
      directionalShadowMatrix: {value: []},
      spotLights: {value: [], properties: {
        color: {},
        position: {},
        direction: {},
        distance: {},
        coneCos: {},
        penumbraCos: {},
        decay: {}
      }},
      spotLightShadows: {value: [], properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      }},
      spotShadowMap: {value: []},
      spotShadowMatrix: {value: []},
      pointLights: {value: [], properties: {
        color: {},
        position: {},
        decay: {},
        distance: {}
      }},
      pointLightShadows: {value: [], properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {},
        shadowCameraNear: {},
        shadowCameraFar: {}
      }},
      pointShadowMap: {value: []},
      pointShadowMatrix: {value: []},
      hemisphereLights: {value: [], properties: {
        direction: {},
        skyColor: {},
        groundColor: {}
      }},
      rectAreaLights: {value: [], properties: {
        color: {},
        position: {},
        width: {},
        height: {}
      }},
      ltc_1: {value: null},
      ltc_2: {value: null}
    },
    points: {
      diffuse: {value: new Color(15658734)},
      opacity: {value: 1},
      size: {value: 1},
      scale: {value: 1},
      map: {value: null},
      alphaMap: {value: null},
      uvTransform: {value: new Matrix3()}
    },
    sprite: {
      diffuse: {value: new Color(15658734)},
      opacity: {value: 1},
      center: {value: new Vector2(0.5, 0.5)},
      rotation: {value: 0},
      map: {value: null},
      alphaMap: {value: null},
      uvTransform: {value: new Matrix3()}
    }
  };
  var ShaderLib = {
    basic: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.meshbasic_vert,
      fragmentShader: ShaderChunk.meshbasic_frag
    },
    lambert: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: {value: new Color(0)}
        }
      ]),
      vertexShader: ShaderChunk.meshlambert_vert,
      fragmentShader: ShaderChunk.meshlambert_frag
    },
    phong: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: {value: new Color(0)},
          specular: {value: new Color(1118481)},
          shininess: {value: 30}
        }
      ]),
      vertexShader: ShaderChunk.meshphong_vert,
      fragmentShader: ShaderChunk.meshphong_frag
    },
    standard: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.roughnessmap,
        UniformsLib.metalnessmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: {value: new Color(0)},
          roughness: {value: 1},
          metalness: {value: 0},
          envMapIntensity: {value: 1}
        }
      ]),
      vertexShader: ShaderChunk.meshphysical_vert,
      fragmentShader: ShaderChunk.meshphysical_frag
    },
    toon: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.gradientmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: {value: new Color(0)}
        }
      ]),
      vertexShader: ShaderChunk.meshtoon_vert,
      fragmentShader: ShaderChunk.meshtoon_frag
    },
    matcap: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        {
          matcap: {value: null}
        }
      ]),
      vertexShader: ShaderChunk.meshmatcap_vert,
      fragmentShader: ShaderChunk.meshmatcap_frag
    },
    points: {
      uniforms: mergeUniforms([
        UniformsLib.points,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.points_vert,
      fragmentShader: ShaderChunk.points_frag
    },
    dashed: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.fog,
        {
          scale: {value: 1},
          dashSize: {value: 1},
          totalSize: {value: 2}
        }
      ]),
      vertexShader: ShaderChunk.linedashed_vert,
      fragmentShader: ShaderChunk.linedashed_frag
    },
    depth: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.displacementmap
      ]),
      vertexShader: ShaderChunk.depth_vert,
      fragmentShader: ShaderChunk.depth_frag
    },
    normal: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        {
          opacity: {value: 1}
        }
      ]),
      vertexShader: ShaderChunk.normal_vert,
      fragmentShader: ShaderChunk.normal_frag
    },
    sprite: {
      uniforms: mergeUniforms([
        UniformsLib.sprite,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.sprite_vert,
      fragmentShader: ShaderChunk.sprite_frag
    },
    background: {
      uniforms: {
        uvTransform: {value: new Matrix3()},
        t2D: {value: null}
      },
      vertexShader: ShaderChunk.background_vert,
      fragmentShader: ShaderChunk.background_frag
    },
    cube: {
      uniforms: mergeUniforms([
        UniformsLib.envmap,
        {
          opacity: {value: 1}
        }
      ]),
      vertexShader: ShaderChunk.cube_vert,
      fragmentShader: ShaderChunk.cube_frag
    },
    equirect: {
      uniforms: {
        tEquirect: {value: null}
      },
      vertexShader: ShaderChunk.equirect_vert,
      fragmentShader: ShaderChunk.equirect_frag
    },
    distanceRGBA: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.displacementmap,
        {
          referencePosition: {value: new Vector3()},
          nearDistance: {value: 1},
          farDistance: {value: 1e3}
        }
      ]),
      vertexShader: ShaderChunk.distanceRGBA_vert,
      fragmentShader: ShaderChunk.distanceRGBA_frag
    },
    shadow: {
      uniforms: mergeUniforms([
        UniformsLib.lights,
        UniformsLib.fog,
        {
          color: {value: new Color(0)},
          opacity: {value: 1}
        }
      ]),
      vertexShader: ShaderChunk.shadow_vert,
      fragmentShader: ShaderChunk.shadow_frag
    }
  };
  ShaderLib.physical = {
    uniforms: mergeUniforms([
      ShaderLib.standard.uniforms,
      {
        clearcoat: {value: 0},
        clearcoatMap: {value: null},
        clearcoatRoughness: {value: 0},
        clearcoatRoughnessMap: {value: null},
        clearcoatNormalScale: {value: new Vector2(1, 1)},
        clearcoatNormalMap: {value: null},
        sheen: {value: new Color(0)},
        transmission: {value: 0},
        transmissionMap: {value: null}
      }
    ]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
  };
  function WebGLBackground(renderer2, cubemaps, state, objects, premultipliedAlpha) {
    const clearColor = new Color(0);
    let clearAlpha = 0;
    let planeMesh;
    let boxMesh;
    let currentBackground = null;
    let currentBackgroundVersion = 0;
    let currentTonemapping = null;
    function render(renderList, scene2, camera2, forceClear) {
      let background = scene2.isScene === true ? scene2.background : null;
      if (background && background.isTexture) {
        background = cubemaps.get(background);
      }
      const xr = renderer2.xr;
      const session = xr.getSession && xr.getSession();
      if (session && session.environmentBlendMode === "additive") {
        background = null;
      }
      if (background === null) {
        setClear(clearColor, clearAlpha);
      } else if (background && background.isColor) {
        setClear(background, 1);
        forceClear = true;
      }
      if (renderer2.autoClear || forceClear) {
        renderer2.clear(renderer2.autoClearColor, renderer2.autoClearDepth, renderer2.autoClearStencil);
      }
      if (background && (background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping)) {
        if (boxMesh === void 0) {
          boxMesh = new Mesh(new BoxBufferGeometry(1, 1, 1), new ShaderMaterial({
            name: "BackgroundCubeMaterial",
            uniforms: cloneUniforms(ShaderLib.cube.uniforms),
            vertexShader: ShaderLib.cube.vertexShader,
            fragmentShader: ShaderLib.cube.fragmentShader,
            side: BackSide,
            depthTest: false,
            depthWrite: false,
            fog: false
          }));
          boxMesh.geometry.deleteAttribute("normal");
          boxMesh.geometry.deleteAttribute("uv");
          boxMesh.onBeforeRender = function(renderer3, scene3, camera3) {
            this.matrixWorld.copyPosition(camera3.matrixWorld);
          };
          Object.defineProperty(boxMesh.material, "envMap", {
            get: function() {
              return this.uniforms.envMap.value;
            }
          });
          objects.update(boxMesh);
        }
        if (background.isWebGLCubeRenderTarget) {
          background = background.texture;
        }
        boxMesh.material.uniforms.envMap.value = background;
        boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;
        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer2.toneMapping) {
          boxMesh.material.needsUpdate = true;
          currentBackground = background;
          currentBackgroundVersion = background.version;
          currentTonemapping = renderer2.toneMapping;
        }
        renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
      } else if (background && background.isTexture) {
        if (planeMesh === void 0) {
          planeMesh = new Mesh(new PlaneBufferGeometry(2, 2), new ShaderMaterial({
            name: "BackgroundMaterial",
            uniforms: cloneUniforms(ShaderLib.background.uniforms),
            vertexShader: ShaderLib.background.vertexShader,
            fragmentShader: ShaderLib.background.fragmentShader,
            side: FrontSide,
            depthTest: false,
            depthWrite: false,
            fog: false
          }));
          planeMesh.geometry.deleteAttribute("normal");
          Object.defineProperty(planeMesh.material, "map", {
            get: function() {
              return this.uniforms.t2D.value;
            }
          });
          objects.update(planeMesh);
        }
        planeMesh.material.uniforms.t2D.value = background;
        if (background.matrixAutoUpdate === true) {
          background.updateMatrix();
        }
        planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer2.toneMapping) {
          planeMesh.material.needsUpdate = true;
          currentBackground = background;
          currentBackgroundVersion = background.version;
          currentTonemapping = renderer2.toneMapping;
        }
        renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
      }
    }
    function setClear(color, alpha) {
      state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);
    }
    return {
      getClearColor: function() {
        return clearColor;
      },
      setClearColor: function(color, alpha = 1) {
        clearColor.set(color);
        clearAlpha = alpha;
        setClear(clearColor, clearAlpha);
      },
      getClearAlpha: function() {
        return clearAlpha;
      },
      setClearAlpha: function(alpha) {
        clearAlpha = alpha;
        setClear(clearColor, clearAlpha);
      },
      render
    };
  }
  function WebGLBindingStates(gl, extensions, attributes, capabilities) {
    const maxVertexAttributes = gl.getParameter(34921);
    const extension = capabilities.isWebGL2 ? null : extensions.get("OES_vertex_array_object");
    const vaoAvailable = capabilities.isWebGL2 || extension !== null;
    const bindingStates = {};
    const defaultState = createBindingState(null);
    let currentState = defaultState;
    function setup(object, material, program, geometry, index) {
      let updateBuffers = false;
      if (vaoAvailable) {
        const state = getBindingState(geometry, program, material);
        if (currentState !== state) {
          currentState = state;
          bindVertexArrayObject(currentState.object);
        }
        updateBuffers = needsUpdate(geometry, index);
        if (updateBuffers)
          saveCache(geometry, index);
      } else {
        const wireframe = material.wireframe === true;
        if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
          currentState.geometry = geometry.id;
          currentState.program = program.id;
          currentState.wireframe = wireframe;
          updateBuffers = true;
        }
      }
      if (object.isInstancedMesh === true) {
        updateBuffers = true;
      }
      if (index !== null) {
        attributes.update(index, 34963);
      }
      if (updateBuffers) {
        setupVertexAttributes(object, material, program, geometry);
        if (index !== null) {
          gl.bindBuffer(34963, attributes.get(index).buffer);
        }
      }
    }
    function createVertexArrayObject() {
      if (capabilities.isWebGL2)
        return gl.createVertexArray();
      return extension.createVertexArrayOES();
    }
    function bindVertexArrayObject(vao) {
      if (capabilities.isWebGL2)
        return gl.bindVertexArray(vao);
      return extension.bindVertexArrayOES(vao);
    }
    function deleteVertexArrayObject(vao) {
      if (capabilities.isWebGL2)
        return gl.deleteVertexArray(vao);
      return extension.deleteVertexArrayOES(vao);
    }
    function getBindingState(geometry, program, material) {
      const wireframe = material.wireframe === true;
      let programMap = bindingStates[geometry.id];
      if (programMap === void 0) {
        programMap = {};
        bindingStates[geometry.id] = programMap;
      }
      let stateMap = programMap[program.id];
      if (stateMap === void 0) {
        stateMap = {};
        programMap[program.id] = stateMap;
      }
      let state = stateMap[wireframe];
      if (state === void 0) {
        state = createBindingState(createVertexArrayObject());
        stateMap[wireframe] = state;
      }
      return state;
    }
    function createBindingState(vao) {
      const newAttributes = [];
      const enabledAttributes = [];
      const attributeDivisors = [];
      for (let i = 0; i < maxVertexAttributes; i++) {
        newAttributes[i] = 0;
        enabledAttributes[i] = 0;
        attributeDivisors[i] = 0;
      }
      return {
        geometry: null,
        program: null,
        wireframe: false,
        newAttributes,
        enabledAttributes,
        attributeDivisors,
        object: vao,
        attributes: {},
        index: null
      };
    }
    function needsUpdate(geometry, index) {
      const cachedAttributes = currentState.attributes;
      const geometryAttributes = geometry.attributes;
      let attributesNum = 0;
      for (const key in geometryAttributes) {
        const cachedAttribute = cachedAttributes[key];
        const geometryAttribute = geometryAttributes[key];
        if (cachedAttribute === void 0)
          return true;
        if (cachedAttribute.attribute !== geometryAttribute)
          return true;
        if (cachedAttribute.data !== geometryAttribute.data)
          return true;
        attributesNum++;
      }
      if (currentState.attributesNum !== attributesNum)
        return true;
      if (currentState.index !== index)
        return true;
      return false;
    }
    function saveCache(geometry, index) {
      const cache = {};
      const attributes2 = geometry.attributes;
      let attributesNum = 0;
      for (const key in attributes2) {
        const attribute = attributes2[key];
        const data = {};
        data.attribute = attribute;
        if (attribute.data) {
          data.data = attribute.data;
        }
        cache[key] = data;
        attributesNum++;
      }
      currentState.attributes = cache;
      currentState.attributesNum = attributesNum;
      currentState.index = index;
    }
    function initAttributes() {
      const newAttributes = currentState.newAttributes;
      for (let i = 0, il = newAttributes.length; i < il; i++) {
        newAttributes[i] = 0;
      }
    }
    function enableAttribute(attribute) {
      enableAttributeAndDivisor(attribute, 0);
    }
    function enableAttributeAndDivisor(attribute, meshPerAttribute) {
      const newAttributes = currentState.newAttributes;
      const enabledAttributes = currentState.enabledAttributes;
      const attributeDivisors = currentState.attributeDivisors;
      newAttributes[attribute] = 1;
      if (enabledAttributes[attribute] === 0) {
        gl.enableVertexAttribArray(attribute);
        enabledAttributes[attribute] = 1;
      }
      if (attributeDivisors[attribute] !== meshPerAttribute) {
        const extension2 = capabilities.isWebGL2 ? gl : extensions.get("ANGLE_instanced_arrays");
        extension2[capabilities.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](attribute, meshPerAttribute);
        attributeDivisors[attribute] = meshPerAttribute;
      }
    }
    function disableUnusedAttributes() {
      const newAttributes = currentState.newAttributes;
      const enabledAttributes = currentState.enabledAttributes;
      for (let i = 0, il = enabledAttributes.length; i < il; i++) {
        if (enabledAttributes[i] !== newAttributes[i]) {
          gl.disableVertexAttribArray(i);
          enabledAttributes[i] = 0;
        }
      }
    }
    function vertexAttribPointer(index, size, type, normalized, stride, offset) {
      if (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) {
        gl.vertexAttribIPointer(index, size, type, stride, offset);
      } else {
        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
      }
    }
    function setupVertexAttributes(object, material, program, geometry) {
      if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
        if (extensions.get("ANGLE_instanced_arrays") === null)
          return;
      }
      initAttributes();
      const geometryAttributes = geometry.attributes;
      const programAttributes = program.getAttributes();
      const materialDefaultAttributeValues = material.defaultAttributeValues;
      for (const name in programAttributes) {
        const programAttribute = programAttributes[name];
        if (programAttribute >= 0) {
          const geometryAttribute = geometryAttributes[name];
          if (geometryAttribute !== void 0) {
            const normalized = geometryAttribute.normalized;
            const size = geometryAttribute.itemSize;
            const attribute = attributes.get(geometryAttribute);
            if (attribute === void 0)
              continue;
            const buffer = attribute.buffer;
            const type = attribute.type;
            const bytesPerElement = attribute.bytesPerElement;
            if (geometryAttribute.isInterleavedBufferAttribute) {
              const data = geometryAttribute.data;
              const stride = data.stride;
              const offset = geometryAttribute.offset;
              if (data && data.isInstancedInterleavedBuffer) {
                enableAttributeAndDivisor(programAttribute, data.meshPerAttribute);
                if (geometry._maxInstanceCount === void 0) {
                  geometry._maxInstanceCount = data.meshPerAttribute * data.count;
                }
              } else {
                enableAttribute(programAttribute);
              }
              gl.bindBuffer(34962, buffer);
              vertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);
            } else {
              if (geometryAttribute.isInstancedBufferAttribute) {
                enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);
                if (geometry._maxInstanceCount === void 0) {
                  geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
                }
              } else {
                enableAttribute(programAttribute);
              }
              gl.bindBuffer(34962, buffer);
              vertexAttribPointer(programAttribute, size, type, normalized, 0, 0);
            }
          } else if (name === "instanceMatrix") {
            const attribute = attributes.get(object.instanceMatrix);
            if (attribute === void 0)
              continue;
            const buffer = attribute.buffer;
            const type = attribute.type;
            enableAttributeAndDivisor(programAttribute + 0, 1);
            enableAttributeAndDivisor(programAttribute + 1, 1);
            enableAttributeAndDivisor(programAttribute + 2, 1);
            enableAttributeAndDivisor(programAttribute + 3, 1);
            gl.bindBuffer(34962, buffer);
            gl.vertexAttribPointer(programAttribute + 0, 4, type, false, 64, 0);
            gl.vertexAttribPointer(programAttribute + 1, 4, type, false, 64, 16);
            gl.vertexAttribPointer(programAttribute + 2, 4, type, false, 64, 32);
            gl.vertexAttribPointer(programAttribute + 3, 4, type, false, 64, 48);
          } else if (name === "instanceColor") {
            const attribute = attributes.get(object.instanceColor);
            if (attribute === void 0)
              continue;
            const buffer = attribute.buffer;
            const type = attribute.type;
            enableAttributeAndDivisor(programAttribute, 1);
            gl.bindBuffer(34962, buffer);
            gl.vertexAttribPointer(programAttribute, 3, type, false, 12, 0);
          } else if (materialDefaultAttributeValues !== void 0) {
            const value = materialDefaultAttributeValues[name];
            if (value !== void 0) {
              switch (value.length) {
                case 2:
                  gl.vertexAttrib2fv(programAttribute, value);
                  break;
                case 3:
                  gl.vertexAttrib3fv(programAttribute, value);
                  break;
                case 4:
                  gl.vertexAttrib4fv(programAttribute, value);
                  break;
                default:
                  gl.vertexAttrib1fv(programAttribute, value);
              }
            }
          }
        }
      }
      disableUnusedAttributes();
    }
    function dispose() {
      reset();
      for (const geometryId in bindingStates) {
        const programMap = bindingStates[geometryId];
        for (const programId in programMap) {
          const stateMap = programMap[programId];
          for (const wireframe in stateMap) {
            deleteVertexArrayObject(stateMap[wireframe].object);
            delete stateMap[wireframe];
          }
          delete programMap[programId];
        }
        delete bindingStates[geometryId];
      }
    }
    function releaseStatesOfGeometry(geometry) {
      if (bindingStates[geometry.id] === void 0)
        return;
      const programMap = bindingStates[geometry.id];
      for (const programId in programMap) {
        const stateMap = programMap[programId];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[programId];
      }
      delete bindingStates[geometry.id];
    }
    function releaseStatesOfProgram(program) {
      for (const geometryId in bindingStates) {
        const programMap = bindingStates[geometryId];
        if (programMap[program.id] === void 0)
          continue;
        const stateMap = programMap[program.id];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[program.id];
      }
    }
    function reset() {
      resetDefaultState();
      if (currentState === defaultState)
        return;
      currentState = defaultState;
      bindVertexArrayObject(currentState.object);
    }
    function resetDefaultState() {
      defaultState.geometry = null;
      defaultState.program = null;
      defaultState.wireframe = false;
    }
    return {
      setup,
      reset,
      resetDefaultState,
      dispose,
      releaseStatesOfGeometry,
      releaseStatesOfProgram,
      initAttributes,
      enableAttribute,
      disableUnusedAttributes
    };
  }
  function WebGLBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
      mode = value;
    }
    function render(start, count) {
      gl.drawArrays(mode, start, count);
      info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
      if (primcount === 0)
        return;
      let extension, methodName;
      if (isWebGL2) {
        extension = gl;
        methodName = "drawArraysInstanced";
      } else {
        extension = extensions.get("ANGLE_instanced_arrays");
        methodName = "drawArraysInstancedANGLE";
        if (extension === null) {
          console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
          return;
        }
      }
      extension[methodName](mode, start, count, primcount);
      info.update(count, mode, primcount);
    }
    this.setMode = setMode;
    this.render = render;
    this.renderInstances = renderInstances;
  }
  function WebGLCapabilities(gl, extensions, parameters) {
    let maxAnisotropy;
    function getMaxAnisotropy() {
      if (maxAnisotropy !== void 0)
        return maxAnisotropy;
      const extension = extensions.get("EXT_texture_filter_anisotropic");
      if (extension !== null) {
        maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
      } else {
        maxAnisotropy = 0;
      }
      return maxAnisotropy;
    }
    function getMaxPrecision(precision2) {
      if (precision2 === "highp") {
        if (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) {
          return "highp";
        }
        precision2 = "mediump";
      }
      if (precision2 === "mediump") {
        if (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) {
          return "mediump";
        }
      }
      return "lowp";
    }
    const isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== "undefined" && gl instanceof WebGL2ComputeRenderingContext;
    let precision = parameters.precision !== void 0 ? parameters.precision : "highp";
    const maxPrecision = getMaxPrecision(precision);
    if (maxPrecision !== precision) {
      console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
      precision = maxPrecision;
    }
    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
    const maxTextures = gl.getParameter(34930);
    const maxVertexTextures = gl.getParameter(35660);
    const maxTextureSize = gl.getParameter(3379);
    const maxCubemapSize = gl.getParameter(34076);
    const maxAttributes = gl.getParameter(34921);
    const maxVertexUniforms = gl.getParameter(36347);
    const maxVaryings = gl.getParameter(36348);
    const maxFragmentUniforms = gl.getParameter(36349);
    const vertexTextures = maxVertexTextures > 0;
    const floatFragmentTextures = isWebGL2 || !!extensions.get("OES_texture_float");
    const floatVertexTextures = vertexTextures && floatFragmentTextures;
    const maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;
    return {
      isWebGL2,
      getMaxAnisotropy,
      getMaxPrecision,
      precision,
      logarithmicDepthBuffer,
      maxTextures,
      maxVertexTextures,
      maxTextureSize,
      maxCubemapSize,
      maxAttributes,
      maxVertexUniforms,
      maxVaryings,
      maxFragmentUniforms,
      vertexTextures,
      floatFragmentTextures,
      floatVertexTextures,
      maxSamples
    };
  }
  function WebGLClipping(properties) {
    const scope = this;
    let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
    const plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = {value: null, needsUpdate: false};
    this.uniform = uniform;
    this.numPlanes = 0;
    this.numIntersection = 0;
    this.init = function(planes, enableLocalClipping, camera2) {
      const enabled = planes.length !== 0 || enableLocalClipping || numGlobalPlanes !== 0 || localClippingEnabled;
      localClippingEnabled = enableLocalClipping;
      globalState = projectPlanes(planes, camera2, 0);
      numGlobalPlanes = planes.length;
      return enabled;
    };
    this.beginShadows = function() {
      renderingShadows = true;
      projectPlanes(null);
    };
    this.endShadows = function() {
      renderingShadows = false;
      resetGlobalState();
    };
    this.setState = function(material, camera2, useCache) {
      const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
      const materialProperties = properties.get(material);
      if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
        if (renderingShadows) {
          projectPlanes(null);
        } else {
          resetGlobalState();
        }
      } else {
        const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
        let dstArray = materialProperties.clippingState || null;
        uniform.value = dstArray;
        dstArray = projectPlanes(planes, camera2, lGlobal, useCache);
        for (let i = 0; i !== lGlobal; ++i) {
          dstArray[i] = globalState[i];
        }
        materialProperties.clippingState = dstArray;
        this.numIntersection = clipIntersection ? this.numPlanes : 0;
        this.numPlanes += nGlobal;
      }
    };
    function resetGlobalState() {
      if (uniform.value !== globalState) {
        uniform.value = globalState;
        uniform.needsUpdate = numGlobalPlanes > 0;
      }
      scope.numPlanes = numGlobalPlanes;
      scope.numIntersection = 0;
    }
    function projectPlanes(planes, camera2, dstOffset, skipTransform) {
      const nPlanes = planes !== null ? planes.length : 0;
      let dstArray = null;
      if (nPlanes !== 0) {
        dstArray = uniform.value;
        if (skipTransform !== true || dstArray === null) {
          const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera2.matrixWorldInverse;
          viewNormalMatrix.getNormalMatrix(viewMatrix);
          if (dstArray === null || dstArray.length < flatSize) {
            dstArray = new Float32Array(flatSize);
          }
          for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
            plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
            plane.normal.toArray(dstArray, i4);
            dstArray[i4 + 3] = plane.constant;
          }
        }
        uniform.value = dstArray;
        uniform.needsUpdate = true;
      }
      scope.numPlanes = nPlanes;
      scope.numIntersection = 0;
      return dstArray;
    }
  }
  function WebGLCubeMaps(renderer2) {
    let cubemaps = new WeakMap();
    function mapTextureMapping(texture, mapping) {
      if (mapping === EquirectangularReflectionMapping) {
        texture.mapping = CubeReflectionMapping;
      } else if (mapping === EquirectangularRefractionMapping) {
        texture.mapping = CubeRefractionMapping;
      }
      return texture;
    }
    function get(texture) {
      if (texture && texture.isTexture) {
        const mapping = texture.mapping;
        if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
          if (cubemaps.has(texture)) {
            const cubemap = cubemaps.get(texture).texture;
            return mapTextureMapping(cubemap, texture.mapping);
          } else {
            const image = texture.image;
            if (image && image.height > 0) {
              const currentRenderList = renderer2.getRenderList();
              const currentRenderTarget = renderer2.getRenderTarget();
              const currentRenderState = renderer2.getRenderState();
              const renderTarget = new WebGLCubeRenderTarget(image.height / 2);
              renderTarget.fromEquirectangularTexture(renderer2, texture);
              cubemaps.set(texture, renderTarget);
              renderer2.setRenderTarget(currentRenderTarget);
              renderer2.setRenderList(currentRenderList);
              renderer2.setRenderState(currentRenderState);
              texture.addEventListener("dispose", onTextureDispose);
              return mapTextureMapping(renderTarget.texture, texture.mapping);
            } else {
              return null;
            }
          }
        }
      }
      return texture;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      const cubemap = cubemaps.get(texture);
      if (cubemap !== void 0) {
        cubemaps.delete(texture);
        cubemap.dispose();
      }
    }
    function dispose() {
      cubemaps = new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  function WebGLExtensions(gl) {
    const extensions = {};
    return {
      has: function(name) {
        if (extensions[name] !== void 0) {
          return extensions[name] !== null;
        }
        let extension;
        switch (name) {
          case "WEBGL_depth_texture":
            extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
            break;
          case "EXT_texture_filter_anisotropic":
            extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
            break;
          case "WEBGL_compressed_texture_s3tc":
            extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
            break;
          case "WEBGL_compressed_texture_pvrtc":
            extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
            break;
          default:
            extension = gl.getExtension(name);
        }
        extensions[name] = extension;
        return extension !== null;
      },
      get: function(name) {
        if (!this.has(name)) {
          console.warn("THREE.WebGLRenderer: " + name + " extension not supported.");
        }
        return extensions[name];
      }
    };
  }
  function WebGLGeometries(gl, attributes, info, bindingStates) {
    const geometries = new WeakMap();
    const wireframeAttributes = new WeakMap();
    function onGeometryDispose(event) {
      const geometry = event.target;
      const buffergeometry = geometries.get(geometry);
      if (buffergeometry.index !== null) {
        attributes.remove(buffergeometry.index);
      }
      for (const name in buffergeometry.attributes) {
        attributes.remove(buffergeometry.attributes[name]);
      }
      geometry.removeEventListener("dispose", onGeometryDispose);
      geometries.delete(geometry);
      const attribute = wireframeAttributes.get(buffergeometry);
      if (attribute) {
        attributes.remove(attribute);
        wireframeAttributes.delete(buffergeometry);
      }
      bindingStates.releaseStatesOfGeometry(buffergeometry);
      if (geometry.isInstancedBufferGeometry === true) {
        delete geometry._maxInstanceCount;
      }
      info.memory.geometries--;
    }
    function get(object, geometry) {
      let buffergeometry = geometries.get(geometry);
      if (buffergeometry)
        return buffergeometry;
      geometry.addEventListener("dispose", onGeometryDispose);
      if (geometry.isBufferGeometry) {
        buffergeometry = geometry;
      } else if (geometry.isGeometry) {
        if (geometry._bufferGeometry === void 0) {
          geometry._bufferGeometry = new BufferGeometry().setFromObject(object);
        }
        buffergeometry = geometry._bufferGeometry;
      }
      geometries.set(geometry, buffergeometry);
      info.memory.geometries++;
      return buffergeometry;
    }
    function update2(geometry) {
      const geometryAttributes = geometry.attributes;
      for (const name in geometryAttributes) {
        attributes.update(geometryAttributes[name], 34962);
      }
      const morphAttributes = geometry.morphAttributes;
      for (const name in morphAttributes) {
        const array = morphAttributes[name];
        for (let i = 0, l = array.length; i < l; i++) {
          attributes.update(array[i], 34962);
        }
      }
    }
    function updateWireframeAttribute(geometry) {
      const indices = [];
      const geometryIndex = geometry.index;
      const geometryPosition = geometry.attributes.position;
      let version = 0;
      if (geometryIndex !== null) {
        const array = geometryIndex.array;
        version = geometryIndex.version;
        for (let i = 0, l = array.length; i < l; i += 3) {
          const a = array[i + 0];
          const b = array[i + 1];
          const c = array[i + 2];
          indices.push(a, b, b, c, c, a);
        }
      } else {
        const array = geometryPosition.array;
        version = geometryPosition.version;
        for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {
          const a = i + 0;
          const b = i + 1;
          const c = i + 2;
          indices.push(a, b, b, c, c, a);
        }
      }
      const attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
      attribute.version = version;
      const previousAttribute = wireframeAttributes.get(geometry);
      if (previousAttribute)
        attributes.remove(previousAttribute);
      wireframeAttributes.set(geometry, attribute);
    }
    function getWireframeAttribute(geometry) {
      const currentAttribute = wireframeAttributes.get(geometry);
      if (currentAttribute) {
        const geometryIndex = geometry.index;
        if (geometryIndex !== null) {
          if (currentAttribute.version < geometryIndex.version) {
            updateWireframeAttribute(geometry);
          }
        }
      } else {
        updateWireframeAttribute(geometry);
      }
      return wireframeAttributes.get(geometry);
    }
    return {
      get,
      update: update2,
      getWireframeAttribute
    };
  }
  function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
      mode = value;
    }
    let type, bytesPerElement;
    function setIndex(value) {
      type = value.type;
      bytesPerElement = value.bytesPerElement;
    }
    function render(start, count) {
      gl.drawElements(mode, count, type, start * bytesPerElement);
      info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
      if (primcount === 0)
        return;
      let extension, methodName;
      if (isWebGL2) {
        extension = gl;
        methodName = "drawElementsInstanced";
      } else {
        extension = extensions.get("ANGLE_instanced_arrays");
        methodName = "drawElementsInstancedANGLE";
        if (extension === null) {
          console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
          return;
        }
      }
      extension[methodName](mode, count, type, start * bytesPerElement, primcount);
      info.update(count, mode, primcount);
    }
    this.setMode = setMode;
    this.setIndex = setIndex;
    this.render = render;
    this.renderInstances = renderInstances;
  }
  function WebGLInfo(gl) {
    const memory = {
      geometries: 0,
      textures: 0
    };
    const render = {
      frame: 0,
      calls: 0,
      triangles: 0,
      points: 0,
      lines: 0
    };
    function update2(count, mode, instanceCount) {
      render.calls++;
      switch (mode) {
        case 4:
          render.triangles += instanceCount * (count / 3);
          break;
        case 1:
          render.lines += instanceCount * (count / 2);
          break;
        case 3:
          render.lines += instanceCount * (count - 1);
          break;
        case 2:
          render.lines += instanceCount * count;
          break;
        case 0:
          render.points += instanceCount * count;
          break;
        default:
          console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
          break;
      }
    }
    function reset() {
      render.frame++;
      render.calls = 0;
      render.triangles = 0;
      render.points = 0;
      render.lines = 0;
    }
    return {
      memory,
      render,
      programs: null,
      autoReset: true,
      reset,
      update: update2
    };
  }
  function numericalSort(a, b) {
    return a[0] - b[0];
  }
  function absNumericalSort(a, b) {
    return Math.abs(b[1]) - Math.abs(a[1]);
  }
  function WebGLMorphtargets(gl) {
    const influencesList = {};
    const morphInfluences = new Float32Array(8);
    const workInfluences = [];
    for (let i = 0; i < 8; i++) {
      workInfluences[i] = [i, 0];
    }
    function update2(object, geometry, material, program) {
      const objectInfluences = object.morphTargetInfluences;
      const length = objectInfluences === void 0 ? 0 : objectInfluences.length;
      let influences = influencesList[geometry.id];
      if (influences === void 0) {
        influences = [];
        for (let i = 0; i < length; i++) {
          influences[i] = [i, 0];
        }
        influencesList[geometry.id] = influences;
      }
      for (let i = 0; i < length; i++) {
        const influence = influences[i];
        influence[0] = i;
        influence[1] = objectInfluences[i];
      }
      influences.sort(absNumericalSort);
      for (let i = 0; i < 8; i++) {
        if (i < length && influences[i][1]) {
          workInfluences[i][0] = influences[i][0];
          workInfluences[i][1] = influences[i][1];
        } else {
          workInfluences[i][0] = Number.MAX_SAFE_INTEGER;
          workInfluences[i][1] = 0;
        }
      }
      workInfluences.sort(numericalSort);
      const morphTargets = material.morphTargets && geometry.morphAttributes.position;
      const morphNormals = material.morphNormals && geometry.morphAttributes.normal;
      let morphInfluencesSum = 0;
      for (let i = 0; i < 8; i++) {
        const influence = workInfluences[i];
        const index = influence[0];
        const value = influence[1];
        if (index !== Number.MAX_SAFE_INTEGER && value) {
          if (morphTargets && geometry.getAttribute("morphTarget" + i) !== morphTargets[index]) {
            geometry.setAttribute("morphTarget" + i, morphTargets[index]);
          }
          if (morphNormals && geometry.getAttribute("morphNormal" + i) !== morphNormals[index]) {
            geometry.setAttribute("morphNormal" + i, morphNormals[index]);
          }
          morphInfluences[i] = value;
          morphInfluencesSum += value;
        } else {
          if (morphTargets && geometry.hasAttribute("morphTarget" + i) === true) {
            geometry.deleteAttribute("morphTarget" + i);
          }
          if (morphNormals && geometry.hasAttribute("morphNormal" + i) === true) {
            geometry.deleteAttribute("morphNormal" + i);
          }
          morphInfluences[i] = 0;
        }
      }
      const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
      program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
      program.getUniforms().setValue(gl, "morphTargetInfluences", morphInfluences);
    }
    return {
      update: update2
    };
  }
  function WebGLObjects(gl, geometries, attributes, info) {
    let updateMap = new WeakMap();
    function update2(object) {
      const frame = info.render.frame;
      const geometry = object.geometry;
      const buffergeometry = geometries.get(object, geometry);
      if (updateMap.get(buffergeometry) !== frame) {
        if (geometry.isGeometry) {
          buffergeometry.updateFromObject(object);
        }
        geometries.update(buffergeometry);
        updateMap.set(buffergeometry, frame);
      }
      if (object.isInstancedMesh) {
        attributes.update(object.instanceMatrix, 34962);
        if (object.instanceColor !== null) {
          attributes.update(object.instanceColor, 34962);
        }
      }
      return buffergeometry;
    }
    function dispose() {
      updateMap = new WeakMap();
    }
    return {
      update: update2,
      dispose
    };
  }
  function DataTexture2DArray(data = null, width = 1, height = 1, depth = 1) {
    Texture.call(this, null);
    this.image = {data, width, height, depth};
    this.magFilter = NearestFilter;
    this.minFilter = NearestFilter;
    this.wrapR = ClampToEdgeWrapping;
    this.generateMipmaps = false;
    this.flipY = false;
    this.needsUpdate = true;
  }
  DataTexture2DArray.prototype = Object.create(Texture.prototype);
  DataTexture2DArray.prototype.constructor = DataTexture2DArray;
  DataTexture2DArray.prototype.isDataTexture2DArray = true;
  function DataTexture3D(data = null, width = 1, height = 1, depth = 1) {
    Texture.call(this, null);
    this.image = {data, width, height, depth};
    this.magFilter = NearestFilter;
    this.minFilter = NearestFilter;
    this.wrapR = ClampToEdgeWrapping;
    this.generateMipmaps = false;
    this.flipY = false;
    this.needsUpdate = true;
  }
  DataTexture3D.prototype = Object.create(Texture.prototype);
  DataTexture3D.prototype.constructor = DataTexture3D;
  DataTexture3D.prototype.isDataTexture3D = true;
  var emptyTexture = new Texture();
  var emptyTexture2dArray = new DataTexture2DArray();
  var emptyTexture3d = new DataTexture3D();
  var emptyCubeTexture = new CubeTexture();
  var arrayCacheF32 = [];
  var arrayCacheI32 = [];
  var mat4array = new Float32Array(16);
  var mat3array = new Float32Array(9);
  var mat2array = new Float32Array(4);
  function flatten(array, nBlocks, blockSize) {
    const firstElem = array[0];
    if (firstElem <= 0 || firstElem > 0)
      return array;
    const n = nBlocks * blockSize;
    let r = arrayCacheF32[n];
    if (r === void 0) {
      r = new Float32Array(n);
      arrayCacheF32[n] = r;
    }
    if (nBlocks !== 0) {
      firstElem.toArray(r, 0);
      for (let i = 1, offset = 0; i !== nBlocks; ++i) {
        offset += blockSize;
        array[i].toArray(r, offset);
      }
    }
    return r;
  }
  function arraysEqual(a, b) {
    if (a.length !== b.length)
      return false;
    for (let i = 0, l = a.length; i < l; i++) {
      if (a[i] !== b[i])
        return false;
    }
    return true;
  }
  function copyArray(a, b) {
    for (let i = 0, l = b.length; i < l; i++) {
      a[i] = b[i];
    }
  }
  function allocTexUnits(textures, n) {
    let r = arrayCacheI32[n];
    if (r === void 0) {
      r = new Int32Array(n);
      arrayCacheI32[n] = r;
    }
    for (let i = 0; i !== n; ++i) {
      r[i] = textures.allocateTextureUnit();
    }
    return r;
  }
  function setValueV1f(gl, v) {
    const cache = this.cache;
    if (cache[0] === v)
      return;
    gl.uniform1f(this.addr, v);
    cache[0] = v;
  }
  function setValueV2f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y) {
        gl.uniform2f(this.addr, v.x, v.y);
        cache[0] = v.x;
        cache[1] = v.y;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform2fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV3f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
        gl.uniform3f(this.addr, v.x, v.y, v.z);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
      }
    } else if (v.r !== void 0) {
      if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
        gl.uniform3f(this.addr, v.r, v.g, v.b);
        cache[0] = v.r;
        cache[1] = v.g;
        cache[2] = v.b;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform3fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV4f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
        gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
        cache[3] = v.w;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform4fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueM2(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v))
        return;
      gl.uniformMatrix2fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat2array.set(elements);
      gl.uniformMatrix2fv(this.addr, false, mat2array);
      copyArray(cache, elements);
    }
  }
  function setValueM3(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v))
        return;
      gl.uniformMatrix3fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat3array.set(elements);
      gl.uniformMatrix3fv(this.addr, false, mat3array);
      copyArray(cache, elements);
    }
  }
  function setValueM4(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v))
        return;
      gl.uniformMatrix4fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat4array.set(elements);
      gl.uniformMatrix4fv(this.addr, false, mat4array);
      copyArray(cache, elements);
    }
  }
  function setValueT1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.safeSetTexture2D(v || emptyTexture, unit);
  }
  function setValueT2DArray1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTexture2DArray(v || emptyTexture2dArray, unit);
  }
  function setValueT3D1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTexture3D(v || emptyTexture3d, unit);
  }
  function setValueT6(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.safeSetTextureCube(v || emptyCubeTexture, unit);
  }
  function setValueV1i(gl, v) {
    const cache = this.cache;
    if (cache[0] === v)
      return;
    gl.uniform1i(this.addr, v);
    cache[0] = v;
  }
  function setValueV2i(gl, v) {
    const cache = this.cache;
    if (arraysEqual(cache, v))
      return;
    gl.uniform2iv(this.addr, v);
    copyArray(cache, v);
  }
  function setValueV3i(gl, v) {
    const cache = this.cache;
    if (arraysEqual(cache, v))
      return;
    gl.uniform3iv(this.addr, v);
    copyArray(cache, v);
  }
  function setValueV4i(gl, v) {
    const cache = this.cache;
    if (arraysEqual(cache, v))
      return;
    gl.uniform4iv(this.addr, v);
    copyArray(cache, v);
  }
  function setValueV1ui(gl, v) {
    const cache = this.cache;
    if (cache[0] === v)
      return;
    gl.uniform1ui(this.addr, v);
    cache[0] = v;
  }
  function getSingularSetter(type) {
    switch (type) {
      case 5126:
        return setValueV1f;
      case 35664:
        return setValueV2f;
      case 35665:
        return setValueV3f;
      case 35666:
        return setValueV4f;
      case 35674:
        return setValueM2;
      case 35675:
        return setValueM3;
      case 35676:
        return setValueM4;
      case 5124:
      case 35670:
        return setValueV1i;
      case 35667:
      case 35671:
        return setValueV2i;
      case 35668:
      case 35672:
        return setValueV3i;
      case 35669:
      case 35673:
        return setValueV4i;
      case 5125:
        return setValueV1ui;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return setValueT1;
      case 35679:
      case 36299:
      case 36307:
        return setValueT3D1;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return setValueT6;
      case 36289:
      case 36303:
      case 36311:
      case 36292:
        return setValueT2DArray1;
    }
  }
  function setValueV1fArray(gl, v) {
    gl.uniform1fv(this.addr, v);
  }
  function setValueV1iArray(gl, v) {
    gl.uniform1iv(this.addr, v);
  }
  function setValueV2iArray(gl, v) {
    gl.uniform2iv(this.addr, v);
  }
  function setValueV3iArray(gl, v) {
    gl.uniform3iv(this.addr, v);
  }
  function setValueV4iArray(gl, v) {
    gl.uniform4iv(this.addr, v);
  }
  function setValueV2fArray(gl, v) {
    const data = flatten(v, this.size, 2);
    gl.uniform2fv(this.addr, data);
  }
  function setValueV3fArray(gl, v) {
    const data = flatten(v, this.size, 3);
    gl.uniform3fv(this.addr, data);
  }
  function setValueV4fArray(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniform4fv(this.addr, data);
  }
  function setValueM2Array(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniformMatrix2fv(this.addr, false, data);
  }
  function setValueM3Array(gl, v) {
    const data = flatten(v, this.size, 9);
    gl.uniformMatrix3fv(this.addr, false, data);
  }
  function setValueM4Array(gl, v) {
    const data = flatten(v, this.size, 16);
    gl.uniformMatrix4fv(this.addr, false, data);
  }
  function setValueT1Array(gl, v, textures) {
    const n = v.length;
    const units = allocTexUnits(textures, n);
    gl.uniform1iv(this.addr, units);
    for (let i = 0; i !== n; ++i) {
      textures.safeSetTexture2D(v[i] || emptyTexture, units[i]);
    }
  }
  function setValueT6Array(gl, v, textures) {
    const n = v.length;
    const units = allocTexUnits(textures, n);
    gl.uniform1iv(this.addr, units);
    for (let i = 0; i !== n; ++i) {
      textures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);
    }
  }
  function getPureArraySetter(type) {
    switch (type) {
      case 5126:
        return setValueV1fArray;
      case 35664:
        return setValueV2fArray;
      case 35665:
        return setValueV3fArray;
      case 35666:
        return setValueV4fArray;
      case 35674:
        return setValueM2Array;
      case 35675:
        return setValueM3Array;
      case 35676:
        return setValueM4Array;
      case 5124:
      case 35670:
        return setValueV1iArray;
      case 35667:
      case 35671:
        return setValueV2iArray;
      case 35668:
      case 35672:
        return setValueV3iArray;
      case 35669:
      case 35673:
        return setValueV4iArray;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return setValueT1Array;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return setValueT6Array;
    }
  }
  function SingleUniform(id, activeInfo, addr) {
    this.id = id;
    this.addr = addr;
    this.cache = [];
    this.setValue = getSingularSetter(activeInfo.type);
  }
  function PureArrayUniform(id, activeInfo, addr) {
    this.id = id;
    this.addr = addr;
    this.cache = [];
    this.size = activeInfo.size;
    this.setValue = getPureArraySetter(activeInfo.type);
  }
  PureArrayUniform.prototype.updateCache = function(data) {
    const cache = this.cache;
    if (data instanceof Float32Array && cache.length !== data.length) {
      this.cache = new Float32Array(data.length);
    }
    copyArray(cache, data);
  };
  function StructuredUniform(id) {
    this.id = id;
    this.seq = [];
    this.map = {};
  }
  StructuredUniform.prototype.setValue = function(gl, value, textures) {
    const seq = this.seq;
    for (let i = 0, n = seq.length; i !== n; ++i) {
      const u = seq[i];
      u.setValue(gl, value[u.id], textures);
    }
  };
  var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;
  function addUniform(container2, uniformObject) {
    container2.seq.push(uniformObject);
    container2.map[uniformObject.id] = uniformObject;
  }
  function parseUniform(activeInfo, addr, container2) {
    const path = activeInfo.name, pathLength = path.length;
    RePathPart.lastIndex = 0;
    while (true) {
      const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
      let id = match[1];
      const idIsIndex = match[2] === "]", subscript = match[3];
      if (idIsIndex)
        id = id | 0;
      if (subscript === void 0 || subscript === "[" && matchEnd + 2 === pathLength) {
        addUniform(container2, subscript === void 0 ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
        break;
      } else {
        const map = container2.map;
        let next = map[id];
        if (next === void 0) {
          next = new StructuredUniform(id);
          addUniform(container2, next);
        }
        container2 = next;
      }
    }
  }
  function WebGLUniforms(gl, program) {
    this.seq = [];
    this.map = {};
    const n = gl.getProgramParameter(program, 35718);
    for (let i = 0; i < n; ++i) {
      const info = gl.getActiveUniform(program, i), addr = gl.getUniformLocation(program, info.name);
      parseUniform(info, addr, this);
    }
  }
  WebGLUniforms.prototype.setValue = function(gl, name, value, textures) {
    const u = this.map[name];
    if (u !== void 0)
      u.setValue(gl, value, textures);
  };
  WebGLUniforms.prototype.setOptional = function(gl, object, name) {
    const v = object[name];
    if (v !== void 0)
      this.setValue(gl, name, v);
  };
  WebGLUniforms.upload = function(gl, seq, values, textures) {
    for (let i = 0, n = seq.length; i !== n; ++i) {
      const u = seq[i], v = values[u.id];
      if (v.needsUpdate !== false) {
        u.setValue(gl, v.value, textures);
      }
    }
  };
  WebGLUniforms.seqWithValue = function(seq, values) {
    const r = [];
    for (let i = 0, n = seq.length; i !== n; ++i) {
      const u = seq[i];
      if (u.id in values)
        r.push(u);
    }
    return r;
  };
  function WebGLShader(gl, type, string) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, string);
    gl.compileShader(shader);
    return shader;
  }
  var programIdCount = 0;
  function addLineNumbers(string) {
    const lines = string.split("\n");
    for (let i = 0; i < lines.length; i++) {
      lines[i] = i + 1 + ": " + lines[i];
    }
    return lines.join("\n");
  }
  function getEncodingComponents(encoding) {
    switch (encoding) {
      case LinearEncoding:
        return ["Linear", "( value )"];
      case sRGBEncoding:
        return ["sRGB", "( value )"];
      case RGBEEncoding:
        return ["RGBE", "( value )"];
      case RGBM7Encoding:
        return ["RGBM", "( value, 7.0 )"];
      case RGBM16Encoding:
        return ["RGBM", "( value, 16.0 )"];
      case RGBDEncoding:
        return ["RGBD", "( value, 256.0 )"];
      case GammaEncoding:
        return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
      case LogLuvEncoding:
        return ["LogLuv", "( value )"];
      default:
        console.warn("THREE.WebGLProgram: Unsupported encoding:", encoding);
        return ["Linear", "( value )"];
    }
  }
  function getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, 35713);
    const log = gl.getShaderInfoLog(shader).trim();
    if (status && log === "")
      return "";
    const source = gl.getShaderSource(shader);
    return "THREE.WebGLShader: gl.getShaderInfoLog() " + type + "\n" + log + addLineNumbers(source);
  }
  function getTexelDecodingFunction(functionName, encoding) {
    const components = getEncodingComponents(encoding);
    return "vec4 " + functionName + "( vec4 value ) { return " + components[0] + "ToLinear" + components[1] + "; }";
  }
  function getTexelEncodingFunction(functionName, encoding) {
    const components = getEncodingComponents(encoding);
    return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[0] + components[1] + "; }";
  }
  function getToneMappingFunction(functionName, toneMapping) {
    let toneMappingName;
    switch (toneMapping) {
      case LinearToneMapping:
        toneMappingName = "Linear";
        break;
      case ReinhardToneMapping:
        toneMappingName = "Reinhard";
        break;
      case CineonToneMapping:
        toneMappingName = "OptimizedCineon";
        break;
      case ACESFilmicToneMapping:
        toneMappingName = "ACESFilmic";
        break;
      case CustomToneMapping:
        toneMappingName = "Custom";
        break;
      default:
        console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
        toneMappingName = "Linear";
    }
    return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
  }
  function generateExtensions(parameters) {
    const chunks = [
      parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
      (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
      parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
      (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
    ];
    return chunks.filter(filterEmptyLine).join("\n");
  }
  function generateDefines(defines) {
    const chunks = [];
    for (const name in defines) {
      const value = defines[name];
      if (value === false)
        continue;
      chunks.push("#define " + name + " " + value);
    }
    return chunks.join("\n");
  }
  function fetchAttributeLocations(gl, program) {
    const attributes = {};
    const n = gl.getProgramParameter(program, 35721);
    for (let i = 0; i < n; i++) {
      const info = gl.getActiveAttrib(program, i);
      const name = info.name;
      attributes[name] = gl.getAttribLocation(program, name);
    }
    return attributes;
  }
  function filterEmptyLine(string) {
    return string !== "";
  }
  function replaceLightNums(string, parameters) {
    return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
  }
  function replaceClippingPlaneNums(string, parameters) {
    return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
  }
  var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
  function resolveIncludes(string) {
    return string.replace(includePattern, includeReplacer);
  }
  function includeReplacer(match, include) {
    const string = ShaderChunk[include];
    if (string === void 0) {
      throw new Error("Can not resolve #include <" + include + ">");
    }
    return resolveIncludes(string);
  }
  var deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
  var unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
  function unrollLoops(string) {
    return string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);
  }
  function deprecatedLoopReplacer(match, start, end, snippet) {
    console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.");
    return loopReplacer(match, start, end, snippet);
  }
  function loopReplacer(match, start, end, snippet) {
    let string = "";
    for (let i = parseInt(start); i < parseInt(end); i++) {
      string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i + " ]").replace(/UNROLLED_LOOP_INDEX/g, i);
    }
    return string;
  }
  function generatePrecision(parameters) {
    let precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";
    if (parameters.precision === "highp") {
      precisionstring += "\n#define HIGH_PRECISION";
    } else if (parameters.precision === "mediump") {
      precisionstring += "\n#define MEDIUM_PRECISION";
    } else if (parameters.precision === "lowp") {
      precisionstring += "\n#define LOW_PRECISION";
    }
    return precisionstring;
  }
  function generateShadowMapTypeDefine(parameters) {
    let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
    if (parameters.shadowMapType === PCFShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
    } else if (parameters.shadowMapType === PCFSoftShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
    } else if (parameters.shadowMapType === VSMShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
    }
    return shadowMapTypeDefine;
  }
  function generateEnvMapTypeDefine(parameters) {
    let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
    if (parameters.envMap) {
      switch (parameters.envMapMode) {
        case CubeReflectionMapping:
        case CubeRefractionMapping:
          envMapTypeDefine = "ENVMAP_TYPE_CUBE";
          break;
        case CubeUVReflectionMapping:
        case CubeUVRefractionMapping:
          envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
          break;
      }
    }
    return envMapTypeDefine;
  }
  function generateEnvMapModeDefine(parameters) {
    let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
    if (parameters.envMap) {
      switch (parameters.envMapMode) {
        case CubeRefractionMapping:
        case CubeUVRefractionMapping:
          envMapModeDefine = "ENVMAP_MODE_REFRACTION";
          break;
      }
    }
    return envMapModeDefine;
  }
  function generateEnvMapBlendingDefine(parameters) {
    let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
    if (parameters.envMap) {
      switch (parameters.combine) {
        case MultiplyOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
          break;
        case MixOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
          break;
        case AddOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
          break;
      }
    }
    return envMapBlendingDefine;
  }
  function WebGLProgram(renderer2, cacheKey, parameters, bindingStates) {
    const gl = renderer2.getContext();
    const defines = parameters.defines;
    let vertexShader = parameters.vertexShader;
    let fragmentShader = parameters.fragmentShader;
    const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
    const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
    const envMapModeDefine = generateEnvMapModeDefine(parameters);
    const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
    const gammaFactorDefine = renderer2.gammaFactor > 0 ? renderer2.gammaFactor : 1;
    const customExtensions = parameters.isWebGL2 ? "" : generateExtensions(parameters);
    const customDefines = generateDefines(defines);
    const program = gl.createProgram();
    let prefixVertex, prefixFragment;
    let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
    if (parameters.isRawShaderMaterial) {
      prefixVertex = [
        customDefines
      ].filter(filterEmptyLine).join("\n");
      if (prefixVertex.length > 0) {
        prefixVertex += "\n";
      }
      prefixFragment = [
        customExtensions,
        customDefines
      ].filter(filterEmptyLine).join("\n");
      if (prefixFragment.length > 0) {
        prefixFragment += "\n";
      }
    } else {
      prefixVertex = [
        generatePrecision(parameters),
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines,
        parameters.instancing ? "#define USE_INSTANCING" : "",
        parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
        parameters.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",
        "#define GAMMA_FACTOR " + gammaFactorDefine,
        "#define MAX_BONES " + parameters.maxBones,
        parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
        parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
        parameters.map ? "#define USE_MAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.envMap ? "#define " + envMapModeDefine : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.aoMap ? "#define USE_AOMAP" : "",
        parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.normalMap && parameters.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
        parameters.normalMap && parameters.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
        parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        parameters.displacementMap && parameters.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
        parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
        parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        parameters.vertexTangents ? "#define USE_TANGENT" : "",
        parameters.vertexColors ? "#define USE_COLOR" : "",
        parameters.vertexUvs ? "#define USE_UV" : "",
        parameters.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
        parameters.flatShading ? "#define FLAT_SHADED" : "",
        parameters.skinning ? "#define USE_SKINNING" : "",
        parameters.useVertexTexture ? "#define BONE_TEXTURE" : "",
        parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
        parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",
        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        "uniform mat4 modelMatrix;",
        "uniform mat4 modelViewMatrix;",
        "uniform mat4 projectionMatrix;",
        "uniform mat4 viewMatrix;",
        "uniform mat3 normalMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        "#ifdef USE_INSTANCING",
        "	attribute mat4 instanceMatrix;",
        "#endif",
        "#ifdef USE_INSTANCING_COLOR",
        "	attribute vec3 instanceColor;",
        "#endif",
        "attribute vec3 position;",
        "attribute vec3 normal;",
        "attribute vec2 uv;",
        "#ifdef USE_TANGENT",
        "	attribute vec4 tangent;",
        "#endif",
        "#ifdef USE_COLOR",
        "	attribute vec3 color;",
        "#endif",
        "#ifdef USE_MORPHTARGETS",
        "	attribute vec3 morphTarget0;",
        "	attribute vec3 morphTarget1;",
        "	attribute vec3 morphTarget2;",
        "	attribute vec3 morphTarget3;",
        "	#ifdef USE_MORPHNORMALS",
        "		attribute vec3 morphNormal0;",
        "		attribute vec3 morphNormal1;",
        "		attribute vec3 morphNormal2;",
        "		attribute vec3 morphNormal3;",
        "	#else",
        "		attribute vec3 morphTarget4;",
        "		attribute vec3 morphTarget5;",
        "		attribute vec3 morphTarget6;",
        "		attribute vec3 morphTarget7;",
        "	#endif",
        "#endif",
        "#ifdef USE_SKINNING",
        "	attribute vec4 skinIndex;",
        "	attribute vec4 skinWeight;",
        "#endif",
        "\n"
      ].filter(filterEmptyLine).join("\n");
      prefixFragment = [
        customExtensions,
        generatePrecision(parameters),
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines,
        parameters.alphaTest ? "#define ALPHATEST " + parameters.alphaTest + (parameters.alphaTest % 1 ? "" : ".0") : "",
        "#define GAMMA_FACTOR " + gammaFactorDefine,
        parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
        parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
        parameters.map ? "#define USE_MAP" : "",
        parameters.matcap ? "#define USE_MATCAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.envMap ? "#define " + envMapTypeDefine : "",
        parameters.envMap ? "#define " + envMapModeDefine : "",
        parameters.envMap ? "#define " + envMapBlendingDefine : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.aoMap ? "#define USE_AOMAP" : "",
        parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.normalMap && parameters.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
        parameters.normalMap && parameters.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
        parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
        parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
        parameters.sheen ? "#define USE_SHEEN" : "",
        parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        parameters.vertexTangents ? "#define USE_TANGENT" : "",
        parameters.vertexColors || parameters.instancingColor ? "#define USE_COLOR" : "",
        parameters.vertexUvs ? "#define USE_UV" : "",
        parameters.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
        parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
        parameters.flatShading ? "#define FLAT_SHADED" : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",
        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
        parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "",
        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "",
        "uniform mat4 viewMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
        parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
        parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
        parameters.dithering ? "#define DITHERING" : "",
        ShaderChunk["encodings_pars_fragment"],
        parameters.map ? getTexelDecodingFunction("mapTexelToLinear", parameters.mapEncoding) : "",
        parameters.matcap ? getTexelDecodingFunction("matcapTexelToLinear", parameters.matcapEncoding) : "",
        parameters.envMap ? getTexelDecodingFunction("envMapTexelToLinear", parameters.envMapEncoding) : "",
        parameters.emissiveMap ? getTexelDecodingFunction("emissiveMapTexelToLinear", parameters.emissiveMapEncoding) : "",
        parameters.lightMap ? getTexelDecodingFunction("lightMapTexelToLinear", parameters.lightMapEncoding) : "",
        getTexelEncodingFunction("linearToOutputTexel", parameters.outputEncoding),
        parameters.depthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
        "\n"
      ].filter(filterEmptyLine).join("\n");
    }
    vertexShader = resolveIncludes(vertexShader);
    vertexShader = replaceLightNums(vertexShader, parameters);
    vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
    fragmentShader = resolveIncludes(fragmentShader);
    fragmentShader = replaceLightNums(fragmentShader, parameters);
    fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
    vertexShader = unrollLoops(vertexShader);
    fragmentShader = unrollLoops(fragmentShader);
    if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
      versionString = "#version 300 es\n";
      prefixVertex = [
        "#define attribute in",
        "#define varying out",
        "#define texture2D texture"
      ].join("\n") + "\n" + prefixVertex;
      prefixFragment = [
        "#define varying in",
        parameters.glslVersion === GLSL3 ? "" : "out highp vec4 pc_fragColor;",
        parameters.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
        "#define gl_FragDepthEXT gl_FragDepth",
        "#define texture2D texture",
        "#define textureCube texture",
        "#define texture2DProj textureProj",
        "#define texture2DLodEXT textureLod",
        "#define texture2DProjLodEXT textureProjLod",
        "#define textureCubeLodEXT textureLod",
        "#define texture2DGradEXT textureGrad",
        "#define texture2DProjGradEXT textureProjGrad",
        "#define textureCubeGradEXT textureGrad"
      ].join("\n") + "\n" + prefixFragment;
    }
    const vertexGlsl = versionString + prefixVertex + vertexShader;
    const fragmentGlsl = versionString + prefixFragment + fragmentShader;
    const glVertexShader = WebGLShader(gl, 35633, vertexGlsl);
    const glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);
    gl.attachShader(program, glVertexShader);
    gl.attachShader(program, glFragmentShader);
    if (parameters.index0AttributeName !== void 0) {
      gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
    } else if (parameters.morphTargets === true) {
      gl.bindAttribLocation(program, 0, "position");
    }
    gl.linkProgram(program);
    if (renderer2.debug.checkShaderErrors) {
      const programLog = gl.getProgramInfoLog(program).trim();
      const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
      const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
      let runnable = true;
      let haveDiagnostics = true;
      if (gl.getProgramParameter(program, 35714) === false) {
        runnable = false;
        const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
        const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
        console.error("THREE.WebGLProgram: shader error: ", gl.getError(), "35715", gl.getProgramParameter(program, 35715), "gl.getProgramInfoLog", programLog, vertexErrors, fragmentErrors);
      } else if (programLog !== "") {
        console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", programLog);
      } else if (vertexLog === "" || fragmentLog === "") {
        haveDiagnostics = false;
      }
      if (haveDiagnostics) {
        this.diagnostics = {
          runnable,
          programLog,
          vertexShader: {
            log: vertexLog,
            prefix: prefixVertex
          },
          fragmentShader: {
            log: fragmentLog,
            prefix: prefixFragment
          }
        };
      }
    }
    gl.deleteShader(glVertexShader);
    gl.deleteShader(glFragmentShader);
    let cachedUniforms;
    this.getUniforms = function() {
      if (cachedUniforms === void 0) {
        cachedUniforms = new WebGLUniforms(gl, program);
      }
      return cachedUniforms;
    };
    let cachedAttributes;
    this.getAttributes = function() {
      if (cachedAttributes === void 0) {
        cachedAttributes = fetchAttributeLocations(gl, program);
      }
      return cachedAttributes;
    };
    this.destroy = function() {
      bindingStates.releaseStatesOfProgram(this);
      gl.deleteProgram(program);
      this.program = void 0;
    };
    this.name = parameters.shaderName;
    this.id = programIdCount++;
    this.cacheKey = cacheKey;
    this.usedTimes = 1;
    this.program = program;
    this.vertexShader = glVertexShader;
    this.fragmentShader = glFragmentShader;
    return this;
  }
  function WebGLPrograms(renderer2, cubemaps, extensions, capabilities, bindingStates, clipping) {
    const programs = [];
    const isWebGL2 = capabilities.isWebGL2;
    const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    const floatVertexTextures = capabilities.floatVertexTextures;
    const maxVertexUniforms = capabilities.maxVertexUniforms;
    const vertexTextures = capabilities.vertexTextures;
    let precision = capabilities.precision;
    const shaderIDs = {
      MeshDepthMaterial: "depth",
      MeshDistanceMaterial: "distanceRGBA",
      MeshNormalMaterial: "normal",
      MeshBasicMaterial: "basic",
      MeshLambertMaterial: "lambert",
      MeshPhongMaterial: "phong",
      MeshToonMaterial: "toon",
      MeshStandardMaterial: "physical",
      MeshPhysicalMaterial: "physical",
      MeshMatcapMaterial: "matcap",
      LineBasicMaterial: "basic",
      LineDashedMaterial: "dashed",
      PointsMaterial: "points",
      ShadowMaterial: "shadow",
      SpriteMaterial: "sprite"
    };
    const parameterNames = [
      "precision",
      "isWebGL2",
      "supportsVertexTextures",
      "outputEncoding",
      "instancing",
      "instancingColor",
      "map",
      "mapEncoding",
      "matcap",
      "matcapEncoding",
      "envMap",
      "envMapMode",
      "envMapEncoding",
      "envMapCubeUV",
      "lightMap",
      "lightMapEncoding",
      "aoMap",
      "emissiveMap",
      "emissiveMapEncoding",
      "bumpMap",
      "normalMap",
      "objectSpaceNormalMap",
      "tangentSpaceNormalMap",
      "clearcoatMap",
      "clearcoatRoughnessMap",
      "clearcoatNormalMap",
      "displacementMap",
      "specularMap",
      "roughnessMap",
      "metalnessMap",
      "gradientMap",
      "alphaMap",
      "combine",
      "vertexColors",
      "vertexTangents",
      "vertexUvs",
      "uvsVertexOnly",
      "fog",
      "useFog",
      "fogExp2",
      "flatShading",
      "sizeAttenuation",
      "logarithmicDepthBuffer",
      "skinning",
      "maxBones",
      "useVertexTexture",
      "morphTargets",
      "morphNormals",
      "maxMorphTargets",
      "maxMorphNormals",
      "premultipliedAlpha",
      "numDirLights",
      "numPointLights",
      "numSpotLights",
      "numHemiLights",
      "numRectAreaLights",
      "numDirLightShadows",
      "numPointLightShadows",
      "numSpotLightShadows",
      "shadowMapEnabled",
      "shadowMapType",
      "toneMapping",
      "physicallyCorrectLights",
      "alphaTest",
      "doubleSided",
      "flipSided",
      "numClippingPlanes",
      "numClipIntersection",
      "depthPacking",
      "dithering",
      "sheen",
      "transmissionMap"
    ];
    function getMaxBones(object) {
      const skeleton = object.skeleton;
      const bones = skeleton.bones;
      if (floatVertexTextures) {
        return 1024;
      } else {
        const nVertexUniforms = maxVertexUniforms;
        const nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);
        const maxBones = Math.min(nVertexMatrices, bones.length);
        if (maxBones < bones.length) {
          console.warn("THREE.WebGLRenderer: Skeleton has " + bones.length + " bones. This GPU supports " + maxBones + ".");
          return 0;
        }
        return maxBones;
      }
    }
    function getTextureEncodingFromMap(map) {
      let encoding;
      if (!map) {
        encoding = LinearEncoding;
      } else if (map.isTexture) {
        encoding = map.encoding;
      } else if (map.isWebGLRenderTarget) {
        console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.");
        encoding = map.texture.encoding;
      }
      return encoding;
    }
    function getParameters(material, lights, shadows, scene2, object) {
      const fog = scene2.fog;
      const environment = material.isMeshStandardMaterial ? scene2.environment : null;
      const envMap = cubemaps.get(material.envMap || environment);
      const shaderID = shaderIDs[material.type];
      const maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;
      if (material.precision !== null) {
        precision = capabilities.getMaxPrecision(material.precision);
        if (precision !== material.precision) {
          console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
        }
      }
      let vertexShader, fragmentShader;
      if (shaderID) {
        const shader = ShaderLib[shaderID];
        vertexShader = shader.vertexShader;
        fragmentShader = shader.fragmentShader;
      } else {
        vertexShader = material.vertexShader;
        fragmentShader = material.fragmentShader;
      }
      const currentRenderTarget = renderer2.getRenderTarget();
      const parameters = {
        isWebGL2,
        shaderID,
        shaderName: material.type,
        vertexShader,
        fragmentShader,
        defines: material.defines,
        isRawShaderMaterial: material.isRawShaderMaterial === true,
        glslVersion: material.glslVersion,
        precision,
        instancing: object.isInstancedMesh === true,
        instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,
        supportsVertexTextures: vertexTextures,
        outputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer2.outputEncoding,
        map: !!material.map,
        mapEncoding: getTextureEncodingFromMap(material.map),
        matcap: !!material.matcap,
        matcapEncoding: getTextureEncodingFromMap(material.matcap),
        envMap: !!envMap,
        envMapMode: envMap && envMap.mapping,
        envMapEncoding: getTextureEncodingFromMap(envMap),
        envMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),
        lightMap: !!material.lightMap,
        lightMapEncoding: getTextureEncodingFromMap(material.lightMap),
        aoMap: !!material.aoMap,
        emissiveMap: !!material.emissiveMap,
        emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),
        bumpMap: !!material.bumpMap,
        normalMap: !!material.normalMap,
        objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
        tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
        clearcoatMap: !!material.clearcoatMap,
        clearcoatRoughnessMap: !!material.clearcoatRoughnessMap,
        clearcoatNormalMap: !!material.clearcoatNormalMap,
        displacementMap: !!material.displacementMap,
        roughnessMap: !!material.roughnessMap,
        metalnessMap: !!material.metalnessMap,
        specularMap: !!material.specularMap,
        alphaMap: !!material.alphaMap,
        gradientMap: !!material.gradientMap,
        sheen: !!material.sheen,
        transmissionMap: !!material.transmissionMap,
        combine: material.combine,
        vertexTangents: material.normalMap && material.vertexTangents,
        vertexColors: material.vertexColors,
        vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap,
        uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmissionMap) && !!material.displacementMap,
        fog: !!fog,
        useFog: material.fog,
        fogExp2: fog && fog.isFogExp2,
        flatShading: material.flatShading,
        sizeAttenuation: material.sizeAttenuation,
        logarithmicDepthBuffer,
        skinning: material.skinning && maxBones > 0,
        maxBones,
        useVertexTexture: floatVertexTextures,
        morphTargets: material.morphTargets,
        morphNormals: material.morphNormals,
        maxMorphTargets: renderer2.maxMorphTargets,
        maxMorphNormals: renderer2.maxMorphNormals,
        numDirLights: lights.directional.length,
        numPointLights: lights.point.length,
        numSpotLights: lights.spot.length,
        numRectAreaLights: lights.rectArea.length,
        numHemiLights: lights.hemi.length,
        numDirLightShadows: lights.directionalShadowMap.length,
        numPointLightShadows: lights.pointShadowMap.length,
        numSpotLightShadows: lights.spotShadowMap.length,
        numClippingPlanes: clipping.numPlanes,
        numClipIntersection: clipping.numIntersection,
        dithering: material.dithering,
        shadowMapEnabled: renderer2.shadowMap.enabled && shadows.length > 0,
        shadowMapType: renderer2.shadowMap.type,
        toneMapping: material.toneMapped ? renderer2.toneMapping : NoToneMapping,
        physicallyCorrectLights: renderer2.physicallyCorrectLights,
        premultipliedAlpha: material.premultipliedAlpha,
        alphaTest: material.alphaTest,
        doubleSided: material.side === DoubleSide,
        flipSided: material.side === BackSide,
        depthPacking: material.depthPacking !== void 0 ? material.depthPacking : false,
        index0AttributeName: material.index0AttributeName,
        extensionDerivatives: material.extensions && material.extensions.derivatives,
        extensionFragDepth: material.extensions && material.extensions.fragDepth,
        extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
        extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
        rendererExtensionFragDepth: isWebGL2 || extensions.has("EXT_frag_depth"),
        rendererExtensionDrawBuffers: isWebGL2 || extensions.has("WEBGL_draw_buffers"),
        rendererExtensionShaderTextureLod: isWebGL2 || extensions.has("EXT_shader_texture_lod"),
        customProgramCacheKey: material.customProgramCacheKey()
      };
      return parameters;
    }
    function getProgramCacheKey(parameters) {
      const array = [];
      if (parameters.shaderID) {
        array.push(parameters.shaderID);
      } else {
        array.push(parameters.fragmentShader);
        array.push(parameters.vertexShader);
      }
      if (parameters.defines !== void 0) {
        for (const name in parameters.defines) {
          array.push(name);
          array.push(parameters.defines[name]);
        }
      }
      if (parameters.isRawShaderMaterial === false) {
        for (let i = 0; i < parameterNames.length; i++) {
          array.push(parameters[parameterNames[i]]);
        }
        array.push(renderer2.outputEncoding);
        array.push(renderer2.gammaFactor);
      }
      array.push(parameters.customProgramCacheKey);
      return array.join();
    }
    function getUniforms(material) {
      const shaderID = shaderIDs[material.type];
      let uniforms;
      if (shaderID) {
        const shader = ShaderLib[shaderID];
        uniforms = UniformsUtils.clone(shader.uniforms);
      } else {
        uniforms = material.uniforms;
      }
      return uniforms;
    }
    function acquireProgram(parameters, cacheKey) {
      let program;
      for (let p = 0, pl = programs.length; p < pl; p++) {
        const preexistingProgram = programs[p];
        if (preexistingProgram.cacheKey === cacheKey) {
          program = preexistingProgram;
          ++program.usedTimes;
          break;
        }
      }
      if (program === void 0) {
        program = new WebGLProgram(renderer2, cacheKey, parameters, bindingStates);
        programs.push(program);
      }
      return program;
    }
    function releaseProgram(program) {
      if (--program.usedTimes === 0) {
        const i = programs.indexOf(program);
        programs[i] = programs[programs.length - 1];
        programs.pop();
        program.destroy();
      }
    }
    return {
      getParameters,
      getProgramCacheKey,
      getUniforms,
      acquireProgram,
      releaseProgram,
      programs
    };
  }
  function WebGLProperties() {
    let properties = new WeakMap();
    function get(object) {
      let map = properties.get(object);
      if (map === void 0) {
        map = {};
        properties.set(object, map);
      }
      return map;
    }
    function remove(object) {
      properties.delete(object);
    }
    function update2(object, key, value) {
      properties.get(object)[key] = value;
    }
    function dispose() {
      properties = new WeakMap();
    }
    return {
      get,
      remove,
      update: update2,
      dispose
    };
  }
  function painterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) {
      return a.groupOrder - b.groupOrder;
    } else if (a.renderOrder !== b.renderOrder) {
      return a.renderOrder - b.renderOrder;
    } else if (a.program !== b.program) {
      return a.program.id - b.program.id;
    } else if (a.material.id !== b.material.id) {
      return a.material.id - b.material.id;
    } else if (a.z !== b.z) {
      return a.z - b.z;
    } else {
      return a.id - b.id;
    }
  }
  function reversePainterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) {
      return a.groupOrder - b.groupOrder;
    } else if (a.renderOrder !== b.renderOrder) {
      return a.renderOrder - b.renderOrder;
    } else if (a.z !== b.z) {
      return b.z - a.z;
    } else {
      return a.id - b.id;
    }
  }
  function WebGLRenderList(properties) {
    const renderItems = [];
    let renderItemsIndex = 0;
    const opaque = [];
    const transparent = [];
    const defaultProgram = {id: -1};
    function init2() {
      renderItemsIndex = 0;
      opaque.length = 0;
      transparent.length = 0;
    }
    function getNextRenderItem(object, geometry, material, groupOrder, z, group2) {
      let renderItem = renderItems[renderItemsIndex];
      const materialProperties = properties.get(material);
      if (renderItem === void 0) {
        renderItem = {
          id: object.id,
          object,
          geometry,
          material,
          program: materialProperties.program || defaultProgram,
          groupOrder,
          renderOrder: object.renderOrder,
          z,
          group: group2
        };
        renderItems[renderItemsIndex] = renderItem;
      } else {
        renderItem.id = object.id;
        renderItem.object = object;
        renderItem.geometry = geometry;
        renderItem.material = material;
        renderItem.program = materialProperties.program || defaultProgram;
        renderItem.groupOrder = groupOrder;
        renderItem.renderOrder = object.renderOrder;
        renderItem.z = z;
        renderItem.group = group2;
      }
      renderItemsIndex++;
      return renderItem;
    }
    function push(object, geometry, material, groupOrder, z, group2) {
      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group2);
      (material.transparent === true ? transparent : opaque).push(renderItem);
    }
    function unshift(object, geometry, material, groupOrder, z, group2) {
      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group2);
      (material.transparent === true ? transparent : opaque).unshift(renderItem);
    }
    function sort(customOpaqueSort, customTransparentSort) {
      if (opaque.length > 1)
        opaque.sort(customOpaqueSort || painterSortStable);
      if (transparent.length > 1)
        transparent.sort(customTransparentSort || reversePainterSortStable);
    }
    function finish() {
      for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {
        const renderItem = renderItems[i];
        if (renderItem.id === null)
          break;
        renderItem.id = null;
        renderItem.object = null;
        renderItem.geometry = null;
        renderItem.material = null;
        renderItem.program = null;
        renderItem.group = null;
      }
    }
    return {
      opaque,
      transparent,
      init: init2,
      push,
      unshift,
      finish,
      sort
    };
  }
  function WebGLRenderLists(properties) {
    let lists = new WeakMap();
    function get(scene2, camera2) {
      const cameras = lists.get(scene2);
      let list;
      if (cameras === void 0) {
        list = new WebGLRenderList(properties);
        lists.set(scene2, new WeakMap());
        lists.get(scene2).set(camera2, list);
      } else {
        list = cameras.get(camera2);
        if (list === void 0) {
          list = new WebGLRenderList(properties);
          cameras.set(camera2, list);
        }
      }
      return list;
    }
    function dispose() {
      lists = new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  function UniformsCache() {
    const lights = {};
    return {
      get: function(light) {
        if (lights[light.id] !== void 0) {
          return lights[light.id];
        }
        let uniforms;
        switch (light.type) {
          case "DirectionalLight":
            uniforms = {
              direction: new Vector3(),
              color: new Color()
            };
            break;
          case "SpotLight":
            uniforms = {
              position: new Vector3(),
              direction: new Vector3(),
              color: new Color(),
              distance: 0,
              coneCos: 0,
              penumbraCos: 0,
              decay: 0
            };
            break;
          case "PointLight":
            uniforms = {
              position: new Vector3(),
              color: new Color(),
              distance: 0,
              decay: 0
            };
            break;
          case "HemisphereLight":
            uniforms = {
              direction: new Vector3(),
              skyColor: new Color(),
              groundColor: new Color()
            };
            break;
          case "RectAreaLight":
            uniforms = {
              color: new Color(),
              position: new Vector3(),
              halfWidth: new Vector3(),
              halfHeight: new Vector3()
            };
            break;
        }
        lights[light.id] = uniforms;
        return uniforms;
      }
    };
  }
  function ShadowUniformsCache() {
    const lights = {};
    return {
      get: function(light) {
        if (lights[light.id] !== void 0) {
          return lights[light.id];
        }
        let uniforms;
        switch (light.type) {
          case "DirectionalLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2()
            };
            break;
          case "SpotLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2()
            };
            break;
          case "PointLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2(),
              shadowCameraNear: 1,
              shadowCameraFar: 1e3
            };
            break;
        }
        lights[light.id] = uniforms;
        return uniforms;
      }
    };
  }
  var nextVersion = 0;
  function shadowCastingLightsFirst(lightA, lightB) {
    return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);
  }
  function WebGLLights(extensions, capabilities) {
    const cache = new UniformsCache();
    const shadowCache = ShadowUniformsCache();
    const state = {
      version: 0,
      hash: {
        directionalLength: -1,
        pointLength: -1,
        spotLength: -1,
        rectAreaLength: -1,
        hemiLength: -1,
        numDirectionalShadows: -1,
        numPointShadows: -1,
        numSpotShadows: -1
      },
      ambient: [0, 0, 0],
      probe: [],
      directional: [],
      directionalShadow: [],
      directionalShadowMap: [],
      directionalShadowMatrix: [],
      spot: [],
      spotShadow: [],
      spotShadowMap: [],
      spotShadowMatrix: [],
      rectArea: [],
      rectAreaLTC1: null,
      rectAreaLTC2: null,
      point: [],
      pointShadow: [],
      pointShadowMap: [],
      pointShadowMatrix: [],
      hemi: []
    };
    for (let i = 0; i < 9; i++)
      state.probe.push(new Vector3());
    const vector3 = new Vector3();
    const matrix4 = new Matrix4();
    const matrix42 = new Matrix4();
    function setup(lights, shadows, camera2) {
      let r = 0, g = 0, b = 0;
      for (let i = 0; i < 9; i++)
        state.probe[i].set(0, 0, 0);
      let directionalLength = 0;
      let pointLength = 0;
      let spotLength = 0;
      let rectAreaLength = 0;
      let hemiLength = 0;
      let numDirectionalShadows = 0;
      let numPointShadows = 0;
      let numSpotShadows = 0;
      const viewMatrix = camera2.matrixWorldInverse;
      lights.sort(shadowCastingLightsFirst);
      for (let i = 0, l = lights.length; i < l; i++) {
        const light = lights[i];
        const color = light.color;
        const intensity = light.intensity;
        const distance = light.distance;
        const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
        if (light.isAmbientLight) {
          r += color.r * intensity;
          g += color.g * intensity;
          b += color.b * intensity;
        } else if (light.isLightProbe) {
          for (let j = 0; j < 9; j++) {
            state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
          }
        } else if (light.isDirectionalLight) {
          const uniforms = cache.get(light);
          uniforms.color.copy(light.color).multiplyScalar(light.intensity);
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          vector3.setFromMatrixPosition(light.target.matrixWorld);
          uniforms.direction.sub(vector3);
          uniforms.direction.transformDirection(viewMatrix);
          if (light.castShadow) {
            const shadow = light.shadow;
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            state.directionalShadow[directionalLength] = shadowUniforms;
            state.directionalShadowMap[directionalLength] = shadowMap;
            state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
            numDirectionalShadows++;
          }
          state.directional[directionalLength] = uniforms;
          directionalLength++;
        } else if (light.isSpotLight) {
          const uniforms = cache.get(light);
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          uniforms.color.copy(color).multiplyScalar(intensity);
          uniforms.distance = distance;
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          vector3.setFromMatrixPosition(light.target.matrixWorld);
          uniforms.direction.sub(vector3);
          uniforms.direction.transformDirection(viewMatrix);
          uniforms.coneCos = Math.cos(light.angle);
          uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
          uniforms.decay = light.decay;
          if (light.castShadow) {
            const shadow = light.shadow;
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            state.spotShadow[spotLength] = shadowUniforms;
            state.spotShadowMap[spotLength] = shadowMap;
            state.spotShadowMatrix[spotLength] = light.shadow.matrix;
            numSpotShadows++;
          }
          state.spot[spotLength] = uniforms;
          spotLength++;
        } else if (light.isRectAreaLight) {
          const uniforms = cache.get(light);
          uniforms.color.copy(color).multiplyScalar(intensity);
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          matrix42.identity();
          matrix4.copy(light.matrixWorld);
          matrix4.premultiply(viewMatrix);
          matrix42.extractRotation(matrix4);
          uniforms.halfWidth.set(light.width * 0.5, 0, 0);
          uniforms.halfHeight.set(0, light.height * 0.5, 0);
          uniforms.halfWidth.applyMatrix4(matrix42);
          uniforms.halfHeight.applyMatrix4(matrix42);
          state.rectArea[rectAreaLength] = uniforms;
          rectAreaLength++;
        } else if (light.isPointLight) {
          const uniforms = cache.get(light);
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          uniforms.color.copy(light.color).multiplyScalar(light.intensity);
          uniforms.distance = light.distance;
          uniforms.decay = light.decay;
          if (light.castShadow) {
            const shadow = light.shadow;
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            shadowUniforms.shadowCameraNear = shadow.camera.near;
            shadowUniforms.shadowCameraFar = shadow.camera.far;
            state.pointShadow[pointLength] = shadowUniforms;
            state.pointShadowMap[pointLength] = shadowMap;
            state.pointShadowMatrix[pointLength] = light.shadow.matrix;
            numPointShadows++;
          }
          state.point[pointLength] = uniforms;
          pointLength++;
        } else if (light.isHemisphereLight) {
          const uniforms = cache.get(light);
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          uniforms.direction.transformDirection(viewMatrix);
          uniforms.direction.normalize();
          uniforms.skyColor.copy(light.color).multiplyScalar(intensity);
          uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);
          state.hemi[hemiLength] = uniforms;
          hemiLength++;
        }
      }
      if (rectAreaLength > 0) {
        if (capabilities.isWebGL2) {
          state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
          state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
        } else {
          if (extensions.has("OES_texture_float_linear") === true) {
            state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
            state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
          } else if (extensions.has("OES_texture_half_float_linear") === true) {
            state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
            state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
          } else {
            console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.");
          }
        }
      }
      state.ambient[0] = r;
      state.ambient[1] = g;
      state.ambient[2] = b;
      const hash = state.hash;
      if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {
        state.directional.length = directionalLength;
        state.spot.length = spotLength;
        state.rectArea.length = rectAreaLength;
        state.point.length = pointLength;
        state.hemi.length = hemiLength;
        state.directionalShadow.length = numDirectionalShadows;
        state.directionalShadowMap.length = numDirectionalShadows;
        state.pointShadow.length = numPointShadows;
        state.pointShadowMap.length = numPointShadows;
        state.spotShadow.length = numSpotShadows;
        state.spotShadowMap.length = numSpotShadows;
        state.directionalShadowMatrix.length = numDirectionalShadows;
        state.pointShadowMatrix.length = numPointShadows;
        state.spotShadowMatrix.length = numSpotShadows;
        hash.directionalLength = directionalLength;
        hash.pointLength = pointLength;
        hash.spotLength = spotLength;
        hash.rectAreaLength = rectAreaLength;
        hash.hemiLength = hemiLength;
        hash.numDirectionalShadows = numDirectionalShadows;
        hash.numPointShadows = numPointShadows;
        hash.numSpotShadows = numSpotShadows;
        state.version = nextVersion++;
      }
    }
    return {
      setup,
      state
    };
  }
  function WebGLRenderState(extensions, capabilities) {
    const lights = new WebGLLights(extensions, capabilities);
    const lightsArray = [];
    const shadowsArray = [];
    function init2() {
      lightsArray.length = 0;
      shadowsArray.length = 0;
    }
    function pushLight(light) {
      lightsArray.push(light);
    }
    function pushShadow(shadowLight) {
      shadowsArray.push(shadowLight);
    }
    function setupLights(camera2) {
      lights.setup(lightsArray, shadowsArray, camera2);
    }
    const state = {
      lightsArray,
      shadowsArray,
      lights
    };
    return {
      init: init2,
      state,
      setupLights,
      pushLight,
      pushShadow
    };
  }
  function WebGLRenderStates(extensions, capabilities) {
    let renderStates = new WeakMap();
    function get(scene2, camera2) {
      let renderState;
      if (renderStates.has(scene2) === false) {
        renderState = new WebGLRenderState(extensions, capabilities);
        renderStates.set(scene2, new WeakMap());
        renderStates.get(scene2).set(camera2, renderState);
      } else {
        if (renderStates.get(scene2).has(camera2) === false) {
          renderState = new WebGLRenderState(extensions, capabilities);
          renderStates.get(scene2).set(camera2, renderState);
        } else {
          renderState = renderStates.get(scene2).get(camera2);
        }
      }
      return renderState;
    }
    function dispose() {
      renderStates = new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  function MeshDepthMaterial(parameters) {
    Material.call(this);
    this.type = "MeshDepthMaterial";
    this.depthPacking = BasicDepthPacking;
    this.skinning = false;
    this.morphTargets = false;
    this.map = null;
    this.alphaMap = null;
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.fog = false;
    this.setValues(parameters);
  }
  MeshDepthMaterial.prototype = Object.create(Material.prototype);
  MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;
  MeshDepthMaterial.prototype.isMeshDepthMaterial = true;
  MeshDepthMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.depthPacking = source.depthPacking;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    return this;
  };
  function MeshDistanceMaterial(parameters) {
    Material.call(this);
    this.type = "MeshDistanceMaterial";
    this.referencePosition = new Vector3();
    this.nearDistance = 1;
    this.farDistance = 1e3;
    this.skinning = false;
    this.morphTargets = false;
    this.map = null;
    this.alphaMap = null;
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.fog = false;
    this.setValues(parameters);
  }
  MeshDistanceMaterial.prototype = Object.create(Material.prototype);
  MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;
  MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;
  MeshDistanceMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.referencePosition.copy(source.referencePosition);
    this.nearDistance = source.nearDistance;
    this.farDistance = source.farDistance;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    return this;
  };
  var vsm_frag = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n	for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n		#ifdef HORIZONAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean * HALF_SAMPLE_RATE;\n	squared_mean = squared_mean * HALF_SAMPLE_RATE;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
  var vsm_vert = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
  function WebGLShadowMap(_renderer, _objects, maxTextureSize) {
    let _frustum = new Frustum();
    const _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport = new Vector4(), _depthMaterials = [], _distanceMaterials = [], _materialCache = {};
    const shadowSide = {0: BackSide, 1: FrontSide, 2: DoubleSide};
    const shadowMaterialVertical = new ShaderMaterial({
      defines: {
        SAMPLE_RATE: 2 / 8,
        HALF_SAMPLE_RATE: 1 / 8
      },
      uniforms: {
        shadow_pass: {value: null},
        resolution: {value: new Vector2()},
        radius: {value: 4}
      },
      vertexShader: vsm_vert,
      fragmentShader: vsm_frag
    });
    const shadowMaterialHorizonal = shadowMaterialVertical.clone();
    shadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;
    const fullScreenTri = new BufferGeometry();
    fullScreenTri.setAttribute("position", new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
    const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
    const scope = this;
    this.enabled = false;
    this.autoUpdate = true;
    this.needsUpdate = false;
    this.type = PCFShadowMap;
    this.render = function(lights, scene2, camera2) {
      if (scope.enabled === false)
        return;
      if (scope.autoUpdate === false && scope.needsUpdate === false)
        return;
      if (lights.length === 0)
        return;
      const currentRenderTarget = _renderer.getRenderTarget();
      const activeCubeFace = _renderer.getActiveCubeFace();
      const activeMipmapLevel = _renderer.getActiveMipmapLevel();
      const _state = _renderer.state;
      _state.setBlending(NoBlending);
      _state.buffers.color.setClear(1, 1, 1, 1);
      _state.buffers.depth.setTest(true);
      _state.setScissorTest(false);
      for (let i = 0, il = lights.length; i < il; i++) {
        const light = lights[i];
        const shadow = light.shadow;
        if (shadow === void 0) {
          console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
          continue;
        }
        if (shadow.autoUpdate === false && shadow.needsUpdate === false)
          continue;
        _shadowMapSize.copy(shadow.mapSize);
        const shadowFrameExtents = shadow.getFrameExtents();
        _shadowMapSize.multiply(shadowFrameExtents);
        _viewportSize.copy(shadow.mapSize);
        if (_shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize) {
          if (_shadowMapSize.x > maxTextureSize) {
            _viewportSize.x = Math.floor(maxTextureSize / shadowFrameExtents.x);
            _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
            shadow.mapSize.x = _viewportSize.x;
          }
          if (_shadowMapSize.y > maxTextureSize) {
            _viewportSize.y = Math.floor(maxTextureSize / shadowFrameExtents.y);
            _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
            shadow.mapSize.y = _viewportSize.y;
          }
        }
        if (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {
          const pars = {minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat};
          shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
          shadow.map.texture.name = light.name + ".shadowMap";
          shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
          shadow.camera.updateProjectionMatrix();
        }
        if (shadow.map === null) {
          const pars = {minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat};
          shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
          shadow.map.texture.name = light.name + ".shadowMap";
          shadow.camera.updateProjectionMatrix();
        }
        _renderer.setRenderTarget(shadow.map);
        _renderer.clear();
        const viewportCount = shadow.getViewportCount();
        for (let vp = 0; vp < viewportCount; vp++) {
          const viewport = shadow.getViewport(vp);
          _viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);
          _state.viewport(_viewport);
          shadow.updateMatrices(light, vp);
          _frustum = shadow.getFrustum();
          renderObject(scene2, camera2, shadow.camera, light, this.type);
        }
        if (!shadow.isPointLightShadow && this.type === VSMShadowMap) {
          VSMPass(shadow, camera2);
        }
        shadow.needsUpdate = false;
      }
      scope.needsUpdate = false;
      _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
    };
    function VSMPass(shadow, camera2) {
      const geometry = _objects.update(fullScreenMesh);
      shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
      shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
      shadowMaterialVertical.uniforms.radius.value = shadow.radius;
      _renderer.setRenderTarget(shadow.mapPass);
      _renderer.clear();
      _renderer.renderBufferDirect(camera2, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
      shadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;
      shadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;
      shadowMaterialHorizonal.uniforms.radius.value = shadow.radius;
      _renderer.setRenderTarget(shadow.map);
      _renderer.clear();
      _renderer.renderBufferDirect(camera2, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null);
    }
    function getDepthMaterialVariant(useMorphing, useSkinning, useInstancing) {
      const index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;
      let material = _depthMaterials[index];
      if (material === void 0) {
        material = new MeshDepthMaterial({
          depthPacking: RGBADepthPacking,
          morphTargets: useMorphing,
          skinning: useSkinning
        });
        _depthMaterials[index] = material;
      }
      return material;
    }
    function getDistanceMaterialVariant(useMorphing, useSkinning, useInstancing) {
      const index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;
      let material = _distanceMaterials[index];
      if (material === void 0) {
        material = new MeshDistanceMaterial({
          morphTargets: useMorphing,
          skinning: useSkinning
        });
        _distanceMaterials[index] = material;
      }
      return material;
    }
    function getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {
      let result = null;
      let getMaterialVariant = getDepthMaterialVariant;
      let customMaterial = object.customDepthMaterial;
      if (light.isPointLight === true) {
        getMaterialVariant = getDistanceMaterialVariant;
        customMaterial = object.customDistanceMaterial;
      }
      if (customMaterial === void 0) {
        let useMorphing = false;
        if (material.morphTargets === true) {
          useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;
        }
        let useSkinning = false;
        if (object.isSkinnedMesh === true) {
          if (material.skinning === true) {
            useSkinning = true;
          } else {
            console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", object);
          }
        }
        const useInstancing = object.isInstancedMesh === true;
        result = getMaterialVariant(useMorphing, useSkinning, useInstancing);
      } else {
        result = customMaterial;
      }
      if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {
        const keyA = result.uuid, keyB = material.uuid;
        let materialsForVariant = _materialCache[keyA];
        if (materialsForVariant === void 0) {
          materialsForVariant = {};
          _materialCache[keyA] = materialsForVariant;
        }
        let cachedMaterial = materialsForVariant[keyB];
        if (cachedMaterial === void 0) {
          cachedMaterial = result.clone();
          materialsForVariant[keyB] = cachedMaterial;
        }
        result = cachedMaterial;
      }
      result.visible = material.visible;
      result.wireframe = material.wireframe;
      if (type === VSMShadowMap) {
        result.side = material.shadowSide !== null ? material.shadowSide : material.side;
      } else {
        result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
      }
      result.clipShadows = material.clipShadows;
      result.clippingPlanes = material.clippingPlanes;
      result.clipIntersection = material.clipIntersection;
      result.wireframeLinewidth = material.wireframeLinewidth;
      result.linewidth = material.linewidth;
      if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
        result.referencePosition.setFromMatrixPosition(light.matrixWorld);
        result.nearDistance = shadowCameraNear;
        result.farDistance = shadowCameraFar;
      }
      return result;
    }
    function renderObject(object, camera2, shadowCamera, light, type) {
      if (object.visible === false)
        return;
      const visible = object.layers.test(camera2.layers);
      if (visible && (object.isMesh || object.isLine || object.isPoints)) {
        if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
          object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
          const geometry = _objects.update(object);
          const material = object.material;
          if (Array.isArray(material)) {
            const groups = geometry.groups;
            for (let k = 0, kl = groups.length; k < kl; k++) {
              const group2 = groups[k];
              const groupMaterial = material[group2.materialIndex];
              if (groupMaterial && groupMaterial.visible) {
                const depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);
                _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group2);
              }
            }
          } else if (material.visible) {
            const depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);
            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
          }
        }
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        renderObject(children[i], camera2, shadowCamera, light, type);
      }
    }
  }
  function WebGLState(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function ColorBuffer() {
      let locked = false;
      const color = new Vector4();
      let currentColorMask = null;
      const currentColorClear = new Vector4(0, 0, 0, 0);
      return {
        setMask: function(colorMask) {
          if (currentColorMask !== colorMask && !locked) {
            gl.colorMask(colorMask, colorMask, colorMask, colorMask);
            currentColorMask = colorMask;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(r, g, b, a, premultipliedAlpha) {
          if (premultipliedAlpha === true) {
            r *= a;
            g *= a;
            b *= a;
          }
          color.set(r, g, b, a);
          if (currentColorClear.equals(color) === false) {
            gl.clearColor(r, g, b, a);
            currentColorClear.copy(color);
          }
        },
        reset: function() {
          locked = false;
          currentColorMask = null;
          currentColorClear.set(-1, 0, 0, 0);
        }
      };
    }
    function DepthBuffer() {
      let locked = false;
      let currentDepthMask = null;
      let currentDepthFunc = null;
      let currentDepthClear = null;
      return {
        setTest: function(depthTest) {
          if (depthTest) {
            enable(2929);
          } else {
            disable(2929);
          }
        },
        setMask: function(depthMask) {
          if (currentDepthMask !== depthMask && !locked) {
            gl.depthMask(depthMask);
            currentDepthMask = depthMask;
          }
        },
        setFunc: function(depthFunc) {
          if (currentDepthFunc !== depthFunc) {
            if (depthFunc) {
              switch (depthFunc) {
                case NeverDepth:
                  gl.depthFunc(512);
                  break;
                case AlwaysDepth:
                  gl.depthFunc(519);
                  break;
                case LessDepth:
                  gl.depthFunc(513);
                  break;
                case LessEqualDepth:
                  gl.depthFunc(515);
                  break;
                case EqualDepth:
                  gl.depthFunc(514);
                  break;
                case GreaterEqualDepth:
                  gl.depthFunc(518);
                  break;
                case GreaterDepth:
                  gl.depthFunc(516);
                  break;
                case NotEqualDepth:
                  gl.depthFunc(517);
                  break;
                default:
                  gl.depthFunc(515);
              }
            } else {
              gl.depthFunc(515);
            }
            currentDepthFunc = depthFunc;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(depth) {
          if (currentDepthClear !== depth) {
            gl.clearDepth(depth);
            currentDepthClear = depth;
          }
        },
        reset: function() {
          locked = false;
          currentDepthMask = null;
          currentDepthFunc = null;
          currentDepthClear = null;
        }
      };
    }
    function StencilBuffer() {
      let locked = false;
      let currentStencilMask = null;
      let currentStencilFunc = null;
      let currentStencilRef = null;
      let currentStencilFuncMask = null;
      let currentStencilFail = null;
      let currentStencilZFail = null;
      let currentStencilZPass = null;
      let currentStencilClear = null;
      return {
        setTest: function(stencilTest) {
          if (!locked) {
            if (stencilTest) {
              enable(2960);
            } else {
              disable(2960);
            }
          }
        },
        setMask: function(stencilMask) {
          if (currentStencilMask !== stencilMask && !locked) {
            gl.stencilMask(stencilMask);
            currentStencilMask = stencilMask;
          }
        },
        setFunc: function(stencilFunc, stencilRef, stencilMask) {
          if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
            gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
            currentStencilFunc = stencilFunc;
            currentStencilRef = stencilRef;
            currentStencilFuncMask = stencilMask;
          }
        },
        setOp: function(stencilFail, stencilZFail, stencilZPass) {
          if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
            gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
            currentStencilFail = stencilFail;
            currentStencilZFail = stencilZFail;
            currentStencilZPass = stencilZPass;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(stencil) {
          if (currentStencilClear !== stencil) {
            gl.clearStencil(stencil);
            currentStencilClear = stencil;
          }
        },
        reset: function() {
          locked = false;
          currentStencilMask = null;
          currentStencilFunc = null;
          currentStencilRef = null;
          currentStencilFuncMask = null;
          currentStencilFail = null;
          currentStencilZFail = null;
          currentStencilZPass = null;
          currentStencilClear = null;
        }
      };
    }
    const colorBuffer = new ColorBuffer();
    const depthBuffer = new DepthBuffer();
    const stencilBuffer = new StencilBuffer();
    let enabledCapabilities = {};
    let currentProgram = null;
    let currentBlendingEnabled = null;
    let currentBlending = null;
    let currentBlendEquation = null;
    let currentBlendSrc = null;
    let currentBlendDst = null;
    let currentBlendEquationAlpha = null;
    let currentBlendSrcAlpha = null;
    let currentBlendDstAlpha = null;
    let currentPremultipledAlpha = false;
    let currentFlipSided = null;
    let currentCullFace = null;
    let currentLineWidth = null;
    let currentPolygonOffsetFactor = null;
    let currentPolygonOffsetUnits = null;
    const maxTextures = gl.getParameter(35661);
    let lineWidthAvailable = false;
    let version = 0;
    const glVersion = gl.getParameter(7938);
    if (glVersion.indexOf("WebGL") !== -1) {
      version = parseFloat(/^WebGL\ ([0-9])/.exec(glVersion)[1]);
      lineWidthAvailable = version >= 1;
    } else if (glVersion.indexOf("OpenGL ES") !== -1) {
      version = parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(glVersion)[1]);
      lineWidthAvailable = version >= 2;
    }
    let currentTextureSlot = null;
    let currentBoundTextures = {};
    const currentScissor = new Vector4();
    const currentViewport = new Vector4();
    function createTexture(type, target, count) {
      const data = new Uint8Array(4);
      const texture = gl.createTexture();
      gl.bindTexture(type, texture);
      gl.texParameteri(type, 10241, 9728);
      gl.texParameteri(type, 10240, 9728);
      for (let i = 0; i < count; i++) {
        gl.texImage2D(target + i, 0, 6408, 1, 1, 0, 6408, 5121, data);
      }
      return texture;
    }
    const emptyTextures = {};
    emptyTextures[3553] = createTexture(3553, 3553, 1);
    emptyTextures[34067] = createTexture(34067, 34069, 6);
    colorBuffer.setClear(0, 0, 0, 1);
    depthBuffer.setClear(1);
    stencilBuffer.setClear(0);
    enable(2929);
    depthBuffer.setFunc(LessEqualDepth);
    setFlipSided(false);
    setCullFace(CullFaceBack);
    enable(2884);
    setBlending(NoBlending);
    function enable(id) {
      if (enabledCapabilities[id] !== true) {
        gl.enable(id);
        enabledCapabilities[id] = true;
      }
    }
    function disable(id) {
      if (enabledCapabilities[id] !== false) {
        gl.disable(id);
        enabledCapabilities[id] = false;
      }
    }
    function useProgram(program) {
      if (currentProgram !== program) {
        gl.useProgram(program);
        currentProgram = program;
        return true;
      }
      return false;
    }
    const equationToGL = {
      [AddEquation]: 32774,
      [SubtractEquation]: 32778,
      [ReverseSubtractEquation]: 32779
    };
    if (isWebGL2) {
      equationToGL[MinEquation] = 32775;
      equationToGL[MaxEquation] = 32776;
    } else {
      const extension = extensions.get("EXT_blend_minmax");
      if (extension !== null) {
        equationToGL[MinEquation] = extension.MIN_EXT;
        equationToGL[MaxEquation] = extension.MAX_EXT;
      }
    }
    const factorToGL = {
      [ZeroFactor]: 0,
      [OneFactor]: 1,
      [SrcColorFactor]: 768,
      [SrcAlphaFactor]: 770,
      [SrcAlphaSaturateFactor]: 776,
      [DstColorFactor]: 774,
      [DstAlphaFactor]: 772,
      [OneMinusSrcColorFactor]: 769,
      [OneMinusSrcAlphaFactor]: 771,
      [OneMinusDstColorFactor]: 775,
      [OneMinusDstAlphaFactor]: 773
    };
    function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
      if (blending === NoBlending) {
        if (currentBlendingEnabled) {
          disable(3042);
          currentBlendingEnabled = false;
        }
        return;
      }
      if (!currentBlendingEnabled) {
        enable(3042);
        currentBlendingEnabled = true;
      }
      if (blending !== CustomBlending) {
        if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
          if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
            gl.blendEquation(32774);
            currentBlendEquation = AddEquation;
            currentBlendEquationAlpha = AddEquation;
          }
          if (premultipliedAlpha) {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(1, 771, 1, 771);
                break;
              case AdditiveBlending:
                gl.blendFunc(1, 1);
                break;
              case SubtractiveBlending:
                gl.blendFuncSeparate(0, 0, 769, 771);
                break;
              case MultiplyBlending:
                gl.blendFuncSeparate(0, 768, 0, 770);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          } else {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(770, 771, 1, 771);
                break;
              case AdditiveBlending:
                gl.blendFunc(770, 1);
                break;
              case SubtractiveBlending:
                gl.blendFunc(0, 769);
                break;
              case MultiplyBlending:
                gl.blendFunc(0, 768);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          }
          currentBlendSrc = null;
          currentBlendDst = null;
          currentBlendSrcAlpha = null;
          currentBlendDstAlpha = null;
          currentBlending = blending;
          currentPremultipledAlpha = premultipliedAlpha;
        }
        return;
      }
      blendEquationAlpha = blendEquationAlpha || blendEquation;
      blendSrcAlpha = blendSrcAlpha || blendSrc;
      blendDstAlpha = blendDstAlpha || blendDst;
      if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
        gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
        currentBlendEquation = blendEquation;
        currentBlendEquationAlpha = blendEquationAlpha;
      }
      if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
        gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
        currentBlendSrc = blendSrc;
        currentBlendDst = blendDst;
        currentBlendSrcAlpha = blendSrcAlpha;
        currentBlendDstAlpha = blendDstAlpha;
      }
      currentBlending = blending;
      currentPremultipledAlpha = null;
    }
    function setMaterial(material, frontFaceCW) {
      material.side === DoubleSide ? disable(2884) : enable(2884);
      let flipSided = material.side === BackSide;
      if (frontFaceCW)
        flipSided = !flipSided;
      setFlipSided(flipSided);
      material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
      depthBuffer.setFunc(material.depthFunc);
      depthBuffer.setTest(material.depthTest);
      depthBuffer.setMask(material.depthWrite);
      colorBuffer.setMask(material.colorWrite);
      const stencilWrite = material.stencilWrite;
      stencilBuffer.setTest(stencilWrite);
      if (stencilWrite) {
        stencilBuffer.setMask(material.stencilWriteMask);
        stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
        stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
      }
      setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
    }
    function setFlipSided(flipSided) {
      if (currentFlipSided !== flipSided) {
        if (flipSided) {
          gl.frontFace(2304);
        } else {
          gl.frontFace(2305);
        }
        currentFlipSided = flipSided;
      }
    }
    function setCullFace(cullFace) {
      if (cullFace !== CullFaceNone) {
        enable(2884);
        if (cullFace !== currentCullFace) {
          if (cullFace === CullFaceBack) {
            gl.cullFace(1029);
          } else if (cullFace === CullFaceFront) {
            gl.cullFace(1028);
          } else {
            gl.cullFace(1032);
          }
        }
      } else {
        disable(2884);
      }
      currentCullFace = cullFace;
    }
    function setLineWidth(width) {
      if (width !== currentLineWidth) {
        if (lineWidthAvailable)
          gl.lineWidth(width);
        currentLineWidth = width;
      }
    }
    function setPolygonOffset(polygonOffset, factor, units) {
      if (polygonOffset) {
        enable(32823);
        if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
          gl.polygonOffset(factor, units);
          currentPolygonOffsetFactor = factor;
          currentPolygonOffsetUnits = units;
        }
      } else {
        disable(32823);
      }
    }
    function setScissorTest(scissorTest) {
      if (scissorTest) {
        enable(3089);
      } else {
        disable(3089);
      }
    }
    function activeTexture(webglSlot) {
      if (webglSlot === void 0)
        webglSlot = 33984 + maxTextures - 1;
      if (currentTextureSlot !== webglSlot) {
        gl.activeTexture(webglSlot);
        currentTextureSlot = webglSlot;
      }
    }
    function bindTexture(webglType, webglTexture) {
      if (currentTextureSlot === null) {
        activeTexture();
      }
      let boundTexture = currentBoundTextures[currentTextureSlot];
      if (boundTexture === void 0) {
        boundTexture = {type: void 0, texture: void 0};
        currentBoundTextures[currentTextureSlot] = boundTexture;
      }
      if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
        gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
        boundTexture.type = webglType;
        boundTexture.texture = webglTexture;
      }
    }
    function unbindTexture() {
      const boundTexture = currentBoundTextures[currentTextureSlot];
      if (boundTexture !== void 0 && boundTexture.type !== void 0) {
        gl.bindTexture(boundTexture.type, null);
        boundTexture.type = void 0;
        boundTexture.texture = void 0;
      }
    }
    function compressedTexImage2D() {
      try {
        gl.compressedTexImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texImage2D() {
      try {
        gl.texImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texImage3D() {
      try {
        gl.texImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function scissor(scissor2) {
      if (currentScissor.equals(scissor2) === false) {
        gl.scissor(scissor2.x, scissor2.y, scissor2.z, scissor2.w);
        currentScissor.copy(scissor2);
      }
    }
    function viewport(viewport2) {
      if (currentViewport.equals(viewport2) === false) {
        gl.viewport(viewport2.x, viewport2.y, viewport2.z, viewport2.w);
        currentViewport.copy(viewport2);
      }
    }
    function reset() {
      enabledCapabilities = {};
      currentTextureSlot = null;
      currentBoundTextures = {};
      currentProgram = null;
      currentBlendingEnabled = null;
      currentBlending = null;
      currentBlendEquation = null;
      currentBlendSrc = null;
      currentBlendDst = null;
      currentBlendEquationAlpha = null;
      currentBlendSrcAlpha = null;
      currentBlendDstAlpha = null;
      currentPremultipledAlpha = false;
      currentFlipSided = null;
      currentCullFace = null;
      currentLineWidth = null;
      currentPolygonOffsetFactor = null;
      currentPolygonOffsetUnits = null;
      colorBuffer.reset();
      depthBuffer.reset();
      stencilBuffer.reset();
    }
    return {
      buffers: {
        color: colorBuffer,
        depth: depthBuffer,
        stencil: stencilBuffer
      },
      enable,
      disable,
      useProgram,
      setBlending,
      setMaterial,
      setFlipSided,
      setCullFace,
      setLineWidth,
      setPolygonOffset,
      setScissorTest,
      activeTexture,
      bindTexture,
      unbindTexture,
      compressedTexImage2D,
      texImage2D,
      texImage3D,
      scissor,
      viewport,
      reset
    };
  }
  function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
    const isWebGL2 = capabilities.isWebGL2;
    const maxTextures = capabilities.maxTextures;
    const maxCubemapSize = capabilities.maxCubemapSize;
    const maxTextureSize = capabilities.maxTextureSize;
    const maxSamples = capabilities.maxSamples;
    const _videoTextures = new WeakMap();
    let _canvas2;
    let useOffscreenCanvas = false;
    try {
      useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
    } catch (err) {
    }
    function createCanvas(width, height) {
      return useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
    }
    function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
      let scale = 1;
      if (image.width > maxSize || image.height > maxSize) {
        scale = maxSize / Math.max(image.width, image.height);
      }
      if (scale < 1 || needsPowerOfTwo === true) {
        if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
          const floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;
          const width = floor(scale * image.width);
          const height = floor(scale * image.height);
          if (_canvas2 === void 0)
            _canvas2 = createCanvas(width, height);
          const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas2;
          canvas.width = width;
          canvas.height = height;
          const context = canvas.getContext("2d");
          context.drawImage(image, 0, 0, width, height);
          console.warn("THREE.WebGLRenderer: Texture has been resized from (" + image.width + "x" + image.height + ") to (" + width + "x" + height + ").");
          return canvas;
        } else {
          if ("data" in image) {
            console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + image.width + "x" + image.height + ").");
          }
          return image;
        }
      }
      return image;
    }
    function isPowerOfTwo(image) {
      return MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);
    }
    function textureNeedsPowerOfTwo(texture) {
      if (isWebGL2)
        return false;
      return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    }
    function textureNeedsGenerateMipmaps(texture, supportsMips) {
      return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    }
    function generateMipmap(target, texture, width, height) {
      _gl.generateMipmap(target);
      const textureProperties = properties.get(texture);
      textureProperties.__maxMipLevel = Math.log(Math.max(width, height)) * Math.LOG2E;
    }
    function getInternalFormat(internalFormatName, glFormat, glType) {
      if (isWebGL2 === false)
        return glFormat;
      if (internalFormatName !== null) {
        if (_gl[internalFormatName] !== void 0)
          return _gl[internalFormatName];
        console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
      }
      let internalFormat = glFormat;
      if (glFormat === 6403) {
        if (glType === 5126)
          internalFormat = 33326;
        if (glType === 5131)
          internalFormat = 33325;
        if (glType === 5121)
          internalFormat = 33321;
      }
      if (glFormat === 6407) {
        if (glType === 5126)
          internalFormat = 34837;
        if (glType === 5131)
          internalFormat = 34843;
        if (glType === 5121)
          internalFormat = 32849;
      }
      if (glFormat === 6408) {
        if (glType === 5126)
          internalFormat = 34836;
        if (glType === 5131)
          internalFormat = 34842;
        if (glType === 5121)
          internalFormat = 32856;
      }
      if (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 34842 || internalFormat === 34836) {
        extensions.get("EXT_color_buffer_float");
      }
      return internalFormat;
    }
    function filterFallback(f) {
      if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {
        return 9728;
      }
      return 9729;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      deallocateTexture(texture);
      if (texture.isVideoTexture) {
        _videoTextures.delete(texture);
      }
      info.memory.textures--;
    }
    function onRenderTargetDispose(event) {
      const renderTarget = event.target;
      renderTarget.removeEventListener("dispose", onRenderTargetDispose);
      deallocateRenderTarget(renderTarget);
      info.memory.textures--;
    }
    function deallocateTexture(texture) {
      const textureProperties = properties.get(texture);
      if (textureProperties.__webglInit === void 0)
        return;
      _gl.deleteTexture(textureProperties.__webglTexture);
      properties.remove(texture);
    }
    function deallocateRenderTarget(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      const textureProperties = properties.get(renderTarget.texture);
      if (!renderTarget)
        return;
      if (textureProperties.__webglTexture !== void 0) {
        _gl.deleteTexture(textureProperties.__webglTexture);
      }
      if (renderTarget.depthTexture) {
        renderTarget.depthTexture.dispose();
      }
      if (renderTarget.isWebGLCubeRenderTarget) {
        for (let i = 0; i < 6; i++) {
          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
          if (renderTargetProperties.__webglDepthbuffer)
            _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
        }
      } else {
        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
        if (renderTargetProperties.__webglDepthbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
        if (renderTargetProperties.__webglMultisampledFramebuffer)
          _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
        if (renderTargetProperties.__webglColorRenderbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);
        if (renderTargetProperties.__webglDepthRenderbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
      }
      properties.remove(renderTarget.texture);
      properties.remove(renderTarget);
    }
    let textureUnits = 0;
    function resetTextureUnits() {
      textureUnits = 0;
    }
    function allocateTextureUnit() {
      const textureUnit = textureUnits;
      if (textureUnit >= maxTextures) {
        console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + maxTextures);
      }
      textureUnits += 1;
      return textureUnit;
    }
    function setTexture2D(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.isVideoTexture)
        updateVideoTexture(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        const image = texture.image;
        if (image === void 0) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
        } else if (image.complete === false) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
        } else {
          uploadTexture(textureProperties, texture, slot);
          return;
        }
      }
      state.activeTexture(33984 + slot);
      state.bindTexture(3553, textureProperties.__webglTexture);
    }
    function setTexture2DArray(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
      state.activeTexture(33984 + slot);
      state.bindTexture(35866, textureProperties.__webglTexture);
    }
    function setTexture3D(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
      state.activeTexture(33984 + slot);
      state.bindTexture(32879, textureProperties.__webglTexture);
    }
    function setTextureCube(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadCubeTexture(textureProperties, texture, slot);
        return;
      }
      state.activeTexture(33984 + slot);
      state.bindTexture(34067, textureProperties.__webglTexture);
    }
    const wrappingToGL = {
      [RepeatWrapping]: 10497,
      [ClampToEdgeWrapping]: 33071,
      [MirroredRepeatWrapping]: 33648
    };
    const filterToGL = {
      [NearestFilter]: 9728,
      [NearestMipmapNearestFilter]: 9984,
      [NearestMipmapLinearFilter]: 9986,
      [LinearFilter]: 9729,
      [LinearMipmapNearestFilter]: 9985,
      [LinearMipmapLinearFilter]: 9987
    };
    function setTextureParameters(textureType, texture, supportsMips) {
      if (supportsMips) {
        _gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);
        _gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);
        if (textureType === 32879 || textureType === 35866) {
          _gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);
        }
        _gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);
        _gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);
      } else {
        _gl.texParameteri(textureType, 10242, 33071);
        _gl.texParameteri(textureType, 10243, 33071);
        if (textureType === 32879 || textureType === 35866) {
          _gl.texParameteri(textureType, 32882, 33071);
        }
        if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {
          console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.");
        }
        _gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));
        _gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));
        if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
          console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.");
        }
      }
      const extension = extensions.get("EXT_texture_filter_anisotropic");
      if (extension) {
        if (texture.type === FloatType && extensions.get("OES_texture_float_linear") === null)
          return;
        if (texture.type === HalfFloatType && (isWebGL2 || extensions.get("OES_texture_half_float_linear")) === null)
          return;
        if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
          _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
          properties.get(texture).__currentAnisotropy = texture.anisotropy;
        }
      }
    }
    function initTexture(textureProperties, texture) {
      if (textureProperties.__webglInit === void 0) {
        textureProperties.__webglInit = true;
        texture.addEventListener("dispose", onTextureDispose);
        textureProperties.__webglTexture = _gl.createTexture();
        info.memory.textures++;
      }
    }
    function uploadTexture(textureProperties, texture, slot) {
      let textureType = 3553;
      if (texture.isDataTexture2DArray)
        textureType = 35866;
      if (texture.isDataTexture3D)
        textureType = 32879;
      initTexture(textureProperties, texture);
      state.activeTexture(33984 + slot);
      state.bindTexture(textureType, textureProperties.__webglTexture);
      _gl.pixelStorei(37440, texture.flipY);
      _gl.pixelStorei(37441, texture.premultiplyAlpha);
      _gl.pixelStorei(3317, texture.unpackAlignment);
      const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;
      const image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
      const supportsMips = isPowerOfTwo(image) || isWebGL2, glFormat = utils.convert(texture.format);
      let glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);
      setTextureParameters(textureType, texture, supportsMips);
      let mipmap;
      const mipmaps = texture.mipmaps;
      if (texture.isDepthTexture) {
        glInternalFormat = 6402;
        if (isWebGL2) {
          if (texture.type === FloatType) {
            glInternalFormat = 36012;
          } else if (texture.type === UnsignedIntType) {
            glInternalFormat = 33190;
          } else if (texture.type === UnsignedInt248Type) {
            glInternalFormat = 35056;
          } else {
            glInternalFormat = 33189;
          }
        } else {
          if (texture.type === FloatType) {
            console.error("WebGLRenderer: Floating point depth texture requires WebGL2.");
          }
        }
        if (texture.format === DepthFormat && glInternalFormat === 6402) {
          if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
            console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");
            texture.type = UnsignedShortType;
            glType = utils.convert(texture.type);
          }
        }
        if (texture.format === DepthStencilFormat && glInternalFormat === 6402) {
          glInternalFormat = 34041;
          if (texture.type !== UnsignedInt248Type) {
            console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");
            texture.type = UnsignedInt248Type;
            glType = utils.convert(texture.type);
          }
        }
        state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
      } else if (texture.isDataTexture) {
        if (mipmaps.length > 0 && supportsMips) {
          for (let i = 0, il = mipmaps.length; i < il; i++) {
            mipmap = mipmaps[i];
            state.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
          }
          texture.generateMipmaps = false;
          textureProperties.__maxMipLevel = mipmaps.length - 1;
        } else {
          state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
          textureProperties.__maxMipLevel = 0;
        }
      } else if (texture.isCompressedTexture) {
        for (let i = 0, il = mipmaps.length; i < il; i++) {
          mipmap = mipmaps[i];
          if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
            if (glFormat !== null) {
              state.compressedTexImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
            } else {
              console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
            }
          } else {
            state.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
          }
        }
        textureProperties.__maxMipLevel = mipmaps.length - 1;
      } else if (texture.isDataTexture2DArray) {
        state.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        textureProperties.__maxMipLevel = 0;
      } else if (texture.isDataTexture3D) {
        state.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        textureProperties.__maxMipLevel = 0;
      } else {
        if (mipmaps.length > 0 && supportsMips) {
          for (let i = 0, il = mipmaps.length; i < il; i++) {
            mipmap = mipmaps[i];
            state.texImage2D(3553, i, glInternalFormat, glFormat, glType, mipmap);
          }
          texture.generateMipmaps = false;
          textureProperties.__maxMipLevel = mipmaps.length - 1;
        } else {
          state.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);
          textureProperties.__maxMipLevel = 0;
        }
      }
      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
        generateMipmap(textureType, texture, image.width, image.height);
      }
      textureProperties.__version = texture.version;
      if (texture.onUpdate)
        texture.onUpdate(texture);
    }
    function uploadCubeTexture(textureProperties, texture, slot) {
      if (texture.image.length !== 6)
        return;
      initTexture(textureProperties, texture);
      state.activeTexture(33984 + slot);
      state.bindTexture(34067, textureProperties.__webglTexture);
      _gl.pixelStorei(37440, texture.flipY);
      const isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);
      const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
      const cubeImage = [];
      for (let i = 0; i < 6; i++) {
        if (!isCompressed && !isDataTexture) {
          cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);
        } else {
          cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
        }
      }
      const image = cubeImage[0], supportsMips = isPowerOfTwo(image) || isWebGL2, glFormat = utils.convert(texture.format), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);
      setTextureParameters(34067, texture, supportsMips);
      let mipmaps;
      if (isCompressed) {
        for (let i = 0; i < 6; i++) {
          mipmaps = cubeImage[i].mipmaps;
          for (let j = 0; j < mipmaps.length; j++) {
            const mipmap = mipmaps[j];
            if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
              if (glFormat !== null) {
                state.compressedTexImage2D(34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
              }
            } else {
              state.texImage2D(34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
            }
          }
        }
        textureProperties.__maxMipLevel = mipmaps.length - 1;
      } else {
        mipmaps = texture.mipmaps;
        for (let i = 0; i < 6; i++) {
          if (isDataTexture) {
            state.texImage2D(34069 + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
            for (let j = 0; j < mipmaps.length; j++) {
              const mipmap = mipmaps[j];
              const mipmapImage = mipmap.image[i].image;
              state.texImage2D(34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
            }
          } else {
            state.texImage2D(34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
            for (let j = 0; j < mipmaps.length; j++) {
              const mipmap = mipmaps[j];
              state.texImage2D(34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);
            }
          }
        }
        textureProperties.__maxMipLevel = mipmaps.length;
      }
      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
        generateMipmap(34067, texture, image.width, image.height);
      }
      textureProperties.__version = texture.version;
      if (texture.onUpdate)
        texture.onUpdate(texture);
    }
    function setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {
      const glFormat = utils.convert(renderTarget.texture.format);
      const glType = utils.convert(renderTarget.texture.type);
      const glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);
      state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
      _gl.bindFramebuffer(36160, framebuffer);
      _gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);
      _gl.bindFramebuffer(36160, null);
    }
    function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
      _gl.bindRenderbuffer(36161, renderbuffer);
      if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
        let glInternalFormat = 33189;
        if (isMultisample) {
          const depthTexture = renderTarget.depthTexture;
          if (depthTexture && depthTexture.isDepthTexture) {
            if (depthTexture.type === FloatType) {
              glInternalFormat = 36012;
            } else if (depthTexture.type === UnsignedIntType) {
              glInternalFormat = 33190;
            }
          }
          const samples = getRenderTargetSamples(renderTarget);
          _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
        }
        _gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);
      } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
        if (isMultisample) {
          const samples = getRenderTargetSamples(renderTarget);
          _gl.renderbufferStorageMultisample(36161, samples, 35056, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);
        }
        _gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);
      } else {
        const glFormat = utils.convert(renderTarget.texture.format);
        const glType = utils.convert(renderTarget.texture.type);
        const glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);
        if (isMultisample) {
          const samples = getRenderTargetSamples(renderTarget);
          _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
        }
      }
      _gl.bindRenderbuffer(36161, null);
    }
    function setupDepthTexture(framebuffer, renderTarget) {
      const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
      if (isCube)
        throw new Error("Depth Texture with cube render targets is not supported");
      _gl.bindFramebuffer(36160, framebuffer);
      if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
        throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
      }
      if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
        renderTarget.depthTexture.image.width = renderTarget.width;
        renderTarget.depthTexture.image.height = renderTarget.height;
        renderTarget.depthTexture.needsUpdate = true;
      }
      setTexture2D(renderTarget.depthTexture, 0);
      const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
      if (renderTarget.depthTexture.format === DepthFormat) {
        _gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);
      } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
        _gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);
      } else {
        throw new Error("Unknown depthTexture format");
      }
    }
    function setupDepthRenderbuffer(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      if (renderTarget.depthTexture) {
        if (isCube)
          throw new Error("target.depthTexture not supported in Cube render targets");
        setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
      } else {
        if (isCube) {
          renderTargetProperties.__webglDepthbuffer = [];
          for (let i = 0; i < 6; i++) {
            _gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i]);
            renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
          }
        } else {
          _gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);
          renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
        }
      }
      _gl.bindFramebuffer(36160, null);
    }
    function setupRenderTarget(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      const textureProperties = properties.get(renderTarget.texture);
      renderTarget.addEventListener("dispose", onRenderTargetDispose);
      textureProperties.__webglTexture = _gl.createTexture();
      info.memory.textures++;
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      const isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;
      const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;
      if (isWebGL2 && renderTarget.texture.format === RGBFormat && (renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType)) {
        renderTarget.texture.format = RGBAFormat;
        console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.");
      }
      if (isCube) {
        renderTargetProperties.__webglFramebuffer = [];
        for (let i = 0; i < 6; i++) {
          renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
        }
      } else {
        renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
        if (isMultisample) {
          if (isWebGL2) {
            renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
            renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();
            _gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);
            const glFormat = utils.convert(renderTarget.texture.format);
            const glType = utils.convert(renderTarget.texture.type);
            const glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);
            const samples = getRenderTargetSamples(renderTarget);
            _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            _gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
            _gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);
            _gl.bindRenderbuffer(36161, null);
            if (renderTarget.depthBuffer) {
              renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
              setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
            }
            _gl.bindFramebuffer(36160, null);
          } else {
            console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
          }
        }
      }
      if (isCube) {
        state.bindTexture(34067, textureProperties.__webglTexture);
        setTextureParameters(34067, renderTarget.texture, supportsMips);
        for (let i = 0; i < 6; i++) {
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, 36064, 34069 + i);
        }
        if (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {
          generateMipmap(34067, renderTarget.texture, renderTarget.width, renderTarget.height);
        }
        state.bindTexture(34067, null);
      } else {
        state.bindTexture(3553, textureProperties.__webglTexture);
        setTextureParameters(3553, renderTarget.texture, supportsMips);
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553);
        if (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {
          generateMipmap(3553, renderTarget.texture, renderTarget.width, renderTarget.height);
        }
        state.bindTexture(3553, null);
      }
      if (renderTarget.depthBuffer) {
        setupDepthRenderbuffer(renderTarget);
      }
    }
    function updateRenderTargetMipmap(renderTarget) {
      const texture = renderTarget.texture;
      const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;
      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
        const target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
        const webglTexture = properties.get(texture).__webglTexture;
        state.bindTexture(target, webglTexture);
        generateMipmap(target, texture, renderTarget.width, renderTarget.height);
        state.bindTexture(target, null);
      }
    }
    function updateMultisampleRenderTarget(renderTarget) {
      if (renderTarget.isWebGLMultisampleRenderTarget) {
        if (isWebGL2) {
          const renderTargetProperties = properties.get(renderTarget);
          _gl.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);
          _gl.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);
          const width = renderTarget.width;
          const height = renderTarget.height;
          let mask = 16384;
          if (renderTarget.depthBuffer)
            mask |= 256;
          if (renderTarget.stencilBuffer)
            mask |= 1024;
          _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);
          _gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
        } else {
          console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
        }
      }
    }
    function getRenderTargetSamples(renderTarget) {
      return isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;
    }
    function updateVideoTexture(texture) {
      const frame = info.render.frame;
      if (_videoTextures.get(texture) !== frame) {
        _videoTextures.set(texture, frame);
        texture.update();
      }
    }
    let warnedTexture2D = false;
    let warnedTextureCube = false;
    function safeSetTexture2D(texture, slot) {
      if (texture && texture.isWebGLRenderTarget) {
        if (warnedTexture2D === false) {
          console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.");
          warnedTexture2D = true;
        }
        texture = texture.texture;
      }
      setTexture2D(texture, slot);
    }
    function safeSetTextureCube(texture, slot) {
      if (texture && texture.isWebGLCubeRenderTarget) {
        if (warnedTextureCube === false) {
          console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.");
          warnedTextureCube = true;
        }
        texture = texture.texture;
      }
      setTextureCube(texture, slot);
    }
    this.allocateTextureUnit = allocateTextureUnit;
    this.resetTextureUnits = resetTextureUnits;
    this.setTexture2D = setTexture2D;
    this.setTexture2DArray = setTexture2DArray;
    this.setTexture3D = setTexture3D;
    this.setTextureCube = setTextureCube;
    this.setupRenderTarget = setupRenderTarget;
    this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    this.safeSetTexture2D = safeSetTexture2D;
    this.safeSetTextureCube = safeSetTextureCube;
  }
  function WebGLUtils(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function convert(p) {
      let extension;
      if (p === UnsignedByteType)
        return 5121;
      if (p === UnsignedShort4444Type)
        return 32819;
      if (p === UnsignedShort5551Type)
        return 32820;
      if (p === UnsignedShort565Type)
        return 33635;
      if (p === ByteType)
        return 5120;
      if (p === ShortType)
        return 5122;
      if (p === UnsignedShortType)
        return 5123;
      if (p === IntType)
        return 5124;
      if (p === UnsignedIntType)
        return 5125;
      if (p === FloatType)
        return 5126;
      if (p === HalfFloatType) {
        if (isWebGL2)
          return 5131;
        extension = extensions.get("OES_texture_half_float");
        if (extension !== null) {
          return extension.HALF_FLOAT_OES;
        } else {
          return null;
        }
      }
      if (p === AlphaFormat)
        return 6406;
      if (p === RGBFormat)
        return 6407;
      if (p === RGBAFormat)
        return 6408;
      if (p === LuminanceFormat)
        return 6409;
      if (p === LuminanceAlphaFormat)
        return 6410;
      if (p === DepthFormat)
        return 6402;
      if (p === DepthStencilFormat)
        return 34041;
      if (p === RedFormat)
        return 6403;
      if (p === RedIntegerFormat)
        return 36244;
      if (p === RGFormat)
        return 33319;
      if (p === RGIntegerFormat)
        return 33320;
      if (p === RGBIntegerFormat)
        return 36248;
      if (p === RGBAIntegerFormat)
        return 36249;
      if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
        extension = extensions.get("WEBGL_compressed_texture_s3tc");
        if (extension !== null) {
          if (p === RGB_S3TC_DXT1_Format)
            return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
          if (p === RGBA_S3TC_DXT1_Format)
            return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          if (p === RGBA_S3TC_DXT3_Format)
            return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          if (p === RGBA_S3TC_DXT5_Format)
            return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      }
      if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
        extension = extensions.get("WEBGL_compressed_texture_pvrtc");
        if (extension !== null) {
          if (p === RGB_PVRTC_4BPPV1_Format)
            return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
          if (p === RGB_PVRTC_2BPPV1_Format)
            return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
          if (p === RGBA_PVRTC_4BPPV1_Format)
            return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
          if (p === RGBA_PVRTC_2BPPV1_Format)
            return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        } else {
          return null;
        }
      }
      if (p === RGB_ETC1_Format) {
        extension = extensions.get("WEBGL_compressed_texture_etc1");
        if (extension !== null) {
          return extension.COMPRESSED_RGB_ETC1_WEBGL;
        } else {
          return null;
        }
      }
      if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
        extension = extensions.get("WEBGL_compressed_texture_etc");
        if (extension !== null) {
          if (p === RGB_ETC2_Format)
            return extension.COMPRESSED_RGB8_ETC2;
          if (p === RGBA_ETC2_EAC_Format)
            return extension.COMPRESSED_RGBA8_ETC2_EAC;
        }
      }
      if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {
        extension = extensions.get("WEBGL_compressed_texture_astc");
        if (extension !== null) {
          return p;
        } else {
          return null;
        }
      }
      if (p === RGBA_BPTC_Format) {
        extension = extensions.get("EXT_texture_compression_bptc");
        if (extension !== null) {
          return p;
        } else {
          return null;
        }
      }
      if (p === UnsignedInt248Type) {
        if (isWebGL2)
          return 34042;
        extension = extensions.get("WEBGL_depth_texture");
        if (extension !== null) {
          return extension.UNSIGNED_INT_24_8_WEBGL;
        } else {
          return null;
        }
      }
    }
    return {convert};
  }
  function ArrayCamera(array = []) {
    PerspectiveCamera.call(this);
    this.cameras = array;
  }
  ArrayCamera.prototype = Object.assign(Object.create(PerspectiveCamera.prototype), {
    constructor: ArrayCamera,
    isArrayCamera: true
  });
  function Group() {
    Object3D.call(this);
    this.type = "Group";
  }
  Group.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Group,
    isGroup: true
  });
  function WebXRController() {
    this._targetRay = null;
    this._grip = null;
    this._hand = null;
  }
  Object.assign(WebXRController.prototype, {
    constructor: WebXRController,
    getHandSpace: function() {
      if (this._hand === null) {
        this._hand = new Group();
        this._hand.matrixAutoUpdate = false;
        this._hand.visible = false;
        this._hand.joints = [];
        this._hand.inputState = {pinching: false};
        if (window.XRHand) {
          for (let i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i++) {
            const joint = new Group();
            joint.matrixAutoUpdate = false;
            joint.visible = false;
            this._hand.joints.push(joint);
            this._hand.add(joint);
          }
        }
      }
      return this._hand;
    },
    getTargetRaySpace: function() {
      if (this._targetRay === null) {
        this._targetRay = new Group();
        this._targetRay.matrixAutoUpdate = false;
        this._targetRay.visible = false;
      }
      return this._targetRay;
    },
    getGripSpace: function() {
      if (this._grip === null) {
        this._grip = new Group();
        this._grip.matrixAutoUpdate = false;
        this._grip.visible = false;
      }
      return this._grip;
    },
    dispatchEvent: function(event) {
      if (this._targetRay !== null) {
        this._targetRay.dispatchEvent(event);
      }
      if (this._grip !== null) {
        this._grip.dispatchEvent(event);
      }
      if (this._hand !== null) {
        this._hand.dispatchEvent(event);
      }
      return this;
    },
    disconnect: function(inputSource) {
      this.dispatchEvent({type: "disconnected", data: inputSource});
      if (this._targetRay !== null) {
        this._targetRay.visible = false;
      }
      if (this._grip !== null) {
        this._grip.visible = false;
      }
      if (this._hand !== null) {
        this._hand.visible = false;
      }
      return this;
    },
    update: function(inputSource, frame, referenceSpace) {
      let inputPose = null;
      let gripPose = null;
      let handPose = null;
      const targetRay = this._targetRay;
      const grip = this._grip;
      const hand = this._hand;
      if (inputSource && frame.session.visibilityState !== "visible-blurred") {
        if (hand && inputSource.hand) {
          handPose = true;
          for (let i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i++) {
            if (inputSource.hand[i]) {
              const jointPose = frame.getJointPose(inputSource.hand[i], referenceSpace);
              const joint = hand.joints[i];
              if (jointPose !== null) {
                joint.matrix.fromArray(jointPose.transform.matrix);
                joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
                joint.jointRadius = jointPose.radius;
              }
              joint.visible = jointPose !== null;
              const indexTip = hand.joints[window.XRHand.INDEX_PHALANX_TIP];
              const thumbTip = hand.joints[window.XRHand.THUMB_PHALANX_TIP];
              const distance = indexTip.position.distanceTo(thumbTip.position);
              const distanceToPinch = 0.02;
              const threshold = 5e-3;
              if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
                hand.inputState.pinching = false;
                this.dispatchEvent({
                  type: "pinchend",
                  handedness: inputSource.handedness,
                  target: this
                });
              } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
                hand.inputState.pinching = true;
                this.dispatchEvent({
                  type: "pinchstart",
                  handedness: inputSource.handedness,
                  target: this
                });
              }
            }
          }
        } else {
          if (targetRay !== null) {
            inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
            if (inputPose !== null) {
              targetRay.matrix.fromArray(inputPose.transform.matrix);
              targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
            }
          }
          if (grip !== null && inputSource.gripSpace) {
            gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
            if (gripPose !== null) {
              grip.matrix.fromArray(gripPose.transform.matrix);
              grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
            }
          }
        }
      }
      if (targetRay !== null) {
        targetRay.visible = inputPose !== null;
      }
      if (grip !== null) {
        grip.visible = gripPose !== null;
      }
      if (hand !== null) {
        hand.visible = handPose !== null;
      }
      return this;
    }
  });
  function WebXRManager(renderer2, gl) {
    const scope = this;
    let session = null;
    let framebufferScaleFactor = 1;
    let referenceSpace = null;
    let referenceSpaceType = "local-floor";
    let pose = null;
    const controllers = [];
    const inputSourcesMap = new Map();
    const cameraL = new PerspectiveCamera();
    cameraL.layers.enable(1);
    cameraL.viewport = new Vector4();
    const cameraR = new PerspectiveCamera();
    cameraR.layers.enable(2);
    cameraR.viewport = new Vector4();
    const cameras = [cameraL, cameraR];
    const cameraVR = new ArrayCamera();
    cameraVR.layers.enable(1);
    cameraVR.layers.enable(2);
    let _currentDepthNear = null;
    let _currentDepthFar = null;
    this.enabled = false;
    this.isPresenting = false;
    this.getController = function(index) {
      let controller = controllers[index];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index] = controller;
      }
      return controller.getTargetRaySpace();
    };
    this.getControllerGrip = function(index) {
      let controller = controllers[index];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index] = controller;
      }
      return controller.getGripSpace();
    };
    this.getHand = function(index) {
      let controller = controllers[index];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index] = controller;
      }
      return controller.getHandSpace();
    };
    function onSessionEvent(event) {
      const controller = inputSourcesMap.get(event.inputSource);
      if (controller) {
        controller.dispatchEvent({type: event.type, data: event.inputSource});
      }
    }
    function onSessionEnd() {
      inputSourcesMap.forEach(function(controller, inputSource) {
        controller.disconnect(inputSource);
      });
      inputSourcesMap.clear();
      renderer2.setFramebuffer(null);
      renderer2.setRenderTarget(renderer2.getRenderTarget());
      animation.stop();
      scope.isPresenting = false;
      scope.dispatchEvent({type: "sessionend"});
    }
    function onRequestReferenceSpace(value) {
      referenceSpace = value;
      animation.setContext(session);
      animation.start();
      scope.isPresenting = true;
      scope.dispatchEvent({type: "sessionstart"});
    }
    this.setFramebufferScaleFactor = function(value) {
      framebufferScaleFactor = value;
      if (scope.isPresenting === true) {
        console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
      }
    };
    this.setReferenceSpaceType = function(value) {
      referenceSpaceType = value;
      if (scope.isPresenting === true) {
        console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
      }
    };
    this.getReferenceSpace = function() {
      return referenceSpace;
    };
    this.getSession = function() {
      return session;
    };
    this.setSession = function(value) {
      session = value;
      if (session !== null) {
        session.addEventListener("select", onSessionEvent);
        session.addEventListener("selectstart", onSessionEvent);
        session.addEventListener("selectend", onSessionEvent);
        session.addEventListener("squeeze", onSessionEvent);
        session.addEventListener("squeezestart", onSessionEvent);
        session.addEventListener("squeezeend", onSessionEvent);
        session.addEventListener("end", onSessionEnd);
        const attributes = gl.getContextAttributes();
        if (attributes.xrCompatible !== true) {
          gl.makeXRCompatible();
        }
        const layerInit = {
          antialias: attributes.antialias,
          alpha: attributes.alpha,
          depth: attributes.depth,
          stencil: attributes.stencil,
          framebufferScaleFactor
        };
        const baseLayer = new XRWebGLLayer(session, gl, layerInit);
        session.updateRenderState({baseLayer});
        session.requestReferenceSpace(referenceSpaceType).then(onRequestReferenceSpace);
        session.addEventListener("inputsourceschange", updateInputSources);
      }
    };
    function updateInputSources(event) {
      const inputSources = session.inputSources;
      for (let i = 0; i < controllers.length; i++) {
        inputSourcesMap.set(inputSources[i], controllers[i]);
      }
      for (let i = 0; i < event.removed.length; i++) {
        const inputSource = event.removed[i];
        const controller = inputSourcesMap.get(inputSource);
        if (controller) {
          controller.dispatchEvent({type: "disconnected", data: inputSource});
          inputSourcesMap.delete(inputSource);
        }
      }
      for (let i = 0; i < event.added.length; i++) {
        const inputSource = event.added[i];
        const controller = inputSourcesMap.get(inputSource);
        if (controller) {
          controller.dispatchEvent({type: "connected", data: inputSource});
        }
      }
    }
    const cameraLPos = new Vector3();
    const cameraRPos = new Vector3();
    function setProjectionFromUnion(camera2, cameraL2, cameraR2) {
      cameraLPos.setFromMatrixPosition(cameraL2.matrixWorld);
      cameraRPos.setFromMatrixPosition(cameraR2.matrixWorld);
      const ipd = cameraLPos.distanceTo(cameraRPos);
      const projL = cameraL2.projectionMatrix.elements;
      const projR = cameraR2.projectionMatrix.elements;
      const near = projL[14] / (projL[10] - 1);
      const far = projL[14] / (projL[10] + 1);
      const topFov = (projL[9] + 1) / projL[5];
      const bottomFov = (projL[9] - 1) / projL[5];
      const leftFov = (projL[8] - 1) / projL[0];
      const rightFov = (projR[8] + 1) / projR[0];
      const left = near * leftFov;
      const right = near * rightFov;
      const zOffset = ipd / (-leftFov + rightFov);
      const xOffset = zOffset * -leftFov;
      cameraL2.matrixWorld.decompose(camera2.position, camera2.quaternion, camera2.scale);
      camera2.translateX(xOffset);
      camera2.translateZ(zOffset);
      camera2.matrixWorld.compose(camera2.position, camera2.quaternion, camera2.scale);
      camera2.matrixWorldInverse.copy(camera2.matrixWorld).invert();
      const near2 = near + zOffset;
      const far2 = far + zOffset;
      const left2 = left - xOffset;
      const right2 = right + (ipd - xOffset);
      const top2 = topFov * far / far2 * near2;
      const bottom2 = bottomFov * far / far2 * near2;
      camera2.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
    }
    function updateCamera(camera2, parent) {
      if (parent === null) {
        camera2.matrixWorld.copy(camera2.matrix);
      } else {
        camera2.matrixWorld.multiplyMatrices(parent.matrixWorld, camera2.matrix);
      }
      camera2.matrixWorldInverse.copy(camera2.matrixWorld).invert();
    }
    this.getCamera = function(camera2) {
      cameraVR.near = cameraR.near = cameraL.near = camera2.near;
      cameraVR.far = cameraR.far = cameraL.far = camera2.far;
      if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {
        session.updateRenderState({
          depthNear: cameraVR.near,
          depthFar: cameraVR.far
        });
        _currentDepthNear = cameraVR.near;
        _currentDepthFar = cameraVR.far;
      }
      const parent = camera2.parent;
      const cameras2 = cameraVR.cameras;
      updateCamera(cameraVR, parent);
      for (let i = 0; i < cameras2.length; i++) {
        updateCamera(cameras2[i], parent);
      }
      camera2.matrixWorld.copy(cameraVR.matrixWorld);
      const children = camera2.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].updateMatrixWorld(true);
      }
      if (cameras2.length === 2) {
        setProjectionFromUnion(cameraVR, cameraL, cameraR);
      } else {
        cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);
      }
      return cameraVR;
    };
    let onAnimationFrameCallback = null;
    function onAnimationFrame(time, frame) {
      pose = frame.getViewerPose(referenceSpace);
      if (pose !== null) {
        const views = pose.views;
        const baseLayer = session.renderState.baseLayer;
        renderer2.setFramebuffer(baseLayer.framebuffer);
        let cameraVRNeedsUpdate = false;
        if (views.length !== cameraVR.cameras.length) {
          cameraVR.cameras.length = 0;
          cameraVRNeedsUpdate = true;
        }
        for (let i = 0; i < views.length; i++) {
          const view = views[i];
          const viewport = baseLayer.getViewport(view);
          const camera2 = cameras[i];
          camera2.matrix.fromArray(view.transform.matrix);
          camera2.projectionMatrix.fromArray(view.projectionMatrix);
          camera2.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
          if (i === 0) {
            cameraVR.matrix.copy(camera2.matrix);
          }
          if (cameraVRNeedsUpdate === true) {
            cameraVR.cameras.push(camera2);
          }
        }
      }
      const inputSources = session.inputSources;
      for (let i = 0; i < controllers.length; i++) {
        const controller = controllers[i];
        const inputSource = inputSources[i];
        controller.update(inputSource, frame, referenceSpace);
      }
      if (onAnimationFrameCallback)
        onAnimationFrameCallback(time, frame);
    }
    const animation = new WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);
    this.setAnimationLoop = function(callback) {
      onAnimationFrameCallback = callback;
    };
    this.dispose = function() {
    };
  }
  Object.assign(WebXRManager.prototype, EventDispatcher.prototype);
  function WebGLMaterials(properties) {
    function refreshFogUniforms(uniforms, fog) {
      uniforms.fogColor.value.copy(fog.color);
      if (fog.isFog) {
        uniforms.fogNear.value = fog.near;
        uniforms.fogFar.value = fog.far;
      } else if (fog.isFogExp2) {
        uniforms.fogDensity.value = fog.density;
      }
    }
    function refreshMaterialUniforms(uniforms, material, pixelRatio, height) {
      if (material.isMeshBasicMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshLambertMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsLambert(uniforms, material);
      } else if (material.isMeshToonMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsToon(uniforms, material);
      } else if (material.isMeshPhongMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsPhong(uniforms, material);
      } else if (material.isMeshStandardMaterial) {
        refreshUniformsCommon(uniforms, material);
        if (material.isMeshPhysicalMaterial) {
          refreshUniformsPhysical(uniforms, material);
        } else {
          refreshUniformsStandard(uniforms, material);
        }
      } else if (material.isMeshMatcapMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsMatcap(uniforms, material);
      } else if (material.isMeshDepthMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsDepth(uniforms, material);
      } else if (material.isMeshDistanceMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsDistance(uniforms, material);
      } else if (material.isMeshNormalMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsNormal(uniforms, material);
      } else if (material.isLineBasicMaterial) {
        refreshUniformsLine(uniforms, material);
        if (material.isLineDashedMaterial) {
          refreshUniformsDash(uniforms, material);
        }
      } else if (material.isPointsMaterial) {
        refreshUniformsPoints(uniforms, material, pixelRatio, height);
      } else if (material.isSpriteMaterial) {
        refreshUniformsSprites(uniforms, material);
      } else if (material.isShadowMaterial) {
        uniforms.color.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
      } else if (material.isShaderMaterial) {
        material.uniformsNeedUpdate = false;
      }
    }
    function refreshUniformsCommon(uniforms, material) {
      uniforms.opacity.value = material.opacity;
      if (material.color) {
        uniforms.diffuse.value.copy(material.color);
      }
      if (material.emissive) {
        uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
      }
      if (material.map) {
        uniforms.map.value = material.map;
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
      }
      if (material.specularMap) {
        uniforms.specularMap.value = material.specularMap;
      }
      const envMap = properties.get(material).envMap;
      if (envMap) {
        uniforms.envMap.value = envMap;
        uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;
        uniforms.reflectivity.value = material.reflectivity;
        uniforms.refractionRatio.value = material.refractionRatio;
        const maxMipLevel = properties.get(envMap).__maxMipLevel;
        if (maxMipLevel !== void 0) {
          uniforms.maxMipLevel.value = maxMipLevel;
        }
      }
      if (material.lightMap) {
        uniforms.lightMap.value = material.lightMap;
        uniforms.lightMapIntensity.value = material.lightMapIntensity;
      }
      if (material.aoMap) {
        uniforms.aoMap.value = material.aoMap;
        uniforms.aoMapIntensity.value = material.aoMapIntensity;
      }
      let uvScaleMap;
      if (material.map) {
        uvScaleMap = material.map;
      } else if (material.specularMap) {
        uvScaleMap = material.specularMap;
      } else if (material.displacementMap) {
        uvScaleMap = material.displacementMap;
      } else if (material.normalMap) {
        uvScaleMap = material.normalMap;
      } else if (material.bumpMap) {
        uvScaleMap = material.bumpMap;
      } else if (material.roughnessMap) {
        uvScaleMap = material.roughnessMap;
      } else if (material.metalnessMap) {
        uvScaleMap = material.metalnessMap;
      } else if (material.alphaMap) {
        uvScaleMap = material.alphaMap;
      } else if (material.emissiveMap) {
        uvScaleMap = material.emissiveMap;
      } else if (material.clearcoatMap) {
        uvScaleMap = material.clearcoatMap;
      } else if (material.clearcoatNormalMap) {
        uvScaleMap = material.clearcoatNormalMap;
      } else if (material.clearcoatRoughnessMap) {
        uvScaleMap = material.clearcoatRoughnessMap;
      }
      if (uvScaleMap !== void 0) {
        if (uvScaleMap.isWebGLRenderTarget) {
          uvScaleMap = uvScaleMap.texture;
        }
        if (uvScaleMap.matrixAutoUpdate === true) {
          uvScaleMap.updateMatrix();
        }
        uniforms.uvTransform.value.copy(uvScaleMap.matrix);
      }
      let uv2ScaleMap;
      if (material.aoMap) {
        uv2ScaleMap = material.aoMap;
      } else if (material.lightMap) {
        uv2ScaleMap = material.lightMap;
      }
      if (uv2ScaleMap !== void 0) {
        if (uv2ScaleMap.isWebGLRenderTarget) {
          uv2ScaleMap = uv2ScaleMap.texture;
        }
        if (uv2ScaleMap.matrixAutoUpdate === true) {
          uv2ScaleMap.updateMatrix();
        }
        uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);
      }
    }
    function refreshUniformsLine(uniforms, material) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
    }
    function refreshUniformsDash(uniforms, material) {
      uniforms.dashSize.value = material.dashSize;
      uniforms.totalSize.value = material.dashSize + material.gapSize;
      uniforms.scale.value = material.scale;
    }
    function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      uniforms.size.value = material.size * pixelRatio;
      uniforms.scale.value = height * 0.5;
      if (material.map) {
        uniforms.map.value = material.map;
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
      }
      let uvScaleMap;
      if (material.map) {
        uvScaleMap = material.map;
      } else if (material.alphaMap) {
        uvScaleMap = material.alphaMap;
      }
      if (uvScaleMap !== void 0) {
        if (uvScaleMap.matrixAutoUpdate === true) {
          uvScaleMap.updateMatrix();
        }
        uniforms.uvTransform.value.copy(uvScaleMap.matrix);
      }
    }
    function refreshUniformsSprites(uniforms, material) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      uniforms.rotation.value = material.rotation;
      if (material.map) {
        uniforms.map.value = material.map;
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
      }
      let uvScaleMap;
      if (material.map) {
        uvScaleMap = material.map;
      } else if (material.alphaMap) {
        uvScaleMap = material.alphaMap;
      }
      if (uvScaleMap !== void 0) {
        if (uvScaleMap.matrixAutoUpdate === true) {
          uvScaleMap.updateMatrix();
        }
        uniforms.uvTransform.value.copy(uvScaleMap.matrix);
      }
    }
    function refreshUniformsLambert(uniforms, material) {
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
      }
    }
    function refreshUniformsPhong(uniforms, material) {
      uniforms.specular.value.copy(material.specular);
      uniforms.shininess.value = Math.max(material.shininess, 1e-4);
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    function refreshUniformsToon(uniforms, material) {
      if (material.gradientMap) {
        uniforms.gradientMap.value = material.gradientMap;
      }
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    function refreshUniformsStandard(uniforms, material) {
      uniforms.roughness.value = material.roughness;
      uniforms.metalness.value = material.metalness;
      if (material.roughnessMap) {
        uniforms.roughnessMap.value = material.roughnessMap;
      }
      if (material.metalnessMap) {
        uniforms.metalnessMap.value = material.metalnessMap;
      }
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
      const envMap = properties.get(material).envMap;
      if (envMap) {
        uniforms.envMapIntensity.value = material.envMapIntensity;
      }
    }
    function refreshUniformsPhysical(uniforms, material) {
      refreshUniformsStandard(uniforms, material);
      uniforms.reflectivity.value = material.reflectivity;
      uniforms.clearcoat.value = material.clearcoat;
      uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
      if (material.sheen)
        uniforms.sheen.value.copy(material.sheen);
      if (material.clearcoatMap) {
        uniforms.clearcoatMap.value = material.clearcoatMap;
      }
      if (material.clearcoatRoughnessMap) {
        uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
      }
      if (material.clearcoatNormalMap) {
        uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
        uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
        if (material.side === BackSide) {
          uniforms.clearcoatNormalScale.value.negate();
        }
      }
      uniforms.transmission.value = material.transmission;
      if (material.transmissionMap) {
        uniforms.transmissionMap.value = material.transmissionMap;
      }
    }
    function refreshUniformsMatcap(uniforms, material) {
      if (material.matcap) {
        uniforms.matcap.value = material.matcap;
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    function refreshUniformsDepth(uniforms, material) {
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    function refreshUniformsDistance(uniforms, material) {
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
      uniforms.referencePosition.value.copy(material.referencePosition);
      uniforms.nearDistance.value = material.nearDistance;
      uniforms.farDistance.value = material.farDistance;
    }
    function refreshUniformsNormal(uniforms, material) {
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    return {
      refreshFogUniforms,
      refreshMaterialUniforms
    };
  }
  function createCanvasElement() {
    const canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
    canvas.style.display = "block";
    return canvas;
  }
  function WebGLRenderer(parameters) {
    parameters = parameters || {};
    const _canvas2 = parameters.canvas !== void 0 ? parameters.canvas : createCanvasElement(), _context2 = parameters.context !== void 0 ? parameters.context : null, _alpha = parameters.alpha !== void 0 ? parameters.alpha : false, _depth = parameters.depth !== void 0 ? parameters.depth : true, _stencil = parameters.stencil !== void 0 ? parameters.stencil : true, _antialias = parameters.antialias !== void 0 ? parameters.antialias : false, _premultipliedAlpha = parameters.premultipliedAlpha !== void 0 ? parameters.premultipliedAlpha : true, _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== void 0 ? parameters.preserveDrawingBuffer : false, _powerPreference = parameters.powerPreference !== void 0 ? parameters.powerPreference : "default", _failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== void 0 ? parameters.failIfMajorPerformanceCaveat : false;
    let currentRenderList = null;
    let currentRenderState = null;
    this.domElement = _canvas2;
    this.debug = {
      checkShaderErrors: true
    };
    this.autoClear = true;
    this.autoClearColor = true;
    this.autoClearDepth = true;
    this.autoClearStencil = true;
    this.sortObjects = true;
    this.clippingPlanes = [];
    this.localClippingEnabled = false;
    this.gammaFactor = 2;
    this.outputEncoding = LinearEncoding;
    this.physicallyCorrectLights = false;
    this.toneMapping = NoToneMapping;
    this.toneMappingExposure = 1;
    this.maxMorphTargets = 8;
    this.maxMorphNormals = 4;
    const _this = this;
    let _isContextLost = false;
    let _framebuffer = null;
    let _currentActiveCubeFace = 0;
    let _currentActiveMipmapLevel = 0;
    let _currentRenderTarget = null;
    let _currentFramebuffer = null;
    let _currentMaterialId = -1;
    let _currentCamera = null;
    let _currentArrayCamera = null;
    const _currentViewport = new Vector4();
    const _currentScissor = new Vector4();
    let _currentScissorTest = null;
    let _width = _canvas2.width;
    let _height = _canvas2.height;
    let _pixelRatio = 1;
    let _opaqueSort = null;
    let _transparentSort = null;
    const _viewport = new Vector4(0, 0, _width, _height);
    const _scissor = new Vector4(0, 0, _width, _height);
    let _scissorTest = false;
    const _frustum = new Frustum();
    let _clippingEnabled = false;
    let _localClippingEnabled = false;
    const _projScreenMatrix = new Matrix4();
    const _vector3 = new Vector3();
    const _emptyScene = {background: null, fog: null, environment: null, overrideMaterial: null, isScene: true};
    function getTargetPixelRatio() {
      return _currentRenderTarget === null ? _pixelRatio : 1;
    }
    let _gl = _context2;
    function getContext(contextNames, contextAttributes) {
      for (let i = 0; i < contextNames.length; i++) {
        const contextName = contextNames[i];
        const context = _canvas2.getContext(contextName, contextAttributes);
        if (context !== null)
          return context;
      }
      return null;
    }
    try {
      const contextAttributes = {
        alpha: _alpha,
        depth: _depth,
        stencil: _stencil,
        antialias: _antialias,
        premultipliedAlpha: _premultipliedAlpha,
        preserveDrawingBuffer: _preserveDrawingBuffer,
        powerPreference: _powerPreference,
        failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
      };
      _canvas2.addEventListener("webglcontextlost", onContextLost, false);
      _canvas2.addEventListener("webglcontextrestored", onContextRestore, false);
      if (_gl === null) {
        const contextNames = ["webgl2", "webgl", "experimental-webgl"];
        if (_this.isWebGL1Renderer === true) {
          contextNames.shift();
        }
        _gl = getContext(contextNames, contextAttributes);
        if (_gl === null) {
          if (getContext(contextNames)) {
            throw new Error("Error creating WebGL context with your selected attributes.");
          } else {
            throw new Error("Error creating WebGL context.");
          }
        }
      }
      if (_gl.getShaderPrecisionFormat === void 0) {
        _gl.getShaderPrecisionFormat = function() {
          return {rangeMin: 1, rangeMax: 1, precision: 1};
        };
      }
    } catch (error) {
      console.error("THREE.WebGLRenderer: " + error.message);
      throw error;
    }
    let extensions, capabilities, state, info;
    let properties, textures, cubemaps, attributes, geometries, objects;
    let programCache, materials, renderLists, renderStates, clipping;
    let background, morphtargets, bufferRenderer, indexedBufferRenderer;
    let utils, bindingStates;
    function initGLContext() {
      extensions = new WebGLExtensions(_gl);
      capabilities = new WebGLCapabilities(_gl, extensions, parameters);
      if (capabilities.isWebGL2 === false) {
        extensions.get("WEBGL_depth_texture");
        extensions.get("OES_texture_float");
        extensions.get("OES_texture_half_float");
        extensions.get("OES_texture_half_float_linear");
        extensions.get("OES_standard_derivatives");
        extensions.get("OES_element_index_uint");
        extensions.get("OES_vertex_array_object");
        extensions.get("ANGLE_instanced_arrays");
      }
      extensions.get("OES_texture_float_linear");
      utils = new WebGLUtils(_gl, extensions, capabilities);
      state = new WebGLState(_gl, extensions, capabilities);
      state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
      state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
      info = new WebGLInfo(_gl);
      properties = new WebGLProperties();
      textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
      cubemaps = new WebGLCubeMaps(_this);
      attributes = new WebGLAttributes(_gl, capabilities);
      bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);
      geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
      objects = new WebGLObjects(_gl, geometries, attributes, info);
      morphtargets = new WebGLMorphtargets(_gl);
      clipping = new WebGLClipping(properties);
      programCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);
      materials = new WebGLMaterials(properties);
      renderLists = new WebGLRenderLists(properties);
      renderStates = new WebGLRenderStates(extensions, capabilities);
      background = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);
      bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);
      indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
      info.programs = programCache.programs;
      _this.capabilities = capabilities;
      _this.extensions = extensions;
      _this.properties = properties;
      _this.renderLists = renderLists;
      _this.state = state;
      _this.info = info;
    }
    initGLContext();
    const xr = new WebXRManager(_this, _gl);
    this.xr = xr;
    const shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);
    this.shadowMap = shadowMap;
    this.getContext = function() {
      return _gl;
    };
    this.getContextAttributes = function() {
      return _gl.getContextAttributes();
    };
    this.forceContextLoss = function() {
      const extension = extensions.get("WEBGL_lose_context");
      if (extension)
        extension.loseContext();
    };
    this.forceContextRestore = function() {
      const extension = extensions.get("WEBGL_lose_context");
      if (extension)
        extension.restoreContext();
    };
    this.getPixelRatio = function() {
      return _pixelRatio;
    };
    this.setPixelRatio = function(value) {
      if (value === void 0)
        return;
      _pixelRatio = value;
      this.setSize(_width, _height, false);
    };
    this.getSize = function(target) {
      if (target === void 0) {
        console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument");
        target = new Vector2();
      }
      return target.set(_width, _height);
    };
    this.setSize = function(width, height, updateStyle) {
      if (xr.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      _width = width;
      _height = height;
      _canvas2.width = Math.floor(width * _pixelRatio);
      _canvas2.height = Math.floor(height * _pixelRatio);
      if (updateStyle !== false) {
        _canvas2.style.width = width + "px";
        _canvas2.style.height = height + "px";
      }
      this.setViewport(0, 0, width, height);
    };
    this.getDrawingBufferSize = function(target) {
      if (target === void 0) {
        console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument");
        target = new Vector2();
      }
      return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
    };
    this.setDrawingBufferSize = function(width, height, pixelRatio) {
      _width = width;
      _height = height;
      _pixelRatio = pixelRatio;
      _canvas2.width = Math.floor(width * pixelRatio);
      _canvas2.height = Math.floor(height * pixelRatio);
      this.setViewport(0, 0, width, height);
    };
    this.getCurrentViewport = function(target) {
      if (target === void 0) {
        console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument");
        target = new Vector4();
      }
      return target.copy(_currentViewport);
    };
    this.getViewport = function(target) {
      return target.copy(_viewport);
    };
    this.setViewport = function(x, y, width, height) {
      if (x.isVector4) {
        _viewport.set(x.x, x.y, x.z, x.w);
      } else {
        _viewport.set(x, y, width, height);
      }
      state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
    };
    this.getScissor = function(target) {
      return target.copy(_scissor);
    };
    this.setScissor = function(x, y, width, height) {
      if (x.isVector4) {
        _scissor.set(x.x, x.y, x.z, x.w);
      } else {
        _scissor.set(x, y, width, height);
      }
      state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
    };
    this.getScissorTest = function() {
      return _scissorTest;
    };
    this.setScissorTest = function(boolean) {
      state.setScissorTest(_scissorTest = boolean);
    };
    this.setOpaqueSort = function(method) {
      _opaqueSort = method;
    };
    this.setTransparentSort = function(method) {
      _transparentSort = method;
    };
    this.getClearColor = function() {
      return background.getClearColor();
    };
    this.setClearColor = function() {
      background.setClearColor.apply(background, arguments);
    };
    this.getClearAlpha = function() {
      return background.getClearAlpha();
    };
    this.setClearAlpha = function() {
      background.setClearAlpha.apply(background, arguments);
    };
    this.clear = function(color, depth, stencil) {
      let bits = 0;
      if (color === void 0 || color)
        bits |= 16384;
      if (depth === void 0 || depth)
        bits |= 256;
      if (stencil === void 0 || stencil)
        bits |= 1024;
      _gl.clear(bits);
    };
    this.clearColor = function() {
      this.clear(true, false, false);
    };
    this.clearDepth = function() {
      this.clear(false, true, false);
    };
    this.clearStencil = function() {
      this.clear(false, false, true);
    };
    this.dispose = function() {
      _canvas2.removeEventListener("webglcontextlost", onContextLost, false);
      _canvas2.removeEventListener("webglcontextrestored", onContextRestore, false);
      renderLists.dispose();
      renderStates.dispose();
      properties.dispose();
      cubemaps.dispose();
      objects.dispose();
      bindingStates.dispose();
      xr.dispose();
      animation.stop();
    };
    function onContextLost(event) {
      event.preventDefault();
      console.log("THREE.WebGLRenderer: Context Lost.");
      _isContextLost = true;
    }
    function onContextRestore() {
      console.log("THREE.WebGLRenderer: Context Restored.");
      _isContextLost = false;
      initGLContext();
    }
    function onMaterialDispose(event) {
      const material = event.target;
      material.removeEventListener("dispose", onMaterialDispose);
      deallocateMaterial(material);
    }
    function deallocateMaterial(material) {
      releaseMaterialProgramReference(material);
      properties.remove(material);
    }
    function releaseMaterialProgramReference(material) {
      const programInfo = properties.get(material).program;
      if (programInfo !== void 0) {
        programCache.releaseProgram(programInfo);
      }
    }
    function renderObjectImmediate(object, program) {
      object.render(function(object2) {
        _this.renderBufferImmediate(object2, program);
      });
    }
    this.renderBufferImmediate = function(object, program) {
      bindingStates.initAttributes();
      const buffers = properties.get(object);
      if (object.hasPositions && !buffers.position)
        buffers.position = _gl.createBuffer();
      if (object.hasNormals && !buffers.normal)
        buffers.normal = _gl.createBuffer();
      if (object.hasUvs && !buffers.uv)
        buffers.uv = _gl.createBuffer();
      if (object.hasColors && !buffers.color)
        buffers.color = _gl.createBuffer();
      const programAttributes = program.getAttributes();
      if (object.hasPositions) {
        _gl.bindBuffer(34962, buffers.position);
        _gl.bufferData(34962, object.positionArray, 35048);
        bindingStates.enableAttribute(programAttributes.position);
        _gl.vertexAttribPointer(programAttributes.position, 3, 5126, false, 0, 0);
      }
      if (object.hasNormals) {
        _gl.bindBuffer(34962, buffers.normal);
        _gl.bufferData(34962, object.normalArray, 35048);
        bindingStates.enableAttribute(programAttributes.normal);
        _gl.vertexAttribPointer(programAttributes.normal, 3, 5126, false, 0, 0);
      }
      if (object.hasUvs) {
        _gl.bindBuffer(34962, buffers.uv);
        _gl.bufferData(34962, object.uvArray, 35048);
        bindingStates.enableAttribute(programAttributes.uv);
        _gl.vertexAttribPointer(programAttributes.uv, 2, 5126, false, 0, 0);
      }
      if (object.hasColors) {
        _gl.bindBuffer(34962, buffers.color);
        _gl.bufferData(34962, object.colorArray, 35048);
        bindingStates.enableAttribute(programAttributes.color);
        _gl.vertexAttribPointer(programAttributes.color, 3, 5126, false, 0, 0);
      }
      bindingStates.disableUnusedAttributes();
      _gl.drawArrays(4, 0, object.count);
      object.count = 0;
    };
    this.renderBufferDirect = function(camera2, scene2, geometry, material, object, group2) {
      if (scene2 === null)
        scene2 = _emptyScene;
      const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
      const program = setProgram(camera2, scene2, material, object);
      state.setMaterial(material, frontFaceCW);
      let index = geometry.index;
      const position = geometry.attributes.position;
      if (index === null) {
        if (position === void 0 || position.count === 0)
          return;
      } else if (index.count === 0) {
        return;
      }
      let rangeFactor = 1;
      if (material.wireframe === true) {
        index = geometries.getWireframeAttribute(geometry);
        rangeFactor = 2;
      }
      if (material.morphTargets || material.morphNormals) {
        morphtargets.update(object, geometry, material, program);
      }
      bindingStates.setup(object, material, program, geometry, index);
      let attribute;
      let renderer2 = bufferRenderer;
      if (index !== null) {
        attribute = attributes.get(index);
        renderer2 = indexedBufferRenderer;
        renderer2.setIndex(attribute);
      }
      const dataCount = index !== null ? index.count : position.count;
      const rangeStart = geometry.drawRange.start * rangeFactor;
      const rangeCount = geometry.drawRange.count * rangeFactor;
      const groupStart = group2 !== null ? group2.start * rangeFactor : 0;
      const groupCount = group2 !== null ? group2.count * rangeFactor : Infinity;
      const drawStart = Math.max(rangeStart, groupStart);
      const drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;
      const drawCount = Math.max(0, drawEnd - drawStart + 1);
      if (drawCount === 0)
        return;
      if (object.isMesh) {
        if (material.wireframe === true) {
          state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
          renderer2.setMode(1);
        } else {
          renderer2.setMode(4);
        }
      } else if (object.isLine) {
        let lineWidth = material.linewidth;
        if (lineWidth === void 0)
          lineWidth = 1;
        state.setLineWidth(lineWidth * getTargetPixelRatio());
        if (object.isLineSegments) {
          renderer2.setMode(1);
        } else if (object.isLineLoop) {
          renderer2.setMode(2);
        } else {
          renderer2.setMode(3);
        }
      } else if (object.isPoints) {
        renderer2.setMode(0);
      } else if (object.isSprite) {
        renderer2.setMode(4);
      }
      if (object.isInstancedMesh) {
        renderer2.renderInstances(drawStart, drawCount, object.count);
      } else if (geometry.isInstancedBufferGeometry) {
        const instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);
        renderer2.renderInstances(drawStart, drawCount, instanceCount);
      } else {
        renderer2.render(drawStart, drawCount);
      }
    };
    this.compile = function(scene2, camera2) {
      currentRenderState = renderStates.get(scene2, camera2);
      currentRenderState.init();
      scene2.traverseVisible(function(object) {
        if (object.isLight && object.layers.test(camera2.layers)) {
          currentRenderState.pushLight(object);
          if (object.castShadow) {
            currentRenderState.pushShadow(object);
          }
        }
      });
      currentRenderState.setupLights(camera2);
      const compiled = new WeakMap();
      scene2.traverse(function(object) {
        const material = object.material;
        if (material) {
          if (Array.isArray(material)) {
            for (let i = 0; i < material.length; i++) {
              const material2 = material[i];
              if (compiled.has(material2) === false) {
                initMaterial(material2, scene2, object);
                compiled.set(material2);
              }
            }
          } else if (compiled.has(material) === false) {
            initMaterial(material, scene2, object);
            compiled.set(material);
          }
        }
      });
    };
    let onAnimationFrameCallback = null;
    function onAnimationFrame(time) {
      if (xr.isPresenting)
        return;
      if (onAnimationFrameCallback)
        onAnimationFrameCallback(time);
    }
    const animation = new WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);
    if (typeof window !== "undefined")
      animation.setContext(window);
    this.setAnimationLoop = function(callback) {
      onAnimationFrameCallback = callback;
      xr.setAnimationLoop(callback);
      callback === null ? animation.stop() : animation.start();
    };
    this.render = function(scene2, camera2) {
      let renderTarget, forceClear;
      if (arguments[2] !== void 0) {
        console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.");
        renderTarget = arguments[2];
      }
      if (arguments[3] !== void 0) {
        console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.");
        forceClear = arguments[3];
      }
      if (camera2 !== void 0 && camera2.isCamera !== true) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (_isContextLost === true)
        return;
      bindingStates.resetDefaultState();
      _currentMaterialId = -1;
      _currentCamera = null;
      if (scene2.autoUpdate === true)
        scene2.updateMatrixWorld();
      if (camera2.parent === null)
        camera2.updateMatrixWorld();
      if (xr.enabled === true && xr.isPresenting === true) {
        camera2 = xr.getCamera(camera2);
      }
      if (scene2.isScene === true)
        scene2.onBeforeRender(_this, scene2, camera2, renderTarget || _currentRenderTarget);
      currentRenderState = renderStates.get(scene2, camera2);
      currentRenderState.init();
      _projScreenMatrix.multiplyMatrices(camera2.projectionMatrix, camera2.matrixWorldInverse);
      _frustum.setFromProjectionMatrix(_projScreenMatrix);
      _localClippingEnabled = this.localClippingEnabled;
      _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera2);
      currentRenderList = renderLists.get(scene2, camera2);
      currentRenderList.init();
      projectObject(scene2, camera2, 0, _this.sortObjects);
      currentRenderList.finish();
      if (_this.sortObjects === true) {
        currentRenderList.sort(_opaqueSort, _transparentSort);
      }
      if (_clippingEnabled === true)
        clipping.beginShadows();
      const shadowsArray = currentRenderState.state.shadowsArray;
      shadowMap.render(shadowsArray, scene2, camera2);
      currentRenderState.setupLights(camera2);
      if (_clippingEnabled === true)
        clipping.endShadows();
      if (this.info.autoReset === true)
        this.info.reset();
      if (renderTarget !== void 0) {
        this.setRenderTarget(renderTarget);
      }
      background.render(currentRenderList, scene2, camera2, forceClear);
      const opaqueObjects = currentRenderList.opaque;
      const transparentObjects = currentRenderList.transparent;
      if (opaqueObjects.length > 0)
        renderObjects(opaqueObjects, scene2, camera2);
      if (transparentObjects.length > 0)
        renderObjects(transparentObjects, scene2, camera2);
      if (scene2.isScene === true)
        scene2.onAfterRender(_this, scene2, camera2);
      if (_currentRenderTarget !== null) {
        textures.updateRenderTargetMipmap(_currentRenderTarget);
        textures.updateMultisampleRenderTarget(_currentRenderTarget);
      }
      state.buffers.depth.setTest(true);
      state.buffers.depth.setMask(true);
      state.buffers.color.setMask(true);
      state.setPolygonOffset(false);
      currentRenderList = null;
      currentRenderState = null;
    };
    function projectObject(object, camera2, groupOrder, sortObjects) {
      if (object.visible === false)
        return;
      const visible = object.layers.test(camera2.layers);
      if (visible) {
        if (object.isGroup) {
          groupOrder = object.renderOrder;
        } else if (object.isLOD) {
          if (object.autoUpdate === true)
            object.update(camera2);
        } else if (object.isLight) {
          currentRenderState.pushLight(object);
          if (object.castShadow) {
            currentRenderState.pushShadow(object);
          }
        } else if (object.isSprite) {
          if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
            if (sortObjects) {
              _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
            }
            const geometry = objects.update(object);
            const material = object.material;
            if (material.visible) {
              currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
            }
          }
        } else if (object.isImmediateRenderObject) {
          if (sortObjects) {
            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
          }
          currentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);
        } else if (object.isMesh || object.isLine || object.isPoints) {
          if (object.isSkinnedMesh) {
            if (object.skeleton.frame !== info.render.frame) {
              object.skeleton.update();
              object.skeleton.frame = info.render.frame;
            }
          }
          if (!object.frustumCulled || _frustum.intersectsObject(object)) {
            if (sortObjects) {
              _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
            }
            const geometry = objects.update(object);
            const material = object.material;
            if (Array.isArray(material)) {
              const groups = geometry.groups;
              for (let i = 0, l = groups.length; i < l; i++) {
                const group2 = groups[i];
                const groupMaterial = material[group2.materialIndex];
                if (groupMaterial && groupMaterial.visible) {
                  currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group2);
                }
              }
            } else if (material.visible) {
              currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
            }
          }
        }
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        projectObject(children[i], camera2, groupOrder, sortObjects);
      }
    }
    function renderObjects(renderList, scene2, camera2) {
      const overrideMaterial = scene2.isScene === true ? scene2.overrideMaterial : null;
      for (let i = 0, l = renderList.length; i < l; i++) {
        const renderItem = renderList[i];
        const object = renderItem.object;
        const geometry = renderItem.geometry;
        const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
        const group2 = renderItem.group;
        if (camera2.isArrayCamera) {
          _currentArrayCamera = camera2;
          const cameras = camera2.cameras;
          for (let j = 0, jl = cameras.length; j < jl; j++) {
            const camera22 = cameras[j];
            if (object.layers.test(camera22.layers)) {
              state.viewport(_currentViewport.copy(camera22.viewport));
              currentRenderState.setupLights(camera22);
              renderObject(object, scene2, camera22, geometry, material, group2);
            }
          }
        } else {
          _currentArrayCamera = null;
          renderObject(object, scene2, camera2, geometry, material, group2);
        }
      }
    }
    function renderObject(object, scene2, camera2, geometry, material, group2) {
      object.onBeforeRender(_this, scene2, camera2, geometry, material, group2);
      currentRenderState = renderStates.get(scene2, _currentArrayCamera || camera2);
      object.modelViewMatrix.multiplyMatrices(camera2.matrixWorldInverse, object.matrixWorld);
      object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
      if (object.isImmediateRenderObject) {
        const program = setProgram(camera2, scene2, material, object);
        state.setMaterial(material);
        bindingStates.reset();
        renderObjectImmediate(object, program);
      } else {
        _this.renderBufferDirect(camera2, scene2, geometry, material, object, group2);
      }
      object.onAfterRender(_this, scene2, camera2, geometry, material, group2);
      currentRenderState = renderStates.get(scene2, _currentArrayCamera || camera2);
    }
    function initMaterial(material, scene2, object) {
      if (scene2.isScene !== true)
        scene2 = _emptyScene;
      const materialProperties = properties.get(material);
      const lights = currentRenderState.state.lights;
      const shadowsArray = currentRenderState.state.shadowsArray;
      const lightsStateVersion = lights.state.version;
      const parameters2 = programCache.getParameters(material, lights.state, shadowsArray, scene2, object);
      const programCacheKey = programCache.getProgramCacheKey(parameters2);
      let program = materialProperties.program;
      let programChange = true;
      if (program === void 0) {
        material.addEventListener("dispose", onMaterialDispose);
      } else if (program.cacheKey !== programCacheKey) {
        releaseMaterialProgramReference(material);
      } else if (materialProperties.lightsStateVersion !== lightsStateVersion) {
        programChange = false;
      } else if (parameters2.shaderID !== void 0) {
        const environment = material.isMeshStandardMaterial ? scene2.environment : null;
        materialProperties.envMap = cubemaps.get(material.envMap || environment);
        return;
      } else {
        programChange = false;
      }
      if (programChange) {
        parameters2.uniforms = programCache.getUniforms(material);
        material.onBeforeCompile(parameters2, _this);
        program = programCache.acquireProgram(parameters2, programCacheKey);
        materialProperties.program = program;
        materialProperties.uniforms = parameters2.uniforms;
        materialProperties.outputEncoding = parameters2.outputEncoding;
      }
      const uniforms = materialProperties.uniforms;
      if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
        materialProperties.numClippingPlanes = clipping.numPlanes;
        materialProperties.numIntersection = clipping.numIntersection;
        uniforms.clippingPlanes = clipping.uniform;
      }
      materialProperties.environment = material.isMeshStandardMaterial ? scene2.environment : null;
      materialProperties.fog = scene2.fog;
      materialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);
      materialProperties.needsLights = materialNeedsLights(material);
      materialProperties.lightsStateVersion = lightsStateVersion;
      if (materialProperties.needsLights) {
        uniforms.ambientLightColor.value = lights.state.ambient;
        uniforms.lightProbe.value = lights.state.probe;
        uniforms.directionalLights.value = lights.state.directional;
        uniforms.directionalLightShadows.value = lights.state.directionalShadow;
        uniforms.spotLights.value = lights.state.spot;
        uniforms.spotLightShadows.value = lights.state.spotShadow;
        uniforms.rectAreaLights.value = lights.state.rectArea;
        uniforms.ltc_1.value = lights.state.rectAreaLTC1;
        uniforms.ltc_2.value = lights.state.rectAreaLTC2;
        uniforms.pointLights.value = lights.state.point;
        uniforms.pointLightShadows.value = lights.state.pointShadow;
        uniforms.hemisphereLights.value = lights.state.hemi;
        uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
        uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
        uniforms.spotShadowMap.value = lights.state.spotShadowMap;
        uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
        uniforms.pointShadowMap.value = lights.state.pointShadowMap;
        uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
      }
      const progUniforms = materialProperties.program.getUniforms();
      const uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
      materialProperties.uniformsList = uniformsList;
    }
    function setProgram(camera2, scene2, material, object) {
      if (scene2.isScene !== true)
        scene2 = _emptyScene;
      textures.resetTextureUnits();
      const fog = scene2.fog;
      const environment = material.isMeshStandardMaterial ? scene2.environment : null;
      const encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;
      const envMap = cubemaps.get(material.envMap || environment);
      const materialProperties = properties.get(material);
      const lights = currentRenderState.state.lights;
      if (_clippingEnabled === true) {
        if (_localClippingEnabled === true || camera2 !== _currentCamera) {
          const useCache = camera2 === _currentCamera && material.id === _currentMaterialId;
          clipping.setState(material, camera2, useCache);
        }
      }
      if (material.version === materialProperties.__version) {
        if (material.fog && materialProperties.fog !== fog) {
          initMaterial(material, scene2, object);
        } else if (materialProperties.environment !== environment) {
          initMaterial(material, scene2, object);
        } else if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
          initMaterial(material, scene2, object);
        } else if (materialProperties.numClippingPlanes !== void 0 && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
          initMaterial(material, scene2, object);
        } else if (materialProperties.outputEncoding !== encoding) {
          initMaterial(material, scene2, object);
        } else if (materialProperties.envMap !== envMap) {
          initMaterial(material, scene2, object);
        }
      } else {
        initMaterial(material, scene2, object);
        materialProperties.__version = material.version;
      }
      let refreshProgram = false;
      let refreshMaterial = false;
      let refreshLights = false;
      const program = materialProperties.program, p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
      if (state.useProgram(program.program)) {
        refreshProgram = true;
        refreshMaterial = true;
        refreshLights = true;
      }
      if (material.id !== _currentMaterialId) {
        _currentMaterialId = material.id;
        refreshMaterial = true;
      }
      if (refreshProgram || _currentCamera !== camera2) {
        p_uniforms.setValue(_gl, "projectionMatrix", camera2.projectionMatrix);
        if (capabilities.logarithmicDepthBuffer) {
          p_uniforms.setValue(_gl, "logDepthBufFC", 2 / (Math.log(camera2.far + 1) / Math.LN2));
        }
        if (_currentCamera !== camera2) {
          _currentCamera = camera2;
          refreshMaterial = true;
          refreshLights = true;
        }
        if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
          const uCamPos = p_uniforms.map.cameraPosition;
          if (uCamPos !== void 0) {
            uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera2.matrixWorld));
          }
        }
        if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
          p_uniforms.setValue(_gl, "isOrthographic", camera2.isOrthographicCamera === true);
        }
        if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || material.skinning) {
          p_uniforms.setValue(_gl, "viewMatrix", camera2.matrixWorldInverse);
        }
      }
      if (material.skinning) {
        p_uniforms.setOptional(_gl, object, "bindMatrix");
        p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
        const skeleton = object.skeleton;
        if (skeleton) {
          const bones = skeleton.bones;
          if (capabilities.floatVertexTextures) {
            if (skeleton.boneTexture === null) {
              let size = Math.sqrt(bones.length * 4);
              size = MathUtils.ceilPowerOfTwo(size);
              size = Math.max(size, 4);
              const boneMatrices = new Float32Array(size * size * 4);
              boneMatrices.set(skeleton.boneMatrices);
              const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
              skeleton.boneMatrices = boneMatrices;
              skeleton.boneTexture = boneTexture;
              skeleton.boneTextureSize = size;
            }
            p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
            p_uniforms.setValue(_gl, "boneTextureSize", skeleton.boneTextureSize);
          } else {
            p_uniforms.setOptional(_gl, skeleton, "boneMatrices");
          }
        }
      }
      if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
        materialProperties.receiveShadow = object.receiveShadow;
        p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
      }
      if (refreshMaterial) {
        p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
        if (materialProperties.needsLights) {
          markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
        }
        if (fog && material.fog) {
          materials.refreshFogUniforms(m_uniforms, fog);
        }
        materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height);
        WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
      }
      if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
        WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
        material.uniformsNeedUpdate = false;
      }
      if (material.isSpriteMaterial) {
        p_uniforms.setValue(_gl, "center", object.center);
      }
      p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
      p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
      p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
      return program;
    }
    function markUniformsLightsNeedsUpdate(uniforms, value) {
      uniforms.ambientLightColor.needsUpdate = value;
      uniforms.lightProbe.needsUpdate = value;
      uniforms.directionalLights.needsUpdate = value;
      uniforms.directionalLightShadows.needsUpdate = value;
      uniforms.pointLights.needsUpdate = value;
      uniforms.pointLightShadows.needsUpdate = value;
      uniforms.spotLights.needsUpdate = value;
      uniforms.spotLightShadows.needsUpdate = value;
      uniforms.rectAreaLights.needsUpdate = value;
      uniforms.hemisphereLights.needsUpdate = value;
    }
    function materialNeedsLights(material) {
      return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
    }
    this.setFramebuffer = function(value) {
      if (_framebuffer !== value && _currentRenderTarget === null)
        _gl.bindFramebuffer(36160, value);
      _framebuffer = value;
    };
    this.getActiveCubeFace = function() {
      return _currentActiveCubeFace;
    };
    this.getActiveMipmapLevel = function() {
      return _currentActiveMipmapLevel;
    };
    this.getRenderList = function() {
      return currentRenderList;
    };
    this.setRenderList = function(renderList) {
      currentRenderList = renderList;
    };
    this.getRenderState = function() {
      return currentRenderState;
    };
    this.setRenderState = function(renderState) {
      currentRenderState = renderState;
    };
    this.getRenderTarget = function() {
      return _currentRenderTarget;
    };
    this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
      _currentRenderTarget = renderTarget;
      _currentActiveCubeFace = activeCubeFace;
      _currentActiveMipmapLevel = activeMipmapLevel;
      if (renderTarget && properties.get(renderTarget).__webglFramebuffer === void 0) {
        textures.setupRenderTarget(renderTarget);
      }
      let framebuffer = _framebuffer;
      let isCube = false;
      if (renderTarget) {
        const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
        if (renderTarget.isWebGLCubeRenderTarget) {
          framebuffer = __webglFramebuffer[activeCubeFace];
          isCube = true;
        } else if (renderTarget.isWebGLMultisampleRenderTarget) {
          framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
        } else {
          framebuffer = __webglFramebuffer;
        }
        _currentViewport.copy(renderTarget.viewport);
        _currentScissor.copy(renderTarget.scissor);
        _currentScissorTest = renderTarget.scissorTest;
      } else {
        _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
        _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
        _currentScissorTest = _scissorTest;
      }
      if (_currentFramebuffer !== framebuffer) {
        _gl.bindFramebuffer(36160, framebuffer);
        _currentFramebuffer = framebuffer;
      }
      state.viewport(_currentViewport);
      state.scissor(_currentScissor);
      state.setScissorTest(_currentScissorTest);
      if (isCube) {
        const textureProperties = properties.get(renderTarget.texture);
        _gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
      }
    };
    this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
      if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let framebuffer = properties.get(renderTarget).__webglFramebuffer;
      if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
        framebuffer = framebuffer[activeCubeFaceIndex];
      }
      if (framebuffer) {
        let restore = false;
        if (framebuffer !== _currentFramebuffer) {
          _gl.bindFramebuffer(36160, framebuffer);
          restore = true;
        }
        try {
          const texture = renderTarget.texture;
          const textureFormat = texture.format;
          const textureType = texture.type;
          if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(35739)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(35738) && !(textureType === FloatType && (capabilities.isWebGL2 || extensions.get("OES_texture_float") || extensions.get("WEBGL_color_buffer_float"))) && !(textureType === HalfFloatType && (capabilities.isWebGL2 ? extensions.get("EXT_color_buffer_float") : extensions.get("EXT_color_buffer_half_float")))) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          if (_gl.checkFramebufferStatus(36160) === 36053) {
            if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
              _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
            }
          } else {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
          }
        } finally {
          if (restore) {
            _gl.bindFramebuffer(36160, _currentFramebuffer);
          }
        }
      }
    };
    this.copyFramebufferToTexture = function(position, texture, level = 0) {
      const levelScale = Math.pow(2, -level);
      const width = Math.floor(texture.image.width * levelScale);
      const height = Math.floor(texture.image.height * levelScale);
      const glFormat = utils.convert(texture.format);
      textures.setTexture2D(texture, 0);
      _gl.copyTexImage2D(3553, level, glFormat, position.x, position.y, width, height, 0);
      state.unbindTexture();
    };
    this.copyTextureToTexture = function(position, srcTexture, dstTexture, level = 0) {
      const width = srcTexture.image.width;
      const height = srcTexture.image.height;
      const glFormat = utils.convert(dstTexture.format);
      const glType = utils.convert(dstTexture.type);
      textures.setTexture2D(dstTexture, 0);
      _gl.pixelStorei(37440, dstTexture.flipY);
      _gl.pixelStorei(37441, dstTexture.premultiplyAlpha);
      _gl.pixelStorei(3317, dstTexture.unpackAlignment);
      if (srcTexture.isDataTexture) {
        _gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
      } else {
        if (srcTexture.isCompressedTexture) {
          _gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
        } else {
          _gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);
        }
      }
      if (level === 0 && dstTexture.generateMipmaps)
        _gl.generateMipmap(3553);
      state.unbindTexture();
    };
    this.initTexture = function(texture) {
      textures.setTexture2D(texture, 0);
      state.unbindTexture();
    };
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {detail: this}));
    }
  }
  function WebGL1Renderer(parameters) {
    WebGLRenderer.call(this, parameters);
  }
  WebGL1Renderer.prototype = Object.assign(Object.create(WebGLRenderer.prototype), {
    constructor: WebGL1Renderer,
    isWebGL1Renderer: true
  });
  var Scene = class extends Object3D {
    constructor() {
      super();
      Object.defineProperty(this, "isScene", {value: true});
      this.type = "Scene";
      this.background = null;
      this.environment = null;
      this.fog = null;
      this.overrideMaterial = null;
      this.autoUpdate = true;
      if (typeof __THREE_DEVTOOLS__ !== "undefined") {
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {detail: this}));
      }
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.background !== null)
        this.background = source.background.clone();
      if (source.environment !== null)
        this.environment = source.environment.clone();
      if (source.fog !== null)
        this.fog = source.fog.clone();
      if (source.overrideMaterial !== null)
        this.overrideMaterial = source.overrideMaterial.clone();
      this.autoUpdate = source.autoUpdate;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      if (this.background !== null)
        data.object.background = this.background.toJSON(meta);
      if (this.environment !== null)
        data.object.environment = this.environment.toJSON(meta);
      if (this.fog !== null)
        data.object.fog = this.fog.toJSON();
      return data;
    }
  };
  function InterleavedBuffer(array, stride) {
    this.array = array;
    this.stride = stride;
    this.count = array !== void 0 ? array.length / stride : 0;
    this.usage = StaticDrawUsage;
    this.updateRange = {offset: 0, count: -1};
    this.version = 0;
    this.uuid = MathUtils.generateUUID();
  }
  Object.defineProperty(InterleavedBuffer.prototype, "needsUpdate", {
    set: function(value) {
      if (value === true)
        this.version++;
    }
  });
  Object.assign(InterleavedBuffer.prototype, {
    isInterleavedBuffer: true,
    onUploadCallback: function() {
    },
    setUsage: function(value) {
      this.usage = value;
      return this;
    },
    copy: function(source) {
      this.array = new source.array.constructor(source.array);
      this.count = source.count;
      this.stride = source.stride;
      this.usage = source.usage;
      return this;
    },
    copyAt: function(index1, attribute, index2) {
      index1 *= this.stride;
      index2 *= attribute.stride;
      for (let i = 0, l = this.stride; i < l; i++) {
        this.array[index1 + i] = attribute.array[index2 + i];
      }
      return this;
    },
    set: function(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    },
    clone: function(data) {
      if (data.arrayBuffers === void 0) {
        data.arrayBuffers = {};
      }
      if (this.array.buffer._uuid === void 0) {
        this.array.buffer._uuid = MathUtils.generateUUID();
      }
      if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
        data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
      }
      const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
      const ib = new InterleavedBuffer(array, this.stride);
      ib.setUsage(this.usage);
      return ib;
    },
    onUpload: function(callback) {
      this.onUploadCallback = callback;
      return this;
    },
    toJSON: function(data) {
      if (data.arrayBuffers === void 0) {
        data.arrayBuffers = {};
      }
      if (this.array.buffer._uuid === void 0) {
        this.array.buffer._uuid = MathUtils.generateUUID();
      }
      if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
        data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));
      }
      return {
        uuid: this.uuid,
        buffer: this.array.buffer._uuid,
        type: this.array.constructor.name,
        stride: this.stride
      };
    }
  });
  var _vector$6 = new Vector3();
  function InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {
    this.name = "";
    this.data = interleavedBuffer;
    this.itemSize = itemSize;
    this.offset = offset;
    this.normalized = normalized === true;
  }
  Object.defineProperties(InterleavedBufferAttribute.prototype, {
    count: {
      get: function() {
        return this.data.count;
      }
    },
    array: {
      get: function() {
        return this.data.array;
      }
    },
    needsUpdate: {
      set: function(value) {
        this.data.needsUpdate = value;
      }
    }
  });
  Object.assign(InterleavedBufferAttribute.prototype, {
    isInterleavedBufferAttribute: true,
    applyMatrix4: function(m) {
      for (let i = 0, l = this.data.count; i < l; i++) {
        _vector$6.x = this.getX(i);
        _vector$6.y = this.getY(i);
        _vector$6.z = this.getZ(i);
        _vector$6.applyMatrix4(m);
        this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
      }
      return this;
    },
    setX: function(index, x) {
      this.data.array[index * this.data.stride + this.offset] = x;
      return this;
    },
    setY: function(index, y) {
      this.data.array[index * this.data.stride + this.offset + 1] = y;
      return this;
    },
    setZ: function(index, z) {
      this.data.array[index * this.data.stride + this.offset + 2] = z;
      return this;
    },
    setW: function(index, w) {
      this.data.array[index * this.data.stride + this.offset + 3] = w;
      return this;
    },
    getX: function(index) {
      return this.data.array[index * this.data.stride + this.offset];
    },
    getY: function(index) {
      return this.data.array[index * this.data.stride + this.offset + 1];
    },
    getZ: function(index) {
      return this.data.array[index * this.data.stride + this.offset + 2];
    },
    getW: function(index) {
      return this.data.array[index * this.data.stride + this.offset + 3];
    },
    setXY: function(index, x, y) {
      index = index * this.data.stride + this.offset;
      this.data.array[index + 0] = x;
      this.data.array[index + 1] = y;
      return this;
    },
    setXYZ: function(index, x, y, z) {
      index = index * this.data.stride + this.offset;
      this.data.array[index + 0] = x;
      this.data.array[index + 1] = y;
      this.data.array[index + 2] = z;
      return this;
    },
    setXYZW: function(index, x, y, z, w) {
      index = index * this.data.stride + this.offset;
      this.data.array[index + 0] = x;
      this.data.array[index + 1] = y;
      this.data.array[index + 2] = z;
      this.data.array[index + 3] = w;
      return this;
    },
    clone: function(data) {
      if (data === void 0) {
        console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");
        const array = [];
        for (let i = 0; i < this.count; i++) {
          const index = i * this.data.stride + this.offset;
          for (let j = 0; j < this.itemSize; j++) {
            array.push(this.data.array[index + j]);
          }
        }
        return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
      } else {
        if (data.interleavedBuffers === void 0) {
          data.interleavedBuffers = {};
        }
        if (data.interleavedBuffers[this.data.uuid] === void 0) {
          data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
        }
        return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
      }
    },
    toJSON: function(data) {
      if (data === void 0) {
        console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");
        const array = [];
        for (let i = 0; i < this.count; i++) {
          const index = i * this.data.stride + this.offset;
          for (let j = 0; j < this.itemSize; j++) {
            array.push(this.data.array[index + j]);
          }
        }
        return {
          itemSize: this.itemSize,
          type: this.array.constructor.name,
          array,
          normalized: this.normalized
        };
      } else {
        if (data.interleavedBuffers === void 0) {
          data.interleavedBuffers = {};
        }
        if (data.interleavedBuffers[this.data.uuid] === void 0) {
          data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
        }
        return {
          isInterleavedBufferAttribute: true,
          itemSize: this.itemSize,
          data: this.data.uuid,
          offset: this.offset,
          normalized: this.normalized
        };
      }
    }
  });
  function SpriteMaterial(parameters) {
    Material.call(this);
    this.type = "SpriteMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.alphaMap = null;
    this.rotation = 0;
    this.sizeAttenuation = true;
    this.transparent = true;
    this.setValues(parameters);
  }
  SpriteMaterial.prototype = Object.create(Material.prototype);
  SpriteMaterial.prototype.constructor = SpriteMaterial;
  SpriteMaterial.prototype.isSpriteMaterial = true;
  SpriteMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.rotation = source.rotation;
    this.sizeAttenuation = source.sizeAttenuation;
    return this;
  };
  var _geometry;
  var _intersectPoint = new Vector3();
  var _worldScale = new Vector3();
  var _mvPosition = new Vector3();
  var _alignedPosition = new Vector2();
  var _rotatedPosition = new Vector2();
  var _viewWorldMatrix = new Matrix4();
  var _vA$1 = new Vector3();
  var _vB$1 = new Vector3();
  var _vC$1 = new Vector3();
  var _uvA$1 = new Vector2();
  var _uvB$1 = new Vector2();
  var _uvC$1 = new Vector2();
  function Sprite(material) {
    Object3D.call(this);
    this.type = "Sprite";
    if (_geometry === void 0) {
      _geometry = new BufferGeometry();
      const float32Array = new Float32Array([
        -0.5,
        -0.5,
        0,
        0,
        0,
        0.5,
        -0.5,
        0,
        1,
        0,
        0.5,
        0.5,
        0,
        1,
        1,
        -0.5,
        0.5,
        0,
        0,
        1
      ]);
      const interleavedBuffer = new InterleavedBuffer(float32Array, 5);
      _geometry.setIndex([0, 1, 2, 0, 2, 3]);
      _geometry.setAttribute("position", new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));
      _geometry.setAttribute("uv", new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
    }
    this.geometry = _geometry;
    this.material = material !== void 0 ? material : new SpriteMaterial();
    this.center = new Vector2(0.5, 0.5);
  }
  Sprite.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Sprite,
    isSprite: true,
    raycast: function(raycaster2, intersects2) {
      if (raycaster2.camera === null) {
        console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
      }
      _worldScale.setFromMatrixScale(this.matrixWorld);
      _viewWorldMatrix.copy(raycaster2.camera.matrixWorld);
      this.modelViewMatrix.multiplyMatrices(raycaster2.camera.matrixWorldInverse, this.matrixWorld);
      _mvPosition.setFromMatrixPosition(this.modelViewMatrix);
      if (raycaster2.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {
        _worldScale.multiplyScalar(-_mvPosition.z);
      }
      const rotation = this.material.rotation;
      let sin, cos;
      if (rotation !== 0) {
        cos = Math.cos(rotation);
        sin = Math.sin(rotation);
      }
      const center = this.center;
      transformVertex(_vA$1.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
      transformVertex(_vB$1.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
      transformVertex(_vC$1.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
      _uvA$1.set(0, 0);
      _uvB$1.set(1, 0);
      _uvC$1.set(1, 1);
      let intersect = raycaster2.ray.intersectTriangle(_vA$1, _vB$1, _vC$1, false, _intersectPoint);
      if (intersect === null) {
        transformVertex(_vB$1.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
        _uvB$1.set(0, 1);
        intersect = raycaster2.ray.intersectTriangle(_vA$1, _vC$1, _vB$1, false, _intersectPoint);
        if (intersect === null) {
          return;
        }
      }
      const distance = raycaster2.ray.origin.distanceTo(_intersectPoint);
      if (distance < raycaster2.near || distance > raycaster2.far)
        return;
      intersects2.push({
        distance,
        point: _intersectPoint.clone(),
        uv: Triangle.getUV(_intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2()),
        face: null,
        object: this
      });
    },
    copy: function(source) {
      Object3D.prototype.copy.call(this, source);
      if (source.center !== void 0)
        this.center.copy(source.center);
      this.material = source.material;
      return this;
    }
  });
  function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
    _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);
    if (sin !== void 0) {
      _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;
      _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;
    } else {
      _rotatedPosition.copy(_alignedPosition);
    }
    vertexPosition.copy(mvPosition);
    vertexPosition.x += _rotatedPosition.x;
    vertexPosition.y += _rotatedPosition.y;
    vertexPosition.applyMatrix4(_viewWorldMatrix);
  }
  var _v1$4 = new Vector3();
  var _v2$2 = new Vector3();
  function LOD() {
    Object3D.call(this);
    this._currentLevel = 0;
    this.type = "LOD";
    Object.defineProperties(this, {
      levels: {
        enumerable: true,
        value: []
      }
    });
    this.autoUpdate = true;
  }
  LOD.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: LOD,
    isLOD: true,
    copy: function(source) {
      Object3D.prototype.copy.call(this, source, false);
      const levels = source.levels;
      for (let i = 0, l = levels.length; i < l; i++) {
        const level = levels[i];
        this.addLevel(level.object.clone(), level.distance);
      }
      this.autoUpdate = source.autoUpdate;
      return this;
    },
    addLevel: function(object, distance = 0) {
      distance = Math.abs(distance);
      const levels = this.levels;
      let l;
      for (l = 0; l < levels.length; l++) {
        if (distance < levels[l].distance) {
          break;
        }
      }
      levels.splice(l, 0, {distance, object});
      this.add(object);
      return this;
    },
    getCurrentLevel: function() {
      return this._currentLevel;
    },
    getObjectForDistance: function(distance) {
      const levels = this.levels;
      if (levels.length > 0) {
        let i, l;
        for (i = 1, l = levels.length; i < l; i++) {
          if (distance < levels[i].distance) {
            break;
          }
        }
        return levels[i - 1].object;
      }
      return null;
    },
    raycast: function(raycaster2, intersects2) {
      const levels = this.levels;
      if (levels.length > 0) {
        _v1$4.setFromMatrixPosition(this.matrixWorld);
        const distance = raycaster2.ray.origin.distanceTo(_v1$4);
        this.getObjectForDistance(distance).raycast(raycaster2, intersects2);
      }
    },
    update: function(camera2) {
      const levels = this.levels;
      if (levels.length > 1) {
        _v1$4.setFromMatrixPosition(camera2.matrixWorld);
        _v2$2.setFromMatrixPosition(this.matrixWorld);
        const distance = _v1$4.distanceTo(_v2$2) / camera2.zoom;
        levels[0].object.visible = true;
        let i, l;
        for (i = 1, l = levels.length; i < l; i++) {
          if (distance >= levels[i].distance) {
            levels[i - 1].object.visible = false;
            levels[i].object.visible = true;
          } else {
            break;
          }
        }
        this._currentLevel = i - 1;
        for (; i < l; i++) {
          levels[i].object.visible = false;
        }
      }
    },
    toJSON: function(meta) {
      const data = Object3D.prototype.toJSON.call(this, meta);
      if (this.autoUpdate === false)
        data.object.autoUpdate = false;
      data.object.levels = [];
      const levels = this.levels;
      for (let i = 0, l = levels.length; i < l; i++) {
        const level = levels[i];
        data.object.levels.push({
          object: level.object.uuid,
          distance: level.distance
        });
      }
      return data;
    }
  });
  function SkinnedMesh(geometry, material) {
    if (geometry && geometry.isGeometry) {
      console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
    }
    Mesh.call(this, geometry, material);
    this.type = "SkinnedMesh";
    this.bindMode = "attached";
    this.bindMatrix = new Matrix4();
    this.bindMatrixInverse = new Matrix4();
  }
  SkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {
    constructor: SkinnedMesh,
    isSkinnedMesh: true,
    copy: function(source) {
      Mesh.prototype.copy.call(this, source);
      this.bindMode = source.bindMode;
      this.bindMatrix.copy(source.bindMatrix);
      this.bindMatrixInverse.copy(source.bindMatrixInverse);
      this.skeleton = source.skeleton;
      return this;
    },
    bind: function(skeleton, bindMatrix) {
      this.skeleton = skeleton;
      if (bindMatrix === void 0) {
        this.updateMatrixWorld(true);
        this.skeleton.calculateInverses();
        bindMatrix = this.matrixWorld;
      }
      this.bindMatrix.copy(bindMatrix);
      this.bindMatrixInverse.copy(bindMatrix).invert();
    },
    pose: function() {
      this.skeleton.pose();
    },
    normalizeSkinWeights: function() {
      const vector = new Vector4();
      const skinWeight = this.geometry.attributes.skinWeight;
      for (let i = 0, l = skinWeight.count; i < l; i++) {
        vector.x = skinWeight.getX(i);
        vector.y = skinWeight.getY(i);
        vector.z = skinWeight.getZ(i);
        vector.w = skinWeight.getW(i);
        const scale = 1 / vector.manhattanLength();
        if (scale !== Infinity) {
          vector.multiplyScalar(scale);
        } else {
          vector.set(1, 0, 0, 0);
        }
        skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
      }
    },
    updateMatrixWorld: function(force) {
      Mesh.prototype.updateMatrixWorld.call(this, force);
      if (this.bindMode === "attached") {
        this.bindMatrixInverse.copy(this.matrixWorld).invert();
      } else if (this.bindMode === "detached") {
        this.bindMatrixInverse.copy(this.bindMatrix).invert();
      } else {
        console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
      }
    },
    boneTransform: function() {
      const basePosition = new Vector3();
      const skinIndex = new Vector4();
      const skinWeight = new Vector4();
      const vector = new Vector3();
      const matrix = new Matrix4();
      return function(index, target) {
        const skeleton = this.skeleton;
        const geometry = this.geometry;
        skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);
        skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);
        basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);
        target.set(0, 0, 0);
        for (let i = 0; i < 4; i++) {
          const weight = skinWeight.getComponent(i);
          if (weight !== 0) {
            const boneIndex = skinIndex.getComponent(i);
            matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
            target.addScaledVector(vector.copy(basePosition).applyMatrix4(matrix), weight);
          }
        }
        return target.applyMatrix4(this.bindMatrixInverse);
      };
    }()
  });
  function Bone() {
    Object3D.call(this);
    this.type = "Bone";
  }
  Bone.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Bone,
    isBone: true
  });
  var _offsetMatrix = new Matrix4();
  var _identityMatrix = new Matrix4();
  function Skeleton(bones = [], boneInverses = []) {
    this.uuid = MathUtils.generateUUID();
    this.bones = bones.slice(0);
    this.boneInverses = boneInverses;
    this.boneMatrices = null;
    this.boneTexture = null;
    this.boneTextureSize = 0;
    this.frame = -1;
    this.init();
  }
  Object.assign(Skeleton.prototype, {
    init: function() {
      const bones = this.bones;
      const boneInverses = this.boneInverses;
      this.boneMatrices = new Float32Array(bones.length * 16);
      if (boneInverses.length === 0) {
        this.calculateInverses();
      } else {
        if (bones.length !== boneInverses.length) {
          console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");
          this.boneInverses = [];
          for (let i = 0, il = this.bones.length; i < il; i++) {
            this.boneInverses.push(new Matrix4());
          }
        }
      }
    },
    calculateInverses: function() {
      this.boneInverses.length = 0;
      for (let i = 0, il = this.bones.length; i < il; i++) {
        const inverse = new Matrix4();
        if (this.bones[i]) {
          inverse.copy(this.bones[i].matrixWorld).invert();
        }
        this.boneInverses.push(inverse);
      }
    },
    pose: function() {
      for (let i = 0, il = this.bones.length; i < il; i++) {
        const bone = this.bones[i];
        if (bone) {
          bone.matrixWorld.copy(this.boneInverses[i]).invert();
        }
      }
      for (let i = 0, il = this.bones.length; i < il; i++) {
        const bone = this.bones[i];
        if (bone) {
          if (bone.parent && bone.parent.isBone) {
            bone.matrix.copy(bone.parent.matrixWorld).invert();
            bone.matrix.multiply(bone.matrixWorld);
          } else {
            bone.matrix.copy(bone.matrixWorld);
          }
          bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
        }
      }
    },
    update: function() {
      const bones = this.bones;
      const boneInverses = this.boneInverses;
      const boneMatrices = this.boneMatrices;
      const boneTexture = this.boneTexture;
      for (let i = 0, il = bones.length; i < il; i++) {
        const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;
        _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);
        _offsetMatrix.toArray(boneMatrices, i * 16);
      }
      if (boneTexture !== null) {
        boneTexture.needsUpdate = true;
      }
    },
    clone: function() {
      return new Skeleton(this.bones, this.boneInverses);
    },
    getBoneByName: function(name) {
      for (let i = 0, il = this.bones.length; i < il; i++) {
        const bone = this.bones[i];
        if (bone.name === name) {
          return bone;
        }
      }
      return void 0;
    },
    dispose: function() {
      if (this.boneTexture !== null) {
        this.boneTexture.dispose();
        this.boneTexture = null;
      }
    },
    fromJSON: function(json, bones) {
      this.uuid = json.uuid;
      for (let i = 0, l = json.bones.length; i < l; i++) {
        const uuid = json.bones[i];
        let bone = bones[uuid];
        if (bone === void 0) {
          console.warn("THREE.Skeleton: No bone found with UUID:", uuid);
          bone = new Bone();
        }
        this.bones.push(bone);
        this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));
      }
      this.init();
      return this;
    },
    toJSON: function() {
      const data = {
        metadata: {
          version: 4.5,
          type: "Skeleton",
          generator: "Skeleton.toJSON"
        },
        bones: [],
        boneInverses: []
      };
      data.uuid = this.uuid;
      const bones = this.bones;
      const boneInverses = this.boneInverses;
      for (let i = 0, l = bones.length; i < l; i++) {
        const bone = bones[i];
        data.bones.push(bone.uuid);
        const boneInverse = boneInverses[i];
        data.boneInverses.push(boneInverse.toArray());
      }
      return data;
    }
  });
  var _instanceLocalMatrix = new Matrix4();
  var _instanceWorldMatrix = new Matrix4();
  var _instanceIntersects = [];
  var _mesh = new Mesh();
  function InstancedMesh(geometry, material, count) {
    Mesh.call(this, geometry, material);
    this.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);
    this.instanceColor = null;
    this.count = count;
    this.frustumCulled = false;
  }
  InstancedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {
    constructor: InstancedMesh,
    isInstancedMesh: true,
    copy: function(source) {
      Mesh.prototype.copy.call(this, source);
      this.instanceMatrix.copy(source.instanceMatrix);
      this.count = source.count;
      return this;
    },
    getColorAt: function(index, color) {
      color.fromArray(this.instanceColor.array, index * 3);
    },
    getMatrixAt: function(index, matrix) {
      matrix.fromArray(this.instanceMatrix.array, index * 16);
    },
    raycast: function(raycaster2, intersects2) {
      const matrixWorld = this.matrixWorld;
      const raycastTimes = this.count;
      _mesh.geometry = this.geometry;
      _mesh.material = this.material;
      if (_mesh.material === void 0)
        return;
      for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {
        this.getMatrixAt(instanceId, _instanceLocalMatrix);
        _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
        _mesh.matrixWorld = _instanceWorldMatrix;
        _mesh.raycast(raycaster2, _instanceIntersects);
        for (let i = 0, l = _instanceIntersects.length; i < l; i++) {
          const intersect = _instanceIntersects[i];
          intersect.instanceId = instanceId;
          intersect.object = this;
          intersects2.push(intersect);
        }
        _instanceIntersects.length = 0;
      }
    },
    setColorAt: function(index, color) {
      if (this.instanceColor === null) {
        this.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);
      }
      color.toArray(this.instanceColor.array, index * 3);
    },
    setMatrixAt: function(index, matrix) {
      matrix.toArray(this.instanceMatrix.array, index * 16);
    },
    updateMorphTargets: function() {
    }
  });
  function LineBasicMaterial(parameters) {
    Material.call(this);
    this.type = "LineBasicMaterial";
    this.color = new Color(16777215);
    this.linewidth = 1;
    this.linecap = "round";
    this.linejoin = "round";
    this.morphTargets = false;
    this.setValues(parameters);
  }
  LineBasicMaterial.prototype = Object.create(Material.prototype);
  LineBasicMaterial.prototype.constructor = LineBasicMaterial;
  LineBasicMaterial.prototype.isLineBasicMaterial = true;
  LineBasicMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.linewidth = source.linewidth;
    this.linecap = source.linecap;
    this.linejoin = source.linejoin;
    this.morphTargets = source.morphTargets;
    return this;
  };
  var _start = new Vector3();
  var _end = new Vector3();
  var _inverseMatrix$1 = new Matrix4();
  var _ray$1 = new Ray();
  var _sphere$2 = new Sphere();
  function Line(geometry, material, mode) {
    if (mode === 1) {
      console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.");
    }
    Object3D.call(this);
    this.type = "Line";
    this.geometry = geometry !== void 0 ? geometry : new BufferGeometry();
    this.material = material !== void 0 ? material : new LineBasicMaterial();
    this.updateMorphTargets();
  }
  Line.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Line,
    isLine: true,
    copy: function(source) {
      Object3D.prototype.copy.call(this, source);
      this.material = source.material;
      this.geometry = source.geometry;
      return this;
    },
    computeLineDistances: function() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        if (geometry.index === null) {
          const positionAttribute = geometry.attributes.position;
          const lineDistances = [0];
          for (let i = 1, l = positionAttribute.count; i < l; i++) {
            _start.fromBufferAttribute(positionAttribute, i - 1);
            _end.fromBufferAttribute(positionAttribute, i);
            lineDistances[i] = lineDistances[i - 1];
            lineDistances[i] += _start.distanceTo(_end);
          }
          geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
        } else {
          console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        }
      } else if (geometry.isGeometry) {
        const vertices = geometry.vertices;
        const lineDistances = geometry.lineDistances;
        lineDistances[0] = 0;
        for (let i = 1, l = vertices.length; i < l; i++) {
          lineDistances[i] = lineDistances[i - 1];
          lineDistances[i] += vertices[i - 1].distanceTo(vertices[i]);
        }
      }
      return this;
    },
    raycast: function(raycaster2, intersects2) {
      const geometry = this.geometry;
      const matrixWorld = this.matrixWorld;
      const threshold = raycaster2.params.Line.threshold;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere$2.copy(geometry.boundingSphere);
      _sphere$2.applyMatrix4(matrixWorld);
      _sphere$2.radius += threshold;
      if (raycaster2.ray.intersectsSphere(_sphere$2) === false)
        return;
      _inverseMatrix$1.copy(matrixWorld).invert();
      _ray$1.copy(raycaster2.ray).applyMatrix4(_inverseMatrix$1);
      const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
      const localThresholdSq = localThreshold * localThreshold;
      const vStart = new Vector3();
      const vEnd = new Vector3();
      const interSegment = new Vector3();
      const interRay = new Vector3();
      const step = this.isLineSegments ? 2 : 1;
      if (geometry.isBufferGeometry) {
        const index = geometry.index;
        const attributes = geometry.attributes;
        const positionAttribute = attributes.position;
        if (index !== null) {
          const indices = index.array;
          for (let i = 0, l = indices.length - 1; i < l; i += step) {
            const a = indices[i];
            const b = indices[i + 1];
            vStart.fromBufferAttribute(positionAttribute, a);
            vEnd.fromBufferAttribute(positionAttribute, b);
            const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
            if (distSq > localThresholdSq)
              continue;
            interRay.applyMatrix4(this.matrixWorld);
            const distance = raycaster2.ray.origin.distanceTo(interRay);
            if (distance < raycaster2.near || distance > raycaster2.far)
              continue;
            intersects2.push({
              distance,
              point: interSegment.clone().applyMatrix4(this.matrixWorld),
              index: i,
              face: null,
              faceIndex: null,
              object: this
            });
          }
        } else {
          for (let i = 0, l = positionAttribute.count - 1; i < l; i += step) {
            vStart.fromBufferAttribute(positionAttribute, i);
            vEnd.fromBufferAttribute(positionAttribute, i + 1);
            const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
            if (distSq > localThresholdSq)
              continue;
            interRay.applyMatrix4(this.matrixWorld);
            const distance = raycaster2.ray.origin.distanceTo(interRay);
            if (distance < raycaster2.near || distance > raycaster2.far)
              continue;
            intersects2.push({
              distance,
              point: interSegment.clone().applyMatrix4(this.matrixWorld),
              index: i,
              face: null,
              faceIndex: null,
              object: this
            });
          }
        }
      } else if (geometry.isGeometry) {
        const vertices = geometry.vertices;
        const nbVertices = vertices.length;
        for (let i = 0; i < nbVertices - 1; i += step) {
          const distSq = _ray$1.distanceSqToSegment(vertices[i], vertices[i + 1], interRay, interSegment);
          if (distSq > localThresholdSq)
            continue;
          interRay.applyMatrix4(this.matrixWorld);
          const distance = raycaster2.ray.origin.distanceTo(interRay);
          if (distance < raycaster2.near || distance > raycaster2.far)
            continue;
          intersects2.push({
            distance,
            point: interSegment.clone().applyMatrix4(this.matrixWorld),
            index: i,
            face: null,
            faceIndex: null,
            object: this
          });
        }
      }
    },
    updateMorphTargets: function() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
          const morphAttribute = morphAttributes[keys[0]];
          if (morphAttribute !== void 0) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
              const name = morphAttribute[m].name || String(m);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m;
            }
          }
        }
      } else {
        const morphTargets = geometry.morphTargets;
        if (morphTargets !== void 0 && morphTargets.length > 0) {
          console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
      }
    }
  });
  var _start$1 = new Vector3();
  var _end$1 = new Vector3();
  function LineSegments(geometry, material) {
    Line.call(this, geometry, material);
    this.type = "LineSegments";
  }
  LineSegments.prototype = Object.assign(Object.create(Line.prototype), {
    constructor: LineSegments,
    isLineSegments: true,
    computeLineDistances: function() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        if (geometry.index === null) {
          const positionAttribute = geometry.attributes.position;
          const lineDistances = [];
          for (let i = 0, l = positionAttribute.count; i < l; i += 2) {
            _start$1.fromBufferAttribute(positionAttribute, i);
            _end$1.fromBufferAttribute(positionAttribute, i + 1);
            lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
            lineDistances[i + 1] = lineDistances[i] + _start$1.distanceTo(_end$1);
          }
          geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
        } else {
          console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        }
      } else if (geometry.isGeometry) {
        const vertices = geometry.vertices;
        const lineDistances = geometry.lineDistances;
        for (let i = 0, l = vertices.length; i < l; i += 2) {
          _start$1.copy(vertices[i]);
          _end$1.copy(vertices[i + 1]);
          lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
          lineDistances[i + 1] = lineDistances[i] + _start$1.distanceTo(_end$1);
        }
      }
      return this;
    }
  });
  function LineLoop(geometry, material) {
    Line.call(this, geometry, material);
    this.type = "LineLoop";
  }
  LineLoop.prototype = Object.assign(Object.create(Line.prototype), {
    constructor: LineLoop,
    isLineLoop: true
  });
  function PointsMaterial(parameters) {
    Material.call(this);
    this.type = "PointsMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.alphaMap = null;
    this.size = 1;
    this.sizeAttenuation = true;
    this.morphTargets = false;
    this.setValues(parameters);
  }
  PointsMaterial.prototype = Object.create(Material.prototype);
  PointsMaterial.prototype.constructor = PointsMaterial;
  PointsMaterial.prototype.isPointsMaterial = true;
  PointsMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.size = source.size;
    this.sizeAttenuation = source.sizeAttenuation;
    this.morphTargets = source.morphTargets;
    return this;
  };
  var _inverseMatrix$2 = new Matrix4();
  var _ray$2 = new Ray();
  var _sphere$3 = new Sphere();
  var _position$1 = new Vector3();
  function Points(geometry, material) {
    Object3D.call(this);
    this.type = "Points";
    this.geometry = geometry !== void 0 ? geometry : new BufferGeometry();
    this.material = material !== void 0 ? material : new PointsMaterial();
    this.updateMorphTargets();
  }
  Points.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Points,
    isPoints: true,
    copy: function(source) {
      Object3D.prototype.copy.call(this, source);
      this.material = source.material;
      this.geometry = source.geometry;
      return this;
    },
    raycast: function(raycaster2, intersects2) {
      const geometry = this.geometry;
      const matrixWorld = this.matrixWorld;
      const threshold = raycaster2.params.Points.threshold;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere$3.copy(geometry.boundingSphere);
      _sphere$3.applyMatrix4(matrixWorld);
      _sphere$3.radius += threshold;
      if (raycaster2.ray.intersectsSphere(_sphere$3) === false)
        return;
      _inverseMatrix$2.copy(matrixWorld).invert();
      _ray$2.copy(raycaster2.ray).applyMatrix4(_inverseMatrix$2);
      const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
      const localThresholdSq = localThreshold * localThreshold;
      if (geometry.isBufferGeometry) {
        const index = geometry.index;
        const attributes = geometry.attributes;
        const positionAttribute = attributes.position;
        if (index !== null) {
          const indices = index.array;
          for (let i = 0, il = indices.length; i < il; i++) {
            const a = indices[i];
            _position$1.fromBufferAttribute(positionAttribute, a);
            testPoint(_position$1, a, localThresholdSq, matrixWorld, raycaster2, intersects2, this);
          }
        } else {
          for (let i = 0, l = positionAttribute.count; i < l; i++) {
            _position$1.fromBufferAttribute(positionAttribute, i);
            testPoint(_position$1, i, localThresholdSq, matrixWorld, raycaster2, intersects2, this);
          }
        }
      } else {
        const vertices = geometry.vertices;
        for (let i = 0, l = vertices.length; i < l; i++) {
          testPoint(vertices[i], i, localThresholdSq, matrixWorld, raycaster2, intersects2, this);
        }
      }
    },
    updateMorphTargets: function() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
          const morphAttribute = morphAttributes[keys[0]];
          if (morphAttribute !== void 0) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
              const name = morphAttribute[m].name || String(m);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m;
            }
          }
        }
      } else {
        const morphTargets = geometry.morphTargets;
        if (morphTargets !== void 0 && morphTargets.length > 0) {
          console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
      }
    }
  });
  function testPoint(point, index, localThresholdSq, matrixWorld, raycaster2, intersects2, object) {
    const rayPointDistanceSq = _ray$2.distanceSqToPoint(point);
    if (rayPointDistanceSq < localThresholdSq) {
      const intersectPoint = new Vector3();
      _ray$2.closestPointToPoint(point, intersectPoint);
      intersectPoint.applyMatrix4(matrixWorld);
      const distance = raycaster2.ray.origin.distanceTo(intersectPoint);
      if (distance < raycaster2.near || distance > raycaster2.far)
        return;
      intersects2.push({
        distance,
        distanceToRay: Math.sqrt(rayPointDistanceSq),
        point: intersectPoint,
        index,
        face: null,
        object
      });
    }
  }
  function VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
    Texture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
    this.format = format !== void 0 ? format : RGBFormat;
    this.minFilter = minFilter !== void 0 ? minFilter : LinearFilter;
    this.magFilter = magFilter !== void 0 ? magFilter : LinearFilter;
    this.generateMipmaps = false;
    const scope = this;
    function updateVideo() {
      scope.needsUpdate = true;
      video.requestVideoFrameCallback(updateVideo);
    }
    if ("requestVideoFrameCallback" in video) {
      video.requestVideoFrameCallback(updateVideo);
    }
  }
  VideoTexture.prototype = Object.assign(Object.create(Texture.prototype), {
    constructor: VideoTexture,
    clone: function() {
      return new this.constructor(this.image).copy(this);
    },
    isVideoTexture: true,
    update: function() {
      const video = this.image;
      const hasVideoFrameCallback = "requestVideoFrameCallback" in video;
      if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {
        this.needsUpdate = true;
      }
    }
  });
  function CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
    Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
    this.image = {width, height};
    this.mipmaps = mipmaps;
    this.flipY = false;
    this.generateMipmaps = false;
  }
  CompressedTexture.prototype = Object.create(Texture.prototype);
  CompressedTexture.prototype.constructor = CompressedTexture;
  CompressedTexture.prototype.isCompressedTexture = true;
  function CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
    Texture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
    this.needsUpdate = true;
  }
  CanvasTexture.prototype = Object.create(Texture.prototype);
  CanvasTexture.prototype.constructor = CanvasTexture;
  CanvasTexture.prototype.isCanvasTexture = true;
  function DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
    format = format !== void 0 ? format : DepthFormat;
    if (format !== DepthFormat && format !== DepthStencilFormat) {
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    }
    if (type === void 0 && format === DepthFormat)
      type = UnsignedShortType;
    if (type === void 0 && format === DepthStencilFormat)
      type = UnsignedInt248Type;
    Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
    this.image = {width, height};
    this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
    this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
    this.flipY = false;
    this.generateMipmaps = false;
  }
  DepthTexture.prototype = Object.create(Texture.prototype);
  DepthTexture.prototype.constructor = DepthTexture;
  DepthTexture.prototype.isDepthTexture = true;
  var _geometryId = 0;
  var _m1$3 = new Matrix4();
  var _obj$1 = new Object3D();
  var _offset$1 = new Vector3();
  function Geometry() {
    Object.defineProperty(this, "id", {value: _geometryId += 2});
    this.uuid = MathUtils.generateUUID();
    this.name = "";
    this.type = "Geometry";
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    this.elementsNeedUpdate = false;
    this.verticesNeedUpdate = false;
    this.uvsNeedUpdate = false;
    this.normalsNeedUpdate = false;
    this.colorsNeedUpdate = false;
    this.lineDistancesNeedUpdate = false;
    this.groupsNeedUpdate = false;
  }
  Geometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
    constructor: Geometry,
    isGeometry: true,
    applyMatrix4: function(matrix) {
      const normalMatrix = new Matrix3().getNormalMatrix(matrix);
      for (let i = 0, il = this.vertices.length; i < il; i++) {
        const vertex = this.vertices[i];
        vertex.applyMatrix4(matrix);
      }
      for (let i = 0, il = this.faces.length; i < il; i++) {
        const face = this.faces[i];
        face.normal.applyMatrix3(normalMatrix).normalize();
        for (let j = 0, jl = face.vertexNormals.length; j < jl; j++) {
          face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();
        }
      }
      if (this.boundingBox !== null) {
        this.computeBoundingBox();
      }
      if (this.boundingSphere !== null) {
        this.computeBoundingSphere();
      }
      this.verticesNeedUpdate = true;
      this.normalsNeedUpdate = true;
      return this;
    },
    rotateX: function(angle) {
      _m1$3.makeRotationX(angle);
      this.applyMatrix4(_m1$3);
      return this;
    },
    rotateY: function(angle) {
      _m1$3.makeRotationY(angle);
      this.applyMatrix4(_m1$3);
      return this;
    },
    rotateZ: function(angle) {
      _m1$3.makeRotationZ(angle);
      this.applyMatrix4(_m1$3);
      return this;
    },
    translate: function(x, y, z) {
      _m1$3.makeTranslation(x, y, z);
      this.applyMatrix4(_m1$3);
      return this;
    },
    scale: function(x, y, z) {
      _m1$3.makeScale(x, y, z);
      this.applyMatrix4(_m1$3);
      return this;
    },
    lookAt: function(vector) {
      _obj$1.lookAt(vector);
      _obj$1.updateMatrix();
      this.applyMatrix4(_obj$1.matrix);
      return this;
    },
    fromBufferGeometry: function(geometry) {
      const scope = this;
      const index = geometry.index !== null ? geometry.index : void 0;
      const attributes = geometry.attributes;
      if (attributes.position === void 0) {
        console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.");
        return this;
      }
      const position = attributes.position;
      const normal = attributes.normal;
      const color = attributes.color;
      const uv = attributes.uv;
      const uv2 = attributes.uv2;
      if (uv2 !== void 0)
        this.faceVertexUvs[1] = [];
      for (let i = 0; i < position.count; i++) {
        scope.vertices.push(new Vector3().fromBufferAttribute(position, i));
        if (color !== void 0) {
          scope.colors.push(new Color().fromBufferAttribute(color, i));
        }
      }
      function addFace(a, b, c, materialIndex) {
        const vertexColors = color === void 0 ? [] : [
          scope.colors[a].clone(),
          scope.colors[b].clone(),
          scope.colors[c].clone()
        ];
        const vertexNormals = normal === void 0 ? [] : [
          new Vector3().fromBufferAttribute(normal, a),
          new Vector3().fromBufferAttribute(normal, b),
          new Vector3().fromBufferAttribute(normal, c)
        ];
        const face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);
        scope.faces.push(face);
        if (uv !== void 0) {
          scope.faceVertexUvs[0].push([
            new Vector2().fromBufferAttribute(uv, a),
            new Vector2().fromBufferAttribute(uv, b),
            new Vector2().fromBufferAttribute(uv, c)
          ]);
        }
        if (uv2 !== void 0) {
          scope.faceVertexUvs[1].push([
            new Vector2().fromBufferAttribute(uv2, a),
            new Vector2().fromBufferAttribute(uv2, b),
            new Vector2().fromBufferAttribute(uv2, c)
          ]);
        }
      }
      const groups = geometry.groups;
      if (groups.length > 0) {
        for (let i = 0; i < groups.length; i++) {
          const group2 = groups[i];
          const start = group2.start;
          const count = group2.count;
          for (let j = start, jl = start + count; j < jl; j += 3) {
            if (index !== void 0) {
              addFace(index.getX(j), index.getX(j + 1), index.getX(j + 2), group2.materialIndex);
            } else {
              addFace(j, j + 1, j + 2, group2.materialIndex);
            }
          }
        }
      } else {
        if (index !== void 0) {
          for (let i = 0; i < index.count; i += 3) {
            addFace(index.getX(i), index.getX(i + 1), index.getX(i + 2));
          }
        } else {
          for (let i = 0; i < position.count; i += 3) {
            addFace(i, i + 1, i + 2);
          }
        }
      }
      this.computeFaceNormals();
      if (geometry.boundingBox !== null) {
        this.boundingBox = geometry.boundingBox.clone();
      }
      if (geometry.boundingSphere !== null) {
        this.boundingSphere = geometry.boundingSphere.clone();
      }
      return this;
    },
    center: function() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(_offset$1).negate();
      this.translate(_offset$1.x, _offset$1.y, _offset$1.z);
      return this;
    },
    normalize: function() {
      this.computeBoundingSphere();
      const center = this.boundingSphere.center;
      const radius = this.boundingSphere.radius;
      const s = radius === 0 ? 1 : 1 / radius;
      const matrix = new Matrix4();
      matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);
      this.applyMatrix4(matrix);
      return this;
    },
    computeFaceNormals: function() {
      const cb = new Vector3(), ab = new Vector3();
      for (let f = 0, fl = this.faces.length; f < fl; f++) {
        const face = this.faces[f];
        const vA = this.vertices[face.a];
        const vB = this.vertices[face.b];
        const vC = this.vertices[face.c];
        cb.subVectors(vC, vB);
        ab.subVectors(vA, vB);
        cb.cross(ab);
        cb.normalize();
        face.normal.copy(cb);
      }
    },
    computeVertexNormals: function(areaWeighted = true) {
      const vertices = new Array(this.vertices.length);
      for (let v = 0, vl = this.vertices.length; v < vl; v++) {
        vertices[v] = new Vector3();
      }
      if (areaWeighted) {
        const cb = new Vector3(), ab = new Vector3();
        for (let f = 0, fl = this.faces.length; f < fl; f++) {
          const face = this.faces[f];
          const vA = this.vertices[face.a];
          const vB = this.vertices[face.b];
          const vC = this.vertices[face.c];
          cb.subVectors(vC, vB);
          ab.subVectors(vA, vB);
          cb.cross(ab);
          vertices[face.a].add(cb);
          vertices[face.b].add(cb);
          vertices[face.c].add(cb);
        }
      } else {
        this.computeFaceNormals();
        for (let f = 0, fl = this.faces.length; f < fl; f++) {
          const face = this.faces[f];
          vertices[face.a].add(face.normal);
          vertices[face.b].add(face.normal);
          vertices[face.c].add(face.normal);
        }
      }
      for (let v = 0, vl = this.vertices.length; v < vl; v++) {
        vertices[v].normalize();
      }
      for (let f = 0, fl = this.faces.length; f < fl; f++) {
        const face = this.faces[f];
        const vertexNormals = face.vertexNormals;
        if (vertexNormals.length === 3) {
          vertexNormals[0].copy(vertices[face.a]);
          vertexNormals[1].copy(vertices[face.b]);
          vertexNormals[2].copy(vertices[face.c]);
        } else {
          vertexNormals[0] = vertices[face.a].clone();
          vertexNormals[1] = vertices[face.b].clone();
          vertexNormals[2] = vertices[face.c].clone();
        }
      }
      if (this.faces.length > 0) {
        this.normalsNeedUpdate = true;
      }
    },
    computeFlatVertexNormals: function() {
      this.computeFaceNormals();
      for (let f = 0, fl = this.faces.length; f < fl; f++) {
        const face = this.faces[f];
        const vertexNormals = face.vertexNormals;
        if (vertexNormals.length === 3) {
          vertexNormals[0].copy(face.normal);
          vertexNormals[1].copy(face.normal);
          vertexNormals[2].copy(face.normal);
        } else {
          vertexNormals[0] = face.normal.clone();
          vertexNormals[1] = face.normal.clone();
          vertexNormals[2] = face.normal.clone();
        }
      }
      if (this.faces.length > 0) {
        this.normalsNeedUpdate = true;
      }
    },
    computeMorphNormals: function() {
      for (let f = 0, fl = this.faces.length; f < fl; f++) {
        const face = this.faces[f];
        if (!face.__originalFaceNormal) {
          face.__originalFaceNormal = face.normal.clone();
        } else {
          face.__originalFaceNormal.copy(face.normal);
        }
        if (!face.__originalVertexNormals)
          face.__originalVertexNormals = [];
        for (let i = 0, il = face.vertexNormals.length; i < il; i++) {
          if (!face.__originalVertexNormals[i]) {
            face.__originalVertexNormals[i] = face.vertexNormals[i].clone();
          } else {
            face.__originalVertexNormals[i].copy(face.vertexNormals[i]);
          }
        }
      }
      const tmpGeo = new Geometry();
      tmpGeo.faces = this.faces;
      for (let i = 0, il = this.morphTargets.length; i < il; i++) {
        if (!this.morphNormals[i]) {
          this.morphNormals[i] = {};
          this.morphNormals[i].faceNormals = [];
          this.morphNormals[i].vertexNormals = [];
          const dstNormalsFace = this.morphNormals[i].faceNormals;
          const dstNormalsVertex = this.morphNormals[i].vertexNormals;
          for (let f = 0, fl = this.faces.length; f < fl; f++) {
            const faceNormal = new Vector3();
            const vertexNormals = {a: new Vector3(), b: new Vector3(), c: new Vector3()};
            dstNormalsFace.push(faceNormal);
            dstNormalsVertex.push(vertexNormals);
          }
        }
        const morphNormals = this.morphNormals[i];
        tmpGeo.vertices = this.morphTargets[i].vertices;
        tmpGeo.computeFaceNormals();
        tmpGeo.computeVertexNormals();
        for (let f = 0, fl = this.faces.length; f < fl; f++) {
          const face = this.faces[f];
          const faceNormal = morphNormals.faceNormals[f];
          const vertexNormals = morphNormals.vertexNormals[f];
          faceNormal.copy(face.normal);
          vertexNormals.a.copy(face.vertexNormals[0]);
          vertexNormals.b.copy(face.vertexNormals[1]);
          vertexNormals.c.copy(face.vertexNormals[2]);
        }
      }
      for (let f = 0, fl = this.faces.length; f < fl; f++) {
        const face = this.faces[f];
        face.normal = face.__originalFaceNormal;
        face.vertexNormals = face.__originalVertexNormals;
      }
    },
    computeBoundingBox: function() {
      if (this.boundingBox === null) {
        this.boundingBox = new Box3();
      }
      this.boundingBox.setFromPoints(this.vertices);
    },
    computeBoundingSphere: function() {
      if (this.boundingSphere === null) {
        this.boundingSphere = new Sphere();
      }
      this.boundingSphere.setFromPoints(this.vertices);
    },
    merge: function(geometry, matrix, materialIndexOffset = 0) {
      if (!(geometry && geometry.isGeometry)) {
        console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", geometry);
        return;
      }
      let normalMatrix;
      const vertexOffset = this.vertices.length, vertices1 = this.vertices, vertices2 = geometry.vertices, faces1 = this.faces, faces2 = geometry.faces, colors1 = this.colors, colors2 = geometry.colors;
      if (matrix !== void 0) {
        normalMatrix = new Matrix3().getNormalMatrix(matrix);
      }
      for (let i = 0, il = vertices2.length; i < il; i++) {
        const vertex = vertices2[i];
        const vertexCopy = vertex.clone();
        if (matrix !== void 0)
          vertexCopy.applyMatrix4(matrix);
        vertices1.push(vertexCopy);
      }
      for (let i = 0, il = colors2.length; i < il; i++) {
        colors1.push(colors2[i].clone());
      }
      for (let i = 0, il = faces2.length; i < il; i++) {
        const face = faces2[i];
        let normal, color;
        const faceVertexNormals = face.vertexNormals, faceVertexColors = face.vertexColors;
        const faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);
        faceCopy.normal.copy(face.normal);
        if (normalMatrix !== void 0) {
          faceCopy.normal.applyMatrix3(normalMatrix).normalize();
        }
        for (let j = 0, jl = faceVertexNormals.length; j < jl; j++) {
          normal = faceVertexNormals[j].clone();
          if (normalMatrix !== void 0) {
            normal.applyMatrix3(normalMatrix).normalize();
          }
          faceCopy.vertexNormals.push(normal);
        }
        faceCopy.color.copy(face.color);
        for (let j = 0, jl = faceVertexColors.length; j < jl; j++) {
          color = faceVertexColors[j];
          faceCopy.vertexColors.push(color.clone());
        }
        faceCopy.materialIndex = face.materialIndex + materialIndexOffset;
        faces1.push(faceCopy);
      }
      for (let i = 0, il = geometry.faceVertexUvs.length; i < il; i++) {
        const faceVertexUvs2 = geometry.faceVertexUvs[i];
        if (this.faceVertexUvs[i] === void 0)
          this.faceVertexUvs[i] = [];
        for (let j = 0, jl = faceVertexUvs2.length; j < jl; j++) {
          const uvs2 = faceVertexUvs2[j], uvsCopy = [];
          for (let k = 0, kl = uvs2.length; k < kl; k++) {
            uvsCopy.push(uvs2[k].clone());
          }
          this.faceVertexUvs[i].push(uvsCopy);
        }
      }
    },
    mergeMesh: function(mesh) {
      if (!(mesh && mesh.isMesh)) {
        console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", mesh);
        return;
      }
      if (mesh.matrixAutoUpdate)
        mesh.updateMatrix();
      this.merge(mesh.geometry, mesh.matrix);
    },
    mergeVertices: function(precisionPoints = 4) {
      const verticesMap = {};
      const unique = [], changes = [];
      const precision = Math.pow(10, precisionPoints);
      for (let i = 0, il = this.vertices.length; i < il; i++) {
        const v = this.vertices[i];
        const key = Math.round(v.x * precision) + "_" + Math.round(v.y * precision) + "_" + Math.round(v.z * precision);
        if (verticesMap[key] === void 0) {
          verticesMap[key] = i;
          unique.push(this.vertices[i]);
          changes[i] = unique.length - 1;
        } else {
          changes[i] = changes[verticesMap[key]];
        }
      }
      const faceIndicesToRemove = [];
      for (let i = 0, il = this.faces.length; i < il; i++) {
        const face = this.faces[i];
        face.a = changes[face.a];
        face.b = changes[face.b];
        face.c = changes[face.c];
        const indices = [face.a, face.b, face.c];
        for (let n = 0; n < 3; n++) {
          if (indices[n] === indices[(n + 1) % 3]) {
            faceIndicesToRemove.push(i);
            break;
          }
        }
      }
      for (let i = faceIndicesToRemove.length - 1; i >= 0; i--) {
        const idx = faceIndicesToRemove[i];
        this.faces.splice(idx, 1);
        for (let j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {
          this.faceVertexUvs[j].splice(idx, 1);
        }
      }
      const diff = this.vertices.length - unique.length;
      this.vertices = unique;
      return diff;
    },
    setFromPoints: function(points) {
      this.vertices = [];
      for (let i = 0, l = points.length; i < l; i++) {
        const point = points[i];
        this.vertices.push(new Vector3(point.x, point.y, point.z || 0));
      }
      return this;
    },
    sortFacesByMaterialIndex: function() {
      const faces = this.faces;
      const length = faces.length;
      for (let i = 0; i < length; i++) {
        faces[i]._id = i;
      }
      function materialIndexSort(a, b) {
        return a.materialIndex - b.materialIndex;
      }
      faces.sort(materialIndexSort);
      const uvs1 = this.faceVertexUvs[0];
      const uvs2 = this.faceVertexUvs[1];
      let newUvs1, newUvs2;
      if (uvs1 && uvs1.length === length)
        newUvs1 = [];
      if (uvs2 && uvs2.length === length)
        newUvs2 = [];
      for (let i = 0; i < length; i++) {
        const id = faces[i]._id;
        if (newUvs1)
          newUvs1.push(uvs1[id]);
        if (newUvs2)
          newUvs2.push(uvs2[id]);
      }
      if (newUvs1)
        this.faceVertexUvs[0] = newUvs1;
      if (newUvs2)
        this.faceVertexUvs[1] = newUvs2;
    },
    toJSON: function() {
      const data = {
        metadata: {
          version: 4.5,
          type: "Geometry",
          generator: "Geometry.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "")
        data.name = this.name;
      if (this.parameters !== void 0) {
        const parameters = this.parameters;
        for (const key in parameters) {
          if (parameters[key] !== void 0)
            data[key] = parameters[key];
        }
        return data;
      }
      const vertices = [];
      for (let i = 0; i < this.vertices.length; i++) {
        const vertex = this.vertices[i];
        vertices.push(vertex.x, vertex.y, vertex.z);
      }
      const faces = [];
      const normals = [];
      const normalsHash = {};
      const colors = [];
      const colorsHash = {};
      const uvs = [];
      const uvsHash = {};
      for (let i = 0; i < this.faces.length; i++) {
        const face = this.faces[i];
        const hasMaterial = true;
        const hasFaceUv = false;
        const hasFaceVertexUv = this.faceVertexUvs[0][i] !== void 0;
        const hasFaceNormal = face.normal.length() > 0;
        const hasFaceVertexNormal = face.vertexNormals.length > 0;
        const hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
        const hasFaceVertexColor = face.vertexColors.length > 0;
        let faceType = 0;
        faceType = setBit(faceType, 0, 0);
        faceType = setBit(faceType, 1, hasMaterial);
        faceType = setBit(faceType, 2, hasFaceUv);
        faceType = setBit(faceType, 3, hasFaceVertexUv);
        faceType = setBit(faceType, 4, hasFaceNormal);
        faceType = setBit(faceType, 5, hasFaceVertexNormal);
        faceType = setBit(faceType, 6, hasFaceColor);
        faceType = setBit(faceType, 7, hasFaceVertexColor);
        faces.push(faceType);
        faces.push(face.a, face.b, face.c);
        faces.push(face.materialIndex);
        if (hasFaceVertexUv) {
          const faceVertexUvs = this.faceVertexUvs[0][i];
          faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));
        }
        if (hasFaceNormal) {
          faces.push(getNormalIndex(face.normal));
        }
        if (hasFaceVertexNormal) {
          const vertexNormals = face.vertexNormals;
          faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));
        }
        if (hasFaceColor) {
          faces.push(getColorIndex(face.color));
        }
        if (hasFaceVertexColor) {
          const vertexColors = face.vertexColors;
          faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));
        }
      }
      function setBit(value, position, enabled) {
        return enabled ? value | 1 << position : value & ~(1 << position);
      }
      function getNormalIndex(normal) {
        const hash = normal.x.toString() + normal.y.toString() + normal.z.toString();
        if (normalsHash[hash] !== void 0) {
          return normalsHash[hash];
        }
        normalsHash[hash] = normals.length / 3;
        normals.push(normal.x, normal.y, normal.z);
        return normalsHash[hash];
      }
      function getColorIndex(color) {
        const hash = color.r.toString() + color.g.toString() + color.b.toString();
        if (colorsHash[hash] !== void 0) {
          return colorsHash[hash];
        }
        colorsHash[hash] = colors.length;
        colors.push(color.getHex());
        return colorsHash[hash];
      }
      function getUvIndex(uv) {
        const hash = uv.x.toString() + uv.y.toString();
        if (uvsHash[hash] !== void 0) {
          return uvsHash[hash];
        }
        uvsHash[hash] = uvs.length / 2;
        uvs.push(uv.x, uv.y);
        return uvsHash[hash];
      }
      data.data = {};
      data.data.vertices = vertices;
      data.data.normals = normals;
      if (colors.length > 0)
        data.data.colors = colors;
      if (uvs.length > 0)
        data.data.uvs = [uvs];
      data.data.faces = faces;
      return data;
    },
    clone: function() {
      return new Geometry().copy(this);
    },
    copy: function(source) {
      this.vertices = [];
      this.colors = [];
      this.faces = [];
      this.faceVertexUvs = [[]];
      this.morphTargets = [];
      this.morphNormals = [];
      this.skinWeights = [];
      this.skinIndices = [];
      this.lineDistances = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      this.name = source.name;
      const vertices = source.vertices;
      for (let i = 0, il = vertices.length; i < il; i++) {
        this.vertices.push(vertices[i].clone());
      }
      const colors = source.colors;
      for (let i = 0, il = colors.length; i < il; i++) {
        this.colors.push(colors[i].clone());
      }
      const faces = source.faces;
      for (let i = 0, il = faces.length; i < il; i++) {
        this.faces.push(faces[i].clone());
      }
      for (let i = 0, il = source.faceVertexUvs.length; i < il; i++) {
        const faceVertexUvs = source.faceVertexUvs[i];
        if (this.faceVertexUvs[i] === void 0) {
          this.faceVertexUvs[i] = [];
        }
        for (let j = 0, jl = faceVertexUvs.length; j < jl; j++) {
          const uvs = faceVertexUvs[j], uvsCopy = [];
          for (let k = 0, kl = uvs.length; k < kl; k++) {
            const uv = uvs[k];
            uvsCopy.push(uv.clone());
          }
          this.faceVertexUvs[i].push(uvsCopy);
        }
      }
      const morphTargets = source.morphTargets;
      for (let i = 0, il = morphTargets.length; i < il; i++) {
        const morphTarget = {};
        morphTarget.name = morphTargets[i].name;
        if (morphTargets[i].vertices !== void 0) {
          morphTarget.vertices = [];
          for (let j = 0, jl = morphTargets[i].vertices.length; j < jl; j++) {
            morphTarget.vertices.push(morphTargets[i].vertices[j].clone());
          }
        }
        if (morphTargets[i].normals !== void 0) {
          morphTarget.normals = [];
          for (let j = 0, jl = morphTargets[i].normals.length; j < jl; j++) {
            morphTarget.normals.push(morphTargets[i].normals[j].clone());
          }
        }
        this.morphTargets.push(morphTarget);
      }
      const morphNormals = source.morphNormals;
      for (let i = 0, il = morphNormals.length; i < il; i++) {
        const morphNormal = {};
        if (morphNormals[i].vertexNormals !== void 0) {
          morphNormal.vertexNormals = [];
          for (let j = 0, jl = morphNormals[i].vertexNormals.length; j < jl; j++) {
            const srcVertexNormal = morphNormals[i].vertexNormals[j];
            const destVertexNormal = {};
            destVertexNormal.a = srcVertexNormal.a.clone();
            destVertexNormal.b = srcVertexNormal.b.clone();
            destVertexNormal.c = srcVertexNormal.c.clone();
            morphNormal.vertexNormals.push(destVertexNormal);
          }
        }
        if (morphNormals[i].faceNormals !== void 0) {
          morphNormal.faceNormals = [];
          for (let j = 0, jl = morphNormals[i].faceNormals.length; j < jl; j++) {
            morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());
          }
        }
        this.morphNormals.push(morphNormal);
      }
      const skinWeights = source.skinWeights;
      for (let i = 0, il = skinWeights.length; i < il; i++) {
        this.skinWeights.push(skinWeights[i].clone());
      }
      const skinIndices = source.skinIndices;
      for (let i = 0, il = skinIndices.length; i < il; i++) {
        this.skinIndices.push(skinIndices[i].clone());
      }
      const lineDistances = source.lineDistances;
      for (let i = 0, il = lineDistances.length; i < il; i++) {
        this.lineDistances.push(lineDistances[i]);
      }
      const boundingBox = source.boundingBox;
      if (boundingBox !== null) {
        this.boundingBox = boundingBox.clone();
      }
      const boundingSphere = source.boundingSphere;
      if (boundingSphere !== null) {
        this.boundingSphere = boundingSphere.clone();
      }
      this.elementsNeedUpdate = source.elementsNeedUpdate;
      this.verticesNeedUpdate = source.verticesNeedUpdate;
      this.uvsNeedUpdate = source.uvsNeedUpdate;
      this.normalsNeedUpdate = source.normalsNeedUpdate;
      this.colorsNeedUpdate = source.colorsNeedUpdate;
      this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
      this.groupsNeedUpdate = source.groupsNeedUpdate;
      return this;
    },
    dispose: function() {
      this.dispatchEvent({type: "dispose"});
    }
  });
  var _v0$2 = new Vector3();
  var _v1$5 = new Vector3();
  var _normal$1 = new Vector3();
  var _triangle = new Triangle();
  var Earcut = {
    triangulate: function(data, holeIndices, dim) {
      dim = dim || 2;
      const hasHoles = holeIndices && holeIndices.length;
      const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
      let outerNode = linkedList(data, 0, outerLen, dim, true);
      const triangles = [];
      if (!outerNode || outerNode.next === outerNode.prev)
        return triangles;
      let minX, minY, maxX, maxY, x, y, invSize;
      if (hasHoles)
        outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
      if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];
        for (let i = dim; i < outerLen; i += dim) {
          x = data[i];
          y = data[i + 1];
          if (x < minX)
            minX = x;
          if (y < minY)
            minY = y;
          if (x > maxX)
            maxX = x;
          if (y > maxY)
            maxY = y;
        }
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 1 / invSize : 0;
      }
      earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
      return triangles;
    }
  };
  function linkedList(data, start, end, dim, clockwise) {
    let i, last;
    if (clockwise === signedArea(data, start, end, dim) > 0) {
      for (i = start; i < end; i += dim)
        last = insertNode(i, data[i], data[i + 1], last);
    } else {
      for (i = end - dim; i >= start; i -= dim)
        last = insertNode(i, data[i], data[i + 1], last);
    }
    if (last && equals(last, last.next)) {
      removeNode(last);
      last = last.next;
    }
    return last;
  }
  function filterPoints(start, end) {
    if (!start)
      return start;
    if (!end)
      end = start;
    let p = start, again;
    do {
      again = false;
      if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
        removeNode(p);
        p = end = p.prev;
        if (p === p.next)
          break;
        again = true;
      } else {
        p = p.next;
      }
    } while (again || p !== end);
    return end;
  }
  function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear)
      return;
    if (!pass && invSize)
      indexCurve(ear, minX, minY, invSize);
    let stop = ear, prev, next;
    while (ear.prev !== ear.next) {
      prev = ear.prev;
      next = ear.next;
      if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
        triangles.push(prev.i / dim);
        triangles.push(ear.i / dim);
        triangles.push(next.i / dim);
        removeNode(ear);
        ear = next.next;
        stop = next.next;
        continue;
      }
      ear = next;
      if (ear === stop) {
        if (!pass) {
          earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
        } else if (pass === 1) {
          ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
          earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
        } else if (pass === 2) {
          splitEarcut(ear, triangles, dim, minX, minY, invSize);
        }
        break;
      }
    }
  }
  function isEar(ear) {
    const a = ear.prev, b = ear, c = ear.next;
    if (area(a, b, c) >= 0)
      return false;
    let p = ear.next.next;
    while (p !== ear.prev) {
      if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)
        return false;
      p = p.next;
    }
    return true;
  }
  function isEarHashed(ear, minX, minY, invSize) {
    const a = ear.prev, b = ear, c = ear.next;
    if (area(a, b, c) >= 0)
      return false;
    const minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x, minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y, maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x, maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
    const minZ = zOrder(minTX, minTY, minX, minY, invSize), maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
    let p = ear.prevZ, n = ear.nextZ;
    while (p && p.z >= minZ && n && n.z <= maxZ) {
      if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)
        return false;
      p = p.prevZ;
      if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0)
        return false;
      n = n.nextZ;
    }
    while (p && p.z >= minZ) {
      if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)
        return false;
      p = p.prevZ;
    }
    while (n && n.z <= maxZ) {
      if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0)
        return false;
      n = n.nextZ;
    }
    return true;
  }
  function cureLocalIntersections(start, triangles, dim) {
    let p = start;
    do {
      const a = p.prev, b = p.next.next;
      if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
        triangles.push(a.i / dim);
        triangles.push(p.i / dim);
        triangles.push(b.i / dim);
        removeNode(p);
        removeNode(p.next);
        p = start = b;
      }
      p = p.next;
    } while (p !== start);
    return filterPoints(p);
  }
  function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    let a = start;
    do {
      let b = a.next.next;
      while (b !== a.prev) {
        if (a.i !== b.i && isValidDiagonal(a, b)) {
          let c = splitPolygon(a, b);
          a = filterPoints(a, a.next);
          c = filterPoints(c, c.next);
          earcutLinked(a, triangles, dim, minX, minY, invSize);
          earcutLinked(c, triangles, dim, minX, minY, invSize);
          return;
        }
        b = b.next;
      }
      a = a.next;
    } while (a !== start);
  }
  function eliminateHoles(data, holeIndices, outerNode, dim) {
    const queue = [];
    let i, len, start, end, list;
    for (i = 0, len = holeIndices.length; i < len; i++) {
      start = holeIndices[i] * dim;
      end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
      list = linkedList(data, start, end, dim, false);
      if (list === list.next)
        list.steiner = true;
      queue.push(getLeftmost(list));
    }
    queue.sort(compareX);
    for (i = 0; i < queue.length; i++) {
      eliminateHole(queue[i], outerNode);
      outerNode = filterPoints(outerNode, outerNode.next);
    }
    return outerNode;
  }
  function compareX(a, b) {
    return a.x - b.x;
  }
  function eliminateHole(hole, outerNode) {
    outerNode = findHoleBridge(hole, outerNode);
    if (outerNode) {
      const b = splitPolygon(outerNode, hole);
      filterPoints(outerNode, outerNode.next);
      filterPoints(b, b.next);
    }
  }
  function findHoleBridge(hole, outerNode) {
    let p = outerNode;
    const hx = hole.x;
    const hy = hole.y;
    let qx = -Infinity, m;
    do {
      if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
        const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
        if (x <= hx && x > qx) {
          qx = x;
          if (x === hx) {
            if (hy === p.y)
              return p;
            if (hy === p.next.y)
              return p.next;
          }
          m = p.x < p.next.x ? p : p.next;
        }
      }
      p = p.next;
    } while (p !== outerNode);
    if (!m)
      return null;
    if (hx === qx)
      return m;
    const stop = m, mx = m.x, my = m.y;
    let tanMin = Infinity, tan;
    p = m;
    do {
      if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
        tan = Math.abs(hy - p.y) / (hx - p.x);
        if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
          m = p;
          tanMin = tan;
        }
      }
      p = p.next;
    } while (p !== stop);
    return m;
  }
  function sectorContainsSector(m, p) {
    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
  }
  function indexCurve(start, minX, minY, invSize) {
    let p = start;
    do {
      if (p.z === null)
        p.z = zOrder(p.x, p.y, minX, minY, invSize);
      p.prevZ = p.prev;
      p.nextZ = p.next;
      p = p.next;
    } while (p !== start);
    p.prevZ.nextZ = null;
    p.prevZ = null;
    sortLinked(p);
  }
  function sortLinked(list) {
    let i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
    do {
      p = list;
      list = null;
      tail = null;
      numMerges = 0;
      while (p) {
        numMerges++;
        q = p;
        pSize = 0;
        for (i = 0; i < inSize; i++) {
          pSize++;
          q = q.nextZ;
          if (!q)
            break;
        }
        qSize = inSize;
        while (pSize > 0 || qSize > 0 && q) {
          if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
            e = p;
            p = p.nextZ;
            pSize--;
          } else {
            e = q;
            q = q.nextZ;
            qSize--;
          }
          if (tail)
            tail.nextZ = e;
          else
            list = e;
          e.prevZ = tail;
          tail = e;
        }
        p = q;
      }
      tail.nextZ = null;
      inSize *= 2;
    } while (numMerges > 1);
    return list;
  }
  function zOrder(x, y, minX, minY, invSize) {
    x = 32767 * (x - minX) * invSize;
    y = 32767 * (y - minY) * invSize;
    x = (x | x << 8) & 16711935;
    x = (x | x << 4) & 252645135;
    x = (x | x << 2) & 858993459;
    x = (x | x << 1) & 1431655765;
    y = (y | y << 8) & 16711935;
    y = (y | y << 4) & 252645135;
    y = (y | y << 2) & 858993459;
    y = (y | y << 1) & 1431655765;
    return x | y << 1;
  }
  function getLeftmost(start) {
    let p = start, leftmost = start;
    do {
      if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y)
        leftmost = p;
      p = p.next;
    } while (p !== start);
    return leftmost;
  }
  function pointInTriangle(ax, ay, bx, by, cx, cy, px2, py2) {
    return (cx - px2) * (ay - py2) - (ax - px2) * (cy - py2) >= 0 && (ax - px2) * (by - py2) - (bx - px2) * (ay - py2) >= 0 && (bx - px2) * (cy - py2) - (cx - px2) * (by - py2) >= 0;
  }
  function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && (area(a.prev, a, b.prev) || area(a, b.prev, b)) || equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0);
  }
  function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
  }
  function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
  }
  function intersects(p1, q1, p2, q2) {
    const o1 = sign(area(p1, q1, p2));
    const o2 = sign(area(p1, q1, q2));
    const o3 = sign(area(p2, q2, p1));
    const o4 = sign(area(p2, q2, q1));
    if (o1 !== o2 && o3 !== o4)
      return true;
    if (o1 === 0 && onSegment(p1, p2, q1))
      return true;
    if (o2 === 0 && onSegment(p1, q2, q1))
      return true;
    if (o3 === 0 && onSegment(p2, p1, q2))
      return true;
    if (o4 === 0 && onSegment(p2, q1, q2))
      return true;
    return false;
  }
  function onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
  }
  function sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
  }
  function intersectsPolygon(a, b) {
    let p = a;
    do {
      if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b))
        return true;
      p = p.next;
    } while (p !== a);
    return false;
  }
  function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
  }
  function middleInside(a, b) {
    let p = a, inside = false;
    const px2 = (a.x + b.x) / 2, py2 = (a.y + b.y) / 2;
    do {
      if (p.y > py2 !== p.next.y > py2 && p.next.y !== p.y && px2 < (p.next.x - p.x) * (py2 - p.y) / (p.next.y - p.y) + p.x)
        inside = !inside;
      p = p.next;
    } while (p !== a);
    return inside;
  }
  function splitPolygon(a, b) {
    const a2 = new Node(a.i, a.x, a.y), b2 = new Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
    a.next = b;
    b.prev = a;
    a2.next = an;
    an.prev = a2;
    b2.next = a2;
    a2.prev = b2;
    bp.next = b2;
    b2.prev = bp;
    return b2;
  }
  function insertNode(i, x, y, last) {
    const p = new Node(i, x, y);
    if (!last) {
      p.prev = p;
      p.next = p;
    } else {
      p.next = last.next;
      p.prev = last;
      last.next.prev = p;
      last.next = p;
    }
    return p;
  }
  function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;
    if (p.prevZ)
      p.prevZ.nextZ = p.nextZ;
    if (p.nextZ)
      p.nextZ.prevZ = p.prevZ;
  }
  function Node(i, x, y) {
    this.i = i;
    this.x = x;
    this.y = y;
    this.prev = null;
    this.next = null;
    this.z = null;
    this.prevZ = null;
    this.nextZ = null;
    this.steiner = false;
  }
  function signedArea(data, start, end, dim) {
    let sum = 0;
    for (let i = start, j = end - dim; i < end; i += dim) {
      sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
      j = i;
    }
    return sum;
  }
  var ShapeUtils = {
    area: function(contour) {
      const n = contour.length;
      let a = 0;
      for (let p = n - 1, q = 0; q < n; p = q++) {
        a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
      }
      return a * 0.5;
    },
    isClockWise: function(pts) {
      return ShapeUtils.area(pts) < 0;
    },
    triangulateShape: function(contour, holes) {
      const vertices = [];
      const holeIndices = [];
      const faces = [];
      removeDupEndPts(contour);
      addContour(vertices, contour);
      let holeIndex = contour.length;
      holes.forEach(removeDupEndPts);
      for (let i = 0; i < holes.length; i++) {
        holeIndices.push(holeIndex);
        holeIndex += holes[i].length;
        addContour(vertices, holes[i]);
      }
      const triangles = Earcut.triangulate(vertices, holeIndices);
      for (let i = 0; i < triangles.length; i += 3) {
        faces.push(triangles.slice(i, i + 3));
      }
      return faces;
    }
  };
  function removeDupEndPts(points) {
    const l = points.length;
    if (l > 2 && points[l - 1].equals(points[0])) {
      points.pop();
    }
  }
  function addContour(vertices, contour) {
    for (let i = 0; i < contour.length; i++) {
      vertices.push(contour[i].x);
      vertices.push(contour[i].y);
    }
  }
  var ExtrudeBufferGeometry = class extends BufferGeometry {
    constructor(shapes, options) {
      super();
      this.type = "ExtrudeBufferGeometry";
      this.parameters = {
        shapes,
        options
      };
      shapes = Array.isArray(shapes) ? shapes : [shapes];
      const scope = this;
      const verticesArray = [];
      const uvArray = [];
      for (let i = 0, l = shapes.length; i < l; i++) {
        const shape = shapes[i];
        addShape(shape);
      }
      this.setAttribute("position", new Float32BufferAttribute(verticesArray, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvArray, 2));
      this.computeVertexNormals();
      function addShape(shape) {
        const placeholder = [];
        const curveSegments = options.curveSegments !== void 0 ? options.curveSegments : 12;
        const steps = options.steps !== void 0 ? options.steps : 1;
        let depth = options.depth !== void 0 ? options.depth : 100;
        let bevelEnabled = options.bevelEnabled !== void 0 ? options.bevelEnabled : true;
        let bevelThickness = options.bevelThickness !== void 0 ? options.bevelThickness : 6;
        let bevelSize = options.bevelSize !== void 0 ? options.bevelSize : bevelThickness - 2;
        let bevelOffset = options.bevelOffset !== void 0 ? options.bevelOffset : 0;
        let bevelSegments = options.bevelSegments !== void 0 ? options.bevelSegments : 3;
        const extrudePath = options.extrudePath;
        const uvgen = options.UVGenerator !== void 0 ? options.UVGenerator : WorldUVGenerator;
        if (options.amount !== void 0) {
          console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth.");
          depth = options.amount;
        }
        let extrudePts, extrudeByPath = false;
        let splineTube, binormal, normal, position2;
        if (extrudePath) {
          extrudePts = extrudePath.getSpacedPoints(steps);
          extrudeByPath = true;
          bevelEnabled = false;
          splineTube = extrudePath.computeFrenetFrames(steps, false);
          binormal = new Vector3();
          normal = new Vector3();
          position2 = new Vector3();
        }
        if (!bevelEnabled) {
          bevelSegments = 0;
          bevelThickness = 0;
          bevelSize = 0;
          bevelOffset = 0;
        }
        const shapePoints = shape.extractPoints(curveSegments);
        let vertices = shapePoints.shape;
        const holes = shapePoints.holes;
        const reverse = !ShapeUtils.isClockWise(vertices);
        if (reverse) {
          vertices = vertices.reverse();
          for (let h = 0, hl = holes.length; h < hl; h++) {
            const ahole = holes[h];
            if (ShapeUtils.isClockWise(ahole)) {
              holes[h] = ahole.reverse();
            }
          }
        }
        const faces = ShapeUtils.triangulateShape(vertices, holes);
        const contour = vertices;
        for (let h = 0, hl = holes.length; h < hl; h++) {
          const ahole = holes[h];
          vertices = vertices.concat(ahole);
        }
        function scalePt2(pt, vec, size) {
          if (!vec)
            console.error("THREE.ExtrudeGeometry: vec does not exist");
          return vec.clone().multiplyScalar(size).add(pt);
        }
        const vlen = vertices.length, flen = faces.length;
        function getBevelVec(inPt, inPrev, inNext) {
          let v_trans_x, v_trans_y, shrink_by;
          const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
          const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
          const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
          const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
          if (Math.abs(collinear0) > Number.EPSILON) {
            const v_prev_len = Math.sqrt(v_prev_lensq);
            const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
            const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
            const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
            const ptNextShift_x = inNext.x - v_next_y / v_next_len;
            const ptNextShift_y = inNext.y + v_next_x / v_next_len;
            const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
            v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
            v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
            const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
            if (v_trans_lensq <= 2) {
              return new Vector2(v_trans_x, v_trans_y);
            } else {
              shrink_by = Math.sqrt(v_trans_lensq / 2);
            }
          } else {
            let direction_eq = false;
            if (v_prev_x > Number.EPSILON) {
              if (v_next_x > Number.EPSILON) {
                direction_eq = true;
              }
            } else {
              if (v_prev_x < -Number.EPSILON) {
                if (v_next_x < -Number.EPSILON) {
                  direction_eq = true;
                }
              } else {
                if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
                  direction_eq = true;
                }
              }
            }
            if (direction_eq) {
              v_trans_x = -v_prev_y;
              v_trans_y = v_prev_x;
              shrink_by = Math.sqrt(v_prev_lensq);
            } else {
              v_trans_x = v_prev_x;
              v_trans_y = v_prev_y;
              shrink_by = Math.sqrt(v_prev_lensq / 2);
            }
          }
          return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
        }
        const contourMovements = [];
        for (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
          if (j === il)
            j = 0;
          if (k === il)
            k = 0;
          contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);
        }
        const holesMovements = [];
        let oneHoleMovements, verticesMovements = contourMovements.concat();
        for (let h = 0, hl = holes.length; h < hl; h++) {
          const ahole = holes[h];
          oneHoleMovements = [];
          for (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
            if (j === il)
              j = 0;
            if (k === il)
              k = 0;
            oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);
          }
          holesMovements.push(oneHoleMovements);
          verticesMovements = verticesMovements.concat(oneHoleMovements);
        }
        for (let b = 0; b < bevelSegments; b++) {
          const t = b / bevelSegments;
          const z = bevelThickness * Math.cos(t * Math.PI / 2);
          const bs2 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
          for (let i = 0, il = contour.length; i < il; i++) {
            const vert = scalePt2(contour[i], contourMovements[i], bs2);
            v(vert.x, vert.y, -z);
          }
          for (let h = 0, hl = holes.length; h < hl; h++) {
            const ahole = holes[h];
            oneHoleMovements = holesMovements[h];
            for (let i = 0, il = ahole.length; i < il; i++) {
              const vert = scalePt2(ahole[i], oneHoleMovements[i], bs2);
              v(vert.x, vert.y, -z);
            }
          }
        }
        const bs = bevelSize + bevelOffset;
        for (let i = 0; i < vlen; i++) {
          const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
          if (!extrudeByPath) {
            v(vert.x, vert.y, 0);
          } else {
            normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
            binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
            position2.copy(extrudePts[0]).add(normal).add(binormal);
            v(position2.x, position2.y, position2.z);
          }
        }
        for (let s = 1; s <= steps; s++) {
          for (let i = 0; i < vlen; i++) {
            const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
            if (!extrudeByPath) {
              v(vert.x, vert.y, depth / steps * s);
            } else {
              normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
              binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
              position2.copy(extrudePts[s]).add(normal).add(binormal);
              v(position2.x, position2.y, position2.z);
            }
          }
        }
        for (let b = bevelSegments - 1; b >= 0; b--) {
          const t = b / bevelSegments;
          const z = bevelThickness * Math.cos(t * Math.PI / 2);
          const bs2 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
          for (let i = 0, il = contour.length; i < il; i++) {
            const vert = scalePt2(contour[i], contourMovements[i], bs2);
            v(vert.x, vert.y, depth + z);
          }
          for (let h = 0, hl = holes.length; h < hl; h++) {
            const ahole = holes[h];
            oneHoleMovements = holesMovements[h];
            for (let i = 0, il = ahole.length; i < il; i++) {
              const vert = scalePt2(ahole[i], oneHoleMovements[i], bs2);
              if (!extrudeByPath) {
                v(vert.x, vert.y, depth + z);
              } else {
                v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);
              }
            }
          }
        }
        buildLidFaces();
        buildSideFaces();
        function buildLidFaces() {
          const start = verticesArray.length / 3;
          if (bevelEnabled) {
            let layer = 0;
            let offset = vlen * layer;
            for (let i = 0; i < flen; i++) {
              const face = faces[i];
              f3(face[2] + offset, face[1] + offset, face[0] + offset);
            }
            layer = steps + bevelSegments * 2;
            offset = vlen * layer;
            for (let i = 0; i < flen; i++) {
              const face = faces[i];
              f3(face[0] + offset, face[1] + offset, face[2] + offset);
            }
          } else {
            for (let i = 0; i < flen; i++) {
              const face = faces[i];
              f3(face[2], face[1], face[0]);
            }
            for (let i = 0; i < flen; i++) {
              const face = faces[i];
              f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
            }
          }
          scope.addGroup(start, verticesArray.length / 3 - start, 0);
        }
        function buildSideFaces() {
          const start = verticesArray.length / 3;
          let layeroffset = 0;
          sidewalls(contour, layeroffset);
          layeroffset += contour.length;
          for (let h = 0, hl = holes.length; h < hl; h++) {
            const ahole = holes[h];
            sidewalls(ahole, layeroffset);
            layeroffset += ahole.length;
          }
          scope.addGroup(start, verticesArray.length / 3 - start, 1);
        }
        function sidewalls(contour2, layeroffset) {
          let i = contour2.length;
          while (--i >= 0) {
            const j = i;
            let k = i - 1;
            if (k < 0)
              k = contour2.length - 1;
            for (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {
              const slen1 = vlen * s;
              const slen2 = vlen * (s + 1);
              const a = layeroffset + j + slen1, b = layeroffset + k + slen1, c = layeroffset + k + slen2, d = layeroffset + j + slen2;
              f4(a, b, c, d);
            }
          }
        }
        function v(x, y, z) {
          placeholder.push(x);
          placeholder.push(y);
          placeholder.push(z);
        }
        function f3(a, b, c) {
          addVertex(a);
          addVertex(b);
          addVertex(c);
          const nextIndex = verticesArray.length / 3;
          const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
          addUV(uvs[0]);
          addUV(uvs[1]);
          addUV(uvs[2]);
        }
        function f4(a, b, c, d) {
          addVertex(a);
          addVertex(b);
          addVertex(d);
          addVertex(b);
          addVertex(c);
          addVertex(d);
          const nextIndex = verticesArray.length / 3;
          const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
          addUV(uvs[0]);
          addUV(uvs[1]);
          addUV(uvs[3]);
          addUV(uvs[1]);
          addUV(uvs[2]);
          addUV(uvs[3]);
        }
        function addVertex(index) {
          verticesArray.push(placeholder[index * 3 + 0]);
          verticesArray.push(placeholder[index * 3 + 1]);
          verticesArray.push(placeholder[index * 3 + 2]);
        }
        function addUV(vector2) {
          uvArray.push(vector2.x);
          uvArray.push(vector2.y);
        }
      }
    }
    toJSON() {
      const data = BufferGeometry.prototype.toJSON.call(this);
      const shapes = this.parameters.shapes;
      const options = this.parameters.options;
      return toJSON(shapes, options, data);
    }
  };
  var WorldUVGenerator = {
    generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
      const a_x = vertices[indexA * 3];
      const a_y = vertices[indexA * 3 + 1];
      const b_x = vertices[indexB * 3];
      const b_y = vertices[indexB * 3 + 1];
      const c_x = vertices[indexC * 3];
      const c_y = vertices[indexC * 3 + 1];
      return [
        new Vector2(a_x, a_y),
        new Vector2(b_x, b_y),
        new Vector2(c_x, c_y)
      ];
    },
    generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
      const a_x = vertices[indexA * 3];
      const a_y = vertices[indexA * 3 + 1];
      const a_z = vertices[indexA * 3 + 2];
      const b_x = vertices[indexB * 3];
      const b_y = vertices[indexB * 3 + 1];
      const b_z = vertices[indexB * 3 + 2];
      const c_x = vertices[indexC * 3];
      const c_y = vertices[indexC * 3 + 1];
      const c_z = vertices[indexC * 3 + 2];
      const d_x = vertices[indexD * 3];
      const d_y = vertices[indexD * 3 + 1];
      const d_z = vertices[indexD * 3 + 2];
      if (Math.abs(a_y - b_y) < 0.01) {
        return [
          new Vector2(a_x, 1 - a_z),
          new Vector2(b_x, 1 - b_z),
          new Vector2(c_x, 1 - c_z),
          new Vector2(d_x, 1 - d_z)
        ];
      } else {
        return [
          new Vector2(a_y, 1 - a_z),
          new Vector2(b_y, 1 - b_z),
          new Vector2(c_y, 1 - c_z),
          new Vector2(d_y, 1 - d_z)
        ];
      }
    }
  };
  function toJSON(shapes, options, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) {
      for (let i = 0, l = shapes.length; i < l; i++) {
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
      }
    } else {
      data.shapes.push(shapes.uuid);
    }
    if (options.extrudePath !== void 0)
      data.options.extrudePath = options.extrudePath.toJSON();
    return data;
  }
  var ExtrudeGeometry = class extends Geometry {
    constructor(shapes, options) {
      super();
      this.type = "ExtrudeGeometry";
      this.parameters = {
        shapes,
        options
      };
      this.fromBufferGeometry(new ExtrudeBufferGeometry(shapes, options));
      this.mergeVertices();
    }
    toJSON() {
      const data = super.toJSON();
      const shapes = this.parameters.shapes;
      const options = this.parameters.options;
      return toJSON$1(shapes, options, data);
    }
  };
  function toJSON$1(shapes, options, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) {
      for (let i = 0, l = shapes.length; i < l; i++) {
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
      }
    } else {
      data.shapes.push(shapes.uuid);
    }
    if (options.extrudePath !== void 0)
      data.options.extrudePath = options.extrudePath.toJSON();
    return data;
  }
  function ParametricBufferGeometry(func, slices, stacks) {
    BufferGeometry.call(this);
    this.type = "ParametricBufferGeometry";
    this.parameters = {
      func,
      slices,
      stacks
    };
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const EPS = 1e-5;
    const normal = new Vector3();
    const p0 = new Vector3(), p1 = new Vector3();
    const pu = new Vector3(), pv = new Vector3();
    if (func.length < 3) {
      console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
    }
    const sliceCount = slices + 1;
    for (let i = 0; i <= stacks; i++) {
      const v = i / stacks;
      for (let j = 0; j <= slices; j++) {
        const u = j / slices;
        func(u, v, p0);
        vertices.push(p0.x, p0.y, p0.z);
        if (u - EPS >= 0) {
          func(u - EPS, v, p1);
          pu.subVectors(p0, p1);
        } else {
          func(u + EPS, v, p1);
          pu.subVectors(p1, p0);
        }
        if (v - EPS >= 0) {
          func(u, v - EPS, p1);
          pv.subVectors(p0, p1);
        } else {
          func(u, v + EPS, p1);
          pv.subVectors(p1, p0);
        }
        normal.crossVectors(pu, pv).normalize();
        normals.push(normal.x, normal.y, normal.z);
        uvs.push(u, v);
      }
    }
    for (let i = 0; i < stacks; i++) {
      for (let j = 0; j < slices; j++) {
        const a = i * sliceCount + j;
        const b = i * sliceCount + j + 1;
        const c = (i + 1) * sliceCount + j + 1;
        const d = (i + 1) * sliceCount + j;
        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  ParametricBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
  ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;
  function ParametricGeometry(func, slices, stacks) {
    Geometry.call(this);
    this.type = "ParametricGeometry";
    this.parameters = {
      func,
      slices,
      stacks
    };
    this.fromBufferGeometry(new ParametricBufferGeometry(func, slices, stacks));
    this.mergeVertices();
  }
  ParametricGeometry.prototype = Object.create(Geometry.prototype);
  ParametricGeometry.prototype.constructor = ParametricGeometry;
  var ShapeBufferGeometry = class extends BufferGeometry {
    constructor(shapes, curveSegments = 12) {
      super();
      this.type = "ShapeBufferGeometry";
      this.parameters = {
        shapes,
        curveSegments
      };
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      let groupStart = 0;
      let groupCount = 0;
      if (Array.isArray(shapes) === false) {
        addShape(shapes);
      } else {
        for (let i = 0; i < shapes.length; i++) {
          addShape(shapes[i]);
          this.addGroup(groupStart, groupCount, i);
          groupStart += groupCount;
          groupCount = 0;
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      function addShape(shape) {
        const indexOffset = vertices.length / 3;
        const points = shape.extractPoints(curveSegments);
        let shapeVertices = points.shape;
        const shapeHoles = points.holes;
        if (ShapeUtils.isClockWise(shapeVertices) === false) {
          shapeVertices = shapeVertices.reverse();
        }
        for (let i = 0, l = shapeHoles.length; i < l; i++) {
          const shapeHole = shapeHoles[i];
          if (ShapeUtils.isClockWise(shapeHole) === true) {
            shapeHoles[i] = shapeHole.reverse();
          }
        }
        const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);
        for (let i = 0, l = shapeHoles.length; i < l; i++) {
          const shapeHole = shapeHoles[i];
          shapeVertices = shapeVertices.concat(shapeHole);
        }
        for (let i = 0, l = shapeVertices.length; i < l; i++) {
          const vertex = shapeVertices[i];
          vertices.push(vertex.x, vertex.y, 0);
          normals.push(0, 0, 1);
          uvs.push(vertex.x, vertex.y);
        }
        for (let i = 0, l = faces.length; i < l; i++) {
          const face = faces[i];
          const a = face[0] + indexOffset;
          const b = face[1] + indexOffset;
          const c = face[2] + indexOffset;
          indices.push(a, b, c);
          groupCount += 3;
        }
      }
    }
    toJSON() {
      const data = BufferGeometry.prototype.toJSON.call(this);
      const shapes = this.parameters.shapes;
      return toJSON$2(shapes, data);
    }
  };
  function toJSON$2(shapes, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) {
      for (let i = 0, l = shapes.length; i < l; i++) {
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
      }
    } else {
      data.shapes.push(shapes.uuid);
    }
    return data;
  }
  var ShapeGeometry = class extends Geometry {
    constructor(shapes, curveSegments) {
      super();
      this.type = "ShapeGeometry";
      if (typeof curveSegments === "object") {
        console.warn("THREE.ShapeGeometry: Options parameter has been removed.");
        curveSegments = curveSegments.curveSegments;
      }
      this.parameters = {
        shapes,
        curveSegments
      };
      this.fromBufferGeometry(new ShapeBufferGeometry(shapes, curveSegments));
      this.mergeVertices();
    }
    toJSON() {
      const data = Geometry.prototype.toJSON.call(this);
      const shapes = this.parameters.shapes;
      return toJSON$3(shapes, data);
    }
  };
  function toJSON$3(shapes, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) {
      for (let i = 0, l = shapes.length; i < l; i++) {
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
      }
    } else {
      data.shapes.push(shapes.uuid);
    }
    return data;
  }
  function ShadowMaterial(parameters) {
    Material.call(this);
    this.type = "ShadowMaterial";
    this.color = new Color(0);
    this.transparent = true;
    this.setValues(parameters);
  }
  ShadowMaterial.prototype = Object.create(Material.prototype);
  ShadowMaterial.prototype.constructor = ShadowMaterial;
  ShadowMaterial.prototype.isShadowMaterial = true;
  ShadowMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    return this;
  };
  function RawShaderMaterial(parameters) {
    ShaderMaterial.call(this, parameters);
    this.type = "RawShaderMaterial";
  }
  RawShaderMaterial.prototype = Object.create(ShaderMaterial.prototype);
  RawShaderMaterial.prototype.constructor = RawShaderMaterial;
  RawShaderMaterial.prototype.isRawShaderMaterial = true;
  function MeshStandardMaterial(parameters) {
    Material.call(this);
    this.defines = {STANDARD: ""};
    this.type = "MeshStandardMaterial";
    this.color = new Color(16777215);
    this.roughness = 1;
    this.metalness = 0;
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap;
    this.normalScale = new Vector2(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.roughnessMap = null;
    this.metalnessMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.envMapIntensity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.skinning = false;
    this.morphTargets = false;
    this.morphNormals = false;
    this.vertexTangents = false;
    this.setValues(parameters);
  }
  MeshStandardMaterial.prototype = Object.create(Material.prototype);
  MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;
  MeshStandardMaterial.prototype.isMeshStandardMaterial = true;
  MeshStandardMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.defines = {STANDARD: ""};
    this.color.copy(source.color);
    this.roughness = source.roughness;
    this.metalness = source.metalness;
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.roughnessMap = source.roughnessMap;
    this.metalnessMap = source.metalnessMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.envMapIntensity = source.envMapIntensity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.morphNormals = source.morphNormals;
    this.vertexTangents = source.vertexTangents;
    return this;
  };
  function MeshPhysicalMaterial(parameters) {
    MeshStandardMaterial.call(this);
    this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    };
    this.type = "MeshPhysicalMaterial";
    this.clearcoat = 0;
    this.clearcoatMap = null;
    this.clearcoatRoughness = 0;
    this.clearcoatRoughnessMap = null;
    this.clearcoatNormalScale = new Vector2(1, 1);
    this.clearcoatNormalMap = null;
    this.reflectivity = 0.5;
    Object.defineProperty(this, "ior", {
      get: function() {
        return (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);
      },
      set: function(ior) {
        this.reflectivity = MathUtils.clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);
      }
    });
    this.sheen = null;
    this.transmission = 0;
    this.transmissionMap = null;
    this.setValues(parameters);
  }
  MeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);
  MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;
  MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
  MeshPhysicalMaterial.prototype.copy = function(source) {
    MeshStandardMaterial.prototype.copy.call(this, source);
    this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    };
    this.clearcoat = source.clearcoat;
    this.clearcoatMap = source.clearcoatMap;
    this.clearcoatRoughness = source.clearcoatRoughness;
    this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
    this.clearcoatNormalMap = source.clearcoatNormalMap;
    this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
    this.reflectivity = source.reflectivity;
    if (source.sheen) {
      this.sheen = (this.sheen || new Color()).copy(source.sheen);
    } else {
      this.sheen = null;
    }
    this.transmission = source.transmission;
    this.transmissionMap = source.transmissionMap;
    return this;
  };
  function MeshPhongMaterial(parameters) {
    Material.call(this);
    this.type = "MeshPhongMaterial";
    this.color = new Color(16777215);
    this.specular = new Color(1118481);
    this.shininess = 30;
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap;
    this.normalScale = new Vector2(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.combine = MultiplyOperation;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.skinning = false;
    this.morphTargets = false;
    this.morphNormals = false;
    this.setValues(parameters);
  }
  MeshPhongMaterial.prototype = Object.create(Material.prototype);
  MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;
  MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
  MeshPhongMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.specular.copy(source.specular);
    this.shininess = source.shininess;
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.morphNormals = source.morphNormals;
    return this;
  };
  function MeshToonMaterial(parameters) {
    Material.call(this);
    this.defines = {TOON: ""};
    this.type = "MeshToonMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.gradientMap = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap;
    this.normalScale = new Vector2(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.alphaMap = null;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.skinning = false;
    this.morphTargets = false;
    this.morphNormals = false;
    this.setValues(parameters);
  }
  MeshToonMaterial.prototype = Object.create(Material.prototype);
  MeshToonMaterial.prototype.constructor = MeshToonMaterial;
  MeshToonMaterial.prototype.isMeshToonMaterial = true;
  MeshToonMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.map = source.map;
    this.gradientMap = source.gradientMap;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.alphaMap = source.alphaMap;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.morphNormals = source.morphNormals;
    return this;
  };
  function MeshNormalMaterial(parameters) {
    Material.call(this);
    this.type = "MeshNormalMaterial";
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap;
    this.normalScale = new Vector2(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.fog = false;
    this.skinning = false;
    this.morphTargets = false;
    this.morphNormals = false;
    this.setValues(parameters);
  }
  MeshNormalMaterial.prototype = Object.create(Material.prototype);
  MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;
  MeshNormalMaterial.prototype.isMeshNormalMaterial = true;
  MeshNormalMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.morphNormals = source.morphNormals;
    return this;
  };
  function MeshLambertMaterial(parameters) {
    Material.call(this);
    this.type = "MeshLambertMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.combine = MultiplyOperation;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.skinning = false;
    this.morphTargets = false;
    this.morphNormals = false;
    this.setValues(parameters);
  }
  MeshLambertMaterial.prototype = Object.create(Material.prototype);
  MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;
  MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
  MeshLambertMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.morphNormals = source.morphNormals;
    return this;
  };
  function MeshMatcapMaterial(parameters) {
    Material.call(this);
    this.defines = {MATCAP: ""};
    this.type = "MeshMatcapMaterial";
    this.color = new Color(16777215);
    this.matcap = null;
    this.map = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap;
    this.normalScale = new Vector2(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.alphaMap = null;
    this.skinning = false;
    this.morphTargets = false;
    this.morphNormals = false;
    this.setValues(parameters);
  }
  MeshMatcapMaterial.prototype = Object.create(Material.prototype);
  MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;
  MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;
  MeshMatcapMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.defines = {MATCAP: ""};
    this.color.copy(source.color);
    this.matcap = source.matcap;
    this.map = source.map;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.alphaMap = source.alphaMap;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.morphNormals = source.morphNormals;
    return this;
  };
  function LineDashedMaterial(parameters) {
    LineBasicMaterial.call(this);
    this.type = "LineDashedMaterial";
    this.scale = 1;
    this.dashSize = 3;
    this.gapSize = 1;
    this.setValues(parameters);
  }
  LineDashedMaterial.prototype = Object.create(LineBasicMaterial.prototype);
  LineDashedMaterial.prototype.constructor = LineDashedMaterial;
  LineDashedMaterial.prototype.isLineDashedMaterial = true;
  LineDashedMaterial.prototype.copy = function(source) {
    LineBasicMaterial.prototype.copy.call(this, source);
    this.scale = source.scale;
    this.dashSize = source.dashSize;
    this.gapSize = source.gapSize;
    return this;
  };
  var Materials = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    ShadowMaterial,
    SpriteMaterial,
    RawShaderMaterial,
    ShaderMaterial,
    PointsMaterial,
    MeshPhysicalMaterial,
    MeshStandardMaterial,
    MeshPhongMaterial,
    MeshToonMaterial,
    MeshNormalMaterial,
    MeshLambertMaterial,
    MeshDepthMaterial,
    MeshDistanceMaterial,
    MeshBasicMaterial,
    MeshMatcapMaterial,
    LineDashedMaterial,
    LineBasicMaterial,
    Material
  });
  var AnimationUtils = {
    arraySlice: function(array, from, to) {
      if (AnimationUtils.isTypedArray(array)) {
        return new array.constructor(array.subarray(from, to !== void 0 ? to : array.length));
      }
      return array.slice(from, to);
    },
    convertArray: function(array, type, forceClone) {
      if (!array || !forceClone && array.constructor === type)
        return array;
      if (typeof type.BYTES_PER_ELEMENT === "number") {
        return new type(array);
      }
      return Array.prototype.slice.call(array);
    },
    isTypedArray: function(object) {
      return ArrayBuffer.isView(object) && !(object instanceof DataView);
    },
    getKeyframeOrder: function(times) {
      function compareTime(i, j) {
        return times[i] - times[j];
      }
      const n = times.length;
      const result = new Array(n);
      for (let i = 0; i !== n; ++i)
        result[i] = i;
      result.sort(compareTime);
      return result;
    },
    sortedArray: function(values, stride, order) {
      const nValues = values.length;
      const result = new values.constructor(nValues);
      for (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {
        const srcOffset = order[i] * stride;
        for (let j = 0; j !== stride; ++j) {
          result[dstOffset++] = values[srcOffset + j];
        }
      }
      return result;
    },
    flattenJSON: function(jsonKeys, times, values, valuePropertyName) {
      let i = 1, key = jsonKeys[0];
      while (key !== void 0 && key[valuePropertyName] === void 0) {
        key = jsonKeys[i++];
      }
      if (key === void 0)
        return;
      let value = key[valuePropertyName];
      if (value === void 0)
        return;
      if (Array.isArray(value)) {
        do {
          value = key[valuePropertyName];
          if (value !== void 0) {
            times.push(key.time);
            values.push.apply(values, value);
          }
          key = jsonKeys[i++];
        } while (key !== void 0);
      } else if (value.toArray !== void 0) {
        do {
          value = key[valuePropertyName];
          if (value !== void 0) {
            times.push(key.time);
            value.toArray(values, values.length);
          }
          key = jsonKeys[i++];
        } while (key !== void 0);
      } else {
        do {
          value = key[valuePropertyName];
          if (value !== void 0) {
            times.push(key.time);
            values.push(value);
          }
          key = jsonKeys[i++];
        } while (key !== void 0);
      }
    },
    subclip: function(sourceClip, name, startFrame, endFrame, fps = 30) {
      const clip = sourceClip.clone();
      clip.name = name;
      const tracks = [];
      for (let i = 0; i < clip.tracks.length; ++i) {
        const track = clip.tracks[i];
        const valueSize = track.getValueSize();
        const times = [];
        const values = [];
        for (let j = 0; j < track.times.length; ++j) {
          const frame = track.times[j] * fps;
          if (frame < startFrame || frame >= endFrame)
            continue;
          times.push(track.times[j]);
          for (let k = 0; k < valueSize; ++k) {
            values.push(track.values[j * valueSize + k]);
          }
        }
        if (times.length === 0)
          continue;
        track.times = AnimationUtils.convertArray(times, track.times.constructor);
        track.values = AnimationUtils.convertArray(values, track.values.constructor);
        tracks.push(track);
      }
      clip.tracks = tracks;
      let minStartTime = Infinity;
      for (let i = 0; i < clip.tracks.length; ++i) {
        if (minStartTime > clip.tracks[i].times[0]) {
          minStartTime = clip.tracks[i].times[0];
        }
      }
      for (let i = 0; i < clip.tracks.length; ++i) {
        clip.tracks[i].shift(-1 * minStartTime);
      }
      clip.resetDuration();
      return clip;
    },
    makeClipAdditive: function(targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
      if (fps <= 0)
        fps = 30;
      const numTracks = referenceClip.tracks.length;
      const referenceTime = referenceFrame / fps;
      for (let i = 0; i < numTracks; ++i) {
        const referenceTrack = referenceClip.tracks[i];
        const referenceTrackType = referenceTrack.ValueTypeName;
        if (referenceTrackType === "bool" || referenceTrackType === "string")
          continue;
        const targetTrack = targetClip.tracks.find(function(track) {
          return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
        });
        if (targetTrack === void 0)
          continue;
        let referenceOffset = 0;
        const referenceValueSize = referenceTrack.getValueSize();
        if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
          referenceOffset = referenceValueSize / 3;
        }
        let targetOffset = 0;
        const targetValueSize = targetTrack.getValueSize();
        if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
          targetOffset = targetValueSize / 3;
        }
        const lastIndex = referenceTrack.times.length - 1;
        let referenceValue;
        if (referenceTime <= referenceTrack.times[0]) {
          const startIndex = referenceOffset;
          const endIndex = referenceValueSize - referenceOffset;
          referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
        } else if (referenceTime >= referenceTrack.times[lastIndex]) {
          const startIndex = lastIndex * referenceValueSize + referenceOffset;
          const endIndex = startIndex + referenceValueSize - referenceOffset;
          referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
        } else {
          const interpolant = referenceTrack.createInterpolant();
          const startIndex = referenceOffset;
          const endIndex = referenceValueSize - referenceOffset;
          interpolant.evaluate(referenceTime);
          referenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);
        }
        if (referenceTrackType === "quaternion") {
          const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();
          referenceQuat.toArray(referenceValue);
        }
        const numTimes = targetTrack.times.length;
        for (let j = 0; j < numTimes; ++j) {
          const valueStart = j * targetValueSize + targetOffset;
          if (referenceTrackType === "quaternion") {
            Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
          } else {
            const valueEnd = targetValueSize - targetOffset * 2;
            for (let k = 0; k < valueEnd; ++k) {
              targetTrack.values[valueStart + k] -= referenceValue[k];
            }
          }
        }
      }
      targetClip.blendMode = AdditiveAnimationBlendMode;
      return targetClip;
    }
  };
  function Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    this.parameterPositions = parameterPositions;
    this._cachedIndex = 0;
    this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
    this.sampleValues = sampleValues;
    this.valueSize = sampleSize;
  }
  Object.assign(Interpolant.prototype, {
    evaluate: function(t) {
      const pp = this.parameterPositions;
      let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
      validate_interval: {
        seek: {
          let right;
          linear_scan: {
            forward_scan:
              if (!(t < t1)) {
                for (let giveUpAt = i1 + 2; ; ) {
                  if (t1 === void 0) {
                    if (t < t0)
                      break forward_scan;
                    i1 = pp.length;
                    this._cachedIndex = i1;
                    return this.afterEnd_(i1 - 1, t, t0);
                  }
                  if (i1 === giveUpAt)
                    break;
                  t0 = t1;
                  t1 = pp[++i1];
                  if (t < t1) {
                    break seek;
                  }
                }
                right = pp.length;
                break linear_scan;
              }
            if (!(t >= t0)) {
              const t1global = pp[1];
              if (t < t1global) {
                i1 = 2;
                t0 = t1global;
              }
              for (let giveUpAt = i1 - 2; ; ) {
                if (t0 === void 0) {
                  this._cachedIndex = 0;
                  return this.beforeStart_(0, t, t1);
                }
                if (i1 === giveUpAt)
                  break;
                t1 = t0;
                t0 = pp[--i1 - 1];
                if (t >= t0) {
                  break seek;
                }
              }
              right = i1;
              i1 = 0;
              break linear_scan;
            }
            break validate_interval;
          }
          while (i1 < right) {
            const mid = i1 + right >>> 1;
            if (t < pp[mid]) {
              right = mid;
            } else {
              i1 = mid + 1;
            }
          }
          t1 = pp[i1];
          t0 = pp[i1 - 1];
          if (t0 === void 0) {
            this._cachedIndex = 0;
            return this.beforeStart_(0, t, t1);
          }
          if (t1 === void 0) {
            i1 = pp.length;
            this._cachedIndex = i1;
            return this.afterEnd_(i1 - 1, t0, t);
          }
        }
        this._cachedIndex = i1;
        this.intervalChanged_(i1, t0, t1);
      }
      return this.interpolate_(i1, t0, t, t1);
    },
    settings: null,
    DefaultSettings_: {},
    getSettings_: function() {
      return this.settings || this.DefaultSettings_;
    },
    copySampleValue_: function(index) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
      for (let i = 0; i !== stride; ++i) {
        result[i] = values[offset + i];
      }
      return result;
    },
    interpolate_: function() {
      throw new Error("call to abstract method");
    },
    intervalChanged_: function() {
    }
  });
  Object.assign(Interpolant.prototype, {
    beforeStart_: Interpolant.prototype.copySampleValue_,
    afterEnd_: Interpolant.prototype.copySampleValue_
  });
  function CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
    this._weightPrev = -0;
    this._offsetPrev = -0;
    this._weightNext = -0;
    this._offsetNext = -0;
  }
  CubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
    constructor: CubicInterpolant,
    DefaultSettings_: {
      endingStart: ZeroCurvatureEnding,
      endingEnd: ZeroCurvatureEnding
    },
    intervalChanged_: function(i1, t0, t1) {
      const pp = this.parameterPositions;
      let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
      if (tPrev === void 0) {
        switch (this.getSettings_().endingStart) {
          case ZeroSlopeEnding:
            iPrev = i1;
            tPrev = 2 * t0 - t1;
            break;
          case WrapAroundEnding:
            iPrev = pp.length - 2;
            tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
            break;
          default:
            iPrev = i1;
            tPrev = t1;
        }
      }
      if (tNext === void 0) {
        switch (this.getSettings_().endingEnd) {
          case ZeroSlopeEnding:
            iNext = i1;
            tNext = 2 * t1 - t0;
            break;
          case WrapAroundEnding:
            iNext = 1;
            tNext = t1 + pp[1] - pp[0];
            break;
          default:
            iNext = i1 - 1;
            tNext = t0;
        }
      }
      const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
      this._weightPrev = halfDt / (t0 - tPrev);
      this._weightNext = halfDt / (tNext - t1);
      this._offsetPrev = iPrev * stride;
      this._offsetNext = iNext * stride;
    },
    interpolate_: function(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t - t0) / (t1 - t0), pp = p * p, ppp = pp * p;
      const sP = -wP * ppp + 2 * wP * pp - wP * p;
      const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
      const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
      const sN = wN * ppp - wN * pp;
      for (let i = 0; i !== stride; ++i) {
        result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
      }
      return result;
    }
  });
  function LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  LinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
    constructor: LinearInterpolant,
    interpolate_: function(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;
      for (let i = 0; i !== stride; ++i) {
        result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
      }
      return result;
    }
  });
  function DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  DiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
    constructor: DiscreteInterpolant,
    interpolate_: function(i1) {
      return this.copySampleValue_(i1 - 1);
    }
  });
  function KeyframeTrack(name, times, values, interpolation) {
    if (name === void 0)
      throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (times === void 0 || times.length === 0)
      throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
    this.name = name;
    this.times = AnimationUtils.convertArray(times, this.TimeBufferType);
    this.values = AnimationUtils.convertArray(values, this.ValueBufferType);
    this.setInterpolation(interpolation || this.DefaultInterpolation);
  }
  Object.assign(KeyframeTrack, {
    toJSON: function(track) {
      const trackType = track.constructor;
      let json;
      if (trackType.toJSON !== void 0) {
        json = trackType.toJSON(track);
      } else {
        json = {
          name: track.name,
          times: AnimationUtils.convertArray(track.times, Array),
          values: AnimationUtils.convertArray(track.values, Array)
        };
        const interpolation = track.getInterpolation();
        if (interpolation !== track.DefaultInterpolation) {
          json.interpolation = interpolation;
        }
      }
      json.type = track.ValueTypeName;
      return json;
    }
  });
  Object.assign(KeyframeTrack.prototype, {
    constructor: KeyframeTrack,
    TimeBufferType: Float32Array,
    ValueBufferType: Float32Array,
    DefaultInterpolation: InterpolateLinear,
    InterpolantFactoryMethodDiscrete: function(result) {
      return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
    },
    InterpolantFactoryMethodLinear: function(result) {
      return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
    },
    InterpolantFactoryMethodSmooth: function(result) {
      return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
    },
    setInterpolation: function(interpolation) {
      let factoryMethod;
      switch (interpolation) {
        case InterpolateDiscrete:
          factoryMethod = this.InterpolantFactoryMethodDiscrete;
          break;
        case InterpolateLinear:
          factoryMethod = this.InterpolantFactoryMethodLinear;
          break;
        case InterpolateSmooth:
          factoryMethod = this.InterpolantFactoryMethodSmooth;
          break;
      }
      if (factoryMethod === void 0) {
        const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
        if (this.createInterpolant === void 0) {
          if (interpolation !== this.DefaultInterpolation) {
            this.setInterpolation(this.DefaultInterpolation);
          } else {
            throw new Error(message);
          }
        }
        console.warn("THREE.KeyframeTrack:", message);
        return this;
      }
      this.createInterpolant = factoryMethod;
      return this;
    },
    getInterpolation: function() {
      switch (this.createInterpolant) {
        case this.InterpolantFactoryMethodDiscrete:
          return InterpolateDiscrete;
        case this.InterpolantFactoryMethodLinear:
          return InterpolateLinear;
        case this.InterpolantFactoryMethodSmooth:
          return InterpolateSmooth;
      }
    },
    getValueSize: function() {
      return this.values.length / this.times.length;
    },
    shift: function(timeOffset) {
      if (timeOffset !== 0) {
        const times = this.times;
        for (let i = 0, n = times.length; i !== n; ++i) {
          times[i] += timeOffset;
        }
      }
      return this;
    },
    scale: function(timeScale) {
      if (timeScale !== 1) {
        const times = this.times;
        for (let i = 0, n = times.length; i !== n; ++i) {
          times[i] *= timeScale;
        }
      }
      return this;
    },
    trim: function(startTime, endTime) {
      const times = this.times, nKeys = times.length;
      let from = 0, to = nKeys - 1;
      while (from !== nKeys && times[from] < startTime) {
        ++from;
      }
      while (to !== -1 && times[to] > endTime) {
        --to;
      }
      ++to;
      if (from !== 0 || to !== nKeys) {
        if (from >= to) {
          to = Math.max(to, 1);
          from = to - 1;
        }
        const stride = this.getValueSize();
        this.times = AnimationUtils.arraySlice(times, from, to);
        this.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);
      }
      return this;
    },
    validate: function() {
      let valid = true;
      const valueSize = this.getValueSize();
      if (valueSize - Math.floor(valueSize) !== 0) {
        console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
        valid = false;
      }
      const times = this.times, values = this.values, nKeys = times.length;
      if (nKeys === 0) {
        console.error("THREE.KeyframeTrack: Track is empty.", this);
        valid = false;
      }
      let prevTime = null;
      for (let i = 0; i !== nKeys; i++) {
        const currTime = times[i];
        if (typeof currTime === "number" && isNaN(currTime)) {
          console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, currTime);
          valid = false;
          break;
        }
        if (prevTime !== null && prevTime > currTime) {
          console.error("THREE.KeyframeTrack: Out of order keys.", this, i, currTime, prevTime);
          valid = false;
          break;
        }
        prevTime = currTime;
      }
      if (values !== void 0) {
        if (AnimationUtils.isTypedArray(values)) {
          for (let i = 0, n = values.length; i !== n; ++i) {
            const value = values[i];
            if (isNaN(value)) {
              console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, value);
              valid = false;
              break;
            }
          }
        }
      }
      return valid;
    },
    optimize: function() {
      const times = AnimationUtils.arraySlice(this.times), values = AnimationUtils.arraySlice(this.values), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
      let writeIndex = 1;
      for (let i = 1; i < lastIndex; ++i) {
        let keep = false;
        const time = times[i];
        const timeNext = times[i + 1];
        if (time !== timeNext && (i !== 1 || time !== time[0])) {
          if (!smoothInterpolation) {
            const offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;
            for (let j = 0; j !== stride; ++j) {
              const value = values[offset + j];
              if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                keep = true;
                break;
              }
            }
          } else {
            keep = true;
          }
        }
        if (keep) {
          if (i !== writeIndex) {
            times[writeIndex] = times[i];
            const readOffset = i * stride, writeOffset = writeIndex * stride;
            for (let j = 0; j !== stride; ++j) {
              values[writeOffset + j] = values[readOffset + j];
            }
          }
          ++writeIndex;
        }
      }
      if (lastIndex > 0) {
        times[writeIndex] = times[lastIndex];
        for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
          values[writeOffset + j] = values[readOffset + j];
        }
        ++writeIndex;
      }
      if (writeIndex !== times.length) {
        this.times = AnimationUtils.arraySlice(times, 0, writeIndex);
        this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);
      } else {
        this.times = times;
        this.values = values;
      }
      return this;
    },
    clone: function() {
      const times = AnimationUtils.arraySlice(this.times, 0);
      const values = AnimationUtils.arraySlice(this.values, 0);
      const TypedKeyframeTrack = this.constructor;
      const track = new TypedKeyframeTrack(this.name, times, values);
      track.createInterpolant = this.createInterpolant;
      return track;
    }
  });
  function BooleanKeyframeTrack(name, times, values) {
    KeyframeTrack.call(this, name, times, values);
  }
  BooleanKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
    constructor: BooleanKeyframeTrack,
    ValueTypeName: "bool",
    ValueBufferType: Array,
    DefaultInterpolation: InterpolateDiscrete,
    InterpolantFactoryMethodLinear: void 0,
    InterpolantFactoryMethodSmooth: void 0
  });
  function ColorKeyframeTrack(name, times, values, interpolation) {
    KeyframeTrack.call(this, name, times, values, interpolation);
  }
  ColorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
    constructor: ColorKeyframeTrack,
    ValueTypeName: "color"
  });
  function NumberKeyframeTrack(name, times, values, interpolation) {
    KeyframeTrack.call(this, name, times, values, interpolation);
  }
  NumberKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
    constructor: NumberKeyframeTrack,
    ValueTypeName: "number"
  });
  function QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  QuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
    constructor: QuaternionLinearInterpolant,
    interpolate_: function(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0);
      let offset = i1 * stride;
      for (let end = offset + stride; offset !== end; offset += 4) {
        Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
      }
      return result;
    }
  });
  function QuaternionKeyframeTrack(name, times, values, interpolation) {
    KeyframeTrack.call(this, name, times, values, interpolation);
  }
  QuaternionKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
    constructor: QuaternionKeyframeTrack,
    ValueTypeName: "quaternion",
    DefaultInterpolation: InterpolateLinear,
    InterpolantFactoryMethodLinear: function(result) {
      return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
    },
    InterpolantFactoryMethodSmooth: void 0
  });
  function StringKeyframeTrack(name, times, values, interpolation) {
    KeyframeTrack.call(this, name, times, values, interpolation);
  }
  StringKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
    constructor: StringKeyframeTrack,
    ValueTypeName: "string",
    ValueBufferType: Array,
    DefaultInterpolation: InterpolateDiscrete,
    InterpolantFactoryMethodLinear: void 0,
    InterpolantFactoryMethodSmooth: void 0
  });
  function VectorKeyframeTrack(name, times, values, interpolation) {
    KeyframeTrack.call(this, name, times, values, interpolation);
  }
  VectorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
    constructor: VectorKeyframeTrack,
    ValueTypeName: "vector"
  });
  function AnimationClip(name, duration, tracks, blendMode) {
    this.name = name;
    this.tracks = tracks;
    this.duration = duration !== void 0 ? duration : -1;
    this.blendMode = blendMode !== void 0 ? blendMode : NormalAnimationBlendMode;
    this.uuid = MathUtils.generateUUID();
    if (this.duration < 0) {
      this.resetDuration();
    }
  }
  function getTrackTypeForValueTypeName(typeName) {
    switch (typeName.toLowerCase()) {
      case "scalar":
      case "double":
      case "float":
      case "number":
      case "integer":
        return NumberKeyframeTrack;
      case "vector":
      case "vector2":
      case "vector3":
      case "vector4":
        return VectorKeyframeTrack;
      case "color":
        return ColorKeyframeTrack;
      case "quaternion":
        return QuaternionKeyframeTrack;
      case "bool":
      case "boolean":
        return BooleanKeyframeTrack;
      case "string":
        return StringKeyframeTrack;
    }
    throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + typeName);
  }
  function parseKeyframeTrack(json) {
    if (json.type === void 0) {
      throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
    }
    const trackType = getTrackTypeForValueTypeName(json.type);
    if (json.times === void 0) {
      const times = [], values = [];
      AnimationUtils.flattenJSON(json.keys, times, values, "value");
      json.times = times;
      json.values = values;
    }
    if (trackType.parse !== void 0) {
      return trackType.parse(json);
    } else {
      return new trackType(json.name, json.times, json.values, json.interpolation);
    }
  }
  Object.assign(AnimationClip, {
    parse: function(json) {
      const tracks = [], jsonTracks = json.tracks, frameTime = 1 / (json.fps || 1);
      for (let i = 0, n = jsonTracks.length; i !== n; ++i) {
        tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
      }
      const clip = new AnimationClip(json.name, json.duration, tracks, json.blendMode);
      clip.uuid = json.uuid;
      return clip;
    },
    toJSON: function(clip) {
      const tracks = [], clipTracks = clip.tracks;
      const json = {
        name: clip.name,
        duration: clip.duration,
        tracks,
        uuid: clip.uuid,
        blendMode: clip.blendMode
      };
      for (let i = 0, n = clipTracks.length; i !== n; ++i) {
        tracks.push(KeyframeTrack.toJSON(clipTracks[i]));
      }
      return json;
    },
    CreateFromMorphTargetSequence: function(name, morphTargetSequence, fps, noLoop) {
      const numMorphTargets = morphTargetSequence.length;
      const tracks = [];
      for (let i = 0; i < numMorphTargets; i++) {
        let times = [];
        let values = [];
        times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);
        values.push(0, 1, 0);
        const order = AnimationUtils.getKeyframeOrder(times);
        times = AnimationUtils.sortedArray(times, 1, order);
        values = AnimationUtils.sortedArray(values, 1, order);
        if (!noLoop && times[0] === 0) {
          times.push(numMorphTargets);
          values.push(values[0]);
        }
        tracks.push(new NumberKeyframeTrack(".morphTargetInfluences[" + morphTargetSequence[i].name + "]", times, values).scale(1 / fps));
      }
      return new AnimationClip(name, -1, tracks);
    },
    findByName: function(objectOrClipArray, name) {
      let clipArray = objectOrClipArray;
      if (!Array.isArray(objectOrClipArray)) {
        const o = objectOrClipArray;
        clipArray = o.geometry && o.geometry.animations || o.animations;
      }
      for (let i = 0; i < clipArray.length; i++) {
        if (clipArray[i].name === name) {
          return clipArray[i];
        }
      }
      return null;
    },
    CreateClipsFromMorphTargetSequences: function(morphTargets, fps, noLoop) {
      const animationToMorphTargets = {};
      const pattern = /^([\w-]*?)([\d]+)$/;
      for (let i = 0, il = morphTargets.length; i < il; i++) {
        const morphTarget = morphTargets[i];
        const parts = morphTarget.name.match(pattern);
        if (parts && parts.length > 1) {
          const name = parts[1];
          let animationMorphTargets = animationToMorphTargets[name];
          if (!animationMorphTargets) {
            animationToMorphTargets[name] = animationMorphTargets = [];
          }
          animationMorphTargets.push(morphTarget);
        }
      }
      const clips = [];
      for (const name in animationToMorphTargets) {
        clips.push(AnimationClip.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
      }
      return clips;
    },
    parseAnimation: function(animation, bones) {
      if (!animation) {
        console.error("THREE.AnimationClip: No animation in JSONLoader data.");
        return null;
      }
      const addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
        if (animationKeys.length !== 0) {
          const times = [];
          const values = [];
          AnimationUtils.flattenJSON(animationKeys, times, values, propertyName);
          if (times.length !== 0) {
            destTracks.push(new trackType(trackName, times, values));
          }
        }
      };
      const tracks = [];
      const clipName = animation.name || "default";
      const fps = animation.fps || 30;
      const blendMode = animation.blendMode;
      let duration = animation.length || -1;
      const hierarchyTracks = animation.hierarchy || [];
      for (let h = 0; h < hierarchyTracks.length; h++) {
        const animationKeys = hierarchyTracks[h].keys;
        if (!animationKeys || animationKeys.length === 0)
          continue;
        if (animationKeys[0].morphTargets) {
          const morphTargetNames = {};
          let k;
          for (k = 0; k < animationKeys.length; k++) {
            if (animationKeys[k].morphTargets) {
              for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {
                morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
              }
            }
          }
          for (const morphTargetName in morphTargetNames) {
            const times = [];
            const values = [];
            for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {
              const animationKey = animationKeys[k];
              times.push(animationKey.time);
              values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
            }
            tracks.push(new NumberKeyframeTrack(".morphTargetInfluence[" + morphTargetName + "]", times, values));
          }
          duration = morphTargetNames.length * (fps || 1);
        } else {
          const boneName = ".bones[" + bones[h].name + "]";
          addNonemptyTrack(VectorKeyframeTrack, boneName + ".position", animationKeys, "pos", tracks);
          addNonemptyTrack(QuaternionKeyframeTrack, boneName + ".quaternion", animationKeys, "rot", tracks);
          addNonemptyTrack(VectorKeyframeTrack, boneName + ".scale", animationKeys, "scl", tracks);
        }
      }
      if (tracks.length === 0) {
        return null;
      }
      const clip = new AnimationClip(clipName, duration, tracks, blendMode);
      return clip;
    }
  });
  Object.assign(AnimationClip.prototype, {
    resetDuration: function() {
      const tracks = this.tracks;
      let duration = 0;
      for (let i = 0, n = tracks.length; i !== n; ++i) {
        const track = this.tracks[i];
        duration = Math.max(duration, track.times[track.times.length - 1]);
      }
      this.duration = duration;
      return this;
    },
    trim: function() {
      for (let i = 0; i < this.tracks.length; i++) {
        this.tracks[i].trim(0, this.duration);
      }
      return this;
    },
    validate: function() {
      let valid = true;
      for (let i = 0; i < this.tracks.length; i++) {
        valid = valid && this.tracks[i].validate();
      }
      return valid;
    },
    optimize: function() {
      for (let i = 0; i < this.tracks.length; i++) {
        this.tracks[i].optimize();
      }
      return this;
    },
    clone: function() {
      const tracks = [];
      for (let i = 0; i < this.tracks.length; i++) {
        tracks.push(this.tracks[i].clone());
      }
      return new AnimationClip(this.name, this.duration, tracks, this.blendMode);
    },
    toJSON: function() {
      return AnimationClip.toJSON(this);
    }
  });
  var Cache = {
    enabled: false,
    files: {},
    add: function(key, file) {
      if (this.enabled === false)
        return;
      this.files[key] = file;
    },
    get: function(key) {
      if (this.enabled === false)
        return;
      return this.files[key];
    },
    remove: function(key) {
      delete this.files[key];
    },
    clear: function() {
      this.files = {};
    }
  };
  function LoadingManager(onLoad, onProgress, onError) {
    const scope = this;
    let isLoading = false;
    let itemsLoaded = 0;
    let itemsTotal = 0;
    let urlModifier = void 0;
    const handlers = [];
    this.onStart = void 0;
    this.onLoad = onLoad;
    this.onProgress = onProgress;
    this.onError = onError;
    this.itemStart = function(url) {
      itemsTotal++;
      if (isLoading === false) {
        if (scope.onStart !== void 0) {
          scope.onStart(url, itemsLoaded, itemsTotal);
        }
      }
      isLoading = true;
    };
    this.itemEnd = function(url) {
      itemsLoaded++;
      if (scope.onProgress !== void 0) {
        scope.onProgress(url, itemsLoaded, itemsTotal);
      }
      if (itemsLoaded === itemsTotal) {
        isLoading = false;
        if (scope.onLoad !== void 0) {
          scope.onLoad();
        }
      }
    };
    this.itemError = function(url) {
      if (scope.onError !== void 0) {
        scope.onError(url);
      }
    };
    this.resolveURL = function(url) {
      if (urlModifier) {
        return urlModifier(url);
      }
      return url;
    };
    this.setURLModifier = function(transform) {
      urlModifier = transform;
      return this;
    };
    this.addHandler = function(regex, loader) {
      handlers.push(regex, loader);
      return this;
    };
    this.removeHandler = function(regex) {
      const index = handlers.indexOf(regex);
      if (index !== -1) {
        handlers.splice(index, 2);
      }
      return this;
    };
    this.getHandler = function(file) {
      for (let i = 0, l = handlers.length; i < l; i += 2) {
        const regex = handlers[i];
        const loader = handlers[i + 1];
        if (regex.global)
          regex.lastIndex = 0;
        if (regex.test(file)) {
          return loader;
        }
      }
      return null;
    };
  }
  var DefaultLoadingManager = new LoadingManager();
  function Loader(manager) {
    this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
    this.crossOrigin = "anonymous";
    this.withCredentials = false;
    this.path = "";
    this.resourcePath = "";
    this.requestHeader = {};
  }
  Object.assign(Loader.prototype, {
    load: function() {
    },
    loadAsync: function(url, onProgress) {
      const scope = this;
      return new Promise(function(resolve, reject) {
        scope.load(url, resolve, onProgress, reject);
      });
    },
    parse: function() {
    },
    setCrossOrigin: function(crossOrigin) {
      this.crossOrigin = crossOrigin;
      return this;
    },
    setWithCredentials: function(value) {
      this.withCredentials = value;
      return this;
    },
    setPath: function(path) {
      this.path = path;
      return this;
    },
    setResourcePath: function(resourcePath) {
      this.resourcePath = resourcePath;
      return this;
    },
    setRequestHeader: function(requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }
  });
  var loading = {};
  function FileLoader(manager) {
    Loader.call(this, manager);
  }
  FileLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: FileLoader,
    load: function(url, onLoad, onProgress, onError) {
      if (url === void 0)
        url = "";
      if (this.path !== void 0)
        url = this.path + url;
      url = this.manager.resolveURL(url);
      const scope = this;
      const cached = Cache.get(url);
      if (cached !== void 0) {
        scope.manager.itemStart(url);
        setTimeout(function() {
          if (onLoad)
            onLoad(cached);
          scope.manager.itemEnd(url);
        }, 0);
        return cached;
      }
      if (loading[url] !== void 0) {
        loading[url].push({
          onLoad,
          onProgress,
          onError
        });
        return;
      }
      const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
      const dataUriRegexResult = url.match(dataUriRegex);
      let request;
      if (dataUriRegexResult) {
        const mimeType = dataUriRegexResult[1];
        const isBase64 = !!dataUriRegexResult[2];
        let data = dataUriRegexResult[3];
        data = decodeURIComponent(data);
        if (isBase64)
          data = atob(data);
        try {
          let response;
          const responseType = (this.responseType || "").toLowerCase();
          switch (responseType) {
            case "arraybuffer":
            case "blob":
              const view = new Uint8Array(data.length);
              for (let i = 0; i < data.length; i++) {
                view[i] = data.charCodeAt(i);
              }
              if (responseType === "blob") {
                response = new Blob([view.buffer], {type: mimeType});
              } else {
                response = view.buffer;
              }
              break;
            case "document":
              const parser = new DOMParser();
              response = parser.parseFromString(data, mimeType);
              break;
            case "json":
              response = JSON.parse(data);
              break;
            default:
              response = data;
              break;
          }
          setTimeout(function() {
            if (onLoad)
              onLoad(response);
            scope.manager.itemEnd(url);
          }, 0);
        } catch (error) {
          setTimeout(function() {
            if (onError)
              onError(error);
            scope.manager.itemError(url);
            scope.manager.itemEnd(url);
          }, 0);
        }
      } else {
        loading[url] = [];
        loading[url].push({
          onLoad,
          onProgress,
          onError
        });
        request = new XMLHttpRequest();
        request.open("GET", url, true);
        request.addEventListener("load", function(event) {
          const response = this.response;
          const callbacks = loading[url];
          delete loading[url];
          if (this.status === 200 || this.status === 0) {
            if (this.status === 0)
              console.warn("THREE.FileLoader: HTTP Status 0 received.");
            Cache.add(url, response);
            for (let i = 0, il = callbacks.length; i < il; i++) {
              const callback = callbacks[i];
              if (callback.onLoad)
                callback.onLoad(response);
            }
            scope.manager.itemEnd(url);
          } else {
            for (let i = 0, il = callbacks.length; i < il; i++) {
              const callback = callbacks[i];
              if (callback.onError)
                callback.onError(event);
            }
            scope.manager.itemError(url);
            scope.manager.itemEnd(url);
          }
        }, false);
        request.addEventListener("progress", function(event) {
          const callbacks = loading[url];
          for (let i = 0, il = callbacks.length; i < il; i++) {
            const callback = callbacks[i];
            if (callback.onProgress)
              callback.onProgress(event);
          }
        }, false);
        request.addEventListener("error", function(event) {
          const callbacks = loading[url];
          delete loading[url];
          for (let i = 0, il = callbacks.length; i < il; i++) {
            const callback = callbacks[i];
            if (callback.onError)
              callback.onError(event);
          }
          scope.manager.itemError(url);
          scope.manager.itemEnd(url);
        }, false);
        request.addEventListener("abort", function(event) {
          const callbacks = loading[url];
          delete loading[url];
          for (let i = 0, il = callbacks.length; i < il; i++) {
            const callback = callbacks[i];
            if (callback.onError)
              callback.onError(event);
          }
          scope.manager.itemError(url);
          scope.manager.itemEnd(url);
        }, false);
        if (this.responseType !== void 0)
          request.responseType = this.responseType;
        if (this.withCredentials !== void 0)
          request.withCredentials = this.withCredentials;
        if (request.overrideMimeType)
          request.overrideMimeType(this.mimeType !== void 0 ? this.mimeType : "text/plain");
        for (const header in this.requestHeader) {
          request.setRequestHeader(header, this.requestHeader[header]);
        }
        request.send(null);
      }
      scope.manager.itemStart(url);
      return request;
    },
    setResponseType: function(value) {
      this.responseType = value;
      return this;
    },
    setMimeType: function(value) {
      this.mimeType = value;
      return this;
    }
  });
  function AnimationLoader(manager) {
    Loader.call(this, manager);
  }
  AnimationLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: AnimationLoader,
    load: function(url, onLoad, onProgress, onError) {
      const scope = this;
      const loader = new FileLoader(scope.manager);
      loader.setPath(scope.path);
      loader.setRequestHeader(scope.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function(text) {
        try {
          onLoad(scope.parse(JSON.parse(text)));
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }
          scope.manager.itemError(url);
        }
      }, onProgress, onError);
    },
    parse: function(json) {
      const animations = [];
      for (let i = 0; i < json.length; i++) {
        const clip = AnimationClip.parse(json[i]);
        animations.push(clip);
      }
      return animations;
    }
  });
  function CompressedTextureLoader(manager) {
    Loader.call(this, manager);
  }
  CompressedTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: CompressedTextureLoader,
    load: function(url, onLoad, onProgress, onError) {
      const scope = this;
      const images = [];
      const texture = new CompressedTexture();
      texture.image = images;
      const loader = new FileLoader(this.manager);
      loader.setPath(this.path);
      loader.setResponseType("arraybuffer");
      loader.setRequestHeader(this.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      let loaded = 0;
      function loadTexture(i) {
        loader.load(url[i], function(buffer) {
          const texDatas = scope.parse(buffer, true);
          images[i] = {
            width: texDatas.width,
            height: texDatas.height,
            format: texDatas.format,
            mipmaps: texDatas.mipmaps
          };
          loaded += 1;
          if (loaded === 6) {
            if (texDatas.mipmapCount === 1)
              texture.minFilter = LinearFilter;
            texture.format = texDatas.format;
            texture.needsUpdate = true;
            if (onLoad)
              onLoad(texture);
          }
        }, onProgress, onError);
      }
      if (Array.isArray(url)) {
        for (let i = 0, il = url.length; i < il; ++i) {
          loadTexture(i);
        }
      } else {
        loader.load(url, function(buffer) {
          const texDatas = scope.parse(buffer, true);
          if (texDatas.isCubemap) {
            const faces = texDatas.mipmaps.length / texDatas.mipmapCount;
            for (let f = 0; f < faces; f++) {
              images[f] = {mipmaps: []};
              for (let i = 0; i < texDatas.mipmapCount; i++) {
                images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
                images[f].format = texDatas.format;
                images[f].width = texDatas.width;
                images[f].height = texDatas.height;
              }
            }
          } else {
            texture.image.width = texDatas.width;
            texture.image.height = texDatas.height;
            texture.mipmaps = texDatas.mipmaps;
          }
          if (texDatas.mipmapCount === 1) {
            texture.minFilter = LinearFilter;
          }
          texture.format = texDatas.format;
          texture.needsUpdate = true;
          if (onLoad)
            onLoad(texture);
        }, onProgress, onError);
      }
      return texture;
    }
  });
  function ImageLoader(manager) {
    Loader.call(this, manager);
  }
  ImageLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: ImageLoader,
    load: function(url, onLoad, onProgress, onError) {
      if (this.path !== void 0)
        url = this.path + url;
      url = this.manager.resolveURL(url);
      const scope = this;
      const cached = Cache.get(url);
      if (cached !== void 0) {
        scope.manager.itemStart(url);
        setTimeout(function() {
          if (onLoad)
            onLoad(cached);
          scope.manager.itemEnd(url);
        }, 0);
        return cached;
      }
      const image = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
      function onImageLoad() {
        image.removeEventListener("load", onImageLoad, false);
        image.removeEventListener("error", onImageError, false);
        Cache.add(url, this);
        if (onLoad)
          onLoad(this);
        scope.manager.itemEnd(url);
      }
      function onImageError(event) {
        image.removeEventListener("load", onImageLoad, false);
        image.removeEventListener("error", onImageError, false);
        if (onError)
          onError(event);
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      }
      image.addEventListener("load", onImageLoad, false);
      image.addEventListener("error", onImageError, false);
      if (url.substr(0, 5) !== "data:") {
        if (this.crossOrigin !== void 0)
          image.crossOrigin = this.crossOrigin;
      }
      scope.manager.itemStart(url);
      image.src = url;
      return image;
    }
  });
  function CubeTextureLoader(manager) {
    Loader.call(this, manager);
  }
  CubeTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: CubeTextureLoader,
    load: function(urls, onLoad, onProgress, onError) {
      const texture = new CubeTexture();
      const loader = new ImageLoader(this.manager);
      loader.setCrossOrigin(this.crossOrigin);
      loader.setPath(this.path);
      let loaded = 0;
      function loadTexture(i) {
        loader.load(urls[i], function(image) {
          texture.images[i] = image;
          loaded++;
          if (loaded === 6) {
            texture.needsUpdate = true;
            if (onLoad)
              onLoad(texture);
          }
        }, void 0, onError);
      }
      for (let i = 0; i < urls.length; ++i) {
        loadTexture(i);
      }
      return texture;
    }
  });
  function DataTextureLoader(manager) {
    Loader.call(this, manager);
  }
  DataTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: DataTextureLoader,
    load: function(url, onLoad, onProgress, onError) {
      const scope = this;
      const texture = new DataTexture();
      const loader = new FileLoader(this.manager);
      loader.setResponseType("arraybuffer");
      loader.setRequestHeader(this.requestHeader);
      loader.setPath(this.path);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function(buffer) {
        const texData = scope.parse(buffer);
        if (!texData)
          return;
        if (texData.image !== void 0) {
          texture.image = texData.image;
        } else if (texData.data !== void 0) {
          texture.image.width = texData.width;
          texture.image.height = texData.height;
          texture.image.data = texData.data;
        }
        texture.wrapS = texData.wrapS !== void 0 ? texData.wrapS : ClampToEdgeWrapping;
        texture.wrapT = texData.wrapT !== void 0 ? texData.wrapT : ClampToEdgeWrapping;
        texture.magFilter = texData.magFilter !== void 0 ? texData.magFilter : LinearFilter;
        texture.minFilter = texData.minFilter !== void 0 ? texData.minFilter : LinearFilter;
        texture.anisotropy = texData.anisotropy !== void 0 ? texData.anisotropy : 1;
        if (texData.format !== void 0) {
          texture.format = texData.format;
        }
        if (texData.type !== void 0) {
          texture.type = texData.type;
        }
        if (texData.mipmaps !== void 0) {
          texture.mipmaps = texData.mipmaps;
          texture.minFilter = LinearMipmapLinearFilter;
        }
        if (texData.mipmapCount === 1) {
          texture.minFilter = LinearFilter;
        }
        texture.needsUpdate = true;
        if (onLoad)
          onLoad(texture, texData);
      }, onProgress, onError);
      return texture;
    }
  });
  function TextureLoader(manager) {
    Loader.call(this, manager);
  }
  TextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: TextureLoader,
    load: function(url, onLoad, onProgress, onError) {
      const texture = new Texture();
      const loader = new ImageLoader(this.manager);
      loader.setCrossOrigin(this.crossOrigin);
      loader.setPath(this.path);
      loader.load(url, function(image) {
        texture.image = image;
        const isJPEG = url.search(/\.jpe?g($|\?)/i) > 0 || url.search(/^data\:image\/jpeg/) === 0;
        texture.format = isJPEG ? RGBFormat : RGBAFormat;
        texture.needsUpdate = true;
        if (onLoad !== void 0) {
          onLoad(texture);
        }
      }, onProgress, onError);
      return texture;
    }
  });
  function Curve() {
    this.type = "Curve";
    this.arcLengthDivisions = 200;
  }
  Object.assign(Curve.prototype, {
    getPoint: function() {
      console.warn("THREE.Curve: .getPoint() not implemented.");
      return null;
    },
    getPointAt: function(u, optionalTarget) {
      const t = this.getUtoTmapping(u);
      return this.getPoint(t, optionalTarget);
    },
    getPoints: function(divisions = 5) {
      const points = [];
      for (let d = 0; d <= divisions; d++) {
        points.push(this.getPoint(d / divisions));
      }
      return points;
    },
    getSpacedPoints: function(divisions = 5) {
      const points = [];
      for (let d = 0; d <= divisions; d++) {
        points.push(this.getPointAt(d / divisions));
      }
      return points;
    },
    getLength: function() {
      const lengths = this.getLengths();
      return lengths[lengths.length - 1];
    },
    getLengths: function(divisions) {
      if (divisions === void 0)
        divisions = this.arcLengthDivisions;
      if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
        return this.cacheArcLengths;
      }
      this.needsUpdate = false;
      const cache = [];
      let current, last = this.getPoint(0);
      let sum = 0;
      cache.push(0);
      for (let p = 1; p <= divisions; p++) {
        current = this.getPoint(p / divisions);
        sum += current.distanceTo(last);
        cache.push(sum);
        last = current;
      }
      this.cacheArcLengths = cache;
      return cache;
    },
    updateArcLengths: function() {
      this.needsUpdate = true;
      this.getLengths();
    },
    getUtoTmapping: function(u, distance) {
      const arcLengths = this.getLengths();
      let i = 0;
      const il = arcLengths.length;
      let targetArcLength;
      if (distance) {
        targetArcLength = distance;
      } else {
        targetArcLength = u * arcLengths[il - 1];
      }
      let low = 0, high = il - 1, comparison;
      while (low <= high) {
        i = Math.floor(low + (high - low) / 2);
        comparison = arcLengths[i] - targetArcLength;
        if (comparison < 0) {
          low = i + 1;
        } else if (comparison > 0) {
          high = i - 1;
        } else {
          high = i;
          break;
        }
      }
      i = high;
      if (arcLengths[i] === targetArcLength) {
        return i / (il - 1);
      }
      const lengthBefore = arcLengths[i];
      const lengthAfter = arcLengths[i + 1];
      const segmentLength = lengthAfter - lengthBefore;
      const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
      const t = (i + segmentFraction) / (il - 1);
      return t;
    },
    getTangent: function(t, optionalTarget) {
      const delta = 1e-4;
      let t1 = t - delta;
      let t2 = t + delta;
      if (t1 < 0)
        t1 = 0;
      if (t2 > 1)
        t2 = 1;
      const pt1 = this.getPoint(t1);
      const pt2 = this.getPoint(t2);
      const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());
      tangent.copy(pt2).sub(pt1).normalize();
      return tangent;
    },
    getTangentAt: function(u, optionalTarget) {
      const t = this.getUtoTmapping(u);
      return this.getTangent(t, optionalTarget);
    },
    computeFrenetFrames: function(segments, closed) {
      const normal = new Vector3();
      const tangents = [];
      const normals = [];
      const binormals = [];
      const vec = new Vector3();
      const mat = new Matrix4();
      for (let i = 0; i <= segments; i++) {
        const u = i / segments;
        tangents[i] = this.getTangentAt(u, new Vector3());
        tangents[i].normalize();
      }
      normals[0] = new Vector3();
      binormals[0] = new Vector3();
      let min = Number.MAX_VALUE;
      const tx = Math.abs(tangents[0].x);
      const ty = Math.abs(tangents[0].y);
      const tz = Math.abs(tangents[0].z);
      if (tx <= min) {
        min = tx;
        normal.set(1, 0, 0);
      }
      if (ty <= min) {
        min = ty;
        normal.set(0, 1, 0);
      }
      if (tz <= min) {
        normal.set(0, 0, 1);
      }
      vec.crossVectors(tangents[0], normal).normalize();
      normals[0].crossVectors(tangents[0], vec);
      binormals[0].crossVectors(tangents[0], normals[0]);
      for (let i = 1; i <= segments; i++) {
        normals[i] = normals[i - 1].clone();
        binormals[i] = binormals[i - 1].clone();
        vec.crossVectors(tangents[i - 1], tangents[i]);
        if (vec.length() > Number.EPSILON) {
          vec.normalize();
          const theta = Math.acos(MathUtils.clamp(tangents[i - 1].dot(tangents[i]), -1, 1));
          normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));
        }
        binormals[i].crossVectors(tangents[i], normals[i]);
      }
      if (closed === true) {
        let theta = Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]), -1, 1));
        theta /= segments;
        if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
          theta = -theta;
        }
        for (let i = 1; i <= segments; i++) {
          normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
          binormals[i].crossVectors(tangents[i], normals[i]);
        }
      }
      return {
        tangents,
        normals,
        binormals
      };
    },
    clone: function() {
      return new this.constructor().copy(this);
    },
    copy: function(source) {
      this.arcLengthDivisions = source.arcLengthDivisions;
      return this;
    },
    toJSON: function() {
      const data = {
        metadata: {
          version: 4.5,
          type: "Curve",
          generator: "Curve.toJSON"
        }
      };
      data.arcLengthDivisions = this.arcLengthDivisions;
      data.type = this.type;
      return data;
    },
    fromJSON: function(json) {
      this.arcLengthDivisions = json.arcLengthDivisions;
      return this;
    }
  });
  function EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
    Curve.call(this);
    this.type = "EllipseCurve";
    this.aX = aX || 0;
    this.aY = aY || 0;
    this.xRadius = xRadius || 1;
    this.yRadius = yRadius || 1;
    this.aStartAngle = aStartAngle || 0;
    this.aEndAngle = aEndAngle || 2 * Math.PI;
    this.aClockwise = aClockwise || false;
    this.aRotation = aRotation || 0;
  }
  EllipseCurve.prototype = Object.create(Curve.prototype);
  EllipseCurve.prototype.constructor = EllipseCurve;
  EllipseCurve.prototype.isEllipseCurve = true;
  EllipseCurve.prototype.getPoint = function(t, optionalTarget) {
    const point = optionalTarget || new Vector2();
    const twoPi = Math.PI * 2;
    let deltaAngle = this.aEndAngle - this.aStartAngle;
    const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
    while (deltaAngle < 0)
      deltaAngle += twoPi;
    while (deltaAngle > twoPi)
      deltaAngle -= twoPi;
    if (deltaAngle < Number.EPSILON) {
      if (samePoints) {
        deltaAngle = 0;
      } else {
        deltaAngle = twoPi;
      }
    }
    if (this.aClockwise === true && !samePoints) {
      if (deltaAngle === twoPi) {
        deltaAngle = -twoPi;
      } else {
        deltaAngle = deltaAngle - twoPi;
      }
    }
    const angle = this.aStartAngle + t * deltaAngle;
    let x = this.aX + this.xRadius * Math.cos(angle);
    let y = this.aY + this.yRadius * Math.sin(angle);
    if (this.aRotation !== 0) {
      const cos = Math.cos(this.aRotation);
      const sin = Math.sin(this.aRotation);
      const tx = x - this.aX;
      const ty = y - this.aY;
      x = tx * cos - ty * sin + this.aX;
      y = tx * sin + ty * cos + this.aY;
    }
    return point.set(x, y);
  };
  EllipseCurve.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.aX = source.aX;
    this.aY = source.aY;
    this.xRadius = source.xRadius;
    this.yRadius = source.yRadius;
    this.aStartAngle = source.aStartAngle;
    this.aEndAngle = source.aEndAngle;
    this.aClockwise = source.aClockwise;
    this.aRotation = source.aRotation;
    return this;
  };
  EllipseCurve.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.aX = this.aX;
    data.aY = this.aY;
    data.xRadius = this.xRadius;
    data.yRadius = this.yRadius;
    data.aStartAngle = this.aStartAngle;
    data.aEndAngle = this.aEndAngle;
    data.aClockwise = this.aClockwise;
    data.aRotation = this.aRotation;
    return data;
  };
  EllipseCurve.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.aX = json.aX;
    this.aY = json.aY;
    this.xRadius = json.xRadius;
    this.yRadius = json.yRadius;
    this.aStartAngle = json.aStartAngle;
    this.aEndAngle = json.aEndAngle;
    this.aClockwise = json.aClockwise;
    this.aRotation = json.aRotation;
    return this;
  };
  function ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    EllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
    this.type = "ArcCurve";
  }
  ArcCurve.prototype = Object.create(EllipseCurve.prototype);
  ArcCurve.prototype.constructor = ArcCurve;
  ArcCurve.prototype.isArcCurve = true;
  function CubicPoly() {
    let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
    function init2(x0, x1, t0, t1) {
      c0 = x0;
      c1 = t0;
      c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
      c3 = 2 * x0 - 2 * x1 + t0 + t1;
    }
    return {
      initCatmullRom: function(x0, x1, x2, x3, tension) {
        init2(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
      },
      initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
        let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
        let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
        t1 *= dt1;
        t2 *= dt1;
        init2(x1, x2, t1, t2);
      },
      calc: function(t) {
        const t2 = t * t;
        const t3 = t2 * t;
        return c0 + c1 * t + c2 * t2 + c3 * t3;
      }
    };
  }
  var tmp = new Vector3();
  var px = new CubicPoly();
  var py = new CubicPoly();
  var pz = new CubicPoly();
  function CatmullRomCurve3(points = [], closed = false, curveType = "centripetal", tension = 0.5) {
    Curve.call(this);
    this.type = "CatmullRomCurve3";
    this.points = points;
    this.closed = closed;
    this.curveType = curveType;
    this.tension = tension;
  }
  CatmullRomCurve3.prototype = Object.create(Curve.prototype);
  CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;
  CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;
  CatmullRomCurve3.prototype.getPoint = function(t, optionalTarget = new Vector3()) {
    const point = optionalTarget;
    const points = this.points;
    const l = points.length;
    const p = (l - (this.closed ? 0 : 1)) * t;
    let intPoint = Math.floor(p);
    let weight = p - intPoint;
    if (this.closed) {
      intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
    } else if (weight === 0 && intPoint === l - 1) {
      intPoint = l - 2;
      weight = 1;
    }
    let p0, p3;
    if (this.closed || intPoint > 0) {
      p0 = points[(intPoint - 1) % l];
    } else {
      tmp.subVectors(points[0], points[1]).add(points[0]);
      p0 = tmp;
    }
    const p1 = points[intPoint % l];
    const p2 = points[(intPoint + 1) % l];
    if (this.closed || intPoint + 2 < l) {
      p3 = points[(intPoint + 2) % l];
    } else {
      tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
      p3 = tmp;
    }
    if (this.curveType === "centripetal" || this.curveType === "chordal") {
      const pow = this.curveType === "chordal" ? 0.5 : 0.25;
      let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
      let dt1 = Math.pow(p1.distanceToSquared(p2), pow);
      let dt2 = Math.pow(p2.distanceToSquared(p3), pow);
      if (dt1 < 1e-4)
        dt1 = 1;
      if (dt0 < 1e-4)
        dt0 = dt1;
      if (dt2 < 1e-4)
        dt2 = dt1;
      px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
      py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
      pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
    } else if (this.curveType === "catmullrom") {
      px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
      py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
      pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
    }
    point.set(px.calc(weight), py.calc(weight), pz.calc(weight));
    return point;
  };
  CatmullRomCurve3.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.points = [];
    for (let i = 0, l = source.points.length; i < l; i++) {
      const point = source.points[i];
      this.points.push(point.clone());
    }
    this.closed = source.closed;
    this.curveType = source.curveType;
    this.tension = source.tension;
    return this;
  };
  CatmullRomCurve3.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.points = [];
    for (let i = 0, l = this.points.length; i < l; i++) {
      const point = this.points[i];
      data.points.push(point.toArray());
    }
    data.closed = this.closed;
    data.curveType = this.curveType;
    data.tension = this.tension;
    return data;
  };
  CatmullRomCurve3.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.points = [];
    for (let i = 0, l = json.points.length; i < l; i++) {
      const point = json.points[i];
      this.points.push(new Vector3().fromArray(point));
    }
    this.closed = json.closed;
    this.curveType = json.curveType;
    this.tension = json.tension;
    return this;
  };
  function CatmullRom(t, p0, p1, p2, p3) {
    const v0 = (p2 - p0) * 0.5;
    const v1 = (p3 - p1) * 0.5;
    const t2 = t * t;
    const t3 = t * t2;
    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
  }
  function QuadraticBezierP0(t, p) {
    const k = 1 - t;
    return k * k * p;
  }
  function QuadraticBezierP1(t, p) {
    return 2 * (1 - t) * t * p;
  }
  function QuadraticBezierP2(t, p) {
    return t * t * p;
  }
  function QuadraticBezier(t, p0, p1, p2) {
    return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
  }
  function CubicBezierP0(t, p) {
    const k = 1 - t;
    return k * k * k * p;
  }
  function CubicBezierP1(t, p) {
    const k = 1 - t;
    return 3 * k * k * t * p;
  }
  function CubicBezierP2(t, p) {
    return 3 * (1 - t) * t * t * p;
  }
  function CubicBezierP3(t, p) {
    return t * t * t * p;
  }
  function CubicBezier(t, p0, p1, p2, p3) {
    return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
  }
  function CubicBezierCurve(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {
    Curve.call(this);
    this.type = "CubicBezierCurve";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v2;
    this.v3 = v3;
  }
  CubicBezierCurve.prototype = Object.create(Curve.prototype);
  CubicBezierCurve.prototype.constructor = CubicBezierCurve;
  CubicBezierCurve.prototype.isCubicBezierCurve = true;
  CubicBezierCurve.prototype.getPoint = function(t, optionalTarget = new Vector2()) {
    const point = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
    point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));
    return point;
  };
  CubicBezierCurve.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    this.v3.copy(source.v3);
    return this;
  };
  CubicBezierCurve.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    data.v3 = this.v3.toArray();
    return data;
  };
  CubicBezierCurve.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    this.v3.fromArray(json.v3);
    return this;
  };
  function CubicBezierCurve3(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {
    Curve.call(this);
    this.type = "CubicBezierCurve3";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v2;
    this.v3 = v3;
  }
  CubicBezierCurve3.prototype = Object.create(Curve.prototype);
  CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;
  CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;
  CubicBezierCurve3.prototype.getPoint = function(t, optionalTarget = new Vector3()) {
    const point = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
    point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));
    return point;
  };
  CubicBezierCurve3.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    this.v3.copy(source.v3);
    return this;
  };
  CubicBezierCurve3.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    data.v3 = this.v3.toArray();
    return data;
  };
  CubicBezierCurve3.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    this.v3.fromArray(json.v3);
    return this;
  };
  function LineCurve(v1 = new Vector2(), v2 = new Vector2()) {
    Curve.call(this);
    this.type = "LineCurve";
    this.v1 = v1;
    this.v2 = v2;
  }
  LineCurve.prototype = Object.create(Curve.prototype);
  LineCurve.prototype.constructor = LineCurve;
  LineCurve.prototype.isLineCurve = true;
  LineCurve.prototype.getPoint = function(t, optionalTarget = new Vector2()) {
    const point = optionalTarget;
    if (t === 1) {
      point.copy(this.v2);
    } else {
      point.copy(this.v2).sub(this.v1);
      point.multiplyScalar(t).add(this.v1);
    }
    return point;
  };
  LineCurve.prototype.getPointAt = function(u, optionalTarget) {
    return this.getPoint(u, optionalTarget);
  };
  LineCurve.prototype.getTangent = function(t, optionalTarget) {
    const tangent = optionalTarget || new Vector2();
    tangent.copy(this.v2).sub(this.v1).normalize();
    return tangent;
  };
  LineCurve.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  };
  LineCurve.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  };
  LineCurve.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  };
  function LineCurve3(v1 = new Vector3(), v2 = new Vector3()) {
    Curve.call(this);
    this.type = "LineCurve3";
    this.v1 = v1;
    this.v2 = v2;
  }
  LineCurve3.prototype = Object.create(Curve.prototype);
  LineCurve3.prototype.constructor = LineCurve3;
  LineCurve3.prototype.isLineCurve3 = true;
  LineCurve3.prototype.getPoint = function(t, optionalTarget = new Vector3()) {
    const point = optionalTarget;
    if (t === 1) {
      point.copy(this.v2);
    } else {
      point.copy(this.v2).sub(this.v1);
      point.multiplyScalar(t).add(this.v1);
    }
    return point;
  };
  LineCurve3.prototype.getPointAt = function(u, optionalTarget) {
    return this.getPoint(u, optionalTarget);
  };
  LineCurve3.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  };
  LineCurve3.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  };
  LineCurve3.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  };
  function QuadraticBezierCurve(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {
    Curve.call(this);
    this.type = "QuadraticBezierCurve";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v2;
  }
  QuadraticBezierCurve.prototype = Object.create(Curve.prototype);
  QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;
  QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;
  QuadraticBezierCurve.prototype.getPoint = function(t, optionalTarget = new Vector2()) {
    const point = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v2 = this.v2;
    point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));
    return point;
  };
  QuadraticBezierCurve.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  };
  QuadraticBezierCurve.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  };
  QuadraticBezierCurve.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  };
  function QuadraticBezierCurve3(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {
    Curve.call(this);
    this.type = "QuadraticBezierCurve3";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v2;
  }
  QuadraticBezierCurve3.prototype = Object.create(Curve.prototype);
  QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;
  QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;
  QuadraticBezierCurve3.prototype.getPoint = function(t, optionalTarget = new Vector3()) {
    const point = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v2 = this.v2;
    point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));
    return point;
  };
  QuadraticBezierCurve3.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  };
  QuadraticBezierCurve3.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  };
  QuadraticBezierCurve3.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  };
  function SplineCurve(points = []) {
    Curve.call(this);
    this.type = "SplineCurve";
    this.points = points;
  }
  SplineCurve.prototype = Object.create(Curve.prototype);
  SplineCurve.prototype.constructor = SplineCurve;
  SplineCurve.prototype.isSplineCurve = true;
  SplineCurve.prototype.getPoint = function(t, optionalTarget = new Vector2()) {
    const point = optionalTarget;
    const points = this.points;
    const p = (points.length - 1) * t;
    const intPoint = Math.floor(p);
    const weight = p - intPoint;
    const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
    const p1 = points[intPoint];
    const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
    const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
    point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
    return point;
  };
  SplineCurve.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.points = [];
    for (let i = 0, l = source.points.length; i < l; i++) {
      const point = source.points[i];
      this.points.push(point.clone());
    }
    return this;
  };
  SplineCurve.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.points = [];
    for (let i = 0, l = this.points.length; i < l; i++) {
      const point = this.points[i];
      data.points.push(point.toArray());
    }
    return data;
  };
  SplineCurve.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.points = [];
    for (let i = 0, l = json.points.length; i < l; i++) {
      const point = json.points[i];
      this.points.push(new Vector2().fromArray(point));
    }
    return this;
  };
  var Curves = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    ArcCurve,
    CatmullRomCurve3,
    CubicBezierCurve,
    CubicBezierCurve3,
    EllipseCurve,
    LineCurve,
    LineCurve3,
    QuadraticBezierCurve,
    QuadraticBezierCurve3,
    SplineCurve
  });
  function CurvePath() {
    Curve.call(this);
    this.type = "CurvePath";
    this.curves = [];
    this.autoClose = false;
  }
  CurvePath.prototype = Object.assign(Object.create(Curve.prototype), {
    constructor: CurvePath,
    add: function(curve) {
      this.curves.push(curve);
    },
    closePath: function() {
      const startPoint = this.curves[0].getPoint(0);
      const endPoint = this.curves[this.curves.length - 1].getPoint(1);
      if (!startPoint.equals(endPoint)) {
        this.curves.push(new LineCurve(endPoint, startPoint));
      }
    },
    getPoint: function(t) {
      const d = t * this.getLength();
      const curveLengths = this.getCurveLengths();
      let i = 0;
      while (i < curveLengths.length) {
        if (curveLengths[i] >= d) {
          const diff = curveLengths[i] - d;
          const curve = this.curves[i];
          const segmentLength = curve.getLength();
          const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
          return curve.getPointAt(u);
        }
        i++;
      }
      return null;
    },
    getLength: function() {
      const lens = this.getCurveLengths();
      return lens[lens.length - 1];
    },
    updateArcLengths: function() {
      this.needsUpdate = true;
      this.cacheLengths = null;
      this.getCurveLengths();
    },
    getCurveLengths: function() {
      if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
        return this.cacheLengths;
      }
      const lengths = [];
      let sums = 0;
      for (let i = 0, l = this.curves.length; i < l; i++) {
        sums += this.curves[i].getLength();
        lengths.push(sums);
      }
      this.cacheLengths = lengths;
      return lengths;
    },
    getSpacedPoints: function(divisions = 40) {
      const points = [];
      for (let i = 0; i <= divisions; i++) {
        points.push(this.getPoint(i / divisions));
      }
      if (this.autoClose) {
        points.push(points[0]);
      }
      return points;
    },
    getPoints: function(divisions = 12) {
      const points = [];
      let last;
      for (let i = 0, curves = this.curves; i < curves.length; i++) {
        const curve = curves[i];
        const resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;
        const pts = curve.getPoints(resolution);
        for (let j = 0; j < pts.length; j++) {
          const point = pts[j];
          if (last && last.equals(point))
            continue;
          points.push(point);
          last = point;
        }
      }
      if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
        points.push(points[0]);
      }
      return points;
    },
    copy: function(source) {
      Curve.prototype.copy.call(this, source);
      this.curves = [];
      for (let i = 0, l = source.curves.length; i < l; i++) {
        const curve = source.curves[i];
        this.curves.push(curve.clone());
      }
      this.autoClose = source.autoClose;
      return this;
    },
    toJSON: function() {
      const data = Curve.prototype.toJSON.call(this);
      data.autoClose = this.autoClose;
      data.curves = [];
      for (let i = 0, l = this.curves.length; i < l; i++) {
        const curve = this.curves[i];
        data.curves.push(curve.toJSON());
      }
      return data;
    },
    fromJSON: function(json) {
      Curve.prototype.fromJSON.call(this, json);
      this.autoClose = json.autoClose;
      this.curves = [];
      for (let i = 0, l = json.curves.length; i < l; i++) {
        const curve = json.curves[i];
        this.curves.push(new Curves[curve.type]().fromJSON(curve));
      }
      return this;
    }
  });
  function Path(points) {
    CurvePath.call(this);
    this.type = "Path";
    this.currentPoint = new Vector2();
    if (points) {
      this.setFromPoints(points);
    }
  }
  Path.prototype = Object.assign(Object.create(CurvePath.prototype), {
    constructor: Path,
    setFromPoints: function(points) {
      this.moveTo(points[0].x, points[0].y);
      for (let i = 1, l = points.length; i < l; i++) {
        this.lineTo(points[i].x, points[i].y);
      }
      return this;
    },
    moveTo: function(x, y) {
      this.currentPoint.set(x, y);
      return this;
    },
    lineTo: function(x, y) {
      const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
      this.curves.push(curve);
      this.currentPoint.set(x, y);
      return this;
    },
    quadraticCurveTo: function(aCPx, aCPy, aX, aY) {
      const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));
      this.curves.push(curve);
      this.currentPoint.set(aX, aY);
      return this;
    },
    bezierCurveTo: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
      const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));
      this.curves.push(curve);
      this.currentPoint.set(aX, aY);
      return this;
    },
    splineThru: function(pts) {
      const npts = [this.currentPoint.clone()].concat(pts);
      const curve = new SplineCurve(npts);
      this.curves.push(curve);
      this.currentPoint.copy(pts[pts.length - 1]);
      return this;
    },
    arc: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
      const x0 = this.currentPoint.x;
      const y0 = this.currentPoint.y;
      this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
      return this;
    },
    absarc: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
      this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
      return this;
    },
    ellipse: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
      const x0 = this.currentPoint.x;
      const y0 = this.currentPoint.y;
      this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
      return this;
    },
    absellipse: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
      const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
      if (this.curves.length > 0) {
        const firstPoint = curve.getPoint(0);
        if (!firstPoint.equals(this.currentPoint)) {
          this.lineTo(firstPoint.x, firstPoint.y);
        }
      }
      this.curves.push(curve);
      const lastPoint = curve.getPoint(1);
      this.currentPoint.copy(lastPoint);
      return this;
    },
    copy: function(source) {
      CurvePath.prototype.copy.call(this, source);
      this.currentPoint.copy(source.currentPoint);
      return this;
    },
    toJSON: function() {
      const data = CurvePath.prototype.toJSON.call(this);
      data.currentPoint = this.currentPoint.toArray();
      return data;
    },
    fromJSON: function(json) {
      CurvePath.prototype.fromJSON.call(this, json);
      this.currentPoint.fromArray(json.currentPoint);
      return this;
    }
  });
  function Shape(points) {
    Path.call(this, points);
    this.uuid = MathUtils.generateUUID();
    this.type = "Shape";
    this.holes = [];
  }
  Shape.prototype = Object.assign(Object.create(Path.prototype), {
    constructor: Shape,
    getPointsHoles: function(divisions) {
      const holesPts = [];
      for (let i = 0, l = this.holes.length; i < l; i++) {
        holesPts[i] = this.holes[i].getPoints(divisions);
      }
      return holesPts;
    },
    extractPoints: function(divisions) {
      return {
        shape: this.getPoints(divisions),
        holes: this.getPointsHoles(divisions)
      };
    },
    copy: function(source) {
      Path.prototype.copy.call(this, source);
      this.holes = [];
      for (let i = 0, l = source.holes.length; i < l; i++) {
        const hole = source.holes[i];
        this.holes.push(hole.clone());
      }
      return this;
    },
    toJSON: function() {
      const data = Path.prototype.toJSON.call(this);
      data.uuid = this.uuid;
      data.holes = [];
      for (let i = 0, l = this.holes.length; i < l; i++) {
        const hole = this.holes[i];
        data.holes.push(hole.toJSON());
      }
      return data;
    },
    fromJSON: function(json) {
      Path.prototype.fromJSON.call(this, json);
      this.uuid = json.uuid;
      this.holes = [];
      for (let i = 0, l = json.holes.length; i < l; i++) {
        const hole = json.holes[i];
        this.holes.push(new Path().fromJSON(hole));
      }
      return this;
    }
  });
  function Light(color, intensity = 1) {
    Object3D.call(this);
    this.type = "Light";
    this.color = new Color(color);
    this.intensity = intensity;
  }
  Light.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Light,
    isLight: true,
    copy: function(source) {
      Object3D.prototype.copy.call(this, source);
      this.color.copy(source.color);
      this.intensity = source.intensity;
      return this;
    },
    toJSON: function(meta) {
      const data = Object3D.prototype.toJSON.call(this, meta);
      data.object.color = this.color.getHex();
      data.object.intensity = this.intensity;
      if (this.groundColor !== void 0)
        data.object.groundColor = this.groundColor.getHex();
      if (this.distance !== void 0)
        data.object.distance = this.distance;
      if (this.angle !== void 0)
        data.object.angle = this.angle;
      if (this.decay !== void 0)
        data.object.decay = this.decay;
      if (this.penumbra !== void 0)
        data.object.penumbra = this.penumbra;
      if (this.shadow !== void 0)
        data.object.shadow = this.shadow.toJSON();
      return data;
    }
  });
  function HemisphereLight(skyColor, groundColor, intensity) {
    Light.call(this, skyColor, intensity);
    this.type = "HemisphereLight";
    this.position.copy(Object3D.DefaultUp);
    this.updateMatrix();
    this.groundColor = new Color(groundColor);
  }
  HemisphereLight.prototype = Object.assign(Object.create(Light.prototype), {
    constructor: HemisphereLight,
    isHemisphereLight: true,
    copy: function(source) {
      Light.prototype.copy.call(this, source);
      this.groundColor.copy(source.groundColor);
      return this;
    }
  });
  function LightShadow(camera2) {
    this.camera = camera2;
    this.bias = 0;
    this.normalBias = 0;
    this.radius = 1;
    this.mapSize = new Vector2(512, 512);
    this.map = null;
    this.mapPass = null;
    this.matrix = new Matrix4();
    this.autoUpdate = true;
    this.needsUpdate = false;
    this._frustum = new Frustum();
    this._frameExtents = new Vector2(1, 1);
    this._viewportCount = 1;
    this._viewports = [
      new Vector4(0, 0, 1, 1)
    ];
  }
  Object.assign(LightShadow.prototype, {
    _projScreenMatrix: new Matrix4(),
    _lightPositionWorld: new Vector3(),
    _lookTarget: new Vector3(),
    getViewportCount: function() {
      return this._viewportCount;
    },
    getFrustum: function() {
      return this._frustum;
    },
    updateMatrices: function(light) {
      const shadowCamera = this.camera, shadowMatrix = this.matrix, projScreenMatrix = this._projScreenMatrix, lookTarget = this._lookTarget, lightPositionWorld = this._lightPositionWorld;
      lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
      shadowCamera.position.copy(lightPositionWorld);
      lookTarget.setFromMatrixPosition(light.target.matrixWorld);
      shadowCamera.lookAt(lookTarget);
      shadowCamera.updateMatrixWorld();
      projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
      this._frustum.setFromProjectionMatrix(projScreenMatrix);
      shadowMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
      shadowMatrix.multiply(shadowCamera.projectionMatrix);
      shadowMatrix.multiply(shadowCamera.matrixWorldInverse);
    },
    getViewport: function(viewportIndex) {
      return this._viewports[viewportIndex];
    },
    getFrameExtents: function() {
      return this._frameExtents;
    },
    copy: function(source) {
      this.camera = source.camera.clone();
      this.bias = source.bias;
      this.radius = source.radius;
      this.mapSize.copy(source.mapSize);
      return this;
    },
    clone: function() {
      return new this.constructor().copy(this);
    },
    toJSON: function() {
      const object = {};
      if (this.bias !== 0)
        object.bias = this.bias;
      if (this.normalBias !== 0)
        object.normalBias = this.normalBias;
      if (this.radius !== 1)
        object.radius = this.radius;
      if (this.mapSize.x !== 512 || this.mapSize.y !== 512)
        object.mapSize = this.mapSize.toArray();
      object.camera = this.camera.toJSON(false).object;
      delete object.camera.matrix;
      return object;
    }
  });
  function SpotLightShadow() {
    LightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500));
    this.focus = 1;
  }
  SpotLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
    constructor: SpotLightShadow,
    isSpotLightShadow: true,
    updateMatrices: function(light) {
      const camera2 = this.camera;
      const fov2 = MathUtils.RAD2DEG * 2 * light.angle * this.focus;
      const aspect2 = this.mapSize.width / this.mapSize.height;
      const far = light.distance || camera2.far;
      if (fov2 !== camera2.fov || aspect2 !== camera2.aspect || far !== camera2.far) {
        camera2.fov = fov2;
        camera2.aspect = aspect2;
        camera2.far = far;
        camera2.updateProjectionMatrix();
      }
      LightShadow.prototype.updateMatrices.call(this, light);
    }
  });
  function SpotLight(color, intensity, distance, angle, penumbra, decay) {
    Light.call(this, color, intensity);
    this.type = "SpotLight";
    this.position.copy(Object3D.DefaultUp);
    this.updateMatrix();
    this.target = new Object3D();
    Object.defineProperty(this, "power", {
      get: function() {
        return this.intensity * Math.PI;
      },
      set: function(power) {
        this.intensity = power / Math.PI;
      }
    });
    this.distance = distance !== void 0 ? distance : 0;
    this.angle = angle !== void 0 ? angle : Math.PI / 3;
    this.penumbra = penumbra !== void 0 ? penumbra : 0;
    this.decay = decay !== void 0 ? decay : 1;
    this.shadow = new SpotLightShadow();
  }
  SpotLight.prototype = Object.assign(Object.create(Light.prototype), {
    constructor: SpotLight,
    isSpotLight: true,
    copy: function(source) {
      Light.prototype.copy.call(this, source);
      this.distance = source.distance;
      this.angle = source.angle;
      this.penumbra = source.penumbra;
      this.decay = source.decay;
      this.target = source.target.clone();
      this.shadow = source.shadow.clone();
      return this;
    }
  });
  function PointLightShadow() {
    LightShadow.call(this, new PerspectiveCamera(90, 1, 0.5, 500));
    this._frameExtents = new Vector2(4, 2);
    this._viewportCount = 6;
    this._viewports = [
      new Vector4(2, 1, 1, 1),
      new Vector4(0, 1, 1, 1),
      new Vector4(3, 1, 1, 1),
      new Vector4(1, 1, 1, 1),
      new Vector4(3, 0, 1, 1),
      new Vector4(1, 0, 1, 1)
    ];
    this._cubeDirections = [
      new Vector3(1, 0, 0),
      new Vector3(-1, 0, 0),
      new Vector3(0, 0, 1),
      new Vector3(0, 0, -1),
      new Vector3(0, 1, 0),
      new Vector3(0, -1, 0)
    ];
    this._cubeUps = [
      new Vector3(0, 1, 0),
      new Vector3(0, 1, 0),
      new Vector3(0, 1, 0),
      new Vector3(0, 1, 0),
      new Vector3(0, 0, 1),
      new Vector3(0, 0, -1)
    ];
  }
  PointLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
    constructor: PointLightShadow,
    isPointLightShadow: true,
    updateMatrices: function(light, viewportIndex = 0) {
      const camera2 = this.camera, shadowMatrix = this.matrix, lightPositionWorld = this._lightPositionWorld, lookTarget = this._lookTarget, projScreenMatrix = this._projScreenMatrix;
      lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
      camera2.position.copy(lightPositionWorld);
      lookTarget.copy(camera2.position);
      lookTarget.add(this._cubeDirections[viewportIndex]);
      camera2.up.copy(this._cubeUps[viewportIndex]);
      camera2.lookAt(lookTarget);
      camera2.updateMatrixWorld();
      shadowMatrix.makeTranslation(-lightPositionWorld.x, -lightPositionWorld.y, -lightPositionWorld.z);
      projScreenMatrix.multiplyMatrices(camera2.projectionMatrix, camera2.matrixWorldInverse);
      this._frustum.setFromProjectionMatrix(projScreenMatrix);
    }
  });
  function PointLight(color, intensity, distance, decay) {
    Light.call(this, color, intensity);
    this.type = "PointLight";
    Object.defineProperty(this, "power", {
      get: function() {
        return this.intensity * 4 * Math.PI;
      },
      set: function(power) {
        this.intensity = power / (4 * Math.PI);
      }
    });
    this.distance = distance !== void 0 ? distance : 0;
    this.decay = decay !== void 0 ? decay : 1;
    this.shadow = new PointLightShadow();
  }
  PointLight.prototype = Object.assign(Object.create(Light.prototype), {
    constructor: PointLight,
    isPointLight: true,
    copy: function(source) {
      Light.prototype.copy.call(this, source);
      this.distance = source.distance;
      this.decay = source.decay;
      this.shadow = source.shadow.clone();
      return this;
    }
  });
  function OrthographicCamera(left, right, top, bottom, near, far) {
    Camera.call(this);
    this.type = "OrthographicCamera";
    this.zoom = 1;
    this.view = null;
    this.left = left !== void 0 ? left : -1;
    this.right = right !== void 0 ? right : 1;
    this.top = top !== void 0 ? top : 1;
    this.bottom = bottom !== void 0 ? bottom : -1;
    this.near = near !== void 0 ? near : 0.1;
    this.far = far !== void 0 ? far : 2e3;
    this.updateProjectionMatrix();
  }
  OrthographicCamera.prototype = Object.assign(Object.create(Camera.prototype), {
    constructor: OrthographicCamera,
    isOrthographicCamera: true,
    copy: function(source, recursive) {
      Camera.prototype.copy.call(this, source, recursive);
      this.left = source.left;
      this.right = source.right;
      this.top = source.top;
      this.bottom = source.bottom;
      this.near = source.near;
      this.far = source.far;
      this.zoom = source.zoom;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      return this;
    },
    setViewOffset: function(fullWidth, fullHeight, x, y, width, height) {
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }
      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x;
      this.view.offsetY = y;
      this.view.width = width;
      this.view.height = height;
      this.updateProjectionMatrix();
    },
    clearViewOffset: function() {
      if (this.view !== null) {
        this.view.enabled = false;
      }
      this.updateProjectionMatrix();
    },
    updateProjectionMatrix: function() {
      const dx = (this.right - this.left) / (2 * this.zoom);
      const dy = (this.top - this.bottom) / (2 * this.zoom);
      const cx = (this.right + this.left) / 2;
      const cy = (this.top + this.bottom) / 2;
      let left = cx - dx;
      let right = cx + dx;
      let top = cy + dy;
      let bottom = cy - dy;
      if (this.view !== null && this.view.enabled) {
        const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
        const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
        left += scaleW * this.view.offsetX;
        right = left + scaleW * this.view.width;
        top -= scaleH * this.view.offsetY;
        bottom = top - scaleH * this.view.height;
      }
      this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    },
    toJSON: function(meta) {
      const data = Object3D.prototype.toJSON.call(this, meta);
      data.object.zoom = this.zoom;
      data.object.left = this.left;
      data.object.right = this.right;
      data.object.top = this.top;
      data.object.bottom = this.bottom;
      data.object.near = this.near;
      data.object.far = this.far;
      if (this.view !== null)
        data.object.view = Object.assign({}, this.view);
      return data;
    }
  });
  function DirectionalLightShadow() {
    LightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
  }
  DirectionalLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
    constructor: DirectionalLightShadow,
    isDirectionalLightShadow: true,
    updateMatrices: function(light) {
      LightShadow.prototype.updateMatrices.call(this, light);
    }
  });
  function DirectionalLight(color, intensity) {
    Light.call(this, color, intensity);
    this.type = "DirectionalLight";
    this.position.copy(Object3D.DefaultUp);
    this.updateMatrix();
    this.target = new Object3D();
    this.shadow = new DirectionalLightShadow();
  }
  DirectionalLight.prototype = Object.assign(Object.create(Light.prototype), {
    constructor: DirectionalLight,
    isDirectionalLight: true,
    copy: function(source) {
      Light.prototype.copy.call(this, source);
      this.target = source.target.clone();
      this.shadow = source.shadow.clone();
      return this;
    }
  });
  function AmbientLight(color, intensity) {
    Light.call(this, color, intensity);
    this.type = "AmbientLight";
  }
  AmbientLight.prototype = Object.assign(Object.create(Light.prototype), {
    constructor: AmbientLight,
    isAmbientLight: true
  });
  function RectAreaLight(color, intensity, width, height) {
    Light.call(this, color, intensity);
    this.type = "RectAreaLight";
    this.width = width !== void 0 ? width : 10;
    this.height = height !== void 0 ? height : 10;
  }
  RectAreaLight.prototype = Object.assign(Object.create(Light.prototype), {
    constructor: RectAreaLight,
    isRectAreaLight: true,
    copy: function(source) {
      Light.prototype.copy.call(this, source);
      this.width = source.width;
      this.height = source.height;
      return this;
    },
    toJSON: function(meta) {
      const data = Light.prototype.toJSON.call(this, meta);
      data.object.width = this.width;
      data.object.height = this.height;
      return data;
    }
  });
  var SphericalHarmonics3 = class {
    constructor() {
      Object.defineProperty(this, "isSphericalHarmonics3", {value: true});
      this.coefficients = [];
      for (let i = 0; i < 9; i++) {
        this.coefficients.push(new Vector3());
      }
    }
    set(coefficients) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].copy(coefficients[i]);
      }
      return this;
    }
    zero() {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].set(0, 0, 0);
      }
      return this;
    }
    getAt(normal, target) {
      const x = normal.x, y = normal.y, z = normal.z;
      const coeff = this.coefficients;
      target.copy(coeff[0]).multiplyScalar(0.282095);
      target.addScaledVector(coeff[1], 0.488603 * y);
      target.addScaledVector(coeff[2], 0.488603 * z);
      target.addScaledVector(coeff[3], 0.488603 * x);
      target.addScaledVector(coeff[4], 1.092548 * (x * y));
      target.addScaledVector(coeff[5], 1.092548 * (y * z));
      target.addScaledVector(coeff[6], 0.315392 * (3 * z * z - 1));
      target.addScaledVector(coeff[7], 1.092548 * (x * z));
      target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
      return target;
    }
    getIrradianceAt(normal, target) {
      const x = normal.x, y = normal.y, z = normal.z;
      const coeff = this.coefficients;
      target.copy(coeff[0]).multiplyScalar(0.886227);
      target.addScaledVector(coeff[1], 2 * 0.511664 * y);
      target.addScaledVector(coeff[2], 2 * 0.511664 * z);
      target.addScaledVector(coeff[3], 2 * 0.511664 * x);
      target.addScaledVector(coeff[4], 2 * 0.429043 * x * y);
      target.addScaledVector(coeff[5], 2 * 0.429043 * y * z);
      target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708);
      target.addScaledVector(coeff[7], 2 * 0.429043 * x * z);
      target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y));
      return target;
    }
    add(sh) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].add(sh.coefficients[i]);
      }
      return this;
    }
    addScaledSH(sh, s) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].addScaledVector(sh.coefficients[i], s);
      }
      return this;
    }
    scale(s) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].multiplyScalar(s);
      }
      return this;
    }
    lerp(sh, alpha) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].lerp(sh.coefficients[i], alpha);
      }
      return this;
    }
    equals(sh) {
      for (let i = 0; i < 9; i++) {
        if (!this.coefficients[i].equals(sh.coefficients[i])) {
          return false;
        }
      }
      return true;
    }
    copy(sh) {
      return this.set(sh.coefficients);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    fromArray(array, offset = 0) {
      const coefficients = this.coefficients;
      for (let i = 0; i < 9; i++) {
        coefficients[i].fromArray(array, offset + i * 3);
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const coefficients = this.coefficients;
      for (let i = 0; i < 9; i++) {
        coefficients[i].toArray(array, offset + i * 3);
      }
      return array;
    }
    static getBasisAt(normal, shBasis) {
      const x = normal.x, y = normal.y, z = normal.z;
      shBasis[0] = 0.282095;
      shBasis[1] = 0.488603 * y;
      shBasis[2] = 0.488603 * z;
      shBasis[3] = 0.488603 * x;
      shBasis[4] = 1.092548 * x * y;
      shBasis[5] = 1.092548 * y * z;
      shBasis[6] = 0.315392 * (3 * z * z - 1);
      shBasis[7] = 1.092548 * x * z;
      shBasis[8] = 0.546274 * (x * x - y * y);
    }
  };
  function LightProbe(sh, intensity) {
    Light.call(this, void 0, intensity);
    this.type = "LightProbe";
    this.sh = sh !== void 0 ? sh : new SphericalHarmonics3();
  }
  LightProbe.prototype = Object.assign(Object.create(Light.prototype), {
    constructor: LightProbe,
    isLightProbe: true,
    copy: function(source) {
      Light.prototype.copy.call(this, source);
      this.sh.copy(source.sh);
      return this;
    },
    fromJSON: function(json) {
      this.intensity = json.intensity;
      this.sh.fromArray(json.sh);
      return this;
    },
    toJSON: function(meta) {
      const data = Light.prototype.toJSON.call(this, meta);
      data.object.sh = this.sh.toArray();
      return data;
    }
  });
  function MaterialLoader(manager) {
    Loader.call(this, manager);
    this.textures = {};
  }
  MaterialLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: MaterialLoader,
    load: function(url, onLoad, onProgress, onError) {
      const scope = this;
      const loader = new FileLoader(scope.manager);
      loader.setPath(scope.path);
      loader.setRequestHeader(scope.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function(text) {
        try {
          onLoad(scope.parse(JSON.parse(text)));
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }
          scope.manager.itemError(url);
        }
      }, onProgress, onError);
    },
    parse: function(json) {
      const textures = this.textures;
      function getTexture(name) {
        if (textures[name] === void 0) {
          console.warn("THREE.MaterialLoader: Undefined texture", name);
        }
        return textures[name];
      }
      const material = new Materials[json.type]();
      if (json.uuid !== void 0)
        material.uuid = json.uuid;
      if (json.name !== void 0)
        material.name = json.name;
      if (json.color !== void 0 && material.color !== void 0)
        material.color.setHex(json.color);
      if (json.roughness !== void 0)
        material.roughness = json.roughness;
      if (json.metalness !== void 0)
        material.metalness = json.metalness;
      if (json.sheen !== void 0)
        material.sheen = new Color().setHex(json.sheen);
      if (json.emissive !== void 0 && material.emissive !== void 0)
        material.emissive.setHex(json.emissive);
      if (json.specular !== void 0 && material.specular !== void 0)
        material.specular.setHex(json.specular);
      if (json.shininess !== void 0)
        material.shininess = json.shininess;
      if (json.clearcoat !== void 0)
        material.clearcoat = json.clearcoat;
      if (json.clearcoatRoughness !== void 0)
        material.clearcoatRoughness = json.clearcoatRoughness;
      if (json.fog !== void 0)
        material.fog = json.fog;
      if (json.flatShading !== void 0)
        material.flatShading = json.flatShading;
      if (json.blending !== void 0)
        material.blending = json.blending;
      if (json.combine !== void 0)
        material.combine = json.combine;
      if (json.side !== void 0)
        material.side = json.side;
      if (json.opacity !== void 0)
        material.opacity = json.opacity;
      if (json.transparent !== void 0)
        material.transparent = json.transparent;
      if (json.alphaTest !== void 0)
        material.alphaTest = json.alphaTest;
      if (json.depthTest !== void 0)
        material.depthTest = json.depthTest;
      if (json.depthWrite !== void 0)
        material.depthWrite = json.depthWrite;
      if (json.colorWrite !== void 0)
        material.colorWrite = json.colorWrite;
      if (json.stencilWrite !== void 0)
        material.stencilWrite = json.stencilWrite;
      if (json.stencilWriteMask !== void 0)
        material.stencilWriteMask = json.stencilWriteMask;
      if (json.stencilFunc !== void 0)
        material.stencilFunc = json.stencilFunc;
      if (json.stencilRef !== void 0)
        material.stencilRef = json.stencilRef;
      if (json.stencilFuncMask !== void 0)
        material.stencilFuncMask = json.stencilFuncMask;
      if (json.stencilFail !== void 0)
        material.stencilFail = json.stencilFail;
      if (json.stencilZFail !== void 0)
        material.stencilZFail = json.stencilZFail;
      if (json.stencilZPass !== void 0)
        material.stencilZPass = json.stencilZPass;
      if (json.wireframe !== void 0)
        material.wireframe = json.wireframe;
      if (json.wireframeLinewidth !== void 0)
        material.wireframeLinewidth = json.wireframeLinewidth;
      if (json.wireframeLinecap !== void 0)
        material.wireframeLinecap = json.wireframeLinecap;
      if (json.wireframeLinejoin !== void 0)
        material.wireframeLinejoin = json.wireframeLinejoin;
      if (json.rotation !== void 0)
        material.rotation = json.rotation;
      if (json.linewidth !== 1)
        material.linewidth = json.linewidth;
      if (json.dashSize !== void 0)
        material.dashSize = json.dashSize;
      if (json.gapSize !== void 0)
        material.gapSize = json.gapSize;
      if (json.scale !== void 0)
        material.scale = json.scale;
      if (json.polygonOffset !== void 0)
        material.polygonOffset = json.polygonOffset;
      if (json.polygonOffsetFactor !== void 0)
        material.polygonOffsetFactor = json.polygonOffsetFactor;
      if (json.polygonOffsetUnits !== void 0)
        material.polygonOffsetUnits = json.polygonOffsetUnits;
      if (json.skinning !== void 0)
        material.skinning = json.skinning;
      if (json.morphTargets !== void 0)
        material.morphTargets = json.morphTargets;
      if (json.morphNormals !== void 0)
        material.morphNormals = json.morphNormals;
      if (json.dithering !== void 0)
        material.dithering = json.dithering;
      if (json.vertexTangents !== void 0)
        material.vertexTangents = json.vertexTangents;
      if (json.visible !== void 0)
        material.visible = json.visible;
      if (json.toneMapped !== void 0)
        material.toneMapped = json.toneMapped;
      if (json.userData !== void 0)
        material.userData = json.userData;
      if (json.vertexColors !== void 0) {
        if (typeof json.vertexColors === "number") {
          material.vertexColors = json.vertexColors > 0 ? true : false;
        } else {
          material.vertexColors = json.vertexColors;
        }
      }
      if (json.uniforms !== void 0) {
        for (const name in json.uniforms) {
          const uniform = json.uniforms[name];
          material.uniforms[name] = {};
          switch (uniform.type) {
            case "t":
              material.uniforms[name].value = getTexture(uniform.value);
              break;
            case "c":
              material.uniforms[name].value = new Color().setHex(uniform.value);
              break;
            case "v2":
              material.uniforms[name].value = new Vector2().fromArray(uniform.value);
              break;
            case "v3":
              material.uniforms[name].value = new Vector3().fromArray(uniform.value);
              break;
            case "v4":
              material.uniforms[name].value = new Vector4().fromArray(uniform.value);
              break;
            case "m3":
              material.uniforms[name].value = new Matrix3().fromArray(uniform.value);
              break;
            case "m4":
              material.uniforms[name].value = new Matrix4().fromArray(uniform.value);
              break;
            default:
              material.uniforms[name].value = uniform.value;
          }
        }
      }
      if (json.defines !== void 0)
        material.defines = json.defines;
      if (json.vertexShader !== void 0)
        material.vertexShader = json.vertexShader;
      if (json.fragmentShader !== void 0)
        material.fragmentShader = json.fragmentShader;
      if (json.extensions !== void 0) {
        for (const key in json.extensions) {
          material.extensions[key] = json.extensions[key];
        }
      }
      if (json.shading !== void 0)
        material.flatShading = json.shading === 1;
      if (json.size !== void 0)
        material.size = json.size;
      if (json.sizeAttenuation !== void 0)
        material.sizeAttenuation = json.sizeAttenuation;
      if (json.map !== void 0)
        material.map = getTexture(json.map);
      if (json.matcap !== void 0)
        material.matcap = getTexture(json.matcap);
      if (json.alphaMap !== void 0)
        material.alphaMap = getTexture(json.alphaMap);
      if (json.bumpMap !== void 0)
        material.bumpMap = getTexture(json.bumpMap);
      if (json.bumpScale !== void 0)
        material.bumpScale = json.bumpScale;
      if (json.normalMap !== void 0)
        material.normalMap = getTexture(json.normalMap);
      if (json.normalMapType !== void 0)
        material.normalMapType = json.normalMapType;
      if (json.normalScale !== void 0) {
        let normalScale = json.normalScale;
        if (Array.isArray(normalScale) === false) {
          normalScale = [normalScale, normalScale];
        }
        material.normalScale = new Vector2().fromArray(normalScale);
      }
      if (json.displacementMap !== void 0)
        material.displacementMap = getTexture(json.displacementMap);
      if (json.displacementScale !== void 0)
        material.displacementScale = json.displacementScale;
      if (json.displacementBias !== void 0)
        material.displacementBias = json.displacementBias;
      if (json.roughnessMap !== void 0)
        material.roughnessMap = getTexture(json.roughnessMap);
      if (json.metalnessMap !== void 0)
        material.metalnessMap = getTexture(json.metalnessMap);
      if (json.emissiveMap !== void 0)
        material.emissiveMap = getTexture(json.emissiveMap);
      if (json.emissiveIntensity !== void 0)
        material.emissiveIntensity = json.emissiveIntensity;
      if (json.specularMap !== void 0)
        material.specularMap = getTexture(json.specularMap);
      if (json.envMap !== void 0)
        material.envMap = getTexture(json.envMap);
      if (json.envMapIntensity !== void 0)
        material.envMapIntensity = json.envMapIntensity;
      if (json.reflectivity !== void 0)
        material.reflectivity = json.reflectivity;
      if (json.refractionRatio !== void 0)
        material.refractionRatio = json.refractionRatio;
      if (json.lightMap !== void 0)
        material.lightMap = getTexture(json.lightMap);
      if (json.lightMapIntensity !== void 0)
        material.lightMapIntensity = json.lightMapIntensity;
      if (json.aoMap !== void 0)
        material.aoMap = getTexture(json.aoMap);
      if (json.aoMapIntensity !== void 0)
        material.aoMapIntensity = json.aoMapIntensity;
      if (json.gradientMap !== void 0)
        material.gradientMap = getTexture(json.gradientMap);
      if (json.clearcoatMap !== void 0)
        material.clearcoatMap = getTexture(json.clearcoatMap);
      if (json.clearcoatRoughnessMap !== void 0)
        material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);
      if (json.clearcoatNormalMap !== void 0)
        material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);
      if (json.clearcoatNormalScale !== void 0)
        material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);
      if (json.transmission !== void 0)
        material.transmission = json.transmission;
      if (json.transmissionMap !== void 0)
        material.transmissionMap = getTexture(json.transmissionMap);
      return material;
    },
    setTextures: function(value) {
      this.textures = value;
      return this;
    }
  });
  var LoaderUtils = {
    decodeText: function(array) {
      if (typeof TextDecoder !== "undefined") {
        return new TextDecoder().decode(array);
      }
      let s = "";
      for (let i = 0, il = array.length; i < il; i++) {
        s += String.fromCharCode(array[i]);
      }
      try {
        return decodeURIComponent(escape(s));
      } catch (e) {
        return s;
      }
    },
    extractUrlBase: function(url) {
      const index = url.lastIndexOf("/");
      if (index === -1)
        return "./";
      return url.substr(0, index + 1);
    }
  };
  function InstancedBufferGeometry() {
    BufferGeometry.call(this);
    this.type = "InstancedBufferGeometry";
    this.instanceCount = Infinity;
  }
  InstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {
    constructor: InstancedBufferGeometry,
    isInstancedBufferGeometry: true,
    copy: function(source) {
      BufferGeometry.prototype.copy.call(this, source);
      this.instanceCount = source.instanceCount;
      return this;
    },
    clone: function() {
      return new this.constructor().copy(this);
    },
    toJSON: function() {
      const data = BufferGeometry.prototype.toJSON.call(this);
      data.instanceCount = this.instanceCount;
      data.isInstancedBufferGeometry = true;
      return data;
    }
  });
  function InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute) {
    if (typeof normalized === "number") {
      meshPerAttribute = normalized;
      normalized = false;
      console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.");
    }
    BufferAttribute.call(this, array, itemSize, normalized);
    this.meshPerAttribute = meshPerAttribute || 1;
  }
  InstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {
    constructor: InstancedBufferAttribute,
    isInstancedBufferAttribute: true,
    copy: function(source) {
      BufferAttribute.prototype.copy.call(this, source);
      this.meshPerAttribute = source.meshPerAttribute;
      return this;
    },
    toJSON: function() {
      const data = BufferAttribute.prototype.toJSON.call(this);
      data.meshPerAttribute = this.meshPerAttribute;
      data.isInstancedBufferAttribute = true;
      return data;
    }
  });
  function BufferGeometryLoader(manager) {
    Loader.call(this, manager);
  }
  BufferGeometryLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: BufferGeometryLoader,
    load: function(url, onLoad, onProgress, onError) {
      const scope = this;
      const loader = new FileLoader(scope.manager);
      loader.setPath(scope.path);
      loader.setRequestHeader(scope.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function(text) {
        try {
          onLoad(scope.parse(JSON.parse(text)));
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }
          scope.manager.itemError(url);
        }
      }, onProgress, onError);
    },
    parse: function(json) {
      const interleavedBufferMap = {};
      const arrayBufferMap = {};
      function getInterleavedBuffer(json2, uuid) {
        if (interleavedBufferMap[uuid] !== void 0)
          return interleavedBufferMap[uuid];
        const interleavedBuffers = json2.interleavedBuffers;
        const interleavedBuffer = interleavedBuffers[uuid];
        const buffer = getArrayBuffer(json2, interleavedBuffer.buffer);
        const array = getTypedArray(interleavedBuffer.type, buffer);
        const ib = new InterleavedBuffer(array, interleavedBuffer.stride);
        ib.uuid = interleavedBuffer.uuid;
        interleavedBufferMap[uuid] = ib;
        return ib;
      }
      function getArrayBuffer(json2, uuid) {
        if (arrayBufferMap[uuid] !== void 0)
          return arrayBufferMap[uuid];
        const arrayBuffers = json2.arrayBuffers;
        const arrayBuffer = arrayBuffers[uuid];
        const ab = new Uint32Array(arrayBuffer).buffer;
        arrayBufferMap[uuid] = ab;
        return ab;
      }
      const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
      const index = json.data.index;
      if (index !== void 0) {
        const typedArray = getTypedArray(index.type, index.array);
        geometry.setIndex(new BufferAttribute(typedArray, 1));
      }
      const attributes = json.data.attributes;
      for (const key in attributes) {
        const attribute = attributes[key];
        let bufferAttribute;
        if (attribute.isInterleavedBufferAttribute) {
          const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
          bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
        } else {
          const typedArray = getTypedArray(attribute.type, attribute.array);
          const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
          bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);
        }
        if (attribute.name !== void 0)
          bufferAttribute.name = attribute.name;
        geometry.setAttribute(key, bufferAttribute);
      }
      const morphAttributes = json.data.morphAttributes;
      if (morphAttributes) {
        for (const key in morphAttributes) {
          const attributeArray = morphAttributes[key];
          const array = [];
          for (let i = 0, il = attributeArray.length; i < il; i++) {
            const attribute = attributeArray[i];
            let bufferAttribute;
            if (attribute.isInterleavedBufferAttribute) {
              const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
              bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
            } else {
              const typedArray = getTypedArray(attribute.type, attribute.array);
              bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);
            }
            if (attribute.name !== void 0)
              bufferAttribute.name = attribute.name;
            array.push(bufferAttribute);
          }
          geometry.morphAttributes[key] = array;
        }
      }
      const morphTargetsRelative = json.data.morphTargetsRelative;
      if (morphTargetsRelative) {
        geometry.morphTargetsRelative = true;
      }
      const groups = json.data.groups || json.data.drawcalls || json.data.offsets;
      if (groups !== void 0) {
        for (let i = 0, n = groups.length; i !== n; ++i) {
          const group2 = groups[i];
          geometry.addGroup(group2.start, group2.count, group2.materialIndex);
        }
      }
      const boundingSphere = json.data.boundingSphere;
      if (boundingSphere !== void 0) {
        const center = new Vector3();
        if (boundingSphere.center !== void 0) {
          center.fromArray(boundingSphere.center);
        }
        geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
      }
      if (json.name)
        geometry.name = json.name;
      if (json.userData)
        geometry.userData = json.userData;
      return geometry;
    }
  });
  function ImageBitmapLoader(manager) {
    if (typeof createImageBitmap === "undefined") {
      console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
    }
    if (typeof fetch === "undefined") {
      console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
    }
    Loader.call(this, manager);
    this.options = {premultiplyAlpha: "none"};
  }
  ImageBitmapLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: ImageBitmapLoader,
    isImageBitmapLoader: true,
    setOptions: function setOptions(options) {
      this.options = options;
      return this;
    },
    load: function(url, onLoad, onProgress, onError) {
      if (url === void 0)
        url = "";
      if (this.path !== void 0)
        url = this.path + url;
      url = this.manager.resolveURL(url);
      const scope = this;
      const cached = Cache.get(url);
      if (cached !== void 0) {
        scope.manager.itemStart(url);
        setTimeout(function() {
          if (onLoad)
            onLoad(cached);
          scope.manager.itemEnd(url);
        }, 0);
        return cached;
      }
      const fetchOptions = {};
      fetchOptions.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include";
      fetch(url, fetchOptions).then(function(res) {
        return res.blob();
      }).then(function(blob) {
        return createImageBitmap(blob, scope.options);
      }).then(function(imageBitmap) {
        Cache.add(url, imageBitmap);
        if (onLoad)
          onLoad(imageBitmap);
        scope.manager.itemEnd(url);
      }).catch(function(e) {
        if (onError)
          onError(e);
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      });
      scope.manager.itemStart(url);
    }
  });
  function ShapePath() {
    this.type = "ShapePath";
    this.color = new Color();
    this.subPaths = [];
    this.currentPath = null;
  }
  Object.assign(ShapePath.prototype, {
    moveTo: function(x, y) {
      this.currentPath = new Path();
      this.subPaths.push(this.currentPath);
      this.currentPath.moveTo(x, y);
      return this;
    },
    lineTo: function(x, y) {
      this.currentPath.lineTo(x, y);
      return this;
    },
    quadraticCurveTo: function(aCPx, aCPy, aX, aY) {
      this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
      return this;
    },
    bezierCurveTo: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
      this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
      return this;
    },
    splineThru: function(pts) {
      this.currentPath.splineThru(pts);
      return this;
    },
    toShapes: function(isCCW, noHoles) {
      function toShapesNoHoles(inSubpaths) {
        const shapes2 = [];
        for (let i = 0, l = inSubpaths.length; i < l; i++) {
          const tmpPath2 = inSubpaths[i];
          const tmpShape2 = new Shape();
          tmpShape2.curves = tmpPath2.curves;
          shapes2.push(tmpShape2);
        }
        return shapes2;
      }
      function isPointInsidePolygon(inPt, inPolygon) {
        const polyLen = inPolygon.length;
        let inside = false;
        for (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {
          let edgeLowPt = inPolygon[p];
          let edgeHighPt = inPolygon[q];
          let edgeDx = edgeHighPt.x - edgeLowPt.x;
          let edgeDy = edgeHighPt.y - edgeLowPt.y;
          if (Math.abs(edgeDy) > Number.EPSILON) {
            if (edgeDy < 0) {
              edgeLowPt = inPolygon[q];
              edgeDx = -edgeDx;
              edgeHighPt = inPolygon[p];
              edgeDy = -edgeDy;
            }
            if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y)
              continue;
            if (inPt.y === edgeLowPt.y) {
              if (inPt.x === edgeLowPt.x)
                return true;
            } else {
              const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
              if (perpEdge === 0)
                return true;
              if (perpEdge < 0)
                continue;
              inside = !inside;
            }
          } else {
            if (inPt.y !== edgeLowPt.y)
              continue;
            if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x)
              return true;
          }
        }
        return inside;
      }
      const isClockWise = ShapeUtils.isClockWise;
      const subPaths = this.subPaths;
      if (subPaths.length === 0)
        return [];
      if (noHoles === true)
        return toShapesNoHoles(subPaths);
      let solid, tmpPath, tmpShape;
      const shapes = [];
      if (subPaths.length === 1) {
        tmpPath = subPaths[0];
        tmpShape = new Shape();
        tmpShape.curves = tmpPath.curves;
        shapes.push(tmpShape);
        return shapes;
      }
      let holesFirst = !isClockWise(subPaths[0].getPoints());
      holesFirst = isCCW ? !holesFirst : holesFirst;
      const betterShapeHoles = [];
      const newShapes = [];
      let newShapeHoles = [];
      let mainIdx = 0;
      let tmpPoints;
      newShapes[mainIdx] = void 0;
      newShapeHoles[mainIdx] = [];
      for (let i = 0, l = subPaths.length; i < l; i++) {
        tmpPath = subPaths[i];
        tmpPoints = tmpPath.getPoints();
        solid = isClockWise(tmpPoints);
        solid = isCCW ? !solid : solid;
        if (solid) {
          if (!holesFirst && newShapes[mainIdx])
            mainIdx++;
          newShapes[mainIdx] = {s: new Shape(), p: tmpPoints};
          newShapes[mainIdx].s.curves = tmpPath.curves;
          if (holesFirst)
            mainIdx++;
          newShapeHoles[mainIdx] = [];
        } else {
          newShapeHoles[mainIdx].push({h: tmpPath, p: tmpPoints[0]});
        }
      }
      if (!newShapes[0])
        return toShapesNoHoles(subPaths);
      if (newShapes.length > 1) {
        let ambiguous = false;
        const toChange = [];
        for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
          betterShapeHoles[sIdx] = [];
        }
        for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
          const sho = newShapeHoles[sIdx];
          for (let hIdx = 0; hIdx < sho.length; hIdx++) {
            const ho = sho[hIdx];
            let hole_unassigned = true;
            for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
              if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
                if (sIdx !== s2Idx)
                  toChange.push({froms: sIdx, tos: s2Idx, hole: hIdx});
                if (hole_unassigned) {
                  hole_unassigned = false;
                  betterShapeHoles[s2Idx].push(ho);
                } else {
                  ambiguous = true;
                }
              }
            }
            if (hole_unassigned) {
              betterShapeHoles[sIdx].push(ho);
            }
          }
        }
        if (toChange.length > 0) {
          if (!ambiguous)
            newShapeHoles = betterShapeHoles;
        }
      }
      let tmpHoles;
      for (let i = 0, il = newShapes.length; i < il; i++) {
        tmpShape = newShapes[i].s;
        shapes.push(tmpShape);
        tmpHoles = newShapeHoles[i];
        for (let j = 0, jl = tmpHoles.length; j < jl; j++) {
          tmpShape.holes.push(tmpHoles[j].h);
        }
      }
      return shapes;
    }
  });
  function Font(data) {
    this.type = "Font";
    this.data = data;
  }
  Object.assign(Font.prototype, {
    isFont: true,
    generateShapes: function(text, size = 100) {
      const shapes = [];
      const paths = createPaths(text, size, this.data);
      for (let p = 0, pl = paths.length; p < pl; p++) {
        Array.prototype.push.apply(shapes, paths[p].toShapes());
      }
      return shapes;
    }
  });
  function createPaths(text, size, data) {
    const chars = Array.from ? Array.from(text) : String(text).split("");
    const scale = size / data.resolution;
    const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;
    const paths = [];
    let offsetX = 0, offsetY = 0;
    for (let i = 0; i < chars.length; i++) {
      const char = chars[i];
      if (char === "\n") {
        offsetX = 0;
        offsetY -= line_height;
      } else {
        const ret = createPath(char, scale, offsetX, offsetY, data);
        offsetX += ret.offsetX;
        paths.push(ret.path);
      }
    }
    return paths;
  }
  function createPath(char, scale, offsetX, offsetY, data) {
    const glyph = data.glyphs[char] || data.glyphs["?"];
    if (!glyph) {
      console.error('THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + ".");
      return;
    }
    const path = new ShapePath();
    let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;
    if (glyph.o) {
      const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(" "));
      for (let i = 0, l = outline.length; i < l; ) {
        const action2 = outline[i++];
        switch (action2) {
          case "m":
            x = outline[i++] * scale + offsetX;
            y = outline[i++] * scale + offsetY;
            path.moveTo(x, y);
            break;
          case "l":
            x = outline[i++] * scale + offsetX;
            y = outline[i++] * scale + offsetY;
            path.lineTo(x, y);
            break;
          case "q":
            cpx = outline[i++] * scale + offsetX;
            cpy = outline[i++] * scale + offsetY;
            cpx1 = outline[i++] * scale + offsetX;
            cpy1 = outline[i++] * scale + offsetY;
            path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);
            break;
          case "b":
            cpx = outline[i++] * scale + offsetX;
            cpy = outline[i++] * scale + offsetY;
            cpx1 = outline[i++] * scale + offsetX;
            cpy1 = outline[i++] * scale + offsetY;
            cpx2 = outline[i++] * scale + offsetX;
            cpy2 = outline[i++] * scale + offsetY;
            path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);
            break;
        }
      }
    }
    return {offsetX: glyph.ha * scale, path};
  }
  function FontLoader(manager) {
    Loader.call(this, manager);
  }
  FontLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: FontLoader,
    load: function(url, onLoad, onProgress, onError) {
      const scope = this;
      const loader = new FileLoader(this.manager);
      loader.setPath(this.path);
      loader.setRequestHeader(this.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function(text) {
        let json;
        try {
          json = JSON.parse(text);
        } catch (e) {
          console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.");
          json = JSON.parse(text.substring(65, text.length - 2));
        }
        const font = scope.parse(json);
        if (onLoad)
          onLoad(font);
      }, onProgress, onError);
    },
    parse: function(json) {
      return new Font(json);
    }
  });
  var _context;
  var AudioContext = {
    getContext: function() {
      if (_context === void 0) {
        _context = new (window.AudioContext || window.webkitAudioContext)();
      }
      return _context;
    },
    setContext: function(value) {
      _context = value;
    }
  };
  function AudioLoader(manager) {
    Loader.call(this, manager);
  }
  AudioLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: AudioLoader,
    load: function(url, onLoad, onProgress, onError) {
      const scope = this;
      const loader = new FileLoader(scope.manager);
      loader.setResponseType("arraybuffer");
      loader.setPath(scope.path);
      loader.setRequestHeader(scope.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function(buffer) {
        try {
          const bufferCopy = buffer.slice(0);
          const context = AudioContext.getContext();
          context.decodeAudioData(bufferCopy, function(audioBuffer) {
            onLoad(audioBuffer);
          });
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }
          scope.manager.itemError(url);
        }
      }, onProgress, onError);
    }
  });
  function HemisphereLightProbe(skyColor, groundColor, intensity) {
    LightProbe.call(this, void 0, intensity);
    const color1 = new Color().set(skyColor);
    const color2 = new Color().set(groundColor);
    const sky = new Vector3(color1.r, color1.g, color1.b);
    const ground = new Vector3(color2.r, color2.g, color2.b);
    const c0 = Math.sqrt(Math.PI);
    const c1 = c0 * Math.sqrt(0.75);
    this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
    this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
  }
  HemisphereLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {
    constructor: HemisphereLightProbe,
    isHemisphereLightProbe: true,
    copy: function(source) {
      LightProbe.prototype.copy.call(this, source);
      return this;
    },
    toJSON: function(meta) {
      const data = LightProbe.prototype.toJSON.call(this, meta);
      return data;
    }
  });
  function AmbientLightProbe(color, intensity) {
    LightProbe.call(this, void 0, intensity);
    const color1 = new Color().set(color);
    this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
  }
  AmbientLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {
    constructor: AmbientLightProbe,
    isAmbientLightProbe: true,
    copy: function(source) {
      LightProbe.prototype.copy.call(this, source);
      return this;
    },
    toJSON: function(meta) {
      const data = LightProbe.prototype.toJSON.call(this, meta);
      return data;
    }
  });
  var _eyeRight = new Matrix4();
  var _eyeLeft = new Matrix4();
  function StereoCamera() {
    this.type = "StereoCamera";
    this.aspect = 1;
    this.eyeSep = 0.064;
    this.cameraL = new PerspectiveCamera();
    this.cameraL.layers.enable(1);
    this.cameraL.matrixAutoUpdate = false;
    this.cameraR = new PerspectiveCamera();
    this.cameraR.layers.enable(2);
    this.cameraR.matrixAutoUpdate = false;
    this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }
  Object.assign(StereoCamera.prototype, {
    update: function(camera2) {
      const cache = this._cache;
      const needsUpdate = cache.focus !== camera2.focus || cache.fov !== camera2.fov || cache.aspect !== camera2.aspect * this.aspect || cache.near !== camera2.near || cache.far !== camera2.far || cache.zoom !== camera2.zoom || cache.eyeSep !== this.eyeSep;
      if (needsUpdate) {
        cache.focus = camera2.focus;
        cache.fov = camera2.fov;
        cache.aspect = camera2.aspect * this.aspect;
        cache.near = camera2.near;
        cache.far = camera2.far;
        cache.zoom = camera2.zoom;
        cache.eyeSep = this.eyeSep;
        const projectionMatrix = camera2.projectionMatrix.clone();
        const eyeSepHalf = cache.eyeSep / 2;
        const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
        const ymax = cache.near * Math.tan(MathUtils.DEG2RAD * cache.fov * 0.5) / cache.zoom;
        let xmin, xmax;
        _eyeLeft.elements[12] = -eyeSepHalf;
        _eyeRight.elements[12] = eyeSepHalf;
        xmin = -ymax * cache.aspect + eyeSepOnProjection;
        xmax = ymax * cache.aspect + eyeSepOnProjection;
        projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
        this.cameraL.projectionMatrix.copy(projectionMatrix);
        xmin = -ymax * cache.aspect - eyeSepOnProjection;
        xmax = ymax * cache.aspect - eyeSepOnProjection;
        projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
        this.cameraR.projectionMatrix.copy(projectionMatrix);
      }
      this.cameraL.matrixWorld.copy(camera2.matrixWorld).multiply(_eyeLeft);
      this.cameraR.matrixWorld.copy(camera2.matrixWorld).multiply(_eyeRight);
    }
  });
  var Clock = class {
    constructor(autoStart) {
      this.autoStart = autoStart !== void 0 ? autoStart : true;
      this.startTime = 0;
      this.oldTime = 0;
      this.elapsedTime = 0;
      this.running = false;
    }
    start() {
      this.startTime = now();
      this.oldTime = this.startTime;
      this.elapsedTime = 0;
      this.running = true;
    }
    stop() {
      this.getElapsedTime();
      this.running = false;
      this.autoStart = false;
    }
    getElapsedTime() {
      this.getDelta();
      return this.elapsedTime;
    }
    getDelta() {
      let diff = 0;
      if (this.autoStart && !this.running) {
        this.start();
        return 0;
      }
      if (this.running) {
        const newTime = now();
        diff = (newTime - this.oldTime) / 1e3;
        this.oldTime = newTime;
        this.elapsedTime += diff;
      }
      return diff;
    }
  };
  function now() {
    return (typeof performance === "undefined" ? Date : performance).now();
  }
  var Audio = class extends Object3D {
    constructor(listener) {
      super();
      this.type = "Audio";
      this.listener = listener;
      this.context = listener.context;
      this.gain = this.context.createGain();
      this.gain.connect(listener.getInput());
      this.autoplay = false;
      this.buffer = null;
      this.detune = 0;
      this.loop = false;
      this.loopStart = 0;
      this.loopEnd = 0;
      this.offset = 0;
      this.duration = void 0;
      this.playbackRate = 1;
      this.isPlaying = false;
      this.hasPlaybackControl = true;
      this.source = null;
      this.sourceType = "empty";
      this._startedAt = 0;
      this._progress = 0;
      this._connected = false;
      this.filters = [];
    }
    getOutput() {
      return this.gain;
    }
    setNodeSource(audioNode) {
      this.hasPlaybackControl = false;
      this.sourceType = "audioNode";
      this.source = audioNode;
      this.connect();
      return this;
    }
    setMediaElementSource(mediaElement) {
      this.hasPlaybackControl = false;
      this.sourceType = "mediaNode";
      this.source = this.context.createMediaElementSource(mediaElement);
      this.connect();
      return this;
    }
    setMediaStreamSource(mediaStream) {
      this.hasPlaybackControl = false;
      this.sourceType = "mediaStreamNode";
      this.source = this.context.createMediaStreamSource(mediaStream);
      this.connect();
      return this;
    }
    setBuffer(audioBuffer) {
      this.buffer = audioBuffer;
      this.sourceType = "buffer";
      if (this.autoplay)
        this.play();
      return this;
    }
    play(delay = 0) {
      if (this.isPlaying === true) {
        console.warn("THREE.Audio: Audio is already playing.");
        return;
      }
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      this._startedAt = this.context.currentTime + delay;
      const source = this.context.createBufferSource();
      source.buffer = this.buffer;
      source.loop = this.loop;
      source.loopStart = this.loopStart;
      source.loopEnd = this.loopEnd;
      source.onended = this.onEnded.bind(this);
      source.start(this._startedAt, this._progress + this.offset, this.duration);
      this.isPlaying = true;
      this.source = source;
      this.setDetune(this.detune);
      this.setPlaybackRate(this.playbackRate);
      return this.connect();
    }
    pause() {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      if (this.isPlaying === true) {
        this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
        if (this.loop === true) {
          this._progress = this._progress % (this.duration || this.buffer.duration);
        }
        this.source.stop();
        this.source.onended = null;
        this.isPlaying = false;
      }
      return this;
    }
    stop() {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      this._progress = 0;
      this.source.stop();
      this.source.onended = null;
      this.isPlaying = false;
      return this;
    }
    connect() {
      if (this.filters.length > 0) {
        this.source.connect(this.filters[0]);
        for (let i = 1, l = this.filters.length; i < l; i++) {
          this.filters[i - 1].connect(this.filters[i]);
        }
        this.filters[this.filters.length - 1].connect(this.getOutput());
      } else {
        this.source.connect(this.getOutput());
      }
      this._connected = true;
      return this;
    }
    disconnect() {
      if (this.filters.length > 0) {
        this.source.disconnect(this.filters[0]);
        for (let i = 1, l = this.filters.length; i < l; i++) {
          this.filters[i - 1].disconnect(this.filters[i]);
        }
        this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else {
        this.source.disconnect(this.getOutput());
      }
      this._connected = false;
      return this;
    }
    getFilters() {
      return this.filters;
    }
    setFilters(value) {
      if (!value)
        value = [];
      if (this._connected === true) {
        this.disconnect();
        this.filters = value.slice();
        this.connect();
      } else {
        this.filters = value.slice();
      }
      return this;
    }
    setDetune(value) {
      this.detune = value;
      if (this.source.detune === void 0)
        return;
      if (this.isPlaying === true) {
        this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
      }
      return this;
    }
    getDetune() {
      return this.detune;
    }
    getFilter() {
      return this.getFilters()[0];
    }
    setFilter(filter) {
      return this.setFilters(filter ? [filter] : []);
    }
    setPlaybackRate(value) {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      this.playbackRate = value;
      if (this.isPlaying === true) {
        this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
      }
      return this;
    }
    getPlaybackRate() {
      return this.playbackRate;
    }
    onEnded() {
      this.isPlaying = false;
    }
    getLoop() {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return false;
      }
      return this.loop;
    }
    setLoop(value) {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      this.loop = value;
      if (this.isPlaying === true) {
        this.source.loop = this.loop;
      }
      return this;
    }
    setLoopStart(value) {
      this.loopStart = value;
      return this;
    }
    setLoopEnd(value) {
      this.loopEnd = value;
      return this;
    }
    getVolume() {
      return this.gain.gain.value;
    }
    setVolume(value) {
      this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
      return this;
    }
  };
  var AudioAnalyser = class {
    constructor(audio, fftSize = 2048) {
      this.analyser = audio.context.createAnalyser();
      this.analyser.fftSize = fftSize;
      this.data = new Uint8Array(this.analyser.frequencyBinCount);
      audio.getOutput().connect(this.analyser);
    }
    getFrequencyData() {
      this.analyser.getByteFrequencyData(this.data);
      return this.data;
    }
    getAverageFrequency() {
      let value = 0;
      const data = this.getFrequencyData();
      for (let i = 0; i < data.length; i++) {
        value += data[i];
      }
      return value / data.length;
    }
  };
  function PropertyMixer(binding, typeName, valueSize) {
    this.binding = binding;
    this.valueSize = valueSize;
    let mixFunction, mixFunctionAdditive, setIdentity;
    switch (typeName) {
      case "quaternion":
        mixFunction = this._slerp;
        mixFunctionAdditive = this._slerpAdditive;
        setIdentity = this._setAdditiveIdentityQuaternion;
        this.buffer = new Float64Array(valueSize * 6);
        this._workIndex = 5;
        break;
      case "string":
      case "bool":
        mixFunction = this._select;
        mixFunctionAdditive = this._select;
        setIdentity = this._setAdditiveIdentityOther;
        this.buffer = new Array(valueSize * 5);
        break;
      default:
        mixFunction = this._lerp;
        mixFunctionAdditive = this._lerpAdditive;
        setIdentity = this._setAdditiveIdentityNumeric;
        this.buffer = new Float64Array(valueSize * 5);
    }
    this._mixBufferRegion = mixFunction;
    this._mixBufferRegionAdditive = mixFunctionAdditive;
    this._setIdentity = setIdentity;
    this._origIndex = 3;
    this._addIndex = 4;
    this.cumulativeWeight = 0;
    this.cumulativeWeightAdditive = 0;
    this.useCount = 0;
    this.referenceCount = 0;
  }
  Object.assign(PropertyMixer.prototype, {
    accumulate: function(accuIndex, weight) {
      const buffer = this.buffer, stride = this.valueSize, offset = accuIndex * stride + stride;
      let currentWeight = this.cumulativeWeight;
      if (currentWeight === 0) {
        for (let i = 0; i !== stride; ++i) {
          buffer[offset + i] = buffer[i];
        }
        currentWeight = weight;
      } else {
        currentWeight += weight;
        const mix = weight / currentWeight;
        this._mixBufferRegion(buffer, offset, 0, mix, stride);
      }
      this.cumulativeWeight = currentWeight;
    },
    accumulateAdditive: function(weight) {
      const buffer = this.buffer, stride = this.valueSize, offset = stride * this._addIndex;
      if (this.cumulativeWeightAdditive === 0) {
        this._setIdentity();
      }
      this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);
      this.cumulativeWeightAdditive += weight;
    },
    apply: function(accuIndex) {
      const stride = this.valueSize, buffer = this.buffer, offset = accuIndex * stride + stride, weight = this.cumulativeWeight, weightAdditive = this.cumulativeWeightAdditive, binding = this.binding;
      this.cumulativeWeight = 0;
      this.cumulativeWeightAdditive = 0;
      if (weight < 1) {
        const originalValueOffset = stride * this._origIndex;
        this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
      }
      if (weightAdditive > 0) {
        this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
      }
      for (let i = stride, e = stride + stride; i !== e; ++i) {
        if (buffer[i] !== buffer[i + stride]) {
          binding.setValue(buffer, offset);
          break;
        }
      }
    },
    saveOriginalState: function() {
      const binding = this.binding;
      const buffer = this.buffer, stride = this.valueSize, originalValueOffset = stride * this._origIndex;
      binding.getValue(buffer, originalValueOffset);
      for (let i = stride, e = originalValueOffset; i !== e; ++i) {
        buffer[i] = buffer[originalValueOffset + i % stride];
      }
      this._setIdentity();
      this.cumulativeWeight = 0;
      this.cumulativeWeightAdditive = 0;
    },
    restoreOriginalState: function() {
      const originalValueOffset = this.valueSize * 3;
      this.binding.setValue(this.buffer, originalValueOffset);
    },
    _setAdditiveIdentityNumeric: function() {
      const startIndex = this._addIndex * this.valueSize;
      const endIndex = startIndex + this.valueSize;
      for (let i = startIndex; i < endIndex; i++) {
        this.buffer[i] = 0;
      }
    },
    _setAdditiveIdentityQuaternion: function() {
      this._setAdditiveIdentityNumeric();
      this.buffer[this._addIndex * this.valueSize + 3] = 1;
    },
    _setAdditiveIdentityOther: function() {
      const startIndex = this._origIndex * this.valueSize;
      const targetIndex = this._addIndex * this.valueSize;
      for (let i = 0; i < this.valueSize; i++) {
        this.buffer[targetIndex + i] = this.buffer[startIndex + i];
      }
    },
    _select: function(buffer, dstOffset, srcOffset, t, stride) {
      if (t >= 0.5) {
        for (let i = 0; i !== stride; ++i) {
          buffer[dstOffset + i] = buffer[srcOffset + i];
        }
      }
    },
    _slerp: function(buffer, dstOffset, srcOffset, t) {
      Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
    },
    _slerpAdditive: function(buffer, dstOffset, srcOffset, t, stride) {
      const workOffset = this._workIndex * stride;
      Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);
      Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
    },
    _lerp: function(buffer, dstOffset, srcOffset, t, stride) {
      const s = 1 - t;
      for (let i = 0; i !== stride; ++i) {
        const j = dstOffset + i;
        buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;
      }
    },
    _lerpAdditive: function(buffer, dstOffset, srcOffset, t, stride) {
      for (let i = 0; i !== stride; ++i) {
        const j = dstOffset + i;
        buffer[j] = buffer[j] + buffer[srcOffset + i] * t;
      }
    }
  });
  var _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
  var _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
  var _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
  var _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
  var _directoryRe = /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
  var _nodeRe = /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
  var _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
  var _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
  var _trackRe = new RegExp("^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$");
  var _supportedObjectNames = ["material", "materials", "bones"];
  function Composite(targetGroup, path, optionalParsedPath) {
    const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
    this._targetGroup = targetGroup;
    this._bindings = targetGroup.subscribe_(path, parsedPath);
  }
  Object.assign(Composite.prototype, {
    getValue: function(array, offset) {
      this.bind();
      const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
      if (binding !== void 0)
        binding.getValue(array, offset);
    },
    setValue: function(array, offset) {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].setValue(array, offset);
      }
    },
    bind: function() {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].bind();
      }
    },
    unbind: function() {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].unbind();
      }
    }
  });
  function PropertyBinding(rootNode, path, parsedPath) {
    this.path = path;
    this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
    this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
    this.rootNode = rootNode;
  }
  Object.assign(PropertyBinding, {
    Composite,
    create: function(root, path, parsedPath) {
      if (!(root && root.isAnimationObjectGroup)) {
        return new PropertyBinding(root, path, parsedPath);
      } else {
        return new PropertyBinding.Composite(root, path, parsedPath);
      }
    },
    sanitizeNodeName: function(name) {
      return name.replace(/\s/g, "_").replace(_reservedRe, "");
    },
    parseTrackName: function(trackName) {
      const matches = _trackRe.exec(trackName);
      if (!matches) {
        throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
      }
      const results = {
        nodeName: matches[2],
        objectName: matches[3],
        objectIndex: matches[4],
        propertyName: matches[5],
        propertyIndex: matches[6]
      };
      const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
      if (lastDot !== void 0 && lastDot !== -1) {
        const objectName = results.nodeName.substring(lastDot + 1);
        if (_supportedObjectNames.indexOf(objectName) !== -1) {
          results.nodeName = results.nodeName.substring(0, lastDot);
          results.objectName = objectName;
        }
      }
      if (results.propertyName === null || results.propertyName.length === 0) {
        throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
      }
      return results;
    },
    findNode: function(root, nodeName) {
      if (!nodeName || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
        return root;
      }
      if (root.skeleton) {
        const bone = root.skeleton.getBoneByName(nodeName);
        if (bone !== void 0) {
          return bone;
        }
      }
      if (root.children) {
        const searchNodeSubtree = function(children) {
          for (let i = 0; i < children.length; i++) {
            const childNode = children[i];
            if (childNode.name === nodeName || childNode.uuid === nodeName) {
              return childNode;
            }
            const result = searchNodeSubtree(childNode.children);
            if (result)
              return result;
          }
          return null;
        };
        const subTreeNode = searchNodeSubtree(root.children);
        if (subTreeNode) {
          return subTreeNode;
        }
      }
      return null;
    }
  });
  Object.assign(PropertyBinding.prototype, {
    _getValue_unavailable: function() {
    },
    _setValue_unavailable: function() {
    },
    BindingType: {
      Direct: 0,
      EntireArray: 1,
      ArrayElement: 2,
      HasFromToArray: 3
    },
    Versioning: {
      None: 0,
      NeedsUpdate: 1,
      MatrixWorldNeedsUpdate: 2
    },
    GetterByBindingType: [
      function getValue_direct(buffer, offset) {
        buffer[offset] = this.node[this.propertyName];
      },
      function getValue_array(buffer, offset) {
        const source = this.resolvedProperty;
        for (let i = 0, n = source.length; i !== n; ++i) {
          buffer[offset++] = source[i];
        }
      },
      function getValue_arrayElement(buffer, offset) {
        buffer[offset] = this.resolvedProperty[this.propertyIndex];
      },
      function getValue_toArray(buffer, offset) {
        this.resolvedProperty.toArray(buffer, offset);
      }
    ],
    SetterByBindingTypeAndVersioning: [
      [
        function setValue_direct(buffer, offset) {
          this.targetObject[this.propertyName] = buffer[offset];
        },
        function setValue_direct_setNeedsUpdate(buffer, offset) {
          this.targetObject[this.propertyName] = buffer[offset];
          this.targetObject.needsUpdate = true;
        },
        function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
          this.targetObject[this.propertyName] = buffer[offset];
          this.targetObject.matrixWorldNeedsUpdate = true;
        }
      ],
      [
        function setValue_array(buffer, offset) {
          const dest = this.resolvedProperty;
          for (let i = 0, n = dest.length; i !== n; ++i) {
            dest[i] = buffer[offset++];
          }
        },
        function setValue_array_setNeedsUpdate(buffer, offset) {
          const dest = this.resolvedProperty;
          for (let i = 0, n = dest.length; i !== n; ++i) {
            dest[i] = buffer[offset++];
          }
          this.targetObject.needsUpdate = true;
        },
        function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
          const dest = this.resolvedProperty;
          for (let i = 0, n = dest.length; i !== n; ++i) {
            dest[i] = buffer[offset++];
          }
          this.targetObject.matrixWorldNeedsUpdate = true;
        }
      ],
      [
        function setValue_arrayElement(buffer, offset) {
          this.resolvedProperty[this.propertyIndex] = buffer[offset];
        },
        function setValue_arrayElement_setNeedsUpdate(buffer, offset) {
          this.resolvedProperty[this.propertyIndex] = buffer[offset];
          this.targetObject.needsUpdate = true;
        },
        function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
          this.resolvedProperty[this.propertyIndex] = buffer[offset];
          this.targetObject.matrixWorldNeedsUpdate = true;
        }
      ],
      [
        function setValue_fromArray(buffer, offset) {
          this.resolvedProperty.fromArray(buffer, offset);
        },
        function setValue_fromArray_setNeedsUpdate(buffer, offset) {
          this.resolvedProperty.fromArray(buffer, offset);
          this.targetObject.needsUpdate = true;
        },
        function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
          this.resolvedProperty.fromArray(buffer, offset);
          this.targetObject.matrixWorldNeedsUpdate = true;
        }
      ]
    ],
    getValue: function getValue_unbound(targetArray, offset) {
      this.bind();
      this.getValue(targetArray, offset);
    },
    setValue: function getValue_unbound2(sourceArray, offset) {
      this.bind();
      this.setValue(sourceArray, offset);
    },
    bind: function() {
      let targetObject = this.node;
      const parsedPath = this.parsedPath;
      const objectName = parsedPath.objectName;
      const propertyName = parsedPath.propertyName;
      let propertyIndex = parsedPath.propertyIndex;
      if (!targetObject) {
        targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
        this.node = targetObject;
      }
      this.getValue = this._getValue_unavailable;
      this.setValue = this._setValue_unavailable;
      if (!targetObject) {
        console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
        return;
      }
      if (objectName) {
        let objectIndex = parsedPath.objectIndex;
        switch (objectName) {
          case "materials":
            if (!targetObject.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!targetObject.material.materials) {
              console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
              return;
            }
            targetObject = targetObject.material.materials;
            break;
          case "bones":
            if (!targetObject.skeleton) {
              console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
              return;
            }
            targetObject = targetObject.skeleton.bones;
            for (let i = 0; i < targetObject.length; i++) {
              if (targetObject[i].name === objectIndex) {
                objectIndex = i;
                break;
              }
            }
            break;
          default:
            if (targetObject[objectName] === void 0) {
              console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
              return;
            }
            targetObject = targetObject[objectName];
        }
        if (objectIndex !== void 0) {
          if (targetObject[objectIndex] === void 0) {
            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
            return;
          }
          targetObject = targetObject[objectIndex];
        }
      }
      const nodeProperty = targetObject[propertyName];
      if (nodeProperty === void 0) {
        const nodeName = parsedPath.nodeName;
        console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
        return;
      }
      let versioning = this.Versioning.None;
      this.targetObject = targetObject;
      if (targetObject.needsUpdate !== void 0) {
        versioning = this.Versioning.NeedsUpdate;
      } else if (targetObject.matrixWorldNeedsUpdate !== void 0) {
        versioning = this.Versioning.MatrixWorldNeedsUpdate;
      }
      let bindingType = this.BindingType.Direct;
      if (propertyIndex !== void 0) {
        if (propertyName === "morphTargetInfluences") {
          if (!targetObject.geometry) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
            return;
          }
          if (targetObject.geometry.isBufferGeometry) {
            if (!targetObject.geometry.morphAttributes) {
              console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
              return;
            }
            if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
              propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
            }
          } else {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.", this);
            return;
          }
        }
        bindingType = this.BindingType.ArrayElement;
        this.resolvedProperty = nodeProperty;
        this.propertyIndex = propertyIndex;
      } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
        bindingType = this.BindingType.HasFromToArray;
        this.resolvedProperty = nodeProperty;
      } else if (Array.isArray(nodeProperty)) {
        bindingType = this.BindingType.EntireArray;
        this.resolvedProperty = nodeProperty;
      } else {
        this.propertyName = propertyName;
      }
      this.getValue = this.GetterByBindingType[bindingType];
      this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
    },
    unbind: function() {
      this.node = null;
      this.getValue = this._getValue_unbound;
      this.setValue = this._setValue_unbound;
    }
  });
  Object.assign(PropertyBinding.prototype, {
    _getValue_unbound: PropertyBinding.prototype.getValue,
    _setValue_unbound: PropertyBinding.prototype.setValue
  });
  function AnimationObjectGroup() {
    this.uuid = MathUtils.generateUUID();
    this._objects = Array.prototype.slice.call(arguments);
    this.nCachedObjects_ = 0;
    const indices = {};
    this._indicesByUUID = indices;
    for (let i = 0, n = arguments.length; i !== n; ++i) {
      indices[arguments[i].uuid] = i;
    }
    this._paths = [];
    this._parsedPaths = [];
    this._bindings = [];
    this._bindingsIndicesByPath = {};
    const scope = this;
    this.stats = {
      objects: {
        get total() {
          return scope._objects.length;
        },
        get inUse() {
          return this.total - scope.nCachedObjects_;
        }
      },
      get bindingsPerObject() {
        return scope._bindings.length;
      }
    };
  }
  Object.assign(AnimationObjectGroup.prototype, {
    isAnimationObjectGroup: true,
    add: function() {
      const objects = this._objects, indicesByUUID = this._indicesByUUID, paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, nBindings = bindings.length;
      let knownObject = void 0, nObjects = objects.length, nCachedObjects = this.nCachedObjects_;
      for (let i = 0, n = arguments.length; i !== n; ++i) {
        const object = arguments[i], uuid = object.uuid;
        let index = indicesByUUID[uuid];
        if (index === void 0) {
          index = nObjects++;
          indicesByUUID[uuid] = index;
          objects.push(object);
          for (let j = 0, m = nBindings; j !== m; ++j) {
            bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));
          }
        } else if (index < nCachedObjects) {
          knownObject = objects[index];
          const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex];
          indicesByUUID[lastCachedObject.uuid] = index;
          objects[index] = lastCachedObject;
          indicesByUUID[uuid] = firstActiveIndex;
          objects[firstActiveIndex] = object;
          for (let j = 0, m = nBindings; j !== m; ++j) {
            const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex];
            let binding = bindingsForPath[index];
            bindingsForPath[index] = lastCached;
            if (binding === void 0) {
              binding = new PropertyBinding(object, paths[j], parsedPaths[j]);
            }
            bindingsForPath[firstActiveIndex] = binding;
          }
        } else if (objects[index] !== knownObject) {
          console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
        }
      }
      this.nCachedObjects_ = nCachedObjects;
    },
    remove: function() {
      const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
      let nCachedObjects = this.nCachedObjects_;
      for (let i = 0, n = arguments.length; i !== n; ++i) {
        const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
        if (index !== void 0 && index >= nCachedObjects) {
          const lastCachedIndex = nCachedObjects++, firstActiveObject = objects[lastCachedIndex];
          indicesByUUID[firstActiveObject.uuid] = index;
          objects[index] = firstActiveObject;
          indicesByUUID[uuid] = lastCachedIndex;
          objects[lastCachedIndex] = object;
          for (let j = 0, m = nBindings; j !== m; ++j) {
            const bindingsForPath = bindings[j], firstActive = bindingsForPath[lastCachedIndex], binding = bindingsForPath[index];
            bindingsForPath[index] = firstActive;
            bindingsForPath[lastCachedIndex] = binding;
          }
        }
      }
      this.nCachedObjects_ = nCachedObjects;
    },
    uncache: function() {
      const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
      let nCachedObjects = this.nCachedObjects_, nObjects = objects.length;
      for (let i = 0, n = arguments.length; i !== n; ++i) {
        const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
        if (index !== void 0) {
          delete indicesByUUID[uuid];
          if (index < nCachedObjects) {
            const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex], lastIndex = --nObjects, lastObject = objects[lastIndex];
            indicesByUUID[lastCachedObject.uuid] = index;
            objects[index] = lastCachedObject;
            indicesByUUID[lastObject.uuid] = firstActiveIndex;
            objects[firstActiveIndex] = lastObject;
            objects.pop();
            for (let j = 0, m = nBindings; j !== m; ++j) {
              const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex], last = bindingsForPath[lastIndex];
              bindingsForPath[index] = lastCached;
              bindingsForPath[firstActiveIndex] = last;
              bindingsForPath.pop();
            }
          } else {
            const lastIndex = --nObjects, lastObject = objects[lastIndex];
            if (lastIndex > 0) {
              indicesByUUID[lastObject.uuid] = index;
            }
            objects[index] = lastObject;
            objects.pop();
            for (let j = 0, m = nBindings; j !== m; ++j) {
              const bindingsForPath = bindings[j];
              bindingsForPath[index] = bindingsForPath[lastIndex];
              bindingsForPath.pop();
            }
          }
        }
      }
      this.nCachedObjects_ = nCachedObjects;
    },
    subscribe_: function(path, parsedPath) {
      const indicesByPath = this._bindingsIndicesByPath;
      let index = indicesByPath[path];
      const bindings = this._bindings;
      if (index !== void 0)
        return bindings[index];
      const paths = this._paths, parsedPaths = this._parsedPaths, objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, bindingsForPath = new Array(nObjects);
      index = bindings.length;
      indicesByPath[path] = index;
      paths.push(path);
      parsedPaths.push(parsedPath);
      bindings.push(bindingsForPath);
      for (let i = nCachedObjects, n = objects.length; i !== n; ++i) {
        const object = objects[i];
        bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);
      }
      return bindingsForPath;
    },
    unsubscribe_: function(path) {
      const indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path];
      if (index !== void 0) {
        const paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, lastBindingsIndex = bindings.length - 1, lastBindings = bindings[lastBindingsIndex], lastBindingsPath = path[lastBindingsIndex];
        indicesByPath[lastBindingsPath] = index;
        bindings[index] = lastBindings;
        bindings.pop();
        parsedPaths[index] = parsedPaths[lastBindingsIndex];
        parsedPaths.pop();
        paths[index] = paths[lastBindingsIndex];
        paths.pop();
      }
    }
  });
  var AnimationAction = class {
    constructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {
      this._mixer = mixer;
      this._clip = clip;
      this._localRoot = localRoot;
      this.blendMode = blendMode;
      const tracks = clip.tracks, nTracks = tracks.length, interpolants = new Array(nTracks);
      const interpolantSettings = {
        endingStart: ZeroCurvatureEnding,
        endingEnd: ZeroCurvatureEnding
      };
      for (let i = 0; i !== nTracks; ++i) {
        const interpolant = tracks[i].createInterpolant(null);
        interpolants[i] = interpolant;
        interpolant.settings = interpolantSettings;
      }
      this._interpolantSettings = interpolantSettings;
      this._interpolants = interpolants;
      this._propertyBindings = new Array(nTracks);
      this._cacheIndex = null;
      this._byClipCacheIndex = null;
      this._timeScaleInterpolant = null;
      this._weightInterpolant = null;
      this.loop = LoopRepeat;
      this._loopCount = -1;
      this._startTime = null;
      this.time = 0;
      this.timeScale = 1;
      this._effectiveTimeScale = 1;
      this.weight = 1;
      this._effectiveWeight = 1;
      this.repetitions = Infinity;
      this.paused = false;
      this.enabled = true;
      this.clampWhenFinished = false;
      this.zeroSlopeAtStart = true;
      this.zeroSlopeAtEnd = true;
    }
    play() {
      this._mixer._activateAction(this);
      return this;
    }
    stop() {
      this._mixer._deactivateAction(this);
      return this.reset();
    }
    reset() {
      this.paused = false;
      this.enabled = true;
      this.time = 0;
      this._loopCount = -1;
      this._startTime = null;
      return this.stopFading().stopWarping();
    }
    isRunning() {
      return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
    }
    isScheduled() {
      return this._mixer._isActiveAction(this);
    }
    startAt(time) {
      this._startTime = time;
      return this;
    }
    setLoop(mode, repetitions) {
      this.loop = mode;
      this.repetitions = repetitions;
      return this;
    }
    setEffectiveWeight(weight) {
      this.weight = weight;
      this._effectiveWeight = this.enabled ? weight : 0;
      return this.stopFading();
    }
    getEffectiveWeight() {
      return this._effectiveWeight;
    }
    fadeIn(duration) {
      return this._scheduleFading(duration, 0, 1);
    }
    fadeOut(duration) {
      return this._scheduleFading(duration, 1, 0);
    }
    crossFadeFrom(fadeOutAction, duration, warp) {
      fadeOutAction.fadeOut(duration);
      this.fadeIn(duration);
      if (warp) {
        const fadeInDuration = this._clip.duration, fadeOutDuration = fadeOutAction._clip.duration, startEndRatio = fadeOutDuration / fadeInDuration, endStartRatio = fadeInDuration / fadeOutDuration;
        fadeOutAction.warp(1, startEndRatio, duration);
        this.warp(endStartRatio, 1, duration);
      }
      return this;
    }
    crossFadeTo(fadeInAction, duration, warp) {
      return fadeInAction.crossFadeFrom(this, duration, warp);
    }
    stopFading() {
      const weightInterpolant = this._weightInterpolant;
      if (weightInterpolant !== null) {
        this._weightInterpolant = null;
        this._mixer._takeBackControlInterpolant(weightInterpolant);
      }
      return this;
    }
    setEffectiveTimeScale(timeScale) {
      this.timeScale = timeScale;
      this._effectiveTimeScale = this.paused ? 0 : timeScale;
      return this.stopWarping();
    }
    getEffectiveTimeScale() {
      return this._effectiveTimeScale;
    }
    setDuration(duration) {
      this.timeScale = this._clip.duration / duration;
      return this.stopWarping();
    }
    syncWith(action2) {
      this.time = action2.time;
      this.timeScale = action2.timeScale;
      return this.stopWarping();
    }
    halt(duration) {
      return this.warp(this._effectiveTimeScale, 0, duration);
    }
    warp(startTimeScale, endTimeScale, duration) {
      const mixer = this._mixer, now2 = mixer.time, timeScale = this.timeScale;
      let interpolant = this._timeScaleInterpolant;
      if (interpolant === null) {
        interpolant = mixer._lendControlInterpolant();
        this._timeScaleInterpolant = interpolant;
      }
      const times = interpolant.parameterPositions, values = interpolant.sampleValues;
      times[0] = now2;
      times[1] = now2 + duration;
      values[0] = startTimeScale / timeScale;
      values[1] = endTimeScale / timeScale;
      return this;
    }
    stopWarping() {
      const timeScaleInterpolant = this._timeScaleInterpolant;
      if (timeScaleInterpolant !== null) {
        this._timeScaleInterpolant = null;
        this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
      }
      return this;
    }
    getMixer() {
      return this._mixer;
    }
    getClip() {
      return this._clip;
    }
    getRoot() {
      return this._localRoot || this._mixer._root;
    }
    _update(time, deltaTime, timeDirection, accuIndex) {
      if (!this.enabled) {
        this._updateWeight(time);
        return;
      }
      const startTime = this._startTime;
      if (startTime !== null) {
        const timeRunning = (time - startTime) * timeDirection;
        if (timeRunning < 0 || timeDirection === 0) {
          return;
        }
        this._startTime = null;
        deltaTime = timeDirection * timeRunning;
      }
      deltaTime *= this._updateTimeScale(time);
      const clipTime = this._updateTime(deltaTime);
      const weight = this._updateWeight(time);
      if (weight > 0) {
        const interpolants = this._interpolants;
        const propertyMixers = this._propertyBindings;
        switch (this.blendMode) {
          case AdditiveAnimationBlendMode:
            for (let j = 0, m = interpolants.length; j !== m; ++j) {
              interpolants[j].evaluate(clipTime);
              propertyMixers[j].accumulateAdditive(weight);
            }
            break;
          case NormalAnimationBlendMode:
          default:
            for (let j = 0, m = interpolants.length; j !== m; ++j) {
              interpolants[j].evaluate(clipTime);
              propertyMixers[j].accumulate(accuIndex, weight);
            }
        }
      }
    }
    _updateWeight(time) {
      let weight = 0;
      if (this.enabled) {
        weight = this.weight;
        const interpolant = this._weightInterpolant;
        if (interpolant !== null) {
          const interpolantValue = interpolant.evaluate(time)[0];
          weight *= interpolantValue;
          if (time > interpolant.parameterPositions[1]) {
            this.stopFading();
            if (interpolantValue === 0) {
              this.enabled = false;
            }
          }
        }
      }
      this._effectiveWeight = weight;
      return weight;
    }
    _updateTimeScale(time) {
      let timeScale = 0;
      if (!this.paused) {
        timeScale = this.timeScale;
        const interpolant = this._timeScaleInterpolant;
        if (interpolant !== null) {
          const interpolantValue = interpolant.evaluate(time)[0];
          timeScale *= interpolantValue;
          if (time > interpolant.parameterPositions[1]) {
            this.stopWarping();
            if (timeScale === 0) {
              this.paused = true;
            } else {
              this.timeScale = timeScale;
            }
          }
        }
      }
      this._effectiveTimeScale = timeScale;
      return timeScale;
    }
    _updateTime(deltaTime) {
      const duration = this._clip.duration;
      const loop = this.loop;
      let time = this.time + deltaTime;
      let loopCount = this._loopCount;
      const pingPong = loop === LoopPingPong;
      if (deltaTime === 0) {
        if (loopCount === -1)
          return time;
        return pingPong && (loopCount & 1) === 1 ? duration - time : time;
      }
      if (loop === LoopOnce) {
        if (loopCount === -1) {
          this._loopCount = 0;
          this._setEndings(true, true, false);
        }
        handle_stop: {
          if (time >= duration) {
            time = duration;
          } else if (time < 0) {
            time = 0;
          } else {
            this.time = time;
            break handle_stop;
          }
          if (this.clampWhenFinished)
            this.paused = true;
          else
            this.enabled = false;
          this.time = time;
          this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: deltaTime < 0 ? -1 : 1
          });
        }
      } else {
        if (loopCount === -1) {
          if (deltaTime >= 0) {
            loopCount = 0;
            this._setEndings(true, this.repetitions === 0, pingPong);
          } else {
            this._setEndings(this.repetitions === 0, true, pingPong);
          }
        }
        if (time >= duration || time < 0) {
          const loopDelta = Math.floor(time / duration);
          time -= duration * loopDelta;
          loopCount += Math.abs(loopDelta);
          const pending = this.repetitions - loopCount;
          if (pending <= 0) {
            if (this.clampWhenFinished)
              this.paused = true;
            else
              this.enabled = false;
            time = deltaTime > 0 ? duration : 0;
            this.time = time;
            this._mixer.dispatchEvent({
              type: "finished",
              action: this,
              direction: deltaTime > 0 ? 1 : -1
            });
          } else {
            if (pending === 1) {
              const atStart = deltaTime < 0;
              this._setEndings(atStart, !atStart, pingPong);
            } else {
              this._setEndings(false, false, pingPong);
            }
            this._loopCount = loopCount;
            this.time = time;
            this._mixer.dispatchEvent({
              type: "loop",
              action: this,
              loopDelta
            });
          }
        } else {
          this.time = time;
        }
        if (pingPong && (loopCount & 1) === 1) {
          return duration - time;
        }
      }
      return time;
    }
    _setEndings(atStart, atEnd, pingPong) {
      const settings3 = this._interpolantSettings;
      if (pingPong) {
        settings3.endingStart = ZeroSlopeEnding;
        settings3.endingEnd = ZeroSlopeEnding;
      } else {
        if (atStart) {
          settings3.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
        } else {
          settings3.endingStart = WrapAroundEnding;
        }
        if (atEnd) {
          settings3.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
        } else {
          settings3.endingEnd = WrapAroundEnding;
        }
      }
    }
    _scheduleFading(duration, weightNow, weightThen) {
      const mixer = this._mixer, now2 = mixer.time;
      let interpolant = this._weightInterpolant;
      if (interpolant === null) {
        interpolant = mixer._lendControlInterpolant();
        this._weightInterpolant = interpolant;
      }
      const times = interpolant.parameterPositions, values = interpolant.sampleValues;
      times[0] = now2;
      values[0] = weightNow;
      times[1] = now2 + duration;
      values[1] = weightThen;
      return this;
    }
  };
  function AnimationMixer(root) {
    this._root = root;
    this._initMemoryManager();
    this._accuIndex = 0;
    this.time = 0;
    this.timeScale = 1;
  }
  AnimationMixer.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
    constructor: AnimationMixer,
    _bindAction: function(action2, prototypeAction) {
      const root = action2._localRoot || this._root, tracks = action2._clip.tracks, nTracks = tracks.length, bindings = action2._propertyBindings, interpolants = action2._interpolants, rootUuid = root.uuid, bindingsByRoot = this._bindingsByRootAndName;
      let bindingsByName = bindingsByRoot[rootUuid];
      if (bindingsByName === void 0) {
        bindingsByName = {};
        bindingsByRoot[rootUuid] = bindingsByName;
      }
      for (let i = 0; i !== nTracks; ++i) {
        const track = tracks[i], trackName = track.name;
        let binding = bindingsByName[trackName];
        if (binding !== void 0) {
          bindings[i] = binding;
        } else {
          binding = bindings[i];
          if (binding !== void 0) {
            if (binding._cacheIndex === null) {
              ++binding.referenceCount;
              this._addInactiveBinding(binding, rootUuid, trackName);
            }
            continue;
          }
          const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
          binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
          ++binding.referenceCount;
          this._addInactiveBinding(binding, rootUuid, trackName);
          bindings[i] = binding;
        }
        interpolants[i].resultBuffer = binding.buffer;
      }
    },
    _activateAction: function(action2) {
      if (!this._isActiveAction(action2)) {
        if (action2._cacheIndex === null) {
          const rootUuid = (action2._localRoot || this._root).uuid, clipUuid = action2._clip.uuid, actionsForClip = this._actionsByClip[clipUuid];
          this._bindAction(action2, actionsForClip && actionsForClip.knownActions[0]);
          this._addInactiveAction(action2, clipUuid, rootUuid);
        }
        const bindings = action2._propertyBindings;
        for (let i = 0, n = bindings.length; i !== n; ++i) {
          const binding = bindings[i];
          if (binding.useCount++ === 0) {
            this._lendBinding(binding);
            binding.saveOriginalState();
          }
        }
        this._lendAction(action2);
      }
    },
    _deactivateAction: function(action2) {
      if (this._isActiveAction(action2)) {
        const bindings = action2._propertyBindings;
        for (let i = 0, n = bindings.length; i !== n; ++i) {
          const binding = bindings[i];
          if (--binding.useCount === 0) {
            binding.restoreOriginalState();
            this._takeBackBinding(binding);
          }
        }
        this._takeBackAction(action2);
      }
    },
    _initMemoryManager: function() {
      this._actions = [];
      this._nActiveActions = 0;
      this._actionsByClip = {};
      this._bindings = [];
      this._nActiveBindings = 0;
      this._bindingsByRootAndName = {};
      this._controlInterpolants = [];
      this._nActiveControlInterpolants = 0;
      const scope = this;
      this.stats = {
        actions: {
          get total() {
            return scope._actions.length;
          },
          get inUse() {
            return scope._nActiveActions;
          }
        },
        bindings: {
          get total() {
            return scope._bindings.length;
          },
          get inUse() {
            return scope._nActiveBindings;
          }
        },
        controlInterpolants: {
          get total() {
            return scope._controlInterpolants.length;
          },
          get inUse() {
            return scope._nActiveControlInterpolants;
          }
        }
      };
    },
    _isActiveAction: function(action2) {
      const index = action2._cacheIndex;
      return index !== null && index < this._nActiveActions;
    },
    _addInactiveAction: function(action2, clipUuid, rootUuid) {
      const actions = this._actions, actionsByClip = this._actionsByClip;
      let actionsForClip = actionsByClip[clipUuid];
      if (actionsForClip === void 0) {
        actionsForClip = {
          knownActions: [action2],
          actionByRoot: {}
        };
        action2._byClipCacheIndex = 0;
        actionsByClip[clipUuid] = actionsForClip;
      } else {
        const knownActions = actionsForClip.knownActions;
        action2._byClipCacheIndex = knownActions.length;
        knownActions.push(action2);
      }
      action2._cacheIndex = actions.length;
      actions.push(action2);
      actionsForClip.actionByRoot[rootUuid] = action2;
    },
    _removeInactiveAction: function(action2) {
      const actions = this._actions, lastInactiveAction = actions[actions.length - 1], cacheIndex = action2._cacheIndex;
      lastInactiveAction._cacheIndex = cacheIndex;
      actions[cacheIndex] = lastInactiveAction;
      actions.pop();
      action2._cacheIndex = null;
      const clipUuid = action2._clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid], knownActionsForClip = actionsForClip.knownActions, lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1], byClipCacheIndex = action2._byClipCacheIndex;
      lastKnownAction._byClipCacheIndex = byClipCacheIndex;
      knownActionsForClip[byClipCacheIndex] = lastKnownAction;
      knownActionsForClip.pop();
      action2._byClipCacheIndex = null;
      const actionByRoot = actionsForClip.actionByRoot, rootUuid = (action2._localRoot || this._root).uuid;
      delete actionByRoot[rootUuid];
      if (knownActionsForClip.length === 0) {
        delete actionsByClip[clipUuid];
      }
      this._removeInactiveBindingsForAction(action2);
    },
    _removeInactiveBindingsForAction: function(action2) {
      const bindings = action2._propertyBindings;
      for (let i = 0, n = bindings.length; i !== n; ++i) {
        const binding = bindings[i];
        if (--binding.referenceCount === 0) {
          this._removeInactiveBinding(binding);
        }
      }
    },
    _lendAction: function(action2) {
      const actions = this._actions, prevIndex = action2._cacheIndex, lastActiveIndex = this._nActiveActions++, firstInactiveAction = actions[lastActiveIndex];
      action2._cacheIndex = lastActiveIndex;
      actions[lastActiveIndex] = action2;
      firstInactiveAction._cacheIndex = prevIndex;
      actions[prevIndex] = firstInactiveAction;
    },
    _takeBackAction: function(action2) {
      const actions = this._actions, prevIndex = action2._cacheIndex, firstInactiveIndex = --this._nActiveActions, lastActiveAction = actions[firstInactiveIndex];
      action2._cacheIndex = firstInactiveIndex;
      actions[firstInactiveIndex] = action2;
      lastActiveAction._cacheIndex = prevIndex;
      actions[prevIndex] = lastActiveAction;
    },
    _addInactiveBinding: function(binding, rootUuid, trackName) {
      const bindingsByRoot = this._bindingsByRootAndName, bindings = this._bindings;
      let bindingByName = bindingsByRoot[rootUuid];
      if (bindingByName === void 0) {
        bindingByName = {};
        bindingsByRoot[rootUuid] = bindingByName;
      }
      bindingByName[trackName] = binding;
      binding._cacheIndex = bindings.length;
      bindings.push(binding);
    },
    _removeInactiveBinding: function(binding) {
      const bindings = this._bindings, propBinding = binding.binding, rootUuid = propBinding.rootNode.uuid, trackName = propBinding.path, bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], lastInactiveBinding = bindings[bindings.length - 1], cacheIndex = binding._cacheIndex;
      lastInactiveBinding._cacheIndex = cacheIndex;
      bindings[cacheIndex] = lastInactiveBinding;
      bindings.pop();
      delete bindingByName[trackName];
      if (Object.keys(bindingByName).length === 0) {
        delete bindingsByRoot[rootUuid];
      }
    },
    _lendBinding: function(binding) {
      const bindings = this._bindings, prevIndex = binding._cacheIndex, lastActiveIndex = this._nActiveBindings++, firstInactiveBinding = bindings[lastActiveIndex];
      binding._cacheIndex = lastActiveIndex;
      bindings[lastActiveIndex] = binding;
      firstInactiveBinding._cacheIndex = prevIndex;
      bindings[prevIndex] = firstInactiveBinding;
    },
    _takeBackBinding: function(binding) {
      const bindings = this._bindings, prevIndex = binding._cacheIndex, firstInactiveIndex = --this._nActiveBindings, lastActiveBinding = bindings[firstInactiveIndex];
      binding._cacheIndex = firstInactiveIndex;
      bindings[firstInactiveIndex] = binding;
      lastActiveBinding._cacheIndex = prevIndex;
      bindings[prevIndex] = lastActiveBinding;
    },
    _lendControlInterpolant: function() {
      const interpolants = this._controlInterpolants, lastActiveIndex = this._nActiveControlInterpolants++;
      let interpolant = interpolants[lastActiveIndex];
      if (interpolant === void 0) {
        interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
        interpolant.__cacheIndex = lastActiveIndex;
        interpolants[lastActiveIndex] = interpolant;
      }
      return interpolant;
    },
    _takeBackControlInterpolant: function(interpolant) {
      const interpolants = this._controlInterpolants, prevIndex = interpolant.__cacheIndex, firstInactiveIndex = --this._nActiveControlInterpolants, lastActiveInterpolant = interpolants[firstInactiveIndex];
      interpolant.__cacheIndex = firstInactiveIndex;
      interpolants[firstInactiveIndex] = interpolant;
      lastActiveInterpolant.__cacheIndex = prevIndex;
      interpolants[prevIndex] = lastActiveInterpolant;
    },
    _controlInterpolantsResultBuffer: new Float32Array(1),
    clipAction: function(clip, optionalRoot, blendMode) {
      const root = optionalRoot || this._root, rootUuid = root.uuid;
      let clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip;
      const clipUuid = clipObject !== null ? clipObject.uuid : clip;
      const actionsForClip = this._actionsByClip[clipUuid];
      let prototypeAction = null;
      if (blendMode === void 0) {
        if (clipObject !== null) {
          blendMode = clipObject.blendMode;
        } else {
          blendMode = NormalAnimationBlendMode;
        }
      }
      if (actionsForClip !== void 0) {
        const existingAction = actionsForClip.actionByRoot[rootUuid];
        if (existingAction !== void 0 && existingAction.blendMode === blendMode) {
          return existingAction;
        }
        prototypeAction = actionsForClip.knownActions[0];
        if (clipObject === null)
          clipObject = prototypeAction._clip;
      }
      if (clipObject === null)
        return null;
      const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);
      this._bindAction(newAction, prototypeAction);
      this._addInactiveAction(newAction, clipUuid, rootUuid);
      return newAction;
    },
    existingAction: function(clip, optionalRoot) {
      const root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip, clipUuid = clipObject ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid];
      if (actionsForClip !== void 0) {
        return actionsForClip.actionByRoot[rootUuid] || null;
      }
      return null;
    },
    stopAllAction: function() {
      const actions = this._actions, nActions = this._nActiveActions;
      for (let i = nActions - 1; i >= 0; --i) {
        actions[i].stop();
      }
      return this;
    },
    update: function(deltaTime) {
      deltaTime *= this.timeScale;
      const actions = this._actions, nActions = this._nActiveActions, time = this.time += deltaTime, timeDirection = Math.sign(deltaTime), accuIndex = this._accuIndex ^= 1;
      for (let i = 0; i !== nActions; ++i) {
        const action2 = actions[i];
        action2._update(time, deltaTime, timeDirection, accuIndex);
      }
      const bindings = this._bindings, nBindings = this._nActiveBindings;
      for (let i = 0; i !== nBindings; ++i) {
        bindings[i].apply(accuIndex);
      }
      return this;
    },
    setTime: function(timeInSeconds) {
      this.time = 0;
      for (let i = 0; i < this._actions.length; i++) {
        this._actions[i].time = 0;
      }
      return this.update(timeInSeconds);
    },
    getRoot: function() {
      return this._root;
    },
    uncacheClip: function(clip) {
      const actions = this._actions, clipUuid = clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];
      if (actionsForClip !== void 0) {
        const actionsToRemove = actionsForClip.knownActions;
        for (let i = 0, n = actionsToRemove.length; i !== n; ++i) {
          const action2 = actionsToRemove[i];
          this._deactivateAction(action2);
          const cacheIndex = action2._cacheIndex, lastInactiveAction = actions[actions.length - 1];
          action2._cacheIndex = null;
          action2._byClipCacheIndex = null;
          lastInactiveAction._cacheIndex = cacheIndex;
          actions[cacheIndex] = lastInactiveAction;
          actions.pop();
          this._removeInactiveBindingsForAction(action2);
        }
        delete actionsByClip[clipUuid];
      }
    },
    uncacheRoot: function(root) {
      const rootUuid = root.uuid, actionsByClip = this._actionsByClip;
      for (const clipUuid in actionsByClip) {
        const actionByRoot = actionsByClip[clipUuid].actionByRoot, action2 = actionByRoot[rootUuid];
        if (action2 !== void 0) {
          this._deactivateAction(action2);
          this._removeInactiveAction(action2);
        }
      }
      const bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid];
      if (bindingByName !== void 0) {
        for (const trackName in bindingByName) {
          const binding = bindingByName[trackName];
          binding.restoreOriginalState();
          this._removeInactiveBinding(binding);
        }
      }
    },
    uncacheAction: function(clip, optionalRoot) {
      const action2 = this.existingAction(clip, optionalRoot);
      if (action2 !== null) {
        this._deactivateAction(action2);
        this._removeInactiveAction(action2);
      }
    }
  });
  var Uniform = class {
    constructor(value) {
      if (typeof value === "string") {
        console.warn("THREE.Uniform: Type parameter is no longer needed.");
        value = arguments[1];
      }
      this.value = value;
    }
    clone() {
      return new Uniform(this.value.clone === void 0 ? this.value : this.value.clone());
    }
  };
  function InstancedInterleavedBuffer(array, stride, meshPerAttribute) {
    InterleavedBuffer.call(this, array, stride);
    this.meshPerAttribute = meshPerAttribute || 1;
  }
  InstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {
    constructor: InstancedInterleavedBuffer,
    isInstancedInterleavedBuffer: true,
    copy: function(source) {
      InterleavedBuffer.prototype.copy.call(this, source);
      this.meshPerAttribute = source.meshPerAttribute;
      return this;
    },
    clone: function(data) {
      const ib = InterleavedBuffer.prototype.clone.call(this, data);
      ib.meshPerAttribute = this.meshPerAttribute;
      return ib;
    },
    toJSON: function(data) {
      const json = InterleavedBuffer.prototype.toJSON.call(this, data);
      json.isInstancedInterleavedBuffer = true;
      json.meshPerAttribute = this.meshPerAttribute;
      return json;
    }
  });
  function GLBufferAttribute(buffer, type, itemSize, elementSize, count) {
    this.buffer = buffer;
    this.type = type;
    this.itemSize = itemSize;
    this.elementSize = elementSize;
    this.count = count;
    this.version = 0;
  }
  Object.defineProperty(GLBufferAttribute.prototype, "needsUpdate", {
    set: function(value) {
      if (value === true)
        this.version++;
    }
  });
  Object.assign(GLBufferAttribute.prototype, {
    isGLBufferAttribute: true,
    setBuffer: function(buffer) {
      this.buffer = buffer;
      return this;
    },
    setType: function(type, elementSize) {
      this.type = type;
      this.elementSize = elementSize;
      return this;
    },
    setItemSize: function(itemSize) {
      this.itemSize = itemSize;
      return this;
    },
    setCount: function(count) {
      this.count = count;
      return this;
    }
  });
  function Raycaster(origin, direction, near, far) {
    this.ray = new Ray(origin, direction);
    this.near = near || 0;
    this.far = far || Infinity;
    this.camera = null;
    this.layers = new Layers();
    this.params = {
      Mesh: {},
      Line: {threshold: 1},
      LOD: {},
      Points: {threshold: 1},
      Sprite: {}
    };
    Object.defineProperties(this.params, {
      PointCloud: {
        get: function() {
          console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");
          return this.Points;
        }
      }
    });
  }
  function ascSort(a, b) {
    return a.distance - b.distance;
  }
  function intersectObject(object, raycaster2, intersects2, recursive) {
    if (object.layers.test(raycaster2.layers)) {
      object.raycast(raycaster2, intersects2);
    }
    if (recursive === true) {
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        intersectObject(children[i], raycaster2, intersects2, true);
      }
    }
  }
  Object.assign(Raycaster.prototype, {
    set: function(origin, direction) {
      this.ray.set(origin, direction);
    },
    setFromCamera: function(coords, camera2) {
      if (camera2 && camera2.isPerspectiveCamera) {
        this.ray.origin.setFromMatrixPosition(camera2.matrixWorld);
        this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera2).sub(this.ray.origin).normalize();
        this.camera = camera2;
      } else if (camera2 && camera2.isOrthographicCamera) {
        this.ray.origin.set(coords.x, coords.y, (camera2.near + camera2.far) / (camera2.near - camera2.far)).unproject(camera2);
        this.ray.direction.set(0, 0, -1).transformDirection(camera2.matrixWorld);
        this.camera = camera2;
      } else {
        console.error("THREE.Raycaster: Unsupported camera type.");
      }
    },
    intersectObject: function(object, recursive, optionalTarget) {
      const intersects2 = optionalTarget || [];
      intersectObject(object, this, intersects2, recursive);
      intersects2.sort(ascSort);
      return intersects2;
    },
    intersectObjects: function(objects, recursive, optionalTarget) {
      const intersects2 = optionalTarget || [];
      if (Array.isArray(objects) === false) {
        console.warn("THREE.Raycaster.intersectObjects: objects is not an Array.");
        return intersects2;
      }
      for (let i = 0, l = objects.length; i < l; i++) {
        intersectObject(objects[i], this, intersects2, recursive);
      }
      intersects2.sort(ascSort);
      return intersects2;
    }
  });
  var Spherical = class {
    constructor(radius = 1, phi = 0, theta = 0) {
      this.radius = radius;
      this.phi = phi;
      this.theta = theta;
      return this;
    }
    set(radius, phi, theta) {
      this.radius = radius;
      this.phi = phi;
      this.theta = theta;
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(other) {
      this.radius = other.radius;
      this.phi = other.phi;
      this.theta = other.theta;
      return this;
    }
    makeSafe() {
      const EPS = 1e-6;
      this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
      return this;
    }
    setFromVector3(v) {
      return this.setFromCartesianCoords(v.x, v.y, v.z);
    }
    setFromCartesianCoords(x, y, z) {
      this.radius = Math.sqrt(x * x + y * y + z * z);
      if (this.radius === 0) {
        this.theta = 0;
        this.phi = 0;
      } else {
        this.theta = Math.atan2(x, z);
        this.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1));
      }
      return this;
    }
  };
  var _vector$7 = /* @__PURE__ */ new Vector2();
  var Box2 = class {
    constructor(min, max) {
      Object.defineProperty(this, "isBox2", {value: true});
      this.min = min !== void 0 ? min : new Vector2(Infinity, Infinity);
      this.max = max !== void 0 ? max : new Vector2(-Infinity, -Infinity);
    }
    set(min, max) {
      this.min.copy(min);
      this.max.copy(max);
      return this;
    }
    setFromPoints(points) {
      this.makeEmpty();
      for (let i = 0, il = points.length; i < il; i++) {
        this.expandByPoint(points[i]);
      }
      return this;
    }
    setFromCenterAndSize(center, size) {
      const halfSize = _vector$7.copy(size).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
    makeEmpty() {
      this.min.x = this.min.y = Infinity;
      this.max.x = this.max.y = -Infinity;
      return this;
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y;
    }
    getCenter(target) {
      if (target === void 0) {
        console.warn("THREE.Box2: .getCenter() target is now required");
        target = new Vector2();
      }
      return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
      if (target === void 0) {
        console.warn("THREE.Box2: .getSize() target is now required");
        target = new Vector2();
      }
      return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
    expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
    expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
    containsPoint(point) {
      return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
    }
    containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
    }
    getParameter(point, target) {
      if (target === void 0) {
        console.warn("THREE.Box2: .getParameter() target is now required");
        target = new Vector2();
      }
      return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
    }
    intersectsBox(box) {
      return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
    }
    clampPoint(point, target) {
      if (target === void 0) {
        console.warn("THREE.Box2: .clampPoint() target is now required");
        target = new Vector2();
      }
      return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
      const clampedPoint = _vector$7.copy(point).clamp(this.min, this.max);
      return clampedPoint.sub(point).length();
    }
    intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max);
      return this;
    }
    union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
    translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
    equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  };
  var _startP = /* @__PURE__ */ new Vector3();
  var _startEnd = /* @__PURE__ */ new Vector3();
  var Line3 = class {
    constructor(start, end) {
      this.start = start !== void 0 ? start : new Vector3();
      this.end = end !== void 0 ? end : new Vector3();
    }
    set(start, end) {
      this.start.copy(start);
      this.end.copy(end);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(line) {
      this.start.copy(line.start);
      this.end.copy(line.end);
      return this;
    }
    getCenter(target) {
      if (target === void 0) {
        console.warn("THREE.Line3: .getCenter() target is now required");
        target = new Vector3();
      }
      return target.addVectors(this.start, this.end).multiplyScalar(0.5);
    }
    delta(target) {
      if (target === void 0) {
        console.warn("THREE.Line3: .delta() target is now required");
        target = new Vector3();
      }
      return target.subVectors(this.end, this.start);
    }
    distanceSq() {
      return this.start.distanceToSquared(this.end);
    }
    distance() {
      return this.start.distanceTo(this.end);
    }
    at(t, target) {
      if (target === void 0) {
        console.warn("THREE.Line3: .at() target is now required");
        target = new Vector3();
      }
      return this.delta(target).multiplyScalar(t).add(this.start);
    }
    closestPointToPointParameter(point, clampToLine) {
      _startP.subVectors(point, this.start);
      _startEnd.subVectors(this.end, this.start);
      const startEnd2 = _startEnd.dot(_startEnd);
      const startEnd_startP = _startEnd.dot(_startP);
      let t = startEnd_startP / startEnd2;
      if (clampToLine) {
        t = MathUtils.clamp(t, 0, 1);
      }
      return t;
    }
    closestPointToPoint(point, clampToLine, target) {
      const t = this.closestPointToPointParameter(point, clampToLine);
      if (target === void 0) {
        console.warn("THREE.Line3: .closestPointToPoint() target is now required");
        target = new Vector3();
      }
      return this.delta(target).multiplyScalar(t).add(this.start);
    }
    applyMatrix4(matrix) {
      this.start.applyMatrix4(matrix);
      this.end.applyMatrix4(matrix);
      return this;
    }
    equals(line) {
      return line.start.equals(this.start) && line.end.equals(this.end);
    }
  };
  function ImmediateRenderObject(material) {
    Object3D.call(this);
    this.material = material;
    this.render = function() {
    };
    this.hasPositions = false;
    this.hasNormals = false;
    this.hasColors = false;
    this.hasUvs = false;
    this.positionArray = null;
    this.normalArray = null;
    this.colorArray = null;
    this.uvArray = null;
    this.count = 0;
  }
  ImmediateRenderObject.prototype = Object.create(Object3D.prototype);
  ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;
  ImmediateRenderObject.prototype.isImmediateRenderObject = true;
  var _vector$9 = /* @__PURE__ */ new Vector3();
  var _boneMatrix = /* @__PURE__ */ new Matrix4();
  var _matrixWorldInv = /* @__PURE__ */ new Matrix4();
  var SkeletonHelper = class extends LineSegments {
    constructor(object) {
      const bones = getBoneList(object);
      const geometry = new BufferGeometry();
      const vertices = [];
      const colors = [];
      const color1 = new Color(0, 0, 1);
      const color2 = new Color(0, 1, 0);
      for (let i = 0; i < bones.length; i++) {
        const bone = bones[i];
        if (bone.parent && bone.parent.isBone) {
          vertices.push(0, 0, 0);
          vertices.push(0, 0, 0);
          colors.push(color1.r, color1.g, color1.b);
          colors.push(color2.r, color2.g, color2.b);
        }
      }
      geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
      const material = new LineBasicMaterial({vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true});
      super(geometry, material);
      this.type = "SkeletonHelper";
      this.isSkeletonHelper = true;
      this.root = object;
      this.bones = bones;
      this.matrix = object.matrixWorld;
      this.matrixAutoUpdate = false;
    }
    updateMatrixWorld(force) {
      const bones = this.bones;
      const geometry = this.geometry;
      const position = geometry.getAttribute("position");
      _matrixWorldInv.copy(this.root.matrixWorld).invert();
      for (let i = 0, j = 0; i < bones.length; i++) {
        const bone = bones[i];
        if (bone.parent && bone.parent.isBone) {
          _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);
          _vector$9.setFromMatrixPosition(_boneMatrix);
          position.setXYZ(j, _vector$9.x, _vector$9.y, _vector$9.z);
          _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);
          _vector$9.setFromMatrixPosition(_boneMatrix);
          position.setXYZ(j + 1, _vector$9.x, _vector$9.y, _vector$9.z);
          j += 2;
        }
      }
      geometry.getAttribute("position").needsUpdate = true;
      super.updateMatrixWorld(force);
    }
  };
  function getBoneList(object) {
    const boneList = [];
    if (object && object.isBone) {
      boneList.push(object);
    }
    for (let i = 0; i < object.children.length; i++) {
      boneList.push.apply(boneList, getBoneList(object.children[i]));
    }
    return boneList;
  }
  var GridHelper = class extends LineSegments {
    constructor(size = 10, divisions = 10, color1 = 4473924, color2 = 8947848) {
      color1 = new Color(color1);
      color2 = new Color(color2);
      const center = divisions / 2;
      const step = size / divisions;
      const halfSize = size / 2;
      const vertices = [], colors = [];
      for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {
        vertices.push(-halfSize, 0, k, halfSize, 0, k);
        vertices.push(k, 0, -halfSize, k, 0, halfSize);
        const color = i === center ? color1 : color2;
        color.toArray(colors, j);
        j += 3;
        color.toArray(colors, j);
        j += 3;
        color.toArray(colors, j);
        j += 3;
        color.toArray(colors, j);
        j += 3;
      }
      const geometry = new BufferGeometry();
      geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
      const material = new LineBasicMaterial({vertexColors: true, toneMapped: false});
      super(geometry, material);
      this.type = "GridHelper";
    }
  };
  var _floatView = new Float32Array(1);
  var _int32View = new Int32Array(_floatView.buffer);
  var LOD_MIN = 4;
  var LOD_MAX = 8;
  var SIZE_MAX = Math.pow(2, LOD_MAX);
  var EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
  var TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
  var ENCODINGS = {
    [LinearEncoding]: 0,
    [sRGBEncoding]: 1,
    [RGBEEncoding]: 2,
    [RGBM7Encoding]: 3,
    [RGBM16Encoding]: 4,
    [RGBDEncoding]: 5,
    [GammaEncoding]: 6
  };
  var PHI = (1 + Math.sqrt(5)) / 2;
  var INV_PHI = 1 / PHI;
  var _axisDirections = [
    /* @__PURE__ */ new Vector3(1, 1, 1),
    /* @__PURE__ */ new Vector3(-1, 1, 1),
    /* @__PURE__ */ new Vector3(1, 1, -1),
    /* @__PURE__ */ new Vector3(-1, 1, -1),
    /* @__PURE__ */ new Vector3(0, PHI, INV_PHI),
    /* @__PURE__ */ new Vector3(0, PHI, -INV_PHI),
    /* @__PURE__ */ new Vector3(INV_PHI, 0, PHI),
    /* @__PURE__ */ new Vector3(-INV_PHI, 0, PHI),
    /* @__PURE__ */ new Vector3(PHI, INV_PHI, 0),
    /* @__PURE__ */ new Vector3(-PHI, INV_PHI, 0)
  ];
  Curve.create = function(construct, getPoint) {
    console.log("THREE.Curve.create() has been deprecated");
    construct.prototype = Object.create(Curve.prototype);
    construct.prototype.constructor = construct;
    construct.prototype.getPoint = getPoint;
    return construct;
  };
  Object.assign(CurvePath.prototype, {
    createPointsGeometry: function(divisions) {
      console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
      const pts = this.getPoints(divisions);
      return this.createGeometry(pts);
    },
    createSpacedPointsGeometry: function(divisions) {
      console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
      const pts = this.getSpacedPoints(divisions);
      return this.createGeometry(pts);
    },
    createGeometry: function(points) {
      console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
      const geometry = new Geometry();
      for (let i = 0, l = points.length; i < l; i++) {
        const point = points[i];
        geometry.vertices.push(new Vector3(point.x, point.y, point.z || 0));
      }
      return geometry;
    }
  });
  Object.assign(Path.prototype, {
    fromPoints: function(points) {
      console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");
      return this.setFromPoints(points);
    }
  });
  function ClosedSplineCurve3(points) {
    console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
    CatmullRomCurve3.call(this, points);
    this.type = "catmullrom";
    this.closed = true;
  }
  ClosedSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);
  function SplineCurve3(points) {
    console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
    CatmullRomCurve3.call(this, points);
    this.type = "catmullrom";
  }
  SplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);
  function Spline(points) {
    console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");
    CatmullRomCurve3.call(this, points);
    this.type = "catmullrom";
  }
  Spline.prototype = Object.create(CatmullRomCurve3.prototype);
  Object.assign(Spline.prototype, {
    initFromArray: function() {
      console.error("THREE.Spline: .initFromArray() has been removed.");
    },
    getControlPointsArray: function() {
      console.error("THREE.Spline: .getControlPointsArray() has been removed.");
    },
    reparametrizeByArcLength: function() {
      console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
    }
  });
  GridHelper.prototype.setColors = function() {
    console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
  };
  SkeletonHelper.prototype.update = function() {
    console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
  };
  Object.assign(Loader.prototype, {
    extractUrlBase: function(url) {
      console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
      return LoaderUtils.extractUrlBase(url);
    }
  });
  Loader.Handlers = {
    add: function() {
      console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.");
    },
    get: function() {
      console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.");
    }
  };
  Object.assign(Box2.prototype, {
    center: function(optionalTarget) {
      console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
      return this.getCenter(optionalTarget);
    },
    empty: function() {
      console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");
      return this.isEmpty();
    },
    isIntersectionBox: function(box) {
      console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
      return this.intersectsBox(box);
    },
    size: function(optionalTarget) {
      console.warn("THREE.Box2: .size() has been renamed to .getSize().");
      return this.getSize(optionalTarget);
    }
  });
  Object.assign(Box3.prototype, {
    center: function(optionalTarget) {
      console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
      return this.getCenter(optionalTarget);
    },
    empty: function() {
      console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");
      return this.isEmpty();
    },
    isIntersectionBox: function(box) {
      console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
      return this.intersectsBox(box);
    },
    isIntersectionSphere: function(sphere) {
      console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
      return this.intersectsSphere(sphere);
    },
    size: function(optionalTarget) {
      console.warn("THREE.Box3: .size() has been renamed to .getSize().");
      return this.getSize(optionalTarget);
    }
  });
  Object.assign(Sphere.prototype, {
    empty: function() {
      console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty().");
      return this.isEmpty();
    }
  });
  Frustum.prototype.setFromMatrix = function(m) {
    console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().");
    return this.setFromProjectionMatrix(m);
  };
  Line3.prototype.center = function(optionalTarget) {
    console.warn("THREE.Line3: .center() has been renamed to .getCenter().");
    return this.getCenter(optionalTarget);
  };
  Object.assign(MathUtils, {
    random16: function() {
      console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");
      return Math.random();
    },
    nearestPowerOfTwo: function(value) {
      console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");
      return MathUtils.floorPowerOfTwo(value);
    },
    nextPowerOfTwo: function(value) {
      console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");
      return MathUtils.ceilPowerOfTwo(value);
    }
  });
  Object.assign(Matrix3.prototype, {
    flattenToArrayOffset: function(array, offset) {
      console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
      return this.toArray(array, offset);
    },
    multiplyVector3: function(vector) {
      console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
      return vector.applyMatrix3(this);
    },
    multiplyVector3Array: function() {
      console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
    },
    applyToBufferAttribute: function(attribute) {
      console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.");
      return attribute.applyMatrix3(this);
    },
    applyToVector3Array: function() {
      console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
    },
    getInverse: function(matrix) {
      console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");
      return this.copy(matrix).invert();
    }
  });
  Object.assign(Matrix4.prototype, {
    extractPosition: function(m) {
      console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
      return this.copyPosition(m);
    },
    flattenToArrayOffset: function(array, offset) {
      console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
      return this.toArray(array, offset);
    },
    getPosition: function() {
      console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
      return new Vector3().setFromMatrixColumn(this, 3);
    },
    setRotationFromQuaternion: function(q) {
      console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
      return this.makeRotationFromQuaternion(q);
    },
    multiplyToArray: function() {
      console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
    },
    multiplyVector3: function(vector) {
      console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");
      return vector.applyMatrix4(this);
    },
    multiplyVector4: function(vector) {
      console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
      return vector.applyMatrix4(this);
    },
    multiplyVector3Array: function() {
      console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
    },
    rotateAxis: function(v) {
      console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
      v.transformDirection(this);
    },
    crossVector: function(vector) {
      console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
      return vector.applyMatrix4(this);
    },
    translate: function() {
      console.error("THREE.Matrix4: .translate() has been removed.");
    },
    rotateX: function() {
      console.error("THREE.Matrix4: .rotateX() has been removed.");
    },
    rotateY: function() {
      console.error("THREE.Matrix4: .rotateY() has been removed.");
    },
    rotateZ: function() {
      console.error("THREE.Matrix4: .rotateZ() has been removed.");
    },
    rotateByAxis: function() {
      console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
    },
    applyToBufferAttribute: function(attribute) {
      console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.");
      return attribute.applyMatrix4(this);
    },
    applyToVector3Array: function() {
      console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
    },
    makeFrustum: function(left, right, bottom, top, near, far) {
      console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
      return this.makePerspective(left, right, top, bottom, near, far);
    },
    getInverse: function(matrix) {
      console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");
      return this.copy(matrix).invert();
    }
  });
  Plane.prototype.isIntersectionLine = function(line) {
    console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");
    return this.intersectsLine(line);
  };
  Object.assign(Quaternion.prototype, {
    multiplyVector3: function(vector) {
      console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
      return vector.applyQuaternion(this);
    },
    inverse: function() {
      console.warn("THREE.Quaternion: .inverse() has been renamed to invert().");
      return this.invert();
    }
  });
  Object.assign(Ray.prototype, {
    isIntersectionBox: function(box) {
      console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
      return this.intersectsBox(box);
    },
    isIntersectionPlane: function(plane) {
      console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");
      return this.intersectsPlane(plane);
    },
    isIntersectionSphere: function(sphere) {
      console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
      return this.intersectsSphere(sphere);
    }
  });
  Object.assign(Triangle.prototype, {
    area: function() {
      console.warn("THREE.Triangle: .area() has been renamed to .getArea().");
      return this.getArea();
    },
    barycoordFromPoint: function(point, target) {
      console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
      return this.getBarycoord(point, target);
    },
    midpoint: function(target) {
      console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");
      return this.getMidpoint(target);
    },
    normal: function(target) {
      console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
      return this.getNormal(target);
    },
    plane: function(target) {
      console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");
      return this.getPlane(target);
    }
  });
  Object.assign(Triangle, {
    barycoordFromPoint: function(point, a, b, c, target) {
      console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
      return Triangle.getBarycoord(point, a, b, c, target);
    },
    normal: function(a, b, c, target) {
      console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
      return Triangle.getNormal(a, b, c, target);
    }
  });
  Object.assign(Shape.prototype, {
    extractAllPoints: function(divisions) {
      console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");
      return this.extractPoints(divisions);
    },
    extrude: function(options) {
      console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
      return new ExtrudeGeometry(this, options);
    },
    makeGeometry: function(options) {
      console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");
      return new ShapeGeometry(this, options);
    }
  });
  Object.assign(Vector2.prototype, {
    fromAttribute: function(attribute, index, offset) {
      console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");
      return this.fromBufferAttribute(attribute, index, offset);
    },
    distanceToManhattan: function(v) {
      console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
      return this.manhattanDistanceTo(v);
    },
    lengthManhattan: function() {
      console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");
      return this.manhattanLength();
    }
  });
  Object.assign(Vector3.prototype, {
    setEulerFromRotationMatrix: function() {
      console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
    },
    setEulerFromQuaternion: function() {
      console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
    },
    getPositionFromMatrix: function(m) {
      console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
      return this.setFromMatrixPosition(m);
    },
    getScaleFromMatrix: function(m) {
      console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
      return this.setFromMatrixScale(m);
    },
    getColumnFromMatrix: function(index, matrix) {
      console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
      return this.setFromMatrixColumn(matrix, index);
    },
    applyProjection: function(m) {
      console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");
      return this.applyMatrix4(m);
    },
    fromAttribute: function(attribute, index, offset) {
      console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");
      return this.fromBufferAttribute(attribute, index, offset);
    },
    distanceToManhattan: function(v) {
      console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
      return this.manhattanDistanceTo(v);
    },
    lengthManhattan: function() {
      console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
      return this.manhattanLength();
    }
  });
  Object.assign(Vector4.prototype, {
    fromAttribute: function(attribute, index, offset) {
      console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");
      return this.fromBufferAttribute(attribute, index, offset);
    },
    lengthManhattan: function() {
      console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");
      return this.manhattanLength();
    }
  });
  Object.assign(Geometry.prototype, {
    computeTangents: function() {
      console.error("THREE.Geometry: .computeTangents() has been removed.");
    },
    computeLineDistances: function() {
      console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.");
    },
    applyMatrix: function(matrix) {
      console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().");
      return this.applyMatrix4(matrix);
    }
  });
  Object.assign(Object3D.prototype, {
    getChildByName: function(name) {
      console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
      return this.getObjectByName(name);
    },
    renderDepth: function() {
      console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
    },
    translate: function(distance, axis) {
      console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
      return this.translateOnAxis(axis, distance);
    },
    getWorldRotation: function() {
      console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
    },
    applyMatrix: function(matrix) {
      console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().");
      return this.applyMatrix4(matrix);
    }
  });
  Object.defineProperties(Object3D.prototype, {
    eulerOrder: {
      get: function() {
        console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
        return this.rotation.order;
      },
      set: function(value) {
        console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
        this.rotation.order = value;
      }
    },
    useQuaternion: {
      get: function() {
        console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
      },
      set: function() {
        console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
      }
    }
  });
  Object.assign(Mesh.prototype, {
    setDrawMode: function() {
      console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
    }
  });
  Object.defineProperties(Mesh.prototype, {
    drawMode: {
      get: function() {
        console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.");
        return TrianglesDrawMode;
      },
      set: function() {
        console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
      }
    }
  });
  Object.defineProperties(LOD.prototype, {
    objects: {
      get: function() {
        console.warn("THREE.LOD: .objects has been renamed to .levels.");
        return this.levels;
      }
    }
  });
  Object.defineProperty(Skeleton.prototype, "useVertexTexture", {
    get: function() {
      console.warn("THREE.Skeleton: useVertexTexture has been removed.");
    },
    set: function() {
      console.warn("THREE.Skeleton: useVertexTexture has been removed.");
    }
  });
  SkinnedMesh.prototype.initBones = function() {
    console.error("THREE.SkinnedMesh: initBones() has been removed.");
  };
  Object.defineProperty(Curve.prototype, "__arcLengthDivisions", {
    get: function() {
      console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
      return this.arcLengthDivisions;
    },
    set: function(value) {
      console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
      this.arcLengthDivisions = value;
    }
  });
  PerspectiveCamera.prototype.setLens = function(focalLength, filmGauge) {
    console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
    if (filmGauge !== void 0)
      this.filmGauge = filmGauge;
    this.setFocalLength(focalLength);
  };
  Object.defineProperties(Light.prototype, {
    onlyShadow: {
      set: function() {
        console.warn("THREE.Light: .onlyShadow has been removed.");
      }
    },
    shadowCameraFov: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
        this.shadow.camera.fov = value;
      }
    },
    shadowCameraLeft: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");
        this.shadow.camera.left = value;
      }
    },
    shadowCameraRight: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");
        this.shadow.camera.right = value;
      }
    },
    shadowCameraTop: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
        this.shadow.camera.top = value;
      }
    },
    shadowCameraBottom: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
        this.shadow.camera.bottom = value;
      }
    },
    shadowCameraNear: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");
        this.shadow.camera.near = value;
      }
    },
    shadowCameraFar: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");
        this.shadow.camera.far = value;
      }
    },
    shadowCameraVisible: {
      set: function() {
        console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
      }
    },
    shadowBias: {
      set: function(value) {
        console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
        this.shadow.bias = value;
      }
    },
    shadowDarkness: {
      set: function() {
        console.warn("THREE.Light: .shadowDarkness has been removed.");
      }
    },
    shadowMapWidth: {
      set: function(value) {
        console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");
        this.shadow.mapSize.width = value;
      }
    },
    shadowMapHeight: {
      set: function(value) {
        console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");
        this.shadow.mapSize.height = value;
      }
    }
  });
  Object.defineProperties(BufferAttribute.prototype, {
    length: {
      get: function() {
        console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
        return this.array.length;
      }
    },
    dynamic: {
      get: function() {
        console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
        return this.usage === DynamicDrawUsage;
      },
      set: function() {
        console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
        this.setUsage(DynamicDrawUsage);
      }
    }
  });
  Object.assign(BufferAttribute.prototype, {
    setDynamic: function(value) {
      console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.");
      this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
      return this;
    },
    copyIndicesArray: function() {
      console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
    },
    setArray: function() {
      console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
    }
  });
  Object.assign(BufferGeometry.prototype, {
    addIndex: function(index) {
      console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");
      this.setIndex(index);
    },
    addAttribute: function(name, attribute) {
      console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().");
      if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {
        console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).");
        return this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));
      }
      if (name === "index") {
        console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.");
        this.setIndex(attribute);
        return this;
      }
      return this.setAttribute(name, attribute);
    },
    addDrawCall: function(start, count, indexOffset) {
      if (indexOffset !== void 0) {
        console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");
      }
      console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
      this.addGroup(start, count);
    },
    clearDrawCalls: function() {
      console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
      this.clearGroups();
    },
    computeTangents: function() {
      console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
    },
    computeOffsets: function() {
      console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
    },
    removeAttribute: function(name) {
      console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().");
      return this.deleteAttribute(name);
    },
    applyMatrix: function(matrix) {
      console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().");
      return this.applyMatrix4(matrix);
    }
  });
  Object.defineProperties(BufferGeometry.prototype, {
    drawcalls: {
      get: function() {
        console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
        return this.groups;
      }
    },
    offsets: {
      get: function() {
        console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
        return this.groups;
      }
    }
  });
  Object.defineProperties(InstancedBufferGeometry.prototype, {
    maxInstancedCount: {
      get: function() {
        console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.");
        return this.instanceCount;
      },
      set: function(value) {
        console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.");
        this.instanceCount = value;
      }
    }
  });
  Object.defineProperties(Raycaster.prototype, {
    linePrecision: {
      get: function() {
        console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.");
        return this.params.Line.threshold;
      },
      set: function(value) {
        console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.");
        this.params.Line.threshold = value;
      }
    }
  });
  Object.defineProperties(InterleavedBuffer.prototype, {
    dynamic: {
      get: function() {
        console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");
        return this.usage === DynamicDrawUsage;
      },
      set: function(value) {
        console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");
        this.setUsage(value);
      }
    }
  });
  Object.assign(InterleavedBuffer.prototype, {
    setDynamic: function(value) {
      console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.");
      this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
      return this;
    },
    setArray: function() {
      console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
    }
  });
  Object.assign(ExtrudeBufferGeometry.prototype, {
    getArrays: function() {
      console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.");
    },
    addShapeList: function() {
      console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.");
    },
    addShape: function() {
      console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.");
    }
  });
  Object.assign(Scene.prototype, {
    dispose: function() {
      console.error("THREE.Scene: .dispose() has been removed.");
    }
  });
  Object.defineProperties(Uniform.prototype, {
    dynamic: {
      set: function() {
        console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
      }
    },
    onUpdate: {
      value: function() {
        console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");
        return this;
      }
    }
  });
  Object.defineProperties(Material.prototype, {
    wrapAround: {
      get: function() {
        console.warn("THREE.Material: .wrapAround has been removed.");
      },
      set: function() {
        console.warn("THREE.Material: .wrapAround has been removed.");
      }
    },
    overdraw: {
      get: function() {
        console.warn("THREE.Material: .overdraw has been removed.");
      },
      set: function() {
        console.warn("THREE.Material: .overdraw has been removed.");
      }
    },
    wrapRGB: {
      get: function() {
        console.warn("THREE.Material: .wrapRGB has been removed.");
        return new Color();
      }
    },
    shading: {
      get: function() {
        console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
      },
      set: function(value) {
        console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
        this.flatShading = value === FlatShading;
      }
    },
    stencilMask: {
      get: function() {
        console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
        return this.stencilFuncMask;
      },
      set: function(value) {
        console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
        this.stencilFuncMask = value;
      }
    }
  });
  Object.defineProperties(MeshPhongMaterial.prototype, {
    metal: {
      get: function() {
        console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
        return false;
      },
      set: function() {
        console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
      }
    }
  });
  Object.defineProperties(MeshPhysicalMaterial.prototype, {
    transparency: {
      get: function() {
        console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.");
        return this.transmission;
      },
      set: function(value) {
        console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.");
        this.transmission = value;
      }
    }
  });
  Object.defineProperties(ShaderMaterial.prototype, {
    derivatives: {
      get: function() {
        console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
        return this.extensions.derivatives;
      },
      set: function(value) {
        console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
        this.extensions.derivatives = value;
      }
    }
  });
  Object.assign(WebGLRenderer.prototype, {
    clearTarget: function(renderTarget, color, depth, stencil) {
      console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");
      this.setRenderTarget(renderTarget);
      this.clear(color, depth, stencil);
    },
    animate: function(callback) {
      console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");
      this.setAnimationLoop(callback);
    },
    getCurrentRenderTarget: function() {
      console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
      return this.getRenderTarget();
    },
    getMaxAnisotropy: function() {
      console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");
      return this.capabilities.getMaxAnisotropy();
    },
    getPrecision: function() {
      console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");
      return this.capabilities.precision;
    },
    resetGLState: function() {
      console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
      return this.state.reset();
    },
    supportsFloatTextures: function() {
      console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
      return this.extensions.get("OES_texture_float");
    },
    supportsHalfFloatTextures: function() {
      console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");
      return this.extensions.get("OES_texture_half_float");
    },
    supportsStandardDerivatives: function() {
      console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
      return this.extensions.get("OES_standard_derivatives");
    },
    supportsCompressedTextureS3TC: function() {
      console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
      return this.extensions.get("WEBGL_compressed_texture_s3tc");
    },
    supportsCompressedTexturePVRTC: function() {
      console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");
      return this.extensions.get("WEBGL_compressed_texture_pvrtc");
    },
    supportsBlendMinMax: function() {
      console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");
      return this.extensions.get("EXT_blend_minmax");
    },
    supportsVertexTextures: function() {
      console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
      return this.capabilities.vertexTextures;
    },
    supportsInstancedArrays: function() {
      console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
      return this.extensions.get("ANGLE_instanced_arrays");
    },
    enableScissorTest: function(boolean) {
      console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");
      this.setScissorTest(boolean);
    },
    initMaterial: function() {
      console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
    },
    addPrePlugin: function() {
      console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
    },
    addPostPlugin: function() {
      console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
    },
    updateShadowMap: function() {
      console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
    },
    setFaceCulling: function() {
      console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
    },
    allocTextureUnit: function() {
      console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
    },
    setTexture: function() {
      console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
    },
    setTexture2D: function() {
      console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
    },
    setTextureCube: function() {
      console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
    },
    getActiveMipMapLevel: function() {
      console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().");
      return this.getActiveMipmapLevel();
    }
  });
  Object.defineProperties(WebGLRenderer.prototype, {
    shadowMapEnabled: {
      get: function() {
        return this.shadowMap.enabled;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
        this.shadowMap.enabled = value;
      }
    },
    shadowMapType: {
      get: function() {
        return this.shadowMap.type;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
        this.shadowMap.type = value;
      }
    },
    shadowMapCullFace: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
        return void 0;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
      }
    },
    context: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.");
        return this.getContext();
      }
    },
    vr: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr");
        return this.xr;
      }
    },
    gammaInput: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
        return false;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
      }
    },
    gammaOutput: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
        return false;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
        this.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;
      }
    },
    toneMappingWhitePoint: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
        return 1;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
      }
    }
  });
  Object.defineProperties(WebGLShadowMap.prototype, {
    cullFace: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
        return void 0;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
      }
    },
    renderReverseSided: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
        return void 0;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
      }
    },
    renderSingleSided: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
        return void 0;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
      }
    }
  });
  Object.defineProperties(WebGLRenderTarget.prototype, {
    wrapS: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
        return this.texture.wrapS;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
        this.texture.wrapS = value;
      }
    },
    wrapT: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
        return this.texture.wrapT;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
        this.texture.wrapT = value;
      }
    },
    magFilter: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
        return this.texture.magFilter;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
        this.texture.magFilter = value;
      }
    },
    minFilter: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
        return this.texture.minFilter;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
        this.texture.minFilter = value;
      }
    },
    anisotropy: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
        return this.texture.anisotropy;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
        this.texture.anisotropy = value;
      }
    },
    offset: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
        return this.texture.offset;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
        this.texture.offset = value;
      }
    },
    repeat: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
        return this.texture.repeat;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
        this.texture.repeat = value;
      }
    },
    format: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
        return this.texture.format;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
        this.texture.format = value;
      }
    },
    type: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
        return this.texture.type;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
        this.texture.type = value;
      }
    },
    generateMipmaps: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
        return this.texture.generateMipmaps;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
        this.texture.generateMipmaps = value;
      }
    }
  });
  Object.defineProperties(Audio.prototype, {
    load: {
      value: function(file) {
        console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
        const scope = this;
        const audioLoader = new AudioLoader();
        audioLoader.load(file, function(buffer) {
          scope.setBuffer(buffer);
        });
        return this;
      }
    },
    startTime: {
      set: function() {
        console.warn("THREE.Audio: .startTime is now .play( delay ).");
      }
    }
  });
  AudioAnalyser.prototype.getData = function() {
    console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
    return this.getFrequencyData();
  };
  CubeCamera.prototype.updateCubeMap = function(renderer2, scene2) {
    console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");
    return this.update(renderer2, scene2);
  };
  CubeCamera.prototype.clear = function(renderer2, color, depth, stencil) {
    console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear().");
    return this.renderTarget.clear(renderer2, color, depth, stencil);
  };
  ImageUtils.crossOrigin = void 0;
  ImageUtils.loadTexture = function(url, mapping, onLoad, onError) {
    console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
    const loader = new TextureLoader();
    loader.setCrossOrigin(this.crossOrigin);
    const texture = loader.load(url, onLoad, void 0, onError);
    if (mapping)
      texture.mapping = mapping;
    return texture;
  };
  ImageUtils.loadTextureCube = function(urls, mapping, onLoad, onError) {
    console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
    const loader = new CubeTextureLoader();
    loader.setCrossOrigin(this.crossOrigin);
    const texture = loader.load(urls, onLoad, void 0, onError);
    if (mapping)
      texture.mapping = mapping;
    return texture;
  };
  ImageUtils.loadCompressedTexture = function() {
    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
  };
  ImageUtils.loadCompressedTextureCube = function() {
    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
  };
  if (typeof __THREE_DEVTOOLS__ !== "undefined") {
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {detail: {
      revision: REVISION
    }}));
  }

  // node_modules/three/examples/jsm/controls/OrbitControls.js
  var OrbitControls = function(object, domElement) {
    if (domElement === void 0)
      console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.');
    if (domElement === document)
      console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.');
    this.object = object;
    this.domElement = domElement;
    this.enabled = true;
    this.target = new Vector3();
    this.minDistance = 0;
    this.maxDistance = Infinity;
    this.minZoom = 0;
    this.maxZoom = Infinity;
    this.minPolarAngle = 0;
    this.maxPolarAngle = Math.PI;
    this.minAzimuthAngle = -Infinity;
    this.maxAzimuthAngle = Infinity;
    this.enableDamping = false;
    this.dampingFactor = 0.05;
    this.enableZoom = true;
    this.zoomSpeed = 1;
    this.enableRotate = true;
    this.rotateSpeed = 1;
    this.enablePan = true;
    this.panSpeed = 1;
    this.screenSpacePanning = true;
    this.keyPanSpeed = 7;
    this.autoRotate = false;
    this.autoRotateSpeed = 2;
    this.enableKeys = true;
    this.keys = {LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40};
    this.mouseButtons = {LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN};
    this.touches = {ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN};
    this.target0 = this.target.clone();
    this.position0 = this.object.position.clone();
    this.zoom0 = this.object.zoom;
    this.getPolarAngle = function() {
      return spherical.phi;
    };
    this.getAzimuthalAngle = function() {
      return spherical.theta;
    };
    this.saveState = function() {
      scope.target0.copy(scope.target);
      scope.position0.copy(scope.object.position);
      scope.zoom0 = scope.object.zoom;
    };
    this.reset = function() {
      scope.target.copy(scope.target0);
      scope.object.position.copy(scope.position0);
      scope.object.zoom = scope.zoom0;
      scope.object.updateProjectionMatrix();
      scope.dispatchEvent(changeEvent);
      scope.update();
      state = STATE.NONE;
    };
    this.update = function() {
      var offset = new Vector3();
      var quat = new Quaternion().setFromUnitVectors(object.up, new Vector3(0, 1, 0));
      var quatInverse = quat.clone().invert();
      var lastPosition = new Vector3();
      var lastQuaternion = new Quaternion();
      var twoPI = 2 * Math.PI;
      return function update2() {
        var position = scope.object.position;
        offset.copy(position).sub(scope.target);
        offset.applyQuaternion(quat);
        spherical.setFromVector3(offset);
        if (scope.autoRotate && state === STATE.NONE) {
          rotateLeft(getAutoRotationAngle());
        }
        if (scope.enableDamping) {
          spherical.theta += sphericalDelta.theta * scope.dampingFactor;
          spherical.phi += sphericalDelta.phi * scope.dampingFactor;
        } else {
          spherical.theta += sphericalDelta.theta;
          spherical.phi += sphericalDelta.phi;
        }
        var min = scope.minAzimuthAngle;
        var max = scope.maxAzimuthAngle;
        if (isFinite(min) && isFinite(max)) {
          if (min < -Math.PI)
            min += twoPI;
          else if (min > Math.PI)
            min -= twoPI;
          if (max < -Math.PI)
            max += twoPI;
          else if (max > Math.PI)
            max -= twoPI;
          if (min <= max) {
            spherical.theta = Math.max(min, Math.min(max, spherical.theta));
          } else {
            spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);
          }
        }
        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
        spherical.makeSafe();
        spherical.radius *= scale;
        spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius));
        if (scope.enableDamping === true) {
          scope.target.addScaledVector(panOffset, scope.dampingFactor);
        } else {
          scope.target.add(panOffset);
        }
        offset.setFromSpherical(spherical);
        offset.applyQuaternion(quatInverse);
        position.copy(scope.target).add(offset);
        scope.object.lookAt(scope.target);
        if (scope.enableDamping === true) {
          sphericalDelta.theta *= 1 - scope.dampingFactor;
          sphericalDelta.phi *= 1 - scope.dampingFactor;
          panOffset.multiplyScalar(1 - scope.dampingFactor);
        } else {
          sphericalDelta.set(0, 0, 0);
          panOffset.set(0, 0, 0);
        }
        scale = 1;
        if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {
          scope.dispatchEvent(changeEvent);
          lastPosition.copy(scope.object.position);
          lastQuaternion.copy(scope.object.quaternion);
          zoomChanged = false;
          return true;
        }
        return false;
      };
    }();
    this.dispose = function() {
      scope.domElement.removeEventListener("contextmenu", onContextMenu, false);
      scope.domElement.removeEventListener("pointerdown", onPointerDown, false);
      scope.domElement.removeEventListener("wheel", onMouseWheel, false);
      scope.domElement.removeEventListener("touchstart", onTouchStart, false);
      scope.domElement.removeEventListener("touchend", onTouchEnd, false);
      scope.domElement.removeEventListener("touchmove", onTouchMove, false);
      scope.domElement.ownerDocument.removeEventListener("pointermove", onPointerMove, false);
      scope.domElement.ownerDocument.removeEventListener("pointerup", onPointerUp, false);
      scope.domElement.removeEventListener("keydown", onKeyDown, false);
    };
    var scope = this;
    var changeEvent = {type: "change"};
    var startEvent = {type: "start"};
    var endEvent = {type: "end"};
    var STATE = {
      NONE: -1,
      ROTATE: 0,
      DOLLY: 1,
      PAN: 2,
      TOUCH_ROTATE: 3,
      TOUCH_PAN: 4,
      TOUCH_DOLLY_PAN: 5,
      TOUCH_DOLLY_ROTATE: 6
    };
    var state = STATE.NONE;
    var EPS = 1e-6;
    var spherical = new Spherical();
    var sphericalDelta = new Spherical();
    var scale = 1;
    var panOffset = new Vector3();
    var zoomChanged = false;
    var rotateStart = new Vector2();
    var rotateEnd = new Vector2();
    var rotateDelta = new Vector2();
    var panStart = new Vector2();
    var panEnd = new Vector2();
    var panDelta = new Vector2();
    var dollyStart = new Vector2();
    var dollyEnd = new Vector2();
    var dollyDelta = new Vector2();
    function getAutoRotationAngle() {
      return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
    }
    function getZoomScale() {
      return Math.pow(0.95, scope.zoomSpeed);
    }
    function rotateLeft(angle) {
      sphericalDelta.theta -= angle;
    }
    function rotateUp(angle) {
      sphericalDelta.phi -= angle;
    }
    var panLeft = function() {
      var v = new Vector3();
      return function panLeft2(distance, objectMatrix) {
        v.setFromMatrixColumn(objectMatrix, 0);
        v.multiplyScalar(-distance);
        panOffset.add(v);
      };
    }();
    var panUp = function() {
      var v = new Vector3();
      return function panUp2(distance, objectMatrix) {
        if (scope.screenSpacePanning === true) {
          v.setFromMatrixColumn(objectMatrix, 1);
        } else {
          v.setFromMatrixColumn(objectMatrix, 0);
          v.crossVectors(scope.object.up, v);
        }
        v.multiplyScalar(distance);
        panOffset.add(v);
      };
    }();
    var pan = function() {
      var offset = new Vector3();
      return function pan2(deltaX, deltaY) {
        var element = scope.domElement;
        if (scope.object.isPerspectiveCamera) {
          var position = scope.object.position;
          offset.copy(position).sub(scope.target);
          var targetDistance = offset.length();
          targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180);
          panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
          panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);
        } else if (scope.object.isOrthographicCamera) {
          panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
          panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);
        } else {
          console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");
          scope.enablePan = false;
        }
      };
    }();
    function dollyOut(dollyScale) {
      if (scope.object.isPerspectiveCamera) {
        scale /= dollyScale;
      } else if (scope.object.isOrthographicCamera) {
        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));
        scope.object.updateProjectionMatrix();
        zoomChanged = true;
      } else {
        console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
        scope.enableZoom = false;
      }
    }
    function dollyIn(dollyScale) {
      if (scope.object.isPerspectiveCamera) {
        scale *= dollyScale;
      } else if (scope.object.isOrthographicCamera) {
        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));
        scope.object.updateProjectionMatrix();
        zoomChanged = true;
      } else {
        console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
        scope.enableZoom = false;
      }
    }
    function handleMouseDownRotate(event) {
      rotateStart.set(event.clientX, event.clientY);
    }
    function handleMouseDownDolly(event) {
      dollyStart.set(event.clientX, event.clientY);
    }
    function handleMouseDownPan(event) {
      panStart.set(event.clientX, event.clientY);
    }
    function handleMouseMoveRotate(event) {
      rotateEnd.set(event.clientX, event.clientY);
      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
      var element = scope.domElement;
      rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);
      rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
      rotateStart.copy(rotateEnd);
      scope.update();
    }
    function handleMouseMoveDolly(event) {
      dollyEnd.set(event.clientX, event.clientY);
      dollyDelta.subVectors(dollyEnd, dollyStart);
      if (dollyDelta.y > 0) {
        dollyOut(getZoomScale());
      } else if (dollyDelta.y < 0) {
        dollyIn(getZoomScale());
      }
      dollyStart.copy(dollyEnd);
      scope.update();
    }
    function handleMouseMovePan(event) {
      panEnd.set(event.clientX, event.clientY);
      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
      pan(panDelta.x, panDelta.y);
      panStart.copy(panEnd);
      scope.update();
    }
    function handleMouseUp() {
    }
    function handleMouseWheel(event) {
      if (event.deltaY < 0) {
        dollyIn(getZoomScale());
      } else if (event.deltaY > 0) {
        dollyOut(getZoomScale());
      }
      scope.update();
    }
    function handleKeyDown(event) {
      var needsUpdate = false;
      switch (event.keyCode) {
        case scope.keys.UP:
          pan(0, scope.keyPanSpeed);
          needsUpdate = true;
          break;
        case scope.keys.BOTTOM:
          pan(0, -scope.keyPanSpeed);
          needsUpdate = true;
          break;
        case scope.keys.LEFT:
          pan(scope.keyPanSpeed, 0);
          needsUpdate = true;
          break;
        case scope.keys.RIGHT:
          pan(-scope.keyPanSpeed, 0);
          needsUpdate = true;
          break;
      }
      if (needsUpdate) {
        event.preventDefault();
        scope.update();
      }
    }
    function handleTouchStartRotate(event) {
      if (event.touches.length == 1) {
        rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);
      } else {
        var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);
        var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);
        rotateStart.set(x, y);
      }
    }
    function handleTouchStartPan(event) {
      if (event.touches.length == 1) {
        panStart.set(event.touches[0].pageX, event.touches[0].pageY);
      } else {
        var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);
        var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);
        panStart.set(x, y);
      }
    }
    function handleTouchStartDolly(event) {
      var dx = event.touches[0].pageX - event.touches[1].pageX;
      var dy = event.touches[0].pageY - event.touches[1].pageY;
      var distance = Math.sqrt(dx * dx + dy * dy);
      dollyStart.set(0, distance);
    }
    function handleTouchStartDollyPan(event) {
      if (scope.enableZoom)
        handleTouchStartDolly(event);
      if (scope.enablePan)
        handleTouchStartPan(event);
    }
    function handleTouchStartDollyRotate(event) {
      if (scope.enableZoom)
        handleTouchStartDolly(event);
      if (scope.enableRotate)
        handleTouchStartRotate(event);
    }
    function handleTouchMoveRotate(event) {
      if (event.touches.length == 1) {
        rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);
      } else {
        var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);
        var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);
        rotateEnd.set(x, y);
      }
      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
      var element = scope.domElement;
      rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);
      rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
      rotateStart.copy(rotateEnd);
    }
    function handleTouchMovePan(event) {
      if (event.touches.length == 1) {
        panEnd.set(event.touches[0].pageX, event.touches[0].pageY);
      } else {
        var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);
        var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);
        panEnd.set(x, y);
      }
      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
      pan(panDelta.x, panDelta.y);
      panStart.copy(panEnd);
    }
    function handleTouchMoveDolly(event) {
      var dx = event.touches[0].pageX - event.touches[1].pageX;
      var dy = event.touches[0].pageY - event.touches[1].pageY;
      var distance = Math.sqrt(dx * dx + dy * dy);
      dollyEnd.set(0, distance);
      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));
      dollyOut(dollyDelta.y);
      dollyStart.copy(dollyEnd);
    }
    function handleTouchMoveDollyPan(event) {
      if (scope.enableZoom)
        handleTouchMoveDolly(event);
      if (scope.enablePan)
        handleTouchMovePan(event);
    }
    function handleTouchMoveDollyRotate(event) {
      if (scope.enableZoom)
        handleTouchMoveDolly(event);
      if (scope.enableRotate)
        handleTouchMoveRotate(event);
    }
    function handleTouchEnd() {
    }
    function onPointerDown(event) {
      if (scope.enabled === false)
        return;
      switch (event.pointerType) {
        case "mouse":
        case "pen":
          onMouseDown(event);
          break;
      }
    }
    function onPointerMove(event) {
      if (scope.enabled === false)
        return;
      switch (event.pointerType) {
        case "mouse":
        case "pen":
          onMouseMove(event);
          break;
      }
    }
    function onPointerUp(event) {
      switch (event.pointerType) {
        case "mouse":
        case "pen":
          onMouseUp(event);
          break;
      }
    }
    function onMouseDown(event) {
      event.preventDefault();
      scope.domElement.focus ? scope.domElement.focus() : window.focus();
      var mouseAction;
      switch (event.button) {
        case 0:
          mouseAction = scope.mouseButtons.LEFT;
          break;
        case 1:
          mouseAction = scope.mouseButtons.MIDDLE;
          break;
        case 2:
          mouseAction = scope.mouseButtons.RIGHT;
          break;
        default:
          mouseAction = -1;
      }
      switch (mouseAction) {
        case MOUSE.DOLLY:
          if (scope.enableZoom === false)
            return;
          handleMouseDownDolly(event);
          state = STATE.DOLLY;
          break;
        case MOUSE.ROTATE:
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            if (scope.enablePan === false)
              return;
            handleMouseDownPan(event);
            state = STATE.PAN;
          } else {
            if (scope.enableRotate === false)
              return;
            handleMouseDownRotate(event);
            state = STATE.ROTATE;
          }
          break;
        case MOUSE.PAN:
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            if (scope.enableRotate === false)
              return;
            handleMouseDownRotate(event);
            state = STATE.ROTATE;
          } else {
            if (scope.enablePan === false)
              return;
            handleMouseDownPan(event);
            state = STATE.PAN;
          }
          break;
        default:
          state = STATE.NONE;
      }
      if (state !== STATE.NONE) {
        scope.domElement.ownerDocument.addEventListener("pointermove", onPointerMove, false);
        scope.domElement.ownerDocument.addEventListener("pointerup", onPointerUp, false);
        scope.dispatchEvent(startEvent);
      }
    }
    function onMouseMove(event) {
      if (scope.enabled === false)
        return;
      event.preventDefault();
      switch (state) {
        case STATE.ROTATE:
          if (scope.enableRotate === false)
            return;
          handleMouseMoveRotate(event);
          break;
        case STATE.DOLLY:
          if (scope.enableZoom === false)
            return;
          handleMouseMoveDolly(event);
          break;
        case STATE.PAN:
          if (scope.enablePan === false)
            return;
          handleMouseMovePan(event);
          break;
      }
    }
    function onMouseUp(event) {
      scope.domElement.ownerDocument.removeEventListener("pointermove", onPointerMove, false);
      scope.domElement.ownerDocument.removeEventListener("pointerup", onPointerUp, false);
      if (scope.enabled === false)
        return;
      handleMouseUp(event);
      scope.dispatchEvent(endEvent);
      state = STATE.NONE;
    }
    function onMouseWheel(event) {
      if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE)
        return;
      event.preventDefault();
      event.stopPropagation();
      scope.dispatchEvent(startEvent);
      handleMouseWheel(event);
      scope.dispatchEvent(endEvent);
    }
    function onKeyDown(event) {
      if (scope.enabled === false || scope.enableKeys === false || scope.enablePan === false)
        return;
      handleKeyDown(event);
    }
    function onTouchStart(event) {
      if (scope.enabled === false)
        return;
      event.preventDefault();
      switch (event.touches.length) {
        case 1:
          switch (scope.touches.ONE) {
            case TOUCH.ROTATE:
              if (scope.enableRotate === false)
                return;
              handleTouchStartRotate(event);
              state = STATE.TOUCH_ROTATE;
              break;
            case TOUCH.PAN:
              if (scope.enablePan === false)
                return;
              handleTouchStartPan(event);
              state = STATE.TOUCH_PAN;
              break;
            default:
              state = STATE.NONE;
          }
          break;
        case 2:
          switch (scope.touches.TWO) {
            case TOUCH.DOLLY_PAN:
              if (scope.enableZoom === false && scope.enablePan === false)
                return;
              handleTouchStartDollyPan(event);
              state = STATE.TOUCH_DOLLY_PAN;
              break;
            case TOUCH.DOLLY_ROTATE:
              if (scope.enableZoom === false && scope.enableRotate === false)
                return;
              handleTouchStartDollyRotate(event);
              state = STATE.TOUCH_DOLLY_ROTATE;
              break;
            default:
              state = STATE.NONE;
          }
          break;
        default:
          state = STATE.NONE;
      }
      if (state !== STATE.NONE) {
        scope.dispatchEvent(startEvent);
      }
    }
    function onTouchMove(event) {
      if (scope.enabled === false)
        return;
      event.preventDefault();
      event.stopPropagation();
      switch (state) {
        case STATE.TOUCH_ROTATE:
          if (scope.enableRotate === false)
            return;
          handleTouchMoveRotate(event);
          scope.update();
          break;
        case STATE.TOUCH_PAN:
          if (scope.enablePan === false)
            return;
          handleTouchMovePan(event);
          scope.update();
          break;
        case STATE.TOUCH_DOLLY_PAN:
          if (scope.enableZoom === false && scope.enablePan === false)
            return;
          handleTouchMoveDollyPan(event);
          scope.update();
          break;
        case STATE.TOUCH_DOLLY_ROTATE:
          if (scope.enableZoom === false && scope.enableRotate === false)
            return;
          handleTouchMoveDollyRotate(event);
          scope.update();
          break;
        default:
          state = STATE.NONE;
      }
    }
    function onTouchEnd(event) {
      if (scope.enabled === false)
        return;
      handleTouchEnd(event);
      scope.dispatchEvent(endEvent);
      state = STATE.NONE;
    }
    function onContextMenu(event) {
      if (scope.enabled === false)
        return;
      event.preventDefault();
    }
    scope.domElement.addEventListener("contextmenu", onContextMenu, false);
    scope.domElement.addEventListener("pointerdown", onPointerDown, false);
    scope.domElement.addEventListener("wheel", onMouseWheel, false);
    scope.domElement.addEventListener("touchstart", onTouchStart, false);
    scope.domElement.addEventListener("touchend", onTouchEnd, false);
    scope.domElement.addEventListener("touchmove", onTouchMove, false);
    scope.domElement.addEventListener("keydown", onKeyDown, false);
    this.update();
  };
  OrbitControls.prototype = Object.create(EventDispatcher.prototype);
  OrbitControls.prototype.constructor = OrbitControls;
  var MapControls = function(object, domElement) {
    OrbitControls.call(this, object, domElement);
    this.screenSpacePanning = false;
    this.mouseButtons.LEFT = MOUSE.PAN;
    this.mouseButtons.RIGHT = MOUSE.ROTATE;
    this.touches.ONE = TOUCH.PAN;
    this.touches.TWO = TOUCH.DOLLY_ROTATE;
  };
  MapControls.prototype = Object.create(EventDispatcher.prototype);
  MapControls.prototype.constructor = MapControls;

  // lib/anim/index.js
  var es6_tween2 = __toModule(require_Tween_min());

  // lib/anim/UserDraw.js
  var fabric = __toModule(require_fabric());
  var DEMOS = [
    `<path d="M2,2 L8,8" />`,
    `<path d="M2,8 L5,2 L8,8" />`,
    `<path d="M2,2 Q8,2 8,8" />`,
    `<path d="M2,5 C2,8 8,8 8,5" />`,
    `<path d="M2,2 L8,2 L2,5 L8,5 L2,8 L8,8" />`,
    `<path d="M2,5 A 5 25 0 0 1 8 8" />`,
    `<path d="M2,5 S2,-2 4,5 S7,8 8,4" />`,
    `<path d="M5,2 Q 2,5 5,8" />`,
    `<path d="M2,2 Q5,2 5,5 T8,8" />`
  ];
  var demoIndex = 0;
  var playing = false;
  var timeout = null;
  var lastPath;
  var init_userdraw = (selector, size, onPathCreated2) => {
    let uc = document.querySelector(selector);
    uc.setAttribute("width", `${size}px`);
    uc.setAttribute("height", `${size}px`);
    var canvas = new fabric.fabric.Canvas(selector.replace("#", ""));
    canvas.backgroundColor = "#fff";
    canvas.isDrawingMode = 1;
    canvas.freeDrawingBrush.color = "#000";
    canvas.freeDrawingBrush.width = 10;
    canvas.renderAll();
    canvas.on("mouse:down", (e) => {
      if (lastPath) {
        canvas.remove(...canvas.getObjects());
      }
    });
    canvas.on("path:created", (e) => {
      lastPath = e.path;
      const svg = lastPath.toSVG();
      const parser = new DOMParser();
      const doc = parser.parseFromString(`<svg xmlns="http://www.w3.org/2000/svg">${svg}</svg>`, "image/svg+xml");
      const path = doc.querySelector("path");
      onPathCreated2(path);
    });
    setTimeout(() => {
      showDrawDemo();
    }, 2e3);
  };
  var showDrawDemo = () => {
    playing = true;
    let el2 = document.querySelector("#drawdemoContainer");
    if (!el2) {
      el2 = document.createElement("div");
      el2.id = "drawdemoContainer";
      document.querySelector("#userdraw-wrapper").appendChild(el2);
      el2.addEventListener("mousedown", () => {
        hideDrawDemo();
      });
    }
    el2.innerHTML = `
		<svg viewBox="0 0 10 10">
			${DEMOS[demoIndex]}
		</svg>
	`;
    const p = el2.querySelector("path");
    p.setAttribute("fill", "white");
    p.setAttribute("stroke", "black");
    p.setAttribute("stroke-width", "0.5");
    timeout = setTimeout(() => {
      if (playing) {
        demoIndex = ++demoIndex % DEMOS.length;
        showDrawDemo();
      }
    }, 3e3);
  };
  var hideDrawDemo = () => {
    let el2 = document.querySelector("#drawdemoContainer");
    if (el2) {
      el2.remove();
    }
    clearTimeout(timeout);
    playing = false;
  };

  // lib/anim/CircleSprite.js
  var CircleSprite = class {
    constructor(parent, i, userdata, normalTexture, hoverTexture) {
      this.i = i;
      this.enabled = true;
      this.enabledSize = 0.1;
      this.normalTexture = normalTexture;
      this.hoverTexture = hoverTexture;
      this.x = 0;
      this.y = 0;
      this.z = 0;
      this.o = 0;
      this.r = 0;
      this.tx = 0;
      this.ty = 0;
      this.tz = 0;
      this.to = 0;
      this.tr = 0;
      this.material = new SpriteMaterial({
        map: normalTexture,
        transparent: true,
        depthTest: false,
        depthWrite: false,
        color: 16777215
      });
      this.el = new Sprite(this.material);
      this.el.userData.i = this.i;
      this.el.userData.data = userdata;
      parent.add(this.el);
      setTimeout(() => {
        this.tx = -1 + 2 * Math.random();
        this.ty = -1 + 2 * Math.random();
        this.tz = -1 + 2 * Math.random();
        this.tr = this.enabledSize;
        this.setTarget({x: this.tx, y: this.ty, z: this.tz, o: this.to, r: this.tr});
      }, 10);
      setTimeout(() => {
        this.to = 1;
        this.setTarget({x: this.tx, y: this.ty, z: this.tz, o: this.to, r: this.tr});
      }, 500);
    }
    setTarget(obj) {
      const {x = this.x, y = this.y, z = this.z, o, r} = obj;
      this.tx = x;
      this.ty = y;
      this.tz = z;
      this.to = o ? o : this.enabled ? 1 : 0;
      this.tr = r ? r : this.enabled ? this.enabledSize : 0;
    }
    normal() {
      this.enabled = true;
      this.material.color.set("#fff");
      this.setTarget({x: this.x, y: this.y, z: this.z, o: 1, r: this.enabledSize});
      this.material.map = this.normalTexture;
    }
    hide() {
      this.enabled = false;
      this.material.color.set("#fff");
      this.setTarget({x: this.x, y: this.y, z: this.z, o: 0, r: 0});
      this.material.map = this.normalTexture;
    }
    focus() {
      this.enabled = true;
      this.setTarget({x: 0, y: 0, z: 0, o: 1, r: 3});
      this.material.map = this.normalTexture;
    }
    hover() {
      this.material.map = this.hoverTexture;
      this.tr = this.enabledSize * 1.5;
      this.tz = -0.05;
    }
    unhover() {
      this.material.map = this.normalTexture;
      this.tr = this.enabledSize;
      this.tz = 0;
    }
    setEnabled(bool) {
      this.enabled = bool;
      if (this.enabled) {
        this.normal();
      } else {
        this.hide();
      }
    }
    update() {
      this.x = this.tx - (this.tx - this.x) * 0.9;
      this.y = this.ty - (this.ty - this.y) * 0.9;
      this.z = this.tz - (this.tz - this.z) * 0.9;
      this.o = this.to - (this.to - this.o) * 0.9;
      this.r = this.tr - (this.tr - this.r) * 0.9;
      this.el.scale.set(this.r, this.r, 1);
      this.el.position.set(this.x, this.y, this.z);
      this.material.opacity = this.o;
    }
  };

  // lib/anim/Eraser.js
  var es6_tween = __toModule(require_Tween_min());
  var ERASER_OPACITY_HIGH = 0.1;
  var ERASER_OPACITY_LOW = 1e-3;
  var Eraser = class {
    constructor() {
      this.o = 1;
      this.to = 1;
      this.material = new SpriteMaterial({color: 0, transparent: true, opacity: 1});
      this.el = new Sprite(this.material);
      this.el.position.set(0, 0, -100);
      const s = Math.max(window.innerWidth, window.innerHeight);
      this.el.scale.set(s, s, 1);
    }
    setTargetOpacity(opacity, time = 300) {
      this.to = opacity;
      console.log("# Eraser setTargetOpacity", this.to);
    }
    blendUp(target = ERASER_OPACITY_HIGH) {
      this.to = target;
      console.log("# Eraser blendUp", this.to);
    }
    blendDown(target = ERASER_OPACITY_LOW) {
      this.to = target || ERASER_OPACITY_LOW;
      console.log("# Eraser blendDown", this.to);
    }
    upDown(delay = 1e3) {
      this.blendUp();
      setTimeout(() => {
        this.blendDown();
      }, delay);
    }
    clearScreen() {
      console.log("# Eraser clearScreen");
      this.o = 1;
      this.to = 1;
      this.material.opacity = 1;
      this.material.transparent = false;
      setTimeout(() => {
        this.material.transparent = true;
      }, 100);
    }
    update() {
      this.o = this.to - (this.to - this.o) * 0.9;
      this.material.opacity = this.o;
    }
  };

  // lib/anim/GenerateTexture.js
  var GenerateTexture = (stroke = "#eee", fill = "#fff", lineWidth = 10) => {
    const canvas = document.createElement("canvas");
    const size = 512;
    canvas.width = size;
    canvas.height = size;
    const c = canvas.getContext("2d");
    c.lineWidth = lineWidth;
    c.strokeStyle = stroke;
    c.fillStyle = fill;
    const s = size / 2;
    c.beginPath();
    c.arc(s, s, s - c.lineWidth, 0, Math.PI * 2, false);
    c.fill();
    c.stroke();
    c.closePath();
    const map = new Texture(canvas);
    map.needsUpdate = true;
    return map;
  };

  // lib/anim/index.js
  var DRAWING_SIZE = 200;
  var MODE = "free";
  var K_AUTO_ROTATION = true;
  var balls = [];
  var numballs = DATA_STUDENTS.length || 20;
  var camera;
  var renderer;
  var scene;
  var controls;
  var clock;
  var group;
  var eraser;
  var targetQuat;
  var originQuat;
  var currentFilter;
  var currentThemeFilterValue = "";
  var initAnimation = (selector) => {
    es6_tween2.autoPlay(true);
    init_userdraw("#userdraw", DRAWING_SIZE, onPathCreated);
    init_scene(selector);
    init_balls();
    update();
    return void 0;
  };
  var init_scene = (selector) => {
    window.app.pauseRendering = false;
    window.addEventListener("resize", OnWindowResize, false);
    window.addEventListener("mousemove", onDocumentMouseMove, false);
    document.querySelector(selector).addEventListener("click", onDocumentMouseDown);
    clock = new Clock();
    renderer = new WebGLRenderer({preserveDrawingBuffer: true, antialias: true});
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.autoClearColor = false;
    renderer.domElement.id = "three";
    document.querySelector(selector).appendChild(renderer.domElement);
    scene = new Scene();
    window.app.scene = scene;
    group = new Group();
    group.rotation.set(0, Math.PI, Math.PI);
    scene.add(group);
    window.app.group = group;
    camera = new PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1e-3, 1e3);
    scene.add(camera);
    camera.position.set(0, 0, 2);
    camera.lookAt(group.position);
    window.app.camera = camera;
    controls = new OrbitControls(camera, renderer.domElement);
    controls.enableRotate = true;
    controls.enableDamping = true;
    controls.dampingFactor = 0.02;
    controls.update();
    controls.saveState();
    window.app.controls = controls;
    eraser = new Eraser();
    scene.add(eraser.el);
    window.app.eraser = eraser;
    targetQuat = new Quaternion().setFromEuler(group.rotation);
    originQuat = new Quaternion().setFromEuler(group.rotation);
  };
  var init_balls = () => {
    const normalTexture = GenerateTexture("#eee", "#fff", 10);
    const hoverTexture = GenerateTexture("#fff", "#000", 20);
    for (let i = 0; i < numballs; i++) {
      balls.push(new CircleSprite(group, i, DATA_STUDENTS[i], normalTexture, hoverTexture));
    }
    window.app.balls = balls;
  };
  var speeds = [
    0.1 + Math.random() * 0.4,
    0.1 + Math.random() * 0.4,
    0.1 + Math.random() * 0.4
  ];
  var update = () => {
    requestAnimationFrame(update);
    if (window.app.pauseRendering)
      return;
    balls.forEach((b) => b.update());
    eraser.update();
    controls.update();
    const speed = 0.33;
    const elapsedTime = clock.getElapsedTime();
    if (K_AUTO_ROTATION && MODE === "free") {
      group.rotation.y = elapsedTime * speeds[0];
      group.rotation.x = elapsedTime * speeds[1];
      group.rotation.z = elapsedTime * speeds[2];
    }
    targetQuat = targetQuat.setFromEuler(group.rotation);
    group.quaternion.slerp(targetQuat, 0.01);
    if (MODE === "grid") {
      eraser.material.transparent = false;
    }
    renderer.render(scene, camera);
  };
  var OnWindowResize = () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  };
  var onPathCreated = (path) => {
    eraser.clearScreen();
    const length = path.getTotalLength();
    const inc = length / numballs;
    const positions = [];
    for (let i = 0; i < numballs; i++) {
      const p = path.getPointAtLength(inc * i);
      const x = -1 + 2 * (p.x / DRAWING_SIZE);
      const y = -1 + 2 * (p.y / DRAWING_SIZE);
      const z = 0;
      positions.push({x, y, z});
    }
    applyPositions(positions);
    window.toFree();
  };
  var applyPositions = (positions, blendMax = null, blendMin = null, hideTrailsFor = 100) => {
    eraser.clearScreen();
    let delay = 0;
    for (let i = 0; i < numballs; i++) {
      delay = i * 10;
      setTimeout(() => {
        balls[i].setTarget(positions[i]);
      }, delay);
    }
    setTimeout(() => {
      console.log("applyPositions reveal trails");
      eraser.blendDown(blendMin);
    }, delay + hideTrailsFor);
  };
  var setFilter = (key) => {
    currentFilter = key;
  };
  var applyFilter = (key, val) => {
    eraser.clearScreen();
    if (key) {
      currentFilter = key;
    }
    if (currentFilter === "all") {
      return;
    }
    if (currentFilter === "theme") {
      currentThemeFilterValue = val;
      console.log("applyFilter", key, val);
      balls.forEach((ball) => {
        if (val === false || ball.el.userData.data.theme === currentThemeFilterValue) {
          ball.setEnabled(true);
        } else {
          ball.setEnabled(false);
        }
      });
      if (val) {
        window.toGrid();
      } else {
        window.toFree();
      }
    }
    if (currentFilter === "student") {
    }
  };
  window.toFree = () => {
    console.log("toFree");
    if (MODE === "free") {
      console.log("toFree: Allready in free - aborting");
      return false;
    }
    window.app.pauseRendering = false;
    window.app.actions.hide_render_student();
    window.app.actions.action("clearThemeSelection");
    window.app.actions.action("clearFeatSelection");
    controls.enableRotate = true;
    controls.enableDamping = true;
    MODE = "free";
    balls.forEach((ball) => {
      ball.normal();
    });
  };
  var focusedNode = null;
  window.toNode = (id) => {
    if (MODE === "node") {
      console.log("toNode: Allready at node - aborting");
      return false;
    }
    MODE = "node";
    focusedNode = balls[id];
    console.log("toNode", id, focusedNode);
    balls.forEach((ball) => {
      if (ball.i != focusedNode.i) {
        ball.hide();
      }
    });
    focusedNode.focus();
    window.app.actions.render_student(focusedNode.el.userData.data.stub);
    setTimeout(() => {
      window.app.pauseRendering = true;
    }, 1e3);
    return true;
  };
  window.toGrid = () => {
    if (MODE === "grid") {
      console.log("toNode: Allready in grid - aborting");
      return false;
    }
    MODE = "grid";
    window.app.pauseRendering = false;
    window.app.actions.hide_render_student();
    controls.enableRotate = false;
    controls.enableDamping = false;
    controls.reset();
    group.rotation.set(0, Math.PI, Math.PI);
    camera.position.set(0, 0, 2);
    const scale = 0.1;
    const cols = Math.ceil(Math.sqrt(numballs));
    let y = -(cols / 2) * scale;
    let sx = -(cols / 2) * scale;
    const positions = [];
    for (let i = 0; i < numballs; i++) {
      let x = sx + i % cols * scale;
      if (i % cols === 0)
        y += scale;
      positions.push({x, y, z: 0});
    }
    applyPositions(positions, 1, null, 4e3);
  };
  var selectedObject = null;
  var selectedBall = null;
  var previousSelectedObjectId = null;
  var raycaster = new Raycaster();
  var mouseVector = new Vector3();
  var onDocumentMouseDown = () => {
    console.log("onDocumentMouseDown", MODE, previousSelectedObjectId);
    if (previousSelectedObjectId) {
      if (MODE === "node") {
        const b = balls[previousSelectedObjectId];
        console.log("un-focus node", focusedNode);
        if (focusedNode) {
          focusedNode.normal();
          focusedNode = null;
        }
        console.log("@anim onDocumentMouseDown collapse", currentFilter, currentThemeFilterValue, b);
        const theme = THEMES_EN.filter((t) => t.id === b.el.userData.data.theme)[0];
        window.location.hash = `#theme:${theme.slug}`;
      } else {
        console.log("@anim onDocumentMouseDown focus", DATA_STUDENTS[previousSelectedObjectId].name);
        window.location.hash = "#" + DATA_STUDENTS[previousSelectedObjectId].stub;
      }
    } else {
      if (MODE != "free")
        toFree();
    }
  };
  function onDocumentMouseMove(event) {
    if (MODE != "grid")
      return;
    if (event.target.id != renderer.domElement.id)
      return;
    event.preventDefault();
    if (selectedBall) {
      selectedBall.unhover();
      selectedBall = null;
    }
    const intersects2 = getIntersects(event.layerX, event.layerY);
    if (intersects2.length > 0) {
      const res = intersects2.filter((res2) => res2 && res2.object)[0];
      if (res && res.object) {
        selectedObject = res.object;
        const data = selectedObject.userData;
        const ball = balls[data.i];
        if (ball.enabled) {
          if (previousSelectedObjectId != data.i) {
            window.app.actions.setStudentSelected(data.data);
            if (document.querySelectorAll('#sidebar [data-key="students"].selected').length) {
              window.app.actions.render_students("");
            }
          }
          previousSelectedObjectId = data.i;
          selectedBall = ball;
          ball.hover();
        }
      }
    } else {
      if (previousSelectedObjectId) {
        previousSelectedObjectId = null;
        console.log("hide stud");
        window.app.actions.setStudentSelected({stub: ""});
        if (document.querySelectorAll('#sidebar [data-key="students"].selected').length) {
          window.app.actions.render_students("");
        }
      }
    }
  }
  function getIntersects(x, y) {
    x = x / window.innerWidth * 2 - 1;
    y = -(y / window.innerHeight) * 2 + 1;
    mouseVector.set(x, y, 0.5);
    raycaster.setFromCamera(mouseVector, camera);
    return raycaster.intersectObject(group, true);
  }

  // lib/search/index.js
  var el;
  var initSearch = (selector) => {
    const default_value = "SEARCH";
    document.querySelector(selector).innerHTML = `
		<input id="searchfield" name="Search" type="search" value="${default_value}" />
		<label for="searchfield" style="display:none;">search for a student</label>
	`;
    el = document.querySelector("#searchfield");
    el.addEventListener("focus", () => {
      console.log("focus", el.value);
      if (el.value.trim() === default_value) {
        el.value = "";
      }
    });
    el.addEventListener("input", search);
    el.addEventListener("keydown", search);
    el.addEventListener("paste", search);
    el.addEventListener("submit", search);
  };
  var search = () => {
    const term = el.value;
    console.log("searching for", term);
    let html = "";
    DATA_STUDENTS.forEach((s) => {
      if (s.name.indexOf(term) > -1) {
        const st = "/" + term + "/gi";
        console.log(st);
        const re = new RegExp(st);
        let text = s.name.replace(term, (match) => {
          return '<span class="highlight">' + match + "</span>";
        });
        html += `<a class="student" href="/#${s.stub}">${text}</a><br />`;
      }
    });
    document.querySelector("#content").innerHTML = html;
  };

  // index.main.js
  document.title = settings.document_title;
  document.querySelector("#logo").innerHTML = settings.title;
  window.app = {
    animation: anim_exports
  };
  window.app.actions = actions_exports;
  window.app.sidebar = init();
  window.app.search = initSearch("#search");
  initAnimation("#animation");
  window.app.router = new Router(handleHash);
  console.log(window.app);
})();
