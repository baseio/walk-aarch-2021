(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
  var __commonJS = (callback, module) => () => {
    if (!module) {
      module = {exports: {}};
      callback(module.exports, module);
    }
    return module.exports;
  };
  var __exportStar = (target, module, desc) => {
    __markAsModule(target);
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
    }
    return target;
  };
  var __toModule = (module) => {
    if (module && module.__esModule)
      return module;
    return __exportStar(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", {value: module, enumerable: true}), module);
  };

  // node_modules/es6-tween/bundled/Tween.min.js
  var require_Tween_min = __commonJS((exports, module) => {
    !function(t, e) {
      typeof exports == "object" && typeof module != "undefined" ? e(exports) : typeof define == "function" && define.amd ? define(["exports"], e) : e((t = t || self).TWEEN = {});
    }(exports, function(t) {
      "use strict";
      function s(t2) {
        var e2 = u.indexOf(t2);
        -1 < e2 && u.splice(e2, 1), u.push(t2), p = 0, l && !f && (o = c(i), f = true);
      }
      function e(t2) {
        for (var e2 = 0; e2 < u.length; e2++)
          if (t2 === u[e2])
            return u[e2];
        return null;
      }
      function F() {
        return f;
      }
      function x() {
        return d;
      }
      var o, r = typeof self != "undefined" ? self : typeof window != "undefined" ? window : typeof global != "undefined" ? global : this || (t !== void 0 ? t : {}), n = r.requestAnimationFrame || function(t2) {
        return r.setTimeout(t2, 50 / 3);
      }, a = r.cancelAnimationFrame || function(t2) {
        return r.clearTimeout(t2);
      }, C = function() {
        if (typeof process == "undefined" || process.hrtime === void 0 || process.versions && process.versions.electron !== void 0) {
          if (r.performance !== void 0 && r.performance.now !== void 0)
            return r.performance.now.bind(r.performance);
          var t2 = r.performance && r.performance.timing && r.performance.timing.navigationStart ? r.performance.timing.navigationStart : Date.now();
          return function() {
            return Date.now() - t2;
          };
        }
        return function() {
          var t3 = process.hrtime();
          return 1e3 * t3[0] + t3[1] / 1e6;
        };
      }(), u = [], f = false, l = false, h = [], c = n, p = 0, y = 120, d = true, N = function(t2) {
        var e2 = u.indexOf(t2);
        e2 !== -1 && u.splice(e2, 1), u.length === 0 && (a(o), f = false);
      }, i = function t2() {
        var e2 = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : C(), r2 = 1 < arguments.length ? arguments[1] : void 0;
        if (y <= p && d)
          return f = false, p = 0, a(o), false;
        l && f ? o = c(t2) : function() {
          for (var t3 = 0; t3 < h.length; t3++)
            h[t3]();
        }(), u.length || p++;
        for (var n2 = 0, i2 = u.length; n2 < i2; )
          u[n2++].update(e2, r2), i2 > u.length && n2--, i2 = u.length;
        return true;
      }, q = {}, v = {Linear: {None: function(t2) {
        return t2;
      }}, Quadratic: {In: function(t2) {
        return Math.pow(t2, 2);
      }, Out: function(t2) {
        return t2 * (2 - t2);
      }, InOut: function(t2) {
        return (t2 *= 2) < 1 ? 0.5 * Math.pow(t2, 2) : -0.5 * (--t2 * (t2 - 2) - 1);
      }}, Cubic: {In: function(t2) {
        return Math.pow(t2, 3);
      }, Out: function(t2) {
        return --t2 * t2 * t2 + 1;
      }, InOut: function(t2) {
        return (t2 *= 2) < 1 ? 0.5 * Math.pow(t2, 3) : 0.5 * ((t2 -= 2) * t2 * t2 + 2);
      }}, Quartic: {In: function(t2) {
        return Math.pow(t2, 4);
      }, Out: function(t2) {
        return 1 - --t2 * t2 * t2 * t2;
      }, InOut: function(t2) {
        return (t2 *= 2) < 1 ? 0.5 * Math.pow(t2, 4) : -0.5 * ((t2 -= 2) * t2 * t2 * t2 - 2);
      }}, Quintic: {In: function(t2) {
        return Math.pow(t2, 5);
      }, Out: function(t2) {
        return --t2 * t2 * t2 * t2 * t2 + 1;
      }, InOut: function(t2) {
        return (t2 *= 2) < 1 ? 0.5 * Math.pow(t2, 5) : 0.5 * ((t2 -= 2) * t2 * t2 * t2 * t2 + 2);
      }}, Sinusoidal: {In: function(t2) {
        return 1 - Math.cos(t2 * Math.PI / 2);
      }, Out: function(t2) {
        return Math.sin(t2 * Math.PI / 2);
      }, InOut: function(t2) {
        return 0.5 * (1 - Math.cos(Math.PI * t2));
      }}, Exponential: {In: function(t2) {
        return t2 === 0 ? 0 : Math.pow(1024, t2 - 1);
      }, Out: function(t2) {
        return t2 === 1 ? 1 : 1 - Math.pow(2, -10 * t2);
      }, InOut: function(t2) {
        return t2 === 0 ? 0 : t2 === 1 ? 1 : (t2 *= 2) < 1 ? 0.5 * Math.pow(1024, t2 - 1) : 0.5 * (2 - Math.pow(2, -10 * (t2 - 1)));
      }}, Circular: {In: function(t2) {
        return 1 - Math.sqrt(1 - t2 * t2);
      }, Out: function(t2) {
        return Math.sqrt(1 - --t2 * t2);
      }, InOut: function(t2) {
        return (t2 *= 2) < 1 ? -0.5 * (Math.sqrt(1 - t2 * t2) - 1) : 0.5 * (Math.sqrt(1 - (t2 -= 2) * t2) + 1);
      }}, Elastic: {In: function(t2) {
        return t2 === 0 ? 0 : t2 === 1 ? 1 : -Math.pow(2, 10 * (t2 - 1)) * Math.sin(5 * (t2 - 1.1) * Math.PI);
      }, Out: function(t2) {
        return t2 === 0 ? 0 : t2 === 1 ? 1 : Math.pow(2, -10 * t2) * Math.sin(5 * (t2 - 0.1) * Math.PI) + 1;
      }, InOut: function(t2) {
        return t2 === 0 ? 0 : t2 === 1 ? 1 : (t2 *= 2) < 1 ? -0.5 * Math.pow(2, 10 * (t2 - 1)) * Math.sin(5 * (t2 - 1.1) * Math.PI) : 0.5 * Math.pow(2, -10 * (t2 - 1)) * Math.sin(5 * (t2 - 1.1) * Math.PI) + 1;
      }}, Back: {In: function(t2) {
        return t2 * t2 * (2.70158 * t2 - 1.70158);
      }, Out: function(t2) {
        return --t2 * t2 * (2.70158 * t2 + 1.70158) + 1;
      }, InOut: function(t2) {
        var e2 = 2.5949095;
        return (t2 *= 2) < 1 ? t2 * t2 * ((1 + e2) * t2 - e2) * 0.5 : 0.5 * ((t2 -= 2) * t2 * ((1 + e2) * t2 + e2) + 2);
      }}, Bounce: {In: function(t2) {
        return 1 - v.Bounce.Out(1 - t2);
      }, Out: function(t2) {
        var e2 = 2.75, r2 = 7.5625;
        return t2 < 1 / e2 ? r2 * t2 * t2 : t2 < 2 / e2 ? r2 * (t2 -= 1.5 / e2) * t2 + 0.75 : t2 < 2.5 / e2 ? r2 * (t2 -= 2.25 / e2) * t2 + 0.9375 : r2 * (t2 -= 2.625 / e2) * t2 + 0.984375;
      }, InOut: function(t2) {
        return t2 < 0.5 ? 0.5 * v.Bounce.In(2 * t2) : 0.5 * v.Bounce.Out(2 * t2 - 1) + 0.5;
      }}, Stepped: {steps: function(e2) {
        return function(t2) {
          return (t2 * e2 | 0) / e2;
        };
      }}};
      function m(t2) {
        return (m = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t3) {
          return typeof t3;
        } : function(t3) {
          return t3 && typeof Symbol == "function" && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
        })(t2);
      }
      function _(t2, e2) {
        if (!(t2 instanceof e2))
          throw new TypeError("Cannot call a class as a function");
      }
      function g(t2, e2) {
        for (var r2 = 0; r2 < e2.length; r2++) {
          var n2 = e2[r2];
          n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t2, n2.key, n2);
        }
      }
      function b(t2, e2, r2) {
        return e2 && g(t2.prototype, e2), r2 && g(t2, r2), t2;
      }
      function T(e2, t2) {
        var r2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), r2.push.apply(r2, n2);
        }
        return r2;
      }
      function O(i2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var o2 = arguments[t2] != null ? arguments[t2] : {};
          t2 % 2 ? T(Object(o2), true).forEach(function(t3) {
            var e2, r2, n2;
            e2 = i2, n2 = o2[r2 = t3], r2 in e2 ? Object.defineProperty(e2, r2, {value: n2, enumerable: true, configurable: true, writable: true}) : e2[r2] = n2;
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(i2, Object.getOwnPropertyDescriptors(o2)) : T(Object(o2)).forEach(function(t3) {
            Object.defineProperty(i2, t3, Object.getOwnPropertyDescriptor(o2, t3));
          });
        }
        return i2;
      }
      function w(t2) {
        return (w = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
          return t3.__proto__ || Object.getPrototypeOf(t3);
        })(t2);
      }
      function k(t2, e2) {
        return (k = Object.setPrototypeOf || function(t3, e3) {
          return t3.__proto__ = e3, t3;
        })(t2, e2);
      }
      function j(t2) {
        if (t2 === void 0)
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t2;
      }
      function A(t2, e2) {
        return !e2 || typeof e2 != "object" && typeof e2 != "function" ? j(t2) : e2;
      }
      function S(t2, e2) {
        return function(t3) {
          if (Array.isArray(t3))
            return t3;
        }(t2) || function(t3, e3) {
          if (!(Symbol.iterator in Object(t3) || Object.prototype.toString.call(t3) === "[object Arguments]"))
            return;
          var r2 = [], n2 = true, i2 = false, o2 = void 0;
          try {
            for (var s2, a2 = t3[Symbol.iterator](); !(n2 = (s2 = a2.next()).done) && (r2.push(s2.value), !e3 || r2.length !== e3); n2 = true)
              ;
          } catch (t4) {
            i2 = true, o2 = t4;
          } finally {
            try {
              n2 || a2.return == null || a2.return();
            } finally {
              if (i2)
                throw o2;
            }
          }
          return r2;
        }(t2, e2) || function() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }();
      }
      var D = 50 / 3, U = "_chainedTweens", E = "Callback", V = "update", B = "complete", G = "start", z = "repeat", Q = "reverse", P = "restart", M = "STRING_PROP", R = /\s+|([A-Za-z?().,{}:""[\]#%]+)|([-+]=+)?([-+]+)?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]=?\d+)?/g;
      function I(t2) {
        if (t2 && t2.nodeType || t2 === void 0 || m(t2) !== "object")
          return t2;
        if (Array.isArray(t2))
          return [].concat(t2);
        if (m(t2) !== "object")
          return t2;
        var e2 = {};
        for (var r2 in t2)
          e2[r2] = I(t2[r2]);
        return e2;
      }
      var L = function(t2) {
        return isNaN(+t2) || (t2[0] === "+" || t2[0] === "-") && t2[1] === "=" || t2 === "" || t2 === " ";
      }, K = /^#([0-9a-f]{6}|[0-9a-f]{3})$/gi, W = function(t2, e2) {
        var r2, n2, i2;
        e2.length === 3 && (e2 = (r2 = e2[0]) + r2 + (n2 = e2[1]) + n2 + (i2 = e2[2]) + i2);
        var o2 = parseInt(e2, 16);
        return "rgb(" + (r2 = o2 >> 16 & 255) + ", " + (n2 = o2 >> 8 & 255) + ", " + (i2 = 255 & o2) + ")";
      };
      function H(t2) {
        if (t2 && t2.splice && t2.isString)
          return t2;
        if (typeof t2 != "string")
          return t2;
        if (t2.charAt(1) === "=")
          return t2;
        var e2 = t2.replace(K, W).match(R).map(function(t3) {
          return L(t3) ? t3 : +t3;
        });
        return e2.isString = true, e2;
      }
      function X(r2, n2, t2, e2) {
        var i2 = t2[r2], o2 = e2[r2];
        if (i2 === o2)
          return true;
        if (Array.isArray(i2) && Array.isArray(o2) && i2.length === o2.length)
          for (var s2 = 0, a2 = o2.length; s2 < a2; s2++) {
            var u2 = i2[s2], f2 = o2[s2];
            u2 === f2 || typeof u2 == "number" && typeof f2 == "number" || X(s2, n2[r2], i2, o2);
          }
        if (!(typeof i2 == "number" && typeof o2 == "number" || i2 && i2.splice && i2.isString && o2 && o2.splice && o2.isString)) {
          if (typeof i2 == "string" && Array.isArray(o2)) {
            var l2 = H(i2), h2 = o2.map(H);
            return t2[r2] = l2, e2[r2] = h2, true;
          }
          if (typeof i2 == "string" || typeof o2 == "string") {
            var c2 = Array.isArray(i2) && i2[0] === M ? i2 : H(i2), p2 = Array.isArray(o2) && o2[0] === M ? o2 : H(o2);
            if (c2 === void 0)
              return;
            for (var y2 = 1; y2 < c2.length; )
              c2[y2] === p2[y2] && typeof c2[y2 - 1] == "string" ? (c2.splice(y2 - 1, 2, c2[y2 - 1] + c2[y2]), p2.splice(y2 - 1, 2, p2[y2 - 1] + p2[y2])) : y2++;
            return c2[y2 = 0] === M && c2.shift(), p2[0] === M && p2.shift(), t2[r2] = c2, e2[r2] = p2, true;
          }
          if (m(i2) === "object" && m(o2) === "object") {
            if (Array.isArray(i2) && !i2.isString)
              return i2.map(function(t3, e3) {
                return X(e3, n2[r2], i2, o2);
              });
            for (var d2 in o2)
              X(d2, n2[r2], i2, o2);
            return true;
          }
        }
        return false;
      }
      var Y = "rgba(", Z = function(t2, e2, r2) {
        var n2 = 2 < arguments.length && r2 !== void 0 ? r2 : "rgb(";
        return typeof t2[e2] == "number" && (t2[e2 - 1] === n2 || t2[e2 - 3] === n2 || t2[e2 - 5] === n2);
      };
      function $(t2, e2, r2, n2, i2, o2, s2) {
        var a2 = s2 ? r2 : r2[t2], u2 = s2 ? n2 : n2[t2];
        if (u2 === void 0)
          return a2;
        if (a2 === void 0 || typeof a2 == "string" || a2 === u2)
          return u2;
        if (m(a2) === "object" && m(u2) === "object") {
          if (!a2 || !u2)
            return e2[t2];
          if (m(a2) === "object" && a2 && a2.isString && u2 && u2.splice && u2.isString) {
            for (var f2 = "", l2 = 0, h2 = a2.length; l2 < h2; l2++)
              if (a2[l2] !== u2[l2] || typeof a2[l2] != "number" || typeof u2[l2] == "number") {
                var c2 = typeof a2[l2] == "number" && typeof u2[l2] == "string" && u2[l2][1] === "=", p2 = typeof a2[l2] != "number" ? a2[l2] : c2 ? a2[l2] + parseFloat(u2[l2][0] + u2[l2].substr(2)) * i2 : a2[l2] + (u2[l2] - a2[l2]) * i2;
                (Z(a2, l2) || Z(a2, l2, Y)) && (p2 |= 0), f2 += p2, c2 && o2 === 1 && (a2[l2] = a2[l2] + parseFloat(u2[l2][0] + u2[l2].substr(2)));
              } else
                f2 += a2[l2];
            return s2 || (e2[t2] = f2), f2;
          }
          if (Array.isArray(a2) && a2[0] !== M)
            for (var y2 = 0, d2 = a2.length; y2 < d2; y2++)
              a2[y2] !== u2[y2] && typeof e2[t2] != "string" && $(y2, e2[t2], a2, u2, i2, o2);
          else if (m(a2) === "object" && a2 && !a2.isString)
            for (var v2 in a2)
              a2[v2] !== u2[v2] && $(v2, e2[t2], a2, u2, i2, o2);
        } else if (typeof a2 == "number") {
          var _2 = typeof u2 == "string";
          e2[t2] = _2 ? a2 + parseFloat(u2[0] + u2.substr(2)) * i2 : a2 + (u2 - a2) * i2, _2 && o2 === 1 && (r2[t2] = e2[t2]);
        } else
          typeof u2 == "function" && (e2[t2] = u2(i2));
        return e2[t2];
      }
      function J(t2, e2) {
        var i2 = t2[e2], o2 = e2.replace(nt, "").split(rt), s2 = o2.length - 1, a2 = Array.isArray(t2), u2 = m(t2) === "object" && !a2;
        return u2 ? (t2[e2] = null, delete t2[e2]) : a2 && t2.splice(e2, 1), o2.reduce(function(t3, e3, r2) {
          a2 && e3 !== "." && e3 !== "[" && (e3 *= 1);
          var n2 = o2[r2 + 1] === "[";
          if (e3 === "." || e3 === "[")
            return e3 === "." ? a2 = !(u2 = true) : e3 === "[" && (a2 = !(u2 = false)), t3;
          if (t3[e3] === void 0) {
            if (a2 || u2)
              return t3[e3] = r2 === s2 ? i2 : a2 || n2 ? [] : u2 ? {} : null, u2 = a2 = false, t3[e3];
          } else if (t3[e3] !== void 0)
            return r2 === s2 && (t3[e3] = i2), t3[e3];
          return t3;
        }, t2);
      }
      function tt(t2) {
        if (m(t2) === "object" && t2) {
          for (var e2 in t2)
            if (e2.indexOf(".") !== -1 || e2.indexOf("[") !== -1)
              J(t2, e2);
            else if (m(t2[e2]) === "object" && t2[e2]) {
              var r2 = t2[e2];
              for (var n2 in r2)
                if (n2.indexOf(".") !== -1 || n2.indexOf("[") !== -1)
                  J(r2, n2);
                else if (m(r2[n2]) === "object" && r2[n2]) {
                  var i2 = r2[n2];
                  for (var o2 in i2)
                    o2.indexOf(".") === -1 && o2.indexOf("[") === -1 || J(i2, o2);
                }
            }
        }
        return t2;
      }
      var et, rt = /([.[])/g, nt = /\]/g, it = Object.freeze({__proto__: null, FRAME_MS: D, TOO_LONG_FRAME_MS: 250, CHAINED_TWEENS: U, EVENT_CALLBACK: E, EVENT_UPDATE: V, EVENT_COMPLETE: B, EVENT_START: G, EVENT_REPEAT: z, EVENT_REVERSE: Q, EVENT_PAUSE: "pause", EVENT_PLAY: "play", EVENT_RESTART: P, EVENT_STOP: "stop", EVENT_SEEK: "seek", STRING_PROP: M, NUM_REGEX: R, deepCopy: I, decomposeString: H, decompose: X, RGB: "rgb(", RGBA: Y, isRGBColor: Z, recompose: $, SET_NESTED: tt}), ot = {Linear: function(t2, e2, r2) {
        var n2 = t2.length - 1, i2 = n2 * e2, o2 = Math.floor(i2), s2 = ot.Utils.Linear;
        return e2 < 0 ? s2(t2[0], t2[1], i2, r2) : 1 < e2 ? s2(t2[n2], t2[n2 - 1], n2 - i2, r2) : s2(t2[o2], t2[n2 < o2 + 1 ? n2 : o2 + 1], i2 - o2, r2);
      }, Bezier: function(t2, e2, r2) {
        for (var n2 = ot.Utils.Reset(r2), i2 = t2.length - 1, o2 = Math.pow, s2 = ot.Utils.Bernstein, a2 = Array.isArray(n2), u2 = 0; u2 <= i2; u2++)
          if (typeof n2 == "number")
            n2 += o2(1 - e2, i2 - u2) * o2(e2, u2) * t2[u2] * s2(i2, u2);
          else if (a2)
            for (var f2 = 0, l2 = n2.length; f2 < l2; f2++)
              typeof n2[f2] == "number" ? n2[f2] += o2(1 - e2, i2 - u2) * o2(e2, u2) * t2[u2][f2] * s2(i2, u2) : n2[f2] = t2[u2][f2];
          else if (m(n2) === "object")
            for (var h2 in n2)
              typeof n2[h2] == "number" ? n2[h2] += o2(1 - e2, i2 - u2) * o2(e2, u2) * t2[u2][h2] * s2(i2, u2) : n2[h2] = t2[u2][h2];
          else if (typeof n2 == "string") {
            for (var c2 = "", p2 = t2[Math.round(i2 * e2)], y2 = 1, d2 = p2.length; y2 < d2; y2++)
              c2 += p2[y2];
            return c2;
          }
        return n2;
      }, CatmullRom: function(t2, e2, r2) {
        var n2 = t2.length - 1, i2 = n2 * e2, o2 = Math.floor(i2), s2 = ot.Utils.CatmullRom;
        return t2[0] === t2[n2] ? (e2 < 0 && (o2 = Math.floor(i2 = n2 * (1 + e2))), s2(t2[(o2 - 1 + n2) % n2], t2[o2], t2[(o2 + 1) % n2], t2[(o2 + 2) % n2], i2 - o2, r2)) : e2 < 0 ? s2(t2[1], t2[1], t2[0], t2[0], -e2, r2) : 1 < e2 ? s2(t2[n2 - 1], t2[n2 - 1], t2[n2], t2[n2], (0 | e2) - e2, r2) : s2(t2[o2 ? o2 - 1 : 0], t2[o2], t2[n2 < o2 + 1 ? n2 : o2 + 1], t2[n2 < o2 + 2 ? n2 : o2 + 2], i2 - o2, r2);
      }, Utils: {Linear: function(t2, e2, r2, n2) {
        if (t2 === e2 || typeof t2 == "string") {
          if (e2.length && e2.splice && e2.isString) {
            e2 = "";
            for (var i2 = 0, o2 = t2.length; i2 < o2; i2++)
              e2 += t2[i2];
          }
          return e2;
        }
        if (typeof t2 == "number")
          return typeof t2 == "function" ? t2(r2) : t2 + (e2 - t2) * r2;
        if (m(t2) === "object") {
          if (t2.length !== void 0) {
            var s2 = typeof t2[0] == "string" || t2.isString;
            if (s2 || t2[0] === M) {
              for (var a2 = "", u2 = s2 ? 0 : 1, f2 = t2.length; u2 < f2; u2++) {
                var l2 = r2 === 0 ? t2[u2] : r2 !== 1 && typeof t2[u2] == "number" ? t2[u2] + (e2[u2] - t2[u2]) * r2 : e2[u2];
                (0 < r2 && r2 < 1 && Z(t2, u2) || Z(t2, u2, Y)) && (l2 |= 0), a2 += l2;
              }
              return a2;
            }
            if (n2 && n2.length && n2.splice)
              for (var h2 = 0, c2 = n2.length; h2 < c2; h2++)
                n2[h2] = ot.Utils.Linear(t2[h2], e2[h2], r2, n2[h2]);
          } else
            for (var p2 in n2)
              n2[p2] = ot.Utils.Linear(t2[p2], e2[p2], r2, n2[p2]);
          return n2;
        }
      }, Reset: function(t2) {
        if (Array.isArray(t2)) {
          for (var e2 = 0, r2 = t2.length; e2 < r2; e2++)
            t2[e2] = ot.Utils.Reset(t2[e2]);
          return t2;
        }
        if (m(t2) !== "object")
          return typeof t2 == "number" ? 0 : t2;
        for (var n2 in t2)
          t2[n2] = ot.Utils.Reset(t2[n2]);
        return t2;
      }, Bernstein: function(t2, e2) {
        var r2 = ot.Utils.Factorial;
        return r2(t2) / r2(e2) / r2(t2 - e2);
      }, Factorial: (et = [1], function(t2) {
        var e2 = 1;
        if (et[t2])
          return et[t2];
        for (var r2 = t2; 1 < r2; r2--)
          e2 *= r2;
        return et[t2] = e2;
      }), CatmullRom: function(t2, e2, r2, n2, i2, o2) {
        if (typeof t2 == "string")
          return e2;
        if (typeof t2 == "number") {
          var s2 = 0.5 * (r2 - t2), a2 = 0.5 * (n2 - e2), u2 = i2 * i2;
          return (2 * e2 - 2 * r2 + s2 + a2) * (i2 * u2) + (-3 * e2 + 3 * r2 - 2 * s2 - a2) * u2 + s2 * i2 + e2;
        }
        if (m(t2) === "object") {
          if (t2.length !== void 0) {
            if (t2[0] === M) {
              for (var f2 = "", l2 = 1, h2 = t2.length; l2 < h2; l2++) {
                var c2 = typeof t2[l2] == "number" ? ot.Utils.CatmullRom(t2[l2], e2[l2], r2[l2], n2[l2], i2) : n2[l2];
                (Z(t2, l2) || Z(t2, l2, Y)) && (c2 |= 0), f2 += c2;
              }
              return f2;
            }
            for (var p2 = 0, y2 = o2.length; p2 < y2; p2++)
              o2[p2] = ot.Utils.CatmullRom(t2[p2], e2[p2], r2[p2], n2[p2], i2, o2[p2]);
          } else
            for (var d2 in o2)
              o2[d2] = ot.Utils.CatmullRom(t2[d2], e2[d2], r2[d2], n2[d2], i2, o2[d2]);
          return o2;
        }
      }}}, st = {};
      function at(t2, e2, r2) {
        if (!t2 || !t2.nodeType)
          return e2;
        var n2 = t2.queueID || "q_" + Date.now();
        t2.queueID || (t2.queueID = n2);
        var i2 = st[n2];
        if (i2) {
          if (i2.object === e2 && t2 === i2.tween.node && r2._startTime === i2.tween._startTime)
            N(i2.tween);
          else if (m(e2) === "object" && e2 && i2.object) {
            for (var o2 in e2)
              o2 in i2.object && (r2._startTime === i2.tween._startTime ? delete i2.object[o2] : i2.propNormaliseRequired = true);
            Object.assign(i2.object, e2);
          }
          return i2.object;
        }
        return m(e2) === "object" && e2 ? (st[n2] = {tween: r2, object: e2, propNormaliseRequired: false}, st[n2].object) : e2;
      }
      function ut(t2, e2, r2) {
        return e2 ? t2 ? typeof window != "undefined" && t2 === window || typeof document != "undefined" && t2 === document ? [t2] : typeof t2 == "string" ? !!document.querySelectorAll && document.querySelectorAll(t2) : Array.isArray(t2) ? t2 : t2.nodeType ? [t2] : r2 ? t2 : [] : null : t2 ? typeof window != "undefined" && t2 === window || typeof document != "undefined" && t2 === document ? t2 : typeof t2 == "string" ? !!document.querySelector && document.querySelector(t2) : Array.isArray(t2) ? t2[0] : t2.nodeType || r2 ? t2 : null : null;
      }
      var ft = 0, lt = v.Linear.None, ht = function() {
        function L2(t2, e2) {
          return _(this, L2), this.id = ft++, !t2 || m(t2) !== "object" || e2 || t2.nodeType ? t2 && (t2.nodeType || t2.length || typeof t2 == "string") && (t2 = this.node = ut(t2), e2 = this.object = at(t2, e2, this)) : (e2 = this.object = t2, t2 = null), this._valuesEnd = null, this._valuesStart = Array.isArray(e2) ? [] : {}, this._duration = 1e3, this._easingFunction = lt, this._easingReverse = lt, this._interpolationFunction = ot.Linear, this._startTime = 0, this._initTime = 0, this._delayTime = 0, this._repeat = 0, this._r = 0, this._isPlaying = false, this._yoyo = false, this._reversed = false, this._onStartCallbackFired = false, this._pausedTime = null, this._isFinite = true, this._maxListener = 15, this._chainedTweensCount = 0, this._prevTime = null, this;
        }
        return b(L2, null, [{key: "fromTo", value: function(t2, e2, r2, n2) {
          var i2 = 3 < arguments.length && n2 !== void 0 ? n2 : {};
          i2.quickRender = i2.quickRender ? i2.quickRender : !r2;
          var o2 = new L2(t2, e2).to(r2, i2);
          return i2.quickRender && (o2.render().update(o2._startTime), o2._rendered = false, o2._onStartCallbackFired = false), o2;
        }}, {key: "to", value: function(t2, e2, r2) {
          return L2.fromTo(t2, null, e2, r2);
        }}, {key: "from", value: function(t2, e2, r2) {
          return L2.fromTo(t2, e2, null, r2);
        }}]), b(L2, [{key: "setMaxListener", value: function(t2) {
          var e2 = 0 < arguments.length && t2 !== void 0 ? t2 : 15;
          return this._maxListener = e2, this;
        }}, {key: "on", value: function(t2, e2) {
          for (var r2 = this._maxListener, n2 = t2 + E, i2 = 0; i2 < r2; i2++) {
            var o2 = n2 + i2;
            if (!this[o2]) {
              this[o2] = e2;
              break;
            }
          }
          return this;
        }}, {key: "once", value: function(t2, i2) {
          for (var o2 = this, e2 = this._maxListener, r2 = t2 + E, n2 = function(t3) {
            var n3 = r2 + t3;
            if (!o2[n3])
              return o2[n3] = function() {
                for (var t4 = arguments.length, e3 = new Array(t4), r3 = 0; r3 < t4; r3++)
                  e3[r3] = arguments[r3];
                i2.apply(o2, e3), o2[n3] = null;
              }, "break";
          }, s2 = 0; s2 < e2; s2++) {
            if (n2(s2) === "break")
              break;
          }
          return this;
        }}, {key: "off", value: function(t2, e2) {
          for (var r2 = this._maxListener, n2 = t2 + E, i2 = 0; i2 < r2; i2++) {
            var o2 = n2 + i2;
            this[o2] === e2 && (this[o2] = null);
          }
          return this;
        }}, {key: "emit", value: function(t2, e2, r2, n2) {
          var i2 = this._maxListener, o2 = t2 + E;
          if (!this[o2 + 0])
            return this;
          for (var s2 = 0; s2 < i2; s2++) {
            var a2 = o2 + s2;
            this[a2] && this[a2](e2, r2, n2);
          }
          return this;
        }}, {key: "isPlaying", value: function() {
          return this._isPlaying;
        }}, {key: "isStarted", value: function() {
          return this._onStartCallbackFired;
        }}, {key: "reverse", value: function(t2) {
          var e2 = this._reversed;
          return this._reversed = t2 !== void 0 ? t2 : !e2, this;
        }}, {key: "reversed", value: function() {
          return this._reversed;
        }}, {key: "pause", value: function() {
          return this._isPlaying ? (this._isPlaying = false, N(this), this._pausedTime = C(), this.emit("pause", this.object)) : this;
        }}, {key: "play", value: function() {
          return this._isPlaying ? this : (this._isPlaying = true, this._startTime += C() - this._pausedTime, this._initTime = this._startTime, s(this), this._pausedTime = C(), this.emit("play", this.object));
        }}, {key: "restart", value: function() {
          return this._repeat = this._r, this.reassignValues(), s(this), this.emit(P, this.object);
        }}, {key: "seek", value: function(t2, e2) {
          var r2 = this._duration, n2 = this._initTime, i2 = this._startTime, o2 = this._reversed, s2 = n2 + t2;
          return this._isPlaying = true, s2 < i2 && n2 <= i2 && (this._startTime -= r2, this._reversed = !o2), this.update(t2, false), this.emit("seek", t2, this.object), e2 ? this : this.pause();
        }}, {key: "duration", value: function(t2) {
          return this._duration = typeof t2 == "function" ? t2(this._duration) : t2, this;
        }}, {key: "to", value: function(t2, e2) {
          var r2 = 1 < arguments.length && e2 !== void 0 ? e2 : 1e3;
          if (this._valuesEnd = t2, typeof r2 == "number" || typeof r2 == "function")
            this._duration = typeof r2 == "function" ? r2(this._duration) : r2;
          else if (m(r2) === "object") {
            for (var n2 in r2)
              if (typeof this[n2] == "function") {
                var i2 = S(Array.isArray(r2[n2]) ? r2[n2] : [r2[n2]], 4), o2 = i2[0], s2 = o2 === void 0 ? null : o2, a2 = i2[1], u2 = a2 === void 0 ? null : a2, f2 = i2[2], l2 = f2 === void 0 ? null : f2, h2 = i2[3], c2 = h2 === void 0 ? null : h2;
                this[n2](s2, u2, l2, c2);
              }
          }
          return this;
        }}, {key: "render", value: function() {
          if (this._rendered)
            return this;
          var t2 = this._valuesStart, e2 = this._valuesEnd, r2 = this.object, n2 = this.node, i2 = this.InitialValues;
          if (tt(r2), tt(e2), n2 && n2.queueID && st[n2.queueID]) {
            var o2 = st[n2.queueID];
            if (o2.propNormaliseRequired && o2.tween !== this) {
              for (var s2 in e2)
                o2.tween._valuesEnd[s2];
              o2.normalisedProp = true, o2.propNormaliseRequired = false;
            }
          }
          if (n2 && i2 && (r2 && Object.keys(r2).length !== 0 ? e2 && Object.keys(e2).length !== 0 || (e2 = this._valuesEnd = i2(n2, r2)) : r2 = this.object = at(n2, i2(n2, e2), this)), !t2.processed) {
            for (var a2 in e2) {
              var u2 = r2 && r2[a2] && I(r2[a2]), f2 = e2[a2];
              if (!(q[a2] && q[a2].init && (q[a2].init.call(this, u2, f2, a2, r2), u2 === void 0 && t2[a2] && (u2 = t2[a2]), q[a2].skipProcess)) && !(typeof u2 == "number" && isNaN(u2) || u2 === null || f2 === null || u2 === false || f2 === false || u2 === void 0 || f2 === void 0 || u2 === f2)) {
                if (t2[a2] = u2, Array.isArray(f2))
                  if (Array.isArray(u2))
                    f2.isString && r2[a2].isString && !u2.isString ? u2.isString = true : X(a2, r2, t2, e2);
                  else {
                    f2.unshift(u2);
                    for (var l2 = 0, h2 = f2.length; l2 < h2; l2++)
                      typeof f2[l2] == "string" && (f2[l2] = H(f2[l2]));
                  }
                else
                  X(a2, r2, t2, e2);
                typeof u2 != "number" || typeof f2 != "string" || f2[1];
              }
            }
            t2.processed = true;
          }
          return L2.Renderer && this.node && L2.Renderer.init && (L2.Renderer.init.call(this, r2, t2, e2), this.__render = true), this._rendered = true, this;
        }}, {key: "start", value: function(t2) {
          return this._startTime = t2 !== void 0 ? typeof t2 == "string" ? C() + parseFloat(t2) : t2 : C(), this._startTime += this._delayTime, this._initTime = this._prevTime = this._startTime, this._onStartCallbackFired = false, this._rendered = false, this._isPlaying = true, s(this), this;
        }}, {key: "stop", value: function() {
          var t2 = this._isPlaying, e2 = this._isFinite, r2 = this.object, n2 = this._startTime, i2 = this._duration, o2 = this._r, s2 = this._yoyo, a2 = this._reversed;
          if (!t2)
            return this;
          var u2 = e2 ? (o2 + 1) % 2 == 1 : !a2;
          return this._reversed = false, s2 && u2 ? this.update(n2) : this.update(n2 + i2), N(this), this.emit("stop", r2);
        }}, {key: "delay", value: function(t2) {
          return this._delayTime = typeof t2 == "function" ? t2(this._delayTime) : t2, this;
        }}, {key: "chainedTweens", value: function() {
          if (this._chainedTweensCount = arguments.length, !this._chainedTweensCount)
            return this;
          for (var t2 = 0, e2 = this._chainedTweensCount; t2 < e2; t2++)
            this[U + t2] = arguments[t2];
          return this;
        }}, {key: "repeat", value: function(t2) {
          return this._repeat = this._duration ? typeof t2 == "function" ? t2(this._repeat) : t2 : 0, this._r = this._repeat, this._isFinite = isFinite(t2), this;
        }}, {key: "reverseDelay", value: function(t2) {
          return this._reverseDelayTime = typeof t2 == "function" ? t2(this._reverseDelayTime) : t2, this;
        }}, {key: "yoyo", value: function(t2, e2) {
          return this._yoyo = typeof t2 == "function" ? t2(this._yoyo) : t2 === null ? this._yoyo : t2, t2 || (this._reversed = false), this._easingReverse = e2 || null, this;
        }}, {key: "easing", value: function(t2) {
          return this._easingFunction = t2, this;
        }}, {key: "interpolation", value: function(t2) {
          return typeof t2 == "function" && (this._interpolationFunction = t2), this;
        }}, {key: "reassignValues", value: function(t2) {
          var e2 = this._valuesStart, r2 = this.object, n2 = this._delayTime;
          for (var i2 in this._isPlaying = true, this._startTime = t2 !== void 0 ? t2 : C(), this._startTime += n2, this._reversed = false, s(this), e2) {
            var o2 = e2[i2];
            r2[i2] = o2;
          }
          return this;
        }}, {key: "update", value: function(t2, e2, r2) {
          var n2, i2, o2, s2 = this._onStartCallbackFired, a2 = this._easingFunction, u2 = this._interpolationFunction, f2 = this._easingReverse, l2 = this._repeat, h2 = this._delayTime, c2 = this._reverseDelayTime, p2 = this._yoyo, y2 = this._reversed, d2 = this._startTime, v2 = this._prevTime, _2 = this._duration, m2 = this._valuesStart, g2 = this._valuesEnd, b2 = this.object, T2 = this._isFinite, O2 = this._isPlaying, w2 = this.__render, k2 = this._chainedTweensCount, j2 = 0;
          if (_2) {
            var A2 = (t2 = t2 !== void 0 ? t2 : C()) - v2;
            if (this._prevTime = t2, 250 < A2 && F() && x() && (t2 -= A2 - D), !O2 || t2 < d2 && !r2)
              return true;
            n2 = 1 < (n2 = (t2 - d2) / _2) ? 1 : n2, n2 = y2 ? 1 - n2 : n2;
          } else
            n2 = 1, l2 = 0;
          if (s2 || (this._rendered || (this.render(), this._rendered = true), this.emit(G, b2), this._onStartCallbackFired = true), i2 = y2 && f2 || a2, !b2)
            return true;
          for (o2 in g2) {
            var S2 = m2[o2];
            if (S2 != null || q[o2] && q[o2].update) {
              var E2 = g2[o2], P2 = i2[o2] ? i2[o2](n2) : (typeof i2 == "function" ? i2 : lt)(n2), M2 = u2[o2] ? u2[o2] : typeof u2 == "function" ? u2 : ot.Linear;
              typeof E2 == "number" ? b2[o2] = S2 + (E2 - S2) * P2 : !Array.isArray(E2) || E2.isString || Array.isArray(S2) ? E2 && E2.update ? E2.update(P2) : typeof E2 == "function" ? b2[o2] = E2(P2) : typeof E2 == "string" && typeof S2 == "number" ? b2[o2] = S2 + parseFloat(E2[0] + E2.substr(2)) * P2 : $(o2, b2, m2, g2, P2, n2) : b2[o2] = M2(E2, P2, b2[o2]), q[o2] && q[o2].update && q[o2].update.call(this, b2[o2], S2, E2, P2, n2, o2), j2++;
            }
          }
          if (!j2)
            return N(this), false;
          if (w2 && L2.Renderer && L2.Renderer.update && L2.Renderer.update.call(this, b2, n2), this.emit(V, b2, n2, t2), n2 === 1 || y2 && n2 === 0) {
            if (0 < l2 && 0 < _2) {
              if (T2 && this._repeat--, p2)
                this._reversed = !y2;
              else
                for (o2 in g2) {
                  var R2 = g2[o2];
                  typeof R2 == "string" && typeof m2[o2] == "number" && (m2[o2] += parseFloat(R2[0] + R2.substr(2)));
                }
              return this.emit(p2 && !y2 ? Q : z, b2), this._startTime = y2 && c2 ? t2 - c2 : t2 + h2, true;
            }
            if (e2 || (this._isPlaying = false, N(this), ft--), this.emit(B, b2), this._repeat = this._r, k2)
              for (var I2 = 0; I2 < k2; I2++)
                this[U + I2].start(t2 + _2);
            return false;
          }
          return true;
        }}]), L2;
      }(), ct = function() {
        function t2() {
          _(this, t2), this.totalTime = 0, this.labels = [], this.offsets = [];
        }
        return b(t2, [{key: "parseLabel", value: function(t3, e2) {
          var r2 = this.offsets, n2 = this.labels, i2 = n2.indexOf(t3);
          if (typeof t3 == "string" && t3.indexOf("=") !== -1 && !e2 && i2 === -1) {
            var o2 = t3.substr(t3.indexOf("=") - 1, 2), s2 = t3.split(o2);
            e2 = s2.length === 2 ? o2 + s2[1] : null, t3 = s2[0], i2 = n2.indexOf(t3);
          }
          if (i2 !== -1 && t3) {
            var a2 = r2[i2] || 0;
            if (typeof e2 == "number")
              a2 = e2;
            else if (typeof e2 == "string" && e2.indexOf("=") !== -1) {
              var u2 = e2.charAt(0);
              e2 = Number(e2.substr(2)), u2 === "+" || u2 === "-" ? a2 += parseFloat(u2 + e2) : u2 === "*" ? a2 *= e2 : u2 === "/" ? a2 /= e2 : u2 === "%" && (a2 *= e2 / 100);
            }
            return a2;
          }
          return typeof e2 == "number" ? e2 : 0;
        }}, {key: "addLabel", value: function(t3, e2) {
          return this.labels.push(t3), this.offsets.push(this.parseLabel(t3, e2)), this;
        }}, {key: "setLabel", value: function(t3, e2) {
          var r2 = this.labels.indexOf(t3);
          return r2 !== -1 && this.offsets.splice(r2, 1, this.parseLabel(t3, e2)), this;
        }}, {key: "eraseLabel", value: function(t3) {
          var e2 = this.labels.indexOf(t3);
          return e2 !== -1 && (this.labels.splice(e2, 1), this.offsets.splice(e2, 1)), this;
        }}]), t2;
      }(), pt = 0, yt = function() {
        function r2(t2) {
          var e2;
          return _(this, r2), (e2 = A(this, w(r2).call(this)))._duration = 0, e2._startTime = t2 && t2.startTime !== void 0 ? t2.startTime : C(), e2._tweens = [], e2.elapsed = 0, e2._id = pt++, e2._defaultParams = t2, e2.position = new ct(), e2.position.addLabel("afterLast", e2._duration), e2.position.addLabel("afterInit", e2._startTime), e2._onStartCallbackFired = false, A(e2, j(e2));
        }
        return function(t2, e2) {
          if (typeof e2 != "function" && e2 !== null)
            throw new TypeError("Super expression must either be null or a function");
          t2.prototype = Object.create(e2 && e2.prototype, {constructor: {value: t2, writable: true, configurable: true}}), e2 && k(t2, e2);
        }(r2, ht), b(r2, [{key: "mapTotal", value: function(t2) {
          return t2.call(this, this._tweens), this;
        }}, {key: "timingOrder", value: function(t2) {
          var r3 = t2(this._tweens.map(function(t3) {
            return t3._startTime;
          }));
          return this._tweens.map(function(t3, e2) {
            t3._startTime = r3[e2];
          }), this;
        }}, {key: "getTiming", value: function(t2, e2, r3, n2) {
          var i2 = 3 < arguments.length && n2 !== void 0 ? n2 : 0;
          if (t2 === "reverse") {
            var o2 = r3.stagger, s2 = (o2 || 0) * (e2.length - 1);
            return e2.map(function(t3, e3) {
              return s2 - (o2 || 0) * e3 + i2;
            });
          }
          if (t2 === "async")
            return e2.map(function(t3) {
              return i2;
            });
          if (t2 === "sequence" || t2 === "delayed") {
            var a2 = r3.stagger;
            return a2 = a2 || (r3.duration || 1e3) / (e2.length - 1), e2.map(function(t3, e3) {
              return a2 * e3 + i2;
            });
          }
          if (t2 === "oneByOne")
            return e2.map(function(t3) {
              return r3.duration;
            });
          if (t2 === "shuffle") {
            var u2 = r3.stagger;
            return function(t3) {
              var e3, r4, n3;
              for (n3 = t3.length; n3; --n3)
                e3 = Math.floor(Math.random() * n3), r4 = t3[n3 - 1], t3[n3 - 1] = t3[e3], t3[e3] = r4;
              return t3;
            }(e2.map(function(t3, e3) {
              return (u2 || 0) * e3 + i2;
            }));
          }
          var f2 = r3.stagger;
          return e2.map(function(t3, e3) {
            return (f2 || 0) * e3 + i2;
          });
        }}, {key: "fromTo", value: function(t2, e2, r3, n2) {
          if ((t2 = ut(t2, true, true)) && t2.length) {
            this._defaultParams && (n2 = n2 ? O({}, this._defaultParams, {}, n2) : this._defaultParams);
            for (var i2, o2 = n2.label, s2 = typeof o2 == "number" ? o2 : this.position.parseLabel(o2 !== void 0 ? o2 : "afterLast", null), a2 = this.getTiming(n2.mode, t2, n2, s2), u2 = 0, f2 = t2.length; u2 < f2; u2++)
              i2 = t2[u2], this.add(ht.fromTo(i2, typeof e2 == "function" ? e2(u2, t2.length) : m(e2) === "object" && e2 ? O({}, e2) : null, typeof r3 == "function" ? r3(u2, t2.length) : r3, typeof n2 == "function" ? n2(u2, t2.length) : n2), a2[u2]);
          }
          return this.start();
        }}, {key: "from", value: function(t2, e2, r3) {
          return this.fromTo(t2, e2, null, r3);
        }}, {key: "to", value: function(t2, e2, r3) {
          return this.fromTo(t2, null, e2, r3);
        }}, {key: "addLabel", value: function(t2, e2) {
          return this.position.addLabel(t2, e2), this;
        }}, {key: "map", value: function(t2) {
          for (var e2 = 0, r3 = this._tweens.length; e2 < r3; e2++) {
            var n2 = this._tweens[e2];
            t2(n2, e2), this._duration = Math.max(this._duration, n2._duration + n2._startTime);
          }
          return this;
        }}, {key: "add", value: function(t2, e2) {
          var r3 = this;
          if (Array.isArray(t2))
            return t2.map(function(t3) {
              r3.add(t3, e2);
            }), this;
          m(t2) !== "object" || t2 instanceof ht || (t2 = new ht(t2.from).to(t2.to, t2));
          var n2 = this._defaultParams, i2 = this._duration;
          if (n2)
            for (var o2 in n2)
              typeof t2[o2] == "function" && t2[o2](n2[o2]);
          var s2 = typeof e2 == "number" ? e2 : this.position.parseLabel(e2 !== void 0 ? e2 : "afterLast", null);
          return t2._startTime = Math.max(this._startTime, t2._delayTime, s2), t2._delayTime = s2, t2._isPlaying = true, this._duration = Math.max(i2, Math.max(t2._startTime + t2._delayTime, t2._duration)), this._tweens.push(t2), this.position.setLabel("afterLast", this._duration), this;
        }}, {key: "restart", value: function() {
          return this._startTime += C(), s(this), this.emit(P);
        }}, {key: "easing", value: function(e2) {
          return this.map(function(t2) {
            return t2.easing(e2);
          });
        }}, {key: "interpolation", value: function(e2) {
          return this.map(function(t2) {
            return t2.interpolation(e2);
          });
        }}, {key: "update", value: function(t2) {
          var e2, r3 = this._tweens, n2 = this._duration, i2 = this._reverseDelayTime, o2 = this._startTime, s2 = this._reversed, a2 = this._yoyo, u2 = this._repeat, f2 = this._isFinite, l2 = this._isPlaying, h2 = this._prevTime, c2 = this._onStartCallbackFired, p2 = (t2 = t2 !== void 0 ? t2 : C()) - h2;
          if (this._prevTime = t2, 250 < p2 && F() && x() && (t2 -= p2 - D), !l2 || t2 < o2)
            return true;
          e2 = 1 < (e2 = (t2 - o2) / n2) ? 1 : e2, e2 = s2 ? 1 - e2 : e2, this.elapsed = e2, c2 || (this.emit(G), this._onStartCallbackFired = true);
          for (var y2 = t2 - o2, d2 = s2 ? n2 - y2 : y2, v2 = 0; v2 < r3.length; )
            r3[v2].update(d2), v2++;
          if (this.emit(V, e2, y2), e2 === 1 || s2 && e2 === 0) {
            if (u2) {
              for (f2 && this._repeat--, this.emit(s2 ? Q : z), a2 && (this._reversed = !s2, this.timingOrder(function(t3) {
                return t3.reverse();
              })), this._startTime = s2 && i2 ? t2 + i2 : t2, v2 = 0; v2 < r3.length; )
                r3[v2].reassignValues(t2), v2++;
              return true;
            }
            return this.emit(B), this._repeat = this._r, N(this), this._isPlaying = false;
          }
          return true;
        }}, {key: "progress", value: function(t2) {
          return t2 !== void 0 ? this.update(t2 * this._duration) : this.elapsed;
        }}]), r2;
      }();
      t.Easing = v, t.FrameThrottle = function(t2) {
        y = 1.05 * (0 < arguments.length && t2 !== void 0 ? t2 : 120);
      }, t.Interpolation = ot, t.Interpolator = function(i2, o2) {
        var s2 = Array.isArray(i2) && !i2.isString, a2 = typeof i2 == "string" ? i2 : s2 ? i2.slice() : O({}, i2);
        if (s2)
          for (var t2 = 0, e2 = i2.length; t2 < e2; t2++)
            i2[t2] === o2[t2] && typeof i2[t2] == "number" && typeof o2[t2] != "number" || X(t2, a2, i2, o2);
        else if (m(i2) === "object")
          for (var r2 in i2)
            i2[r2] === o2[r2] && typeof i2[r2] == "number" && typeof o2[r2] != "number" || X(r2, a2, i2, o2);
        else if (typeof i2 == "string") {
          i2 = H(i2), o2 = H(o2);
          for (var n2 = 1; n2 < i2.length; )
            i2[n2] === o2[n2] && typeof i2[n2 - 1] == "string" ? (i2.splice(n2 - 1, 2, i2[n2 - 1] + i2[n2]), o2.splice(n2 - 1, 2, o2[n2 - 1] + o2[n2])) : n2++;
        }
        return function(t3) {
          if (s2)
            for (var e3 = 0, r3 = i2.length; e3 < r3; e3++)
              $(e3, a2, i2, o2, t3);
          else if (m(a2) === "object")
            for (var n3 in i2)
              $(n3, a2, i2, o2, t3);
          else
            typeof a2 == "string" && (a2 = $(0, 0, i2, o2, t3, t3, true));
          return a2;
        };
      }, t.Plugins = q, t.Selector = ut, t.Timeline = yt, t.ToggleLagSmoothing = function(t2) {
        d = !(0 < arguments.length && t2 !== void 0) || t2;
      }, t.Tween = ht, t.add = s, t.autoPlay = function(t2) {
        l = t2;
      }, t.get = e, t.getAll = function() {
        return u;
      }, t.has = function(t2) {
        return e(t2) !== null;
      }, t.isRunning = F, t.now = C, t.onRequestTick = function(t2) {
        h.push(t2);
      }, t.onTick = function(t2) {
        return u.push({update: t2});
      }, t.remove = N, t.removeAll = function() {
        u.length = 0, a(o), f = false;
      }, t.update = i, t.utils = it, Object.defineProperty(t, "__esModule", {value: true});
    });
  });

  // app/settings.js
  var settings = {
    document_title: "PROCESSING ARCHITECTURE - AAA21",
    title: `//&nbsp;2021 //&nbsp;PROCESSING //&nbsp;ARCHITECTURE`,
    background_color: "#000000"
  };

  // node_modules/three/build/three.module.js
  var REVISION = "123";
  var MOUSE = {LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2};
  var TOUCH = {ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3};
  var CullFaceNone = 0;
  var CullFaceBack = 1;
  var CullFaceFront = 2;
  var PCFShadowMap = 1;
  var PCFSoftShadowMap = 2;
  var VSMShadowMap = 3;
  var FrontSide = 0;
  var BackSide = 1;
  var DoubleSide = 2;
  var FlatShading = 1;
  var NoBlending = 0;
  var NormalBlending = 1;
  var AdditiveBlending = 2;
  var SubtractiveBlending = 3;
  var MultiplyBlending = 4;
  var CustomBlending = 5;
  var AddEquation = 100;
  var SubtractEquation = 101;
  var ReverseSubtractEquation = 102;
  var MinEquation = 103;
  var MaxEquation = 104;
  var ZeroFactor = 200;
  var OneFactor = 201;
  var SrcColorFactor = 202;
  var OneMinusSrcColorFactor = 203;
  var SrcAlphaFactor = 204;
  var OneMinusSrcAlphaFactor = 205;
  var DstAlphaFactor = 206;
  var OneMinusDstAlphaFactor = 207;
  var DstColorFactor = 208;
  var OneMinusDstColorFactor = 209;
  var SrcAlphaSaturateFactor = 210;
  var NeverDepth = 0;
  var AlwaysDepth = 1;
  var LessDepth = 2;
  var LessEqualDepth = 3;
  var EqualDepth = 4;
  var GreaterEqualDepth = 5;
  var GreaterDepth = 6;
  var NotEqualDepth = 7;
  var MultiplyOperation = 0;
  var MixOperation = 1;
  var AddOperation = 2;
  var NoToneMapping = 0;
  var LinearToneMapping = 1;
  var ReinhardToneMapping = 2;
  var CineonToneMapping = 3;
  var ACESFilmicToneMapping = 4;
  var CustomToneMapping = 5;
  var UVMapping = 300;
  var CubeReflectionMapping = 301;
  var CubeRefractionMapping = 302;
  var EquirectangularReflectionMapping = 303;
  var EquirectangularRefractionMapping = 304;
  var CubeUVReflectionMapping = 306;
  var CubeUVRefractionMapping = 307;
  var RepeatWrapping = 1e3;
  var ClampToEdgeWrapping = 1001;
  var MirroredRepeatWrapping = 1002;
  var NearestFilter = 1003;
  var NearestMipmapNearestFilter = 1004;
  var NearestMipmapLinearFilter = 1005;
  var LinearFilter = 1006;
  var LinearMipmapNearestFilter = 1007;
  var LinearMipmapLinearFilter = 1008;
  var UnsignedByteType = 1009;
  var ByteType = 1010;
  var ShortType = 1011;
  var UnsignedShortType = 1012;
  var IntType = 1013;
  var UnsignedIntType = 1014;
  var FloatType = 1015;
  var HalfFloatType = 1016;
  var UnsignedShort4444Type = 1017;
  var UnsignedShort5551Type = 1018;
  var UnsignedShort565Type = 1019;
  var UnsignedInt248Type = 1020;
  var AlphaFormat = 1021;
  var RGBFormat = 1022;
  var RGBAFormat = 1023;
  var LuminanceFormat = 1024;
  var LuminanceAlphaFormat = 1025;
  var DepthFormat = 1026;
  var DepthStencilFormat = 1027;
  var RedFormat = 1028;
  var RedIntegerFormat = 1029;
  var RGFormat = 1030;
  var RGIntegerFormat = 1031;
  var RGBIntegerFormat = 1032;
  var RGBAIntegerFormat = 1033;
  var RGB_S3TC_DXT1_Format = 33776;
  var RGBA_S3TC_DXT1_Format = 33777;
  var RGBA_S3TC_DXT3_Format = 33778;
  var RGBA_S3TC_DXT5_Format = 33779;
  var RGB_PVRTC_4BPPV1_Format = 35840;
  var RGB_PVRTC_2BPPV1_Format = 35841;
  var RGBA_PVRTC_4BPPV1_Format = 35842;
  var RGBA_PVRTC_2BPPV1_Format = 35843;
  var RGB_ETC1_Format = 36196;
  var RGB_ETC2_Format = 37492;
  var RGBA_ETC2_EAC_Format = 37496;
  var RGBA_ASTC_4x4_Format = 37808;
  var RGBA_ASTC_5x4_Format = 37809;
  var RGBA_ASTC_5x5_Format = 37810;
  var RGBA_ASTC_6x5_Format = 37811;
  var RGBA_ASTC_6x6_Format = 37812;
  var RGBA_ASTC_8x5_Format = 37813;
  var RGBA_ASTC_8x6_Format = 37814;
  var RGBA_ASTC_8x8_Format = 37815;
  var RGBA_ASTC_10x5_Format = 37816;
  var RGBA_ASTC_10x6_Format = 37817;
  var RGBA_ASTC_10x8_Format = 37818;
  var RGBA_ASTC_10x10_Format = 37819;
  var RGBA_ASTC_12x10_Format = 37820;
  var RGBA_ASTC_12x12_Format = 37821;
  var RGBA_BPTC_Format = 36492;
  var SRGB8_ALPHA8_ASTC_4x4_Format = 37840;
  var SRGB8_ALPHA8_ASTC_5x4_Format = 37841;
  var SRGB8_ALPHA8_ASTC_5x5_Format = 37842;
  var SRGB8_ALPHA8_ASTC_6x5_Format = 37843;
  var SRGB8_ALPHA8_ASTC_6x6_Format = 37844;
  var SRGB8_ALPHA8_ASTC_8x5_Format = 37845;
  var SRGB8_ALPHA8_ASTC_8x6_Format = 37846;
  var SRGB8_ALPHA8_ASTC_8x8_Format = 37847;
  var SRGB8_ALPHA8_ASTC_10x5_Format = 37848;
  var SRGB8_ALPHA8_ASTC_10x6_Format = 37849;
  var SRGB8_ALPHA8_ASTC_10x8_Format = 37850;
  var SRGB8_ALPHA8_ASTC_10x10_Format = 37851;
  var SRGB8_ALPHA8_ASTC_12x10_Format = 37852;
  var SRGB8_ALPHA8_ASTC_12x12_Format = 37853;
  var LoopOnce = 2200;
  var LoopRepeat = 2201;
  var LoopPingPong = 2202;
  var InterpolateDiscrete = 2300;
  var InterpolateLinear = 2301;
  var InterpolateSmooth = 2302;
  var ZeroCurvatureEnding = 2400;
  var ZeroSlopeEnding = 2401;
  var WrapAroundEnding = 2402;
  var NormalAnimationBlendMode = 2500;
  var AdditiveAnimationBlendMode = 2501;
  var TrianglesDrawMode = 0;
  var LinearEncoding = 3e3;
  var sRGBEncoding = 3001;
  var GammaEncoding = 3007;
  var RGBEEncoding = 3002;
  var LogLuvEncoding = 3003;
  var RGBM7Encoding = 3004;
  var RGBM16Encoding = 3005;
  var RGBDEncoding = 3006;
  var BasicDepthPacking = 3200;
  var RGBADepthPacking = 3201;
  var TangentSpaceNormalMap = 0;
  var ObjectSpaceNormalMap = 1;
  var KeepStencilOp = 7680;
  var AlwaysStencilFunc = 519;
  var StaticDrawUsage = 35044;
  var DynamicDrawUsage = 35048;
  var GLSL3 = "300 es";
  function EventDispatcher() {
  }
  Object.assign(EventDispatcher.prototype, {
    addEventListener: function(type, listener) {
      if (this._listeners === void 0)
        this._listeners = {};
      const listeners = this._listeners;
      if (listeners[type] === void 0) {
        listeners[type] = [];
      }
      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    },
    hasEventListener: function(type, listener) {
      if (this._listeners === void 0)
        return false;
      const listeners = this._listeners;
      return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
    },
    removeEventListener: function(type, listener) {
      if (this._listeners === void 0)
        return;
      const listeners = this._listeners;
      const listenerArray = listeners[type];
      if (listenerArray !== void 0) {
        const index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    },
    dispatchEvent: function(event) {
      if (this._listeners === void 0)
        return;
      const listeners = this._listeners;
      const listenerArray = listeners[event.type];
      if (listenerArray !== void 0) {
        event.target = this;
        const array = listenerArray.slice(0);
        for (let i = 0, l = array.length; i < l; i++) {
          array[i].call(this, event);
        }
      }
    }
  });
  var _lut = [];
  for (let i = 0; i < 256; i++) {
    _lut[i] = (i < 16 ? "0" : "") + i.toString(16);
  }
  var _seed = 1234567;
  var MathUtils = {
    DEG2RAD: Math.PI / 180,
    RAD2DEG: 180 / Math.PI,
    generateUUID: function() {
      const d0 = Math.random() * 4294967295 | 0;
      const d1 = Math.random() * 4294967295 | 0;
      const d2 = Math.random() * 4294967295 | 0;
      const d3 = Math.random() * 4294967295 | 0;
      const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
      return uuid.toUpperCase();
    },
    clamp: function(value, min, max) {
      return Math.max(min, Math.min(max, value));
    },
    euclideanModulo: function(n, m) {
      return (n % m + m) % m;
    },
    mapLinear: function(x, a1, a2, b1, b2) {
      return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
    },
    lerp: function(x, y, t) {
      return (1 - t) * x + t * y;
    },
    smoothstep: function(x, min, max) {
      if (x <= min)
        return 0;
      if (x >= max)
        return 1;
      x = (x - min) / (max - min);
      return x * x * (3 - 2 * x);
    },
    smootherstep: function(x, min, max) {
      if (x <= min)
        return 0;
      if (x >= max)
        return 1;
      x = (x - min) / (max - min);
      return x * x * x * (x * (x * 6 - 15) + 10);
    },
    randInt: function(low, high) {
      return low + Math.floor(Math.random() * (high - low + 1));
    },
    randFloat: function(low, high) {
      return low + Math.random() * (high - low);
    },
    randFloatSpread: function(range) {
      return range * (0.5 - Math.random());
    },
    seededRandom: function(s) {
      if (s !== void 0)
        _seed = s % 2147483647;
      _seed = _seed * 16807 % 2147483647;
      return (_seed - 1) / 2147483646;
    },
    degToRad: function(degrees) {
      return degrees * MathUtils.DEG2RAD;
    },
    radToDeg: function(radians) {
      return radians * MathUtils.RAD2DEG;
    },
    isPowerOfTwo: function(value) {
      return (value & value - 1) === 0 && value !== 0;
    },
    ceilPowerOfTwo: function(value) {
      return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
    },
    floorPowerOfTwo: function(value) {
      return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
    },
    setQuaternionFromProperEuler: function(q, a, b, c, order) {
      const cos = Math.cos;
      const sin = Math.sin;
      const c2 = cos(b / 2);
      const s2 = sin(b / 2);
      const c13 = cos((a + c) / 2);
      const s13 = sin((a + c) / 2);
      const c1_3 = cos((a - c) / 2);
      const s1_3 = sin((a - c) / 2);
      const c3_1 = cos((c - a) / 2);
      const s3_1 = sin((c - a) / 2);
      switch (order) {
        case "XYX":
          q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
          break;
        case "YZY":
          q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
          break;
        case "ZXZ":
          q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
          break;
        case "XZX":
          q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
          break;
        case "YXY":
          q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
          break;
        case "ZYZ":
          q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
          break;
        default:
          console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
      }
    }
  };
  var Vector2 = class {
    constructor(x = 0, y = 0) {
      Object.defineProperty(this, "isVector2", {value: true});
      this.x = x;
      this.y = y;
    }
    get width() {
      return this.x;
    }
    set width(value) {
      this.x = value;
    }
    get height() {
      return this.y;
    }
    set height(value) {
      this.y = value;
    }
    set(x, y) {
      this.x = x;
      this.y = y;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      return this;
    }
    add(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
        return this.addVectors(v, w);
      }
      this.x += v.x;
      this.y += v.y;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      return this;
    }
    sub(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
        return this.subVectors(v, w);
      }
      this.x -= v.x;
      this.y -= v.y;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      return this;
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    applyMatrix3(m) {
      const x = this.x, y = this.y;
      const e = m.elements;
      this.x = e[0] * x + e[3] * y + e[6];
      this.y = e[1] * x + e[4] * y + e[7];
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      return this;
    }
    clamp(min, max) {
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      return this;
    }
    roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y;
    }
    cross(v) {
      return this.x * v.y - this.y * v.x;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    angle() {
      const angle = Math.atan2(-this.y, -this.x) + Math.PI;
      return angle;
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y;
      return dx * dx + dy * dy;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      return array;
    }
    fromBufferAttribute(attribute, index, offset) {
      if (offset !== void 0) {
        console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");
      }
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      return this;
    }
    rotateAround(center, angle) {
      const c = Math.cos(angle), s = Math.sin(angle);
      const x = this.x - center.x;
      const y = this.y - center.y;
      this.x = x * c - y * s + center.x;
      this.y = x * s + y * c + center.y;
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      return this;
    }
  };
  var Matrix3 = class {
    constructor() {
      Object.defineProperty(this, "isMatrix3", {value: true});
      this.elements = [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      ];
      if (arguments.length > 0) {
        console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
      }
    }
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      const te = this.elements;
      te[0] = n11;
      te[1] = n21;
      te[2] = n31;
      te[3] = n12;
      te[4] = n22;
      te[5] = n32;
      te[6] = n13;
      te[7] = n23;
      te[8] = n33;
      return this;
    }
    identity() {
      this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
      return this;
    }
    clone() {
      return new this.constructor().fromArray(this.elements);
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrix3Column(this, 0);
      yAxis.setFromMatrix3Column(this, 1);
      zAxis.setFromMatrix3Column(this, 2);
      return this;
    }
    setFromMatrix4(m) {
      const me = m.elements;
      this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[3], a13 = ae[6];
      const a21 = ae[1], a22 = ae[4], a23 = ae[7];
      const a31 = ae[2], a32 = ae[5], a33 = ae[8];
      const b11 = be[0], b12 = be[3], b13 = be[6];
      const b21 = be[1], b22 = be[4], b23 = be[7];
      const b31 = be[2], b32 = be[5], b33 = be[8];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31;
      te[3] = a11 * b12 + a12 * b22 + a13 * b32;
      te[6] = a11 * b13 + a12 * b23 + a13 * b33;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31;
      te[4] = a21 * b12 + a22 * b22 + a23 * b32;
      te[7] = a21 * b13 + a22 * b23 + a23 * b33;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31;
      te[5] = a31 * b12 + a32 * b22 + a33 * b32;
      te[8] = a31 * b13 + a32 * b23 + a33 * b33;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[3] *= s;
      te[6] *= s;
      te[1] *= s;
      te[4] *= s;
      te[7] *= s;
      te[2] *= s;
      te[5] *= s;
      te[8] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];
      return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
      if (det === 0)
        return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n31 * n23 - n33 * n21) * detInv;
      te[2] = (n32 * n21 - n31 * n22) * detInv;
      te[3] = t12 * detInv;
      te[4] = (n33 * n11 - n31 * n13) * detInv;
      te[5] = (n31 * n12 - n32 * n11) * detInv;
      te[6] = t13 * detInv;
      te[7] = (n21 * n13 - n23 * n11) * detInv;
      te[8] = (n22 * n11 - n21 * n12) * detInv;
      return this;
    }
    transpose() {
      let tmp2;
      const m = this.elements;
      tmp2 = m[1];
      m[1] = m[3];
      m[3] = tmp2;
      tmp2 = m[2];
      m[2] = m[6];
      m[6] = tmp2;
      tmp2 = m[5];
      m[5] = m[7];
      m[7] = tmp2;
      return this;
    }
    getNormalMatrix(matrix4) {
      return this.setFromMatrix4(matrix4).copy(this).invert().transpose();
    }
    transposeIntoArray(r) {
      const m = this.elements;
      r[0] = m[0];
      r[1] = m[3];
      r[2] = m[6];
      r[3] = m[1];
      r[4] = m[4];
      r[5] = m[7];
      r[6] = m[2];
      r[7] = m[5];
      r[8] = m[8];
      return this;
    }
    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
      const c = Math.cos(rotation);
      const s = Math.sin(rotation);
      this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);
    }
    scale(sx, sy) {
      const te = this.elements;
      te[0] *= sx;
      te[3] *= sx;
      te[6] *= sx;
      te[1] *= sy;
      te[4] *= sy;
      te[7] *= sy;
      return this;
    }
    rotate(theta) {
      const c = Math.cos(theta);
      const s = Math.sin(theta);
      const te = this.elements;
      const a11 = te[0], a12 = te[3], a13 = te[6];
      const a21 = te[1], a22 = te[4], a23 = te[7];
      te[0] = c * a11 + s * a21;
      te[3] = c * a12 + s * a22;
      te[6] = c * a13 + s * a23;
      te[1] = -s * a11 + c * a21;
      te[4] = -s * a12 + c * a22;
      te[7] = -s * a13 + c * a23;
      return this;
    }
    translate(tx, ty) {
      const te = this.elements;
      te[0] += tx * te[2];
      te[3] += tx * te[5];
      te[6] += tx * te[8];
      te[1] += ty * te[2];
      te[4] += ty * te[5];
      te[7] += ty * te[8];
      return this;
    }
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i = 0; i < 9; i++) {
        if (te[i] !== me[i])
          return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i = 0; i < 9; i++) {
        this.elements[i] = array[i + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      return array;
    }
  };
  var _canvas;
  var ImageUtils = {
    getDataURL: function(image) {
      if (/^data:/i.test(image.src)) {
        return image.src;
      }
      if (typeof HTMLCanvasElement == "undefined") {
        return image.src;
      }
      let canvas;
      if (image instanceof HTMLCanvasElement) {
        canvas = image;
      } else {
        if (_canvas === void 0)
          _canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
        _canvas.width = image.width;
        _canvas.height = image.height;
        const context = _canvas.getContext("2d");
        if (image instanceof ImageData) {
          context.putImageData(image, 0, 0);
        } else {
          context.drawImage(image, 0, 0, image.width, image.height);
        }
        canvas = _canvas;
      }
      if (canvas.width > 2048 || canvas.height > 2048) {
        return canvas.toDataURL("image/jpeg", 0.6);
      } else {
        return canvas.toDataURL("image/png");
      }
    }
  };
  var textureId = 0;
  function Texture(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {
    Object.defineProperty(this, "id", {value: textureId++});
    this.uuid = MathUtils.generateUUID();
    this.name = "";
    this.image = image;
    this.mipmaps = [];
    this.mapping = mapping;
    this.wrapS = wrapS;
    this.wrapT = wrapT;
    this.magFilter = magFilter;
    this.minFilter = minFilter;
    this.anisotropy = anisotropy;
    this.format = format;
    this.internalFormat = null;
    this.type = type;
    this.offset = new Vector2(0, 0);
    this.repeat = new Vector2(1, 1);
    this.center = new Vector2(0, 0);
    this.rotation = 0;
    this.matrixAutoUpdate = true;
    this.matrix = new Matrix3();
    this.generateMipmaps = true;
    this.premultiplyAlpha = false;
    this.flipY = true;
    this.unpackAlignment = 4;
    this.encoding = encoding;
    this.version = 0;
    this.onUpdate = null;
  }
  Texture.DEFAULT_IMAGE = void 0;
  Texture.DEFAULT_MAPPING = UVMapping;
  Texture.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
    constructor: Texture,
    isTexture: true,
    updateMatrix: function() {
      this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    },
    clone: function() {
      return new this.constructor().copy(this);
    },
    copy: function(source) {
      this.name = source.name;
      this.image = source.image;
      this.mipmaps = source.mipmaps.slice(0);
      this.mapping = source.mapping;
      this.wrapS = source.wrapS;
      this.wrapT = source.wrapT;
      this.magFilter = source.magFilter;
      this.minFilter = source.minFilter;
      this.anisotropy = source.anisotropy;
      this.format = source.format;
      this.internalFormat = source.internalFormat;
      this.type = source.type;
      this.offset.copy(source.offset);
      this.repeat.copy(source.repeat);
      this.center.copy(source.center);
      this.rotation = source.rotation;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrix.copy(source.matrix);
      this.generateMipmaps = source.generateMipmaps;
      this.premultiplyAlpha = source.premultiplyAlpha;
      this.flipY = source.flipY;
      this.unpackAlignment = source.unpackAlignment;
      this.encoding = source.encoding;
      return this;
    },
    toJSON: function(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.textures[this.uuid] !== void 0) {
        return meta.textures[this.uuid];
      }
      const output = {
        metadata: {
          version: 4.5,
          type: "Texture",
          generator: "Texture.toJSON"
        },
        uuid: this.uuid,
        name: this.name,
        mapping: this.mapping,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        center: [this.center.x, this.center.y],
        rotation: this.rotation,
        wrap: [this.wrapS, this.wrapT],
        format: this.format,
        type: this.type,
        encoding: this.encoding,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY,
        premultiplyAlpha: this.premultiplyAlpha,
        unpackAlignment: this.unpackAlignment
      };
      if (this.image !== void 0) {
        const image = this.image;
        if (image.uuid === void 0) {
          image.uuid = MathUtils.generateUUID();
        }
        if (!isRootObject && meta.images[image.uuid] === void 0) {
          let url;
          if (Array.isArray(image)) {
            url = [];
            for (let i = 0, l = image.length; i < l; i++) {
              if (image[i].isDataTexture) {
                url.push(serializeImage(image[i].image));
              } else {
                url.push(serializeImage(image[i]));
              }
            }
          } else {
            url = serializeImage(image);
          }
          meta.images[image.uuid] = {
            uuid: image.uuid,
            url
          };
        }
        output.image = image.uuid;
      }
      if (!isRootObject) {
        meta.textures[this.uuid] = output;
      }
      return output;
    },
    dispose: function() {
      this.dispatchEvent({type: "dispose"});
    },
    transformUv: function(uv) {
      if (this.mapping !== UVMapping)
        return uv;
      uv.applyMatrix3(this.matrix);
      if (uv.x < 0 || uv.x > 1) {
        switch (this.wrapS) {
          case RepeatWrapping:
            uv.x = uv.x - Math.floor(uv.x);
            break;
          case ClampToEdgeWrapping:
            uv.x = uv.x < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.x) % 2) === 1) {
              uv.x = Math.ceil(uv.x) - uv.x;
            } else {
              uv.x = uv.x - Math.floor(uv.x);
            }
            break;
        }
      }
      if (uv.y < 0 || uv.y > 1) {
        switch (this.wrapT) {
          case RepeatWrapping:
            uv.y = uv.y - Math.floor(uv.y);
            break;
          case ClampToEdgeWrapping:
            uv.y = uv.y < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.y) % 2) === 1) {
              uv.y = Math.ceil(uv.y) - uv.y;
            } else {
              uv.y = uv.y - Math.floor(uv.y);
            }
            break;
        }
      }
      if (this.flipY) {
        uv.y = 1 - uv.y;
      }
      return uv;
    }
  });
  Object.defineProperty(Texture.prototype, "needsUpdate", {
    set: function(value) {
      if (value === true)
        this.version++;
    }
  });
  function serializeImage(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      return ImageUtils.getDataURL(image);
    } else {
      if (image.data) {
        return {
          data: Array.prototype.slice.call(image.data),
          width: image.width,
          height: image.height,
          type: image.data.constructor.name
        };
      } else {
        console.warn("THREE.Texture: Unable to serialize Texture.");
        return {};
      }
    }
  }
  var Vector4 = class {
    constructor(x = 0, y = 0, z = 0, w = 1) {
      Object.defineProperty(this, "isVector4", {value: true});
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
    }
    get width() {
      return this.z;
    }
    set width(value) {
      this.z = value;
    }
    get height() {
      return this.w;
    }
    set height(value) {
      this.w = value;
    }
    set(x, y, z, w) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      this.w = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setW(w) {
      this.w = w;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        case 3:
          this.w = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        case 3:
          return this.w;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      this.w = v.w !== void 0 ? v.w : 1;
      return this;
    }
    add(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
        return this.addVectors(v, w);
      }
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      this.w += v.w;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      this.w += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      this.w = a.w + b.w;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      this.w += v.w * s;
      return this;
    }
    sub(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
        return this.subVectors(v, w);
      }
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      this.w -= v.w;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      this.w -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      this.w = a.w - b.w;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      this.w *= scalar;
      return this;
    }
    applyMatrix4(m) {
      const x = this.x, y = this.y, z = this.z, w = this.w;
      const e = m.elements;
      this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
      this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
      this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
      this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    setAxisAngleFromQuaternion(q) {
      this.w = 2 * Math.acos(q.w);
      const s = Math.sqrt(1 - q.w * q.w);
      if (s < 1e-4) {
        this.x = 1;
        this.y = 0;
        this.z = 0;
      } else {
        this.x = q.x / s;
        this.y = q.y / s;
        this.z = q.z / s;
      }
      return this;
    }
    setAxisAngleFromRotationMatrix(m) {
      let angle, x, y, z;
      const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
      if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
        if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
          this.set(1, 0, 0, 0);
          return this;
        }
        angle = Math.PI;
        const xx = (m11 + 1) / 2;
        const yy = (m22 + 1) / 2;
        const zz = (m33 + 1) / 2;
        const xy = (m12 + m21) / 4;
        const xz = (m13 + m31) / 4;
        const yz = (m23 + m32) / 4;
        if (xx > yy && xx > zz) {
          if (xx < epsilon) {
            x = 0;
            y = 0.707106781;
            z = 0.707106781;
          } else {
            x = Math.sqrt(xx);
            y = xy / x;
            z = xz / x;
          }
        } else if (yy > zz) {
          if (yy < epsilon) {
            x = 0.707106781;
            y = 0;
            z = 0.707106781;
          } else {
            y = Math.sqrt(yy);
            x = xy / y;
            z = yz / y;
          }
        } else {
          if (zz < epsilon) {
            x = 0.707106781;
            y = 0.707106781;
            z = 0;
          } else {
            z = Math.sqrt(zz);
            x = xz / z;
            y = yz / z;
          }
        }
        this.set(x, y, z, angle);
        return this;
      }
      let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
      if (Math.abs(s) < 1e-3)
        s = 1;
      this.x = (m32 - m23) / s;
      this.y = (m13 - m31) / s;
      this.z = (m21 - m12) / s;
      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      this.w = Math.min(this.w, v.w);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      this.w = Math.max(this.w, v.w);
      return this;
    }
    clamp(min, max) {
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      this.z = Math.max(min.z, Math.min(max.z, this.z));
      this.w = Math.max(min.w, Math.min(max.w, this.w));
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      this.z = Math.max(minVal, Math.min(maxVal, this.z));
      this.w = Math.max(minVal, Math.min(maxVal, this.w));
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      this.w = Math.floor(this.w);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      this.w = Math.ceil(this.w);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      this.w = Math.round(this.w);
      return this;
    }
    roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
      this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      this.w = -this.w;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      this.w += (v.w - this.w) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      this.w = v1.w + (v2.w - v1.w) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      this.w = array[offset + 3];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      array[offset + 3] = this.w;
      return array;
    }
    fromBufferAttribute(attribute, index, offset) {
      if (offset !== void 0) {
        console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");
      }
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      this.w = attribute.getW(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      this.w = Math.random();
      return this;
    }
  };
  function WebGLRenderTarget(width, height, options) {
    this.width = width;
    this.height = height;
    this.scissor = new Vector4(0, 0, width, height);
    this.scissorTest = false;
    this.viewport = new Vector4(0, 0, width, height);
    options = options || {};
    this.texture = new Texture(void 0, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
    this.texture.image = {};
    this.texture.image.width = width;
    this.texture.image.height = height;
    this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
    this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
    this.depthBuffer = options.depthBuffer !== void 0 ? options.depthBuffer : true;
    this.stencilBuffer = options.stencilBuffer !== void 0 ? options.stencilBuffer : false;
    this.depthTexture = options.depthTexture !== void 0 ? options.depthTexture : null;
  }
  WebGLRenderTarget.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
    constructor: WebGLRenderTarget,
    isWebGLRenderTarget: true,
    setSize: function(width, height) {
      if (this.width !== width || this.height !== height) {
        this.width = width;
        this.height = height;
        this.texture.image.width = width;
        this.texture.image.height = height;
        this.dispose();
      }
      this.viewport.set(0, 0, width, height);
      this.scissor.set(0, 0, width, height);
    },
    clone: function() {
      return new this.constructor().copy(this);
    },
    copy: function(source) {
      this.width = source.width;
      this.height = source.height;
      this.viewport.copy(source.viewport);
      this.texture = source.texture.clone();
      this.depthBuffer = source.depthBuffer;
      this.stencilBuffer = source.stencilBuffer;
      this.depthTexture = source.depthTexture;
      return this;
    },
    dispose: function() {
      this.dispatchEvent({type: "dispose"});
    }
  });
  function WebGLMultisampleRenderTarget(width, height, options) {
    WebGLRenderTarget.call(this, width, height, options);
    this.samples = 4;
  }
  WebGLMultisampleRenderTarget.prototype = Object.assign(Object.create(WebGLRenderTarget.prototype), {
    constructor: WebGLMultisampleRenderTarget,
    isWebGLMultisampleRenderTarget: true,
    copy: function(source) {
      WebGLRenderTarget.prototype.copy.call(this, source);
      this.samples = source.samples;
      return this;
    }
  });
  var Quaternion = class {
    constructor(x = 0, y = 0, z = 0, w = 1) {
      Object.defineProperty(this, "isQuaternion", {value: true});
      this._x = x;
      this._y = y;
      this._z = z;
      this._w = w;
    }
    static slerp(qa, qb, qm, t) {
      return qm.copy(qa).slerp(qb, t);
    }
    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
      let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
        let s = 1 - t;
        const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
        if (sqrSin > Number.EPSILON) {
          const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
          s = Math.sin(s * len) / sin;
          t = Math.sin(t * len) / sin;
        }
        const tDir = t * dir;
        x0 = x0 * s + x1 * tDir;
        y0 = y0 * s + y1 * tDir;
        z0 = z0 * s + z1 * tDir;
        w0 = w0 * s + w1 * tDir;
        if (s === 1 - t) {
          const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
          x0 *= f;
          y0 *= f;
          z0 *= f;
          w0 *= f;
        }
      }
      dst[dstOffset] = x0;
      dst[dstOffset + 1] = y0;
      dst[dstOffset + 2] = z0;
      dst[dstOffset + 3] = w0;
    }
    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
      const x0 = src0[srcOffset0];
      const y0 = src0[srcOffset0 + 1];
      const z0 = src0[srcOffset0 + 2];
      const w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1];
      const y1 = src1[srcOffset1 + 1];
      const z1 = src1[srcOffset1 + 2];
      const w1 = src1[srcOffset1 + 3];
      dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
      return dst;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get w() {
      return this._w;
    }
    set w(value) {
      this._w = value;
      this._onChangeCallback();
    }
    set(x, y, z, w) {
      this._x = x;
      this._y = y;
      this._z = z;
      this._w = w;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(quaternion) {
      this._x = quaternion.x;
      this._y = quaternion.y;
      this._z = quaternion.z;
      this._w = quaternion.w;
      this._onChangeCallback();
      return this;
    }
    setFromEuler(euler, update2) {
      if (!(euler && euler.isEuler)) {
        throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
      }
      const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
      const cos = Math.cos;
      const sin = Math.sin;
      const c1 = cos(x / 2);
      const c2 = cos(y / 2);
      const c3 = cos(z / 2);
      const s1 = sin(x / 2);
      const s2 = sin(y / 2);
      const s3 = sin(z / 2);
      switch (order) {
        case "XYZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "YXZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "ZXY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "ZYX":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "YZX":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "XZY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        default:
          console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
      }
      if (update2 !== false)
        this._onChangeCallback();
      return this;
    }
    setFromAxisAngle(axis, angle) {
      const halfAngle = angle / 2, s = Math.sin(halfAngle);
      this._x = axis.x * s;
      this._y = axis.y * s;
      this._z = axis.z * s;
      this._w = Math.cos(halfAngle);
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m) {
      const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
      if (trace > 0) {
        const s = 0.5 / Math.sqrt(trace + 1);
        this._w = 0.25 / s;
        this._x = (m32 - m23) * s;
        this._y = (m13 - m31) * s;
        this._z = (m21 - m12) * s;
      } else if (m11 > m22 && m11 > m33) {
        const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
        this._w = (m32 - m23) / s;
        this._x = 0.25 * s;
        this._y = (m12 + m21) / s;
        this._z = (m13 + m31) / s;
      } else if (m22 > m33) {
        const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
        this._w = (m13 - m31) / s;
        this._x = (m12 + m21) / s;
        this._y = 0.25 * s;
        this._z = (m23 + m32) / s;
      } else {
        const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
        this._w = (m21 - m12) / s;
        this._x = (m13 + m31) / s;
        this._y = (m23 + m32) / s;
        this._z = 0.25 * s;
      }
      this._onChangeCallback();
      return this;
    }
    setFromUnitVectors(vFrom, vTo) {
      const EPS = 1e-6;
      let r = vFrom.dot(vTo) + 1;
      if (r < EPS) {
        r = 0;
        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
          this._x = -vFrom.y;
          this._y = vFrom.x;
          this._z = 0;
          this._w = r;
        } else {
          this._x = 0;
          this._y = -vFrom.z;
          this._z = vFrom.y;
          this._w = r;
        }
      } else {
        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
        this._w = r;
      }
      return this.normalize();
    }
    angleTo(q) {
      return 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));
    }
    rotateTowards(q, step) {
      const angle = this.angleTo(q);
      if (angle === 0)
        return this;
      const t = Math.min(1, step / angle);
      this.slerp(q, t);
      return this;
    }
    identity() {
      return this.set(0, 0, 0, 1);
    }
    invert() {
      return this.conjugate();
    }
    conjugate() {
      this._x *= -1;
      this._y *= -1;
      this._z *= -1;
      this._onChangeCallback();
      return this;
    }
    dot(v) {
      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    }
    lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
      let l = this.length();
      if (l === 0) {
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._w = 1;
      } else {
        l = 1 / l;
        this._x = this._x * l;
        this._y = this._y * l;
        this._z = this._z * l;
        this._w = this._w * l;
      }
      this._onChangeCallback();
      return this;
    }
    multiply(q, p) {
      if (p !== void 0) {
        console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.");
        return this.multiplyQuaternions(q, p);
      }
      return this.multiplyQuaternions(this, q);
    }
    premultiply(q) {
      return this.multiplyQuaternions(q, this);
    }
    multiplyQuaternions(a, b) {
      const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
      const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
      this._onChangeCallback();
      return this;
    }
    slerp(qb, t) {
      if (t === 0)
        return this;
      if (t === 1)
        return this.copy(qb);
      const x = this._x, y = this._y, z = this._z, w = this._w;
      let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
      if (cosHalfTheta < 0) {
        this._w = -qb._w;
        this._x = -qb._x;
        this._y = -qb._y;
        this._z = -qb._z;
        cosHalfTheta = -cosHalfTheta;
      } else {
        this.copy(qb);
      }
      if (cosHalfTheta >= 1) {
        this._w = w;
        this._x = x;
        this._y = y;
        this._z = z;
        return this;
      }
      const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
      if (sqrSinHalfTheta <= Number.EPSILON) {
        const s = 1 - t;
        this._w = s * w + t * this._w;
        this._x = s * x + t * this._x;
        this._y = s * y + t * this._y;
        this._z = s * z + t * this._z;
        this.normalize();
        this._onChangeCallback();
        return this;
      }
      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
      const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
      const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
      this._w = w * ratioA + this._w * ratioB;
      this._x = x * ratioA + this._x * ratioB;
      this._y = y * ratioA + this._y * ratioB;
      this._z = z * ratioA + this._z * ratioB;
      this._onChangeCallback();
      return this;
    }
    equals(quaternion) {
      return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
    fromArray(array, offset = 0) {
      this._x = array[offset];
      this._y = array[offset + 1];
      this._z = array[offset + 2];
      this._w = array[offset + 3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this._x = attribute.getX(index);
      this._y = attribute.getY(index);
      this._z = attribute.getZ(index);
      this._w = attribute.getW(index);
      return this;
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
  };
  var Vector3 = class {
    constructor(x = 0, y = 0, z = 0) {
      Object.defineProperty(this, "isVector3", {value: true});
      this.x = x;
      this.y = y;
      this.z = z;
    }
    set(x, y, z) {
      if (z === void 0)
        z = this.z;
      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
    }
    add(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
        return this.addVectors(v, w);
      }
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      return this;
    }
    sub(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
        return this.subVectors(v, w);
      }
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      return this;
    }
    multiply(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.");
        return this.multiplyVectors(v, w);
      }
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      return this;
    }
    multiplyVectors(a, b) {
      this.x = a.x * b.x;
      this.y = a.y * b.y;
      this.z = a.z * b.z;
      return this;
    }
    applyEuler(euler) {
      if (!(euler && euler.isEuler)) {
        console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
      }
      return this.applyQuaternion(_quaternion.setFromEuler(euler));
    }
    applyAxisAngle(axis, angle) {
      return this.applyQuaternion(_quaternion.setFromAxisAngle(axis, angle));
    }
    applyMatrix3(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x + e[3] * y + e[6] * z;
      this.y = e[1] * x + e[4] * y + e[7] * z;
      this.z = e[2] * x + e[5] * y + e[8] * z;
      return this;
    }
    applyNormalMatrix(m) {
      return this.applyMatrix3(m).normalize();
    }
    applyMatrix4(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
      this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
      this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
      this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
      return this;
    }
    applyQuaternion(q) {
      const x = this.x, y = this.y, z = this.z;
      const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
      const ix = qw * x + qy * z - qz * y;
      const iy = qw * y + qz * x - qx * z;
      const iz = qw * z + qx * y - qy * x;
      const iw = -qx * x - qy * y - qz * z;
      this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
      return this;
    }
    project(camera2) {
      return this.applyMatrix4(camera2.matrixWorldInverse).applyMatrix4(camera2.projectionMatrix);
    }
    unproject(camera2) {
      return this.applyMatrix4(camera2.projectionMatrixInverse).applyMatrix4(camera2.matrixWorld);
    }
    transformDirection(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x + e[4] * y + e[8] * z;
      this.y = e[1] * x + e[5] * y + e[9] * z;
      this.z = e[2] * x + e[6] * y + e[10] * z;
      return this.normalize();
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      return this;
    }
    clamp(min, max) {
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      this.z = Math.max(min.z, Math.min(max.z, this.z));
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      this.z = Math.max(minVal, Math.min(maxVal, this.z));
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      return this;
    }
    roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      return this;
    }
    cross(v, w) {
      if (w !== void 0) {
        console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.");
        return this.crossVectors(v, w);
      }
      return this.crossVectors(this, v);
    }
    crossVectors(a, b) {
      const ax = a.x, ay = a.y, az = a.z;
      const bx = b.x, by = b.y, bz = b.z;
      this.x = ay * bz - az * by;
      this.y = az * bx - ax * bz;
      this.z = ax * by - ay * bx;
      return this;
    }
    projectOnVector(v) {
      const denominator = v.lengthSq();
      if (denominator === 0)
        return this.set(0, 0, 0);
      const scalar = v.dot(this) / denominator;
      return this.copy(v).multiplyScalar(scalar);
    }
    projectOnPlane(planeNormal) {
      _vector.copy(this).projectOnVector(planeNormal);
      return this.sub(_vector);
    }
    reflect(normal) {
      return this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0)
        return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(MathUtils.clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
      return dx * dx + dy * dy + dz * dz;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
    }
    setFromSpherical(s) {
      return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
    }
    setFromSphericalCoords(radius, phi, theta) {
      const sinPhiRadius = Math.sin(phi) * radius;
      this.x = sinPhiRadius * Math.sin(theta);
      this.y = Math.cos(phi) * radius;
      this.z = sinPhiRadius * Math.cos(theta);
      return this;
    }
    setFromCylindrical(c) {
      return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
    }
    setFromCylindricalCoords(radius, theta, y) {
      this.x = radius * Math.sin(theta);
      this.y = y;
      this.z = radius * Math.cos(theta);
      return this;
    }
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      return this;
    }
    setFromMatrixScale(m) {
      const sx = this.setFromMatrixColumn(m, 0).length();
      const sy = this.setFromMatrixColumn(m, 1).length();
      const sz = this.setFromMatrixColumn(m, 2).length();
      this.x = sx;
      this.y = sy;
      this.z = sz;
      return this;
    }
    setFromMatrixColumn(m, index) {
      return this.fromArray(m.elements, index * 4);
    }
    setFromMatrix3Column(m, index) {
      return this.fromArray(m.elements, index * 3);
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      return array;
    }
    fromBufferAttribute(attribute, index, offset) {
      if (offset !== void 0) {
        console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");
      }
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      return this;
    }
  };
  var _vector = /* @__PURE__ */ new Vector3();
  var _quaternion = /* @__PURE__ */ new Quaternion();
  var Box3 = class {
    constructor(min, max) {
      Object.defineProperty(this, "isBox3", {value: true});
      this.min = min !== void 0 ? min : new Vector3(Infinity, Infinity, Infinity);
      this.max = max !== void 0 ? max : new Vector3(-Infinity, -Infinity, -Infinity);
    }
    set(min, max) {
      this.min.copy(min);
      this.max.copy(max);
      return this;
    }
    setFromArray(array) {
      let minX = Infinity;
      let minY = Infinity;
      let minZ = Infinity;
      let maxX = -Infinity;
      let maxY = -Infinity;
      let maxZ = -Infinity;
      for (let i = 0, l = array.length; i < l; i += 3) {
        const x = array[i];
        const y = array[i + 1];
        const z = array[i + 2];
        if (x < minX)
          minX = x;
        if (y < minY)
          minY = y;
        if (z < minZ)
          minZ = z;
        if (x > maxX)
          maxX = x;
        if (y > maxY)
          maxY = y;
        if (z > maxZ)
          maxZ = z;
      }
      this.min.set(minX, minY, minZ);
      this.max.set(maxX, maxY, maxZ);
      return this;
    }
    setFromBufferAttribute(attribute) {
      let minX = Infinity;
      let minY = Infinity;
      let minZ = Infinity;
      let maxX = -Infinity;
      let maxY = -Infinity;
      let maxZ = -Infinity;
      for (let i = 0, l = attribute.count; i < l; i++) {
        const x = attribute.getX(i);
        const y = attribute.getY(i);
        const z = attribute.getZ(i);
        if (x < minX)
          minX = x;
        if (y < minY)
          minY = y;
        if (z < minZ)
          minZ = z;
        if (x > maxX)
          maxX = x;
        if (y > maxY)
          maxY = y;
        if (z > maxZ)
          maxZ = z;
      }
      this.min.set(minX, minY, minZ);
      this.max.set(maxX, maxY, maxZ);
      return this;
    }
    setFromPoints(points) {
      this.makeEmpty();
      for (let i = 0, il = points.length; i < il; i++) {
        this.expandByPoint(points[i]);
      }
      return this;
    }
    setFromCenterAndSize(center, size) {
      const halfSize = _vector$1.copy(size).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
    setFromObject(object) {
      this.makeEmpty();
      return this.expandByObject(object);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
    makeEmpty() {
      this.min.x = this.min.y = this.min.z = Infinity;
      this.max.x = this.max.y = this.max.z = -Infinity;
      return this;
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(target) {
      if (target === void 0) {
        console.warn("THREE.Box3: .getCenter() target is now required");
        target = new Vector3();
      }
      return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
      if (target === void 0) {
        console.warn("THREE.Box3: .getSize() target is now required");
        target = new Vector3();
      }
      return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
    expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
    expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
    expandByObject(object) {
      object.updateWorldMatrix(false, false);
      const geometry = object.geometry;
      if (geometry !== void 0) {
        if (geometry.boundingBox === null) {
          geometry.computeBoundingBox();
        }
        _box.copy(geometry.boundingBox);
        _box.applyMatrix4(object.matrixWorld);
        this.union(_box);
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        this.expandByObject(children[i]);
      }
      return this;
    }
    containsPoint(point) {
      return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
    }
    containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
    }
    getParameter(point, target) {
      if (target === void 0) {
        console.warn("THREE.Box3: .getParameter() target is now required");
        target = new Vector3();
      }
      return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
    }
    intersectsBox(box) {
      return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
    }
    intersectsSphere(sphere) {
      this.clampPoint(sphere.center, _vector$1);
      return _vector$1.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    }
    intersectsPlane(plane) {
      let min, max;
      if (plane.normal.x > 0) {
        min = plane.normal.x * this.min.x;
        max = plane.normal.x * this.max.x;
      } else {
        min = plane.normal.x * this.max.x;
        max = plane.normal.x * this.min.x;
      }
      if (plane.normal.y > 0) {
        min += plane.normal.y * this.min.y;
        max += plane.normal.y * this.max.y;
      } else {
        min += plane.normal.y * this.max.y;
        max += plane.normal.y * this.min.y;
      }
      if (plane.normal.z > 0) {
        min += plane.normal.z * this.min.z;
        max += plane.normal.z * this.max.z;
      } else {
        min += plane.normal.z * this.max.z;
        max += plane.normal.z * this.min.z;
      }
      return min <= -plane.constant && max >= -plane.constant;
    }
    intersectsTriangle(triangle) {
      if (this.isEmpty()) {
        return false;
      }
      this.getCenter(_center);
      _extents.subVectors(this.max, _center);
      _v0.subVectors(triangle.a, _center);
      _v1.subVectors(triangle.b, _center);
      _v2.subVectors(triangle.c, _center);
      _f0.subVectors(_v1, _v0);
      _f1.subVectors(_v2, _v1);
      _f2.subVectors(_v0, _v2);
      let axes = [
        0,
        -_f0.z,
        _f0.y,
        0,
        -_f1.z,
        _f1.y,
        0,
        -_f2.z,
        _f2.y,
        _f0.z,
        0,
        -_f0.x,
        _f1.z,
        0,
        -_f1.x,
        _f2.z,
        0,
        -_f2.x,
        -_f0.y,
        _f0.x,
        0,
        -_f1.y,
        _f1.x,
        0,
        -_f2.y,
        _f2.x,
        0
      ];
      if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {
        return false;
      }
      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {
        return false;
      }
      _triangleNormal.crossVectors(_f0, _f1);
      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
      return satForAxes(axes, _v0, _v1, _v2, _extents);
    }
    clampPoint(point, target) {
      if (target === void 0) {
        console.warn("THREE.Box3: .clampPoint() target is now required");
        target = new Vector3();
      }
      return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
      const clampedPoint = _vector$1.copy(point).clamp(this.min, this.max);
      return clampedPoint.sub(point).length();
    }
    getBoundingSphere(target) {
      if (target === void 0) {
        console.error("THREE.Box3: .getBoundingSphere() target is now required");
      }
      this.getCenter(target.center);
      target.radius = this.getSize(_vector$1).length() * 0.5;
      return target;
    }
    intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max);
      if (this.isEmpty())
        this.makeEmpty();
      return this;
    }
    union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
    applyMatrix4(matrix) {
      if (this.isEmpty())
        return this;
      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
      this.setFromPoints(_points);
      return this;
    }
    translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
    equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  };
  function satForAxes(axes, v0, v1, v2, extents) {
    for (let i = 0, j = axes.length - 3; i <= j; i += 3) {
      _testAxis.fromArray(axes, i);
      const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
      const p0 = v0.dot(_testAxis);
      const p1 = v1.dot(_testAxis);
      const p2 = v2.dot(_testAxis);
      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
        return false;
      }
    }
    return true;
  }
  var _points = [
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3()
  ];
  var _vector$1 = /* @__PURE__ */ new Vector3();
  var _box = /* @__PURE__ */ new Box3();
  var _v0 = /* @__PURE__ */ new Vector3();
  var _v1 = /* @__PURE__ */ new Vector3();
  var _v2 = /* @__PURE__ */ new Vector3();
  var _f0 = /* @__PURE__ */ new Vector3();
  var _f1 = /* @__PURE__ */ new Vector3();
  var _f2 = /* @__PURE__ */ new Vector3();
  var _center = /* @__PURE__ */ new Vector3();
  var _extents = /* @__PURE__ */ new Vector3();
  var _triangleNormal = /* @__PURE__ */ new Vector3();
  var _testAxis = /* @__PURE__ */ new Vector3();
  var _box$1 = /* @__PURE__ */ new Box3();
  var Sphere = class {
    constructor(center, radius) {
      this.center = center !== void 0 ? center : new Vector3();
      this.radius = radius !== void 0 ? radius : -1;
    }
    set(center, radius) {
      this.center.copy(center);
      this.radius = radius;
      return this;
    }
    setFromPoints(points, optionalCenter) {
      const center = this.center;
      if (optionalCenter !== void 0) {
        center.copy(optionalCenter);
      } else {
        _box$1.setFromPoints(points).getCenter(center);
      }
      let maxRadiusSq = 0;
      for (let i = 0, il = points.length; i < il; i++) {
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
      }
      this.radius = Math.sqrt(maxRadiusSq);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(sphere) {
      this.center.copy(sphere.center);
      this.radius = sphere.radius;
      return this;
    }
    isEmpty() {
      return this.radius < 0;
    }
    makeEmpty() {
      this.center.set(0, 0, 0);
      this.radius = -1;
      return this;
    }
    containsPoint(point) {
      return point.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(point) {
      return point.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(sphere) {
      const radiusSum = this.radius + sphere.radius;
      return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
    intersectsBox(box) {
      return box.intersectsSphere(this);
    }
    intersectsPlane(plane) {
      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(point, target) {
      const deltaLengthSq = this.center.distanceToSquared(point);
      if (target === void 0) {
        console.warn("THREE.Sphere: .clampPoint() target is now required");
        target = new Vector3();
      }
      target.copy(point);
      if (deltaLengthSq > this.radius * this.radius) {
        target.sub(this.center).normalize();
        target.multiplyScalar(this.radius).add(this.center);
      }
      return target;
    }
    getBoundingBox(target) {
      if (target === void 0) {
        console.warn("THREE.Sphere: .getBoundingBox() target is now required");
        target = new Box3();
      }
      if (this.isEmpty()) {
        target.makeEmpty();
        return target;
      }
      target.set(this.center, this.center);
      target.expandByScalar(this.radius);
      return target;
    }
    applyMatrix4(matrix) {
      this.center.applyMatrix4(matrix);
      this.radius = this.radius * matrix.getMaxScaleOnAxis();
      return this;
    }
    translate(offset) {
      this.center.add(offset);
      return this;
    }
    equals(sphere) {
      return sphere.center.equals(this.center) && sphere.radius === this.radius;
    }
  };
  var _vector$2 = /* @__PURE__ */ new Vector3();
  var _segCenter = /* @__PURE__ */ new Vector3();
  var _segDir = /* @__PURE__ */ new Vector3();
  var _diff = /* @__PURE__ */ new Vector3();
  var _edge1 = /* @__PURE__ */ new Vector3();
  var _edge2 = /* @__PURE__ */ new Vector3();
  var _normal = /* @__PURE__ */ new Vector3();
  var Ray = class {
    constructor(origin, direction) {
      this.origin = origin !== void 0 ? origin : new Vector3();
      this.direction = direction !== void 0 ? direction : new Vector3(0, 0, -1);
    }
    set(origin, direction) {
      this.origin.copy(origin);
      this.direction.copy(direction);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(ray) {
      this.origin.copy(ray.origin);
      this.direction.copy(ray.direction);
      return this;
    }
    at(t, target) {
      if (target === void 0) {
        console.warn("THREE.Ray: .at() target is now required");
        target = new Vector3();
      }
      return target.copy(this.direction).multiplyScalar(t).add(this.origin);
    }
    lookAt(v) {
      this.direction.copy(v).sub(this.origin).normalize();
      return this;
    }
    recast(t) {
      this.origin.copy(this.at(t, _vector$2));
      return this;
    }
    closestPointToPoint(point, target) {
      if (target === void 0) {
        console.warn("THREE.Ray: .closestPointToPoint() target is now required");
        target = new Vector3();
      }
      target.subVectors(point, this.origin);
      const directionDistance = target.dot(this.direction);
      if (directionDistance < 0) {
        return target.copy(this.origin);
      }
      return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
    }
    distanceToPoint(point) {
      return Math.sqrt(this.distanceSqToPoint(point));
    }
    distanceSqToPoint(point) {
      const directionDistance = _vector$2.subVectors(point, this.origin).dot(this.direction);
      if (directionDistance < 0) {
        return this.origin.distanceToSquared(point);
      }
      _vector$2.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
      return _vector$2.distanceToSquared(point);
    }
    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
      _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
      _segDir.copy(v1).sub(v0).normalize();
      _diff.copy(this.origin).sub(_segCenter);
      const segExtent = v0.distanceTo(v1) * 0.5;
      const a01 = -this.direction.dot(_segDir);
      const b0 = _diff.dot(this.direction);
      const b1 = -_diff.dot(_segDir);
      const c = _diff.lengthSq();
      const det = Math.abs(1 - a01 * a01);
      let s0, s1, sqrDist, extDet;
      if (det > 0) {
        s0 = a01 * b1 - b0;
        s1 = a01 * b0 - b1;
        extDet = segExtent * det;
        if (s0 >= 0) {
          if (s1 >= -extDet) {
            if (s1 <= extDet) {
              const invDet = 1 / det;
              s0 *= invDet;
              s1 *= invDet;
              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
            } else {
              s1 = segExtent;
              s0 = Math.max(0, -(a01 * s1 + b0));
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          } else {
            s1 = -segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        } else {
          if (s1 <= -extDet) {
            s0 = Math.max(0, -(-a01 * segExtent + b0));
            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          } else if (s1 <= extDet) {
            s0 = 0;
            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = s1 * (s1 + 2 * b1) + c;
          } else {
            s0 = Math.max(0, -(a01 * segExtent + b0));
            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        }
      } else {
        s1 = a01 > 0 ? -segExtent : segExtent;
        s0 = Math.max(0, -(a01 * s1 + b0));
        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
      }
      if (optionalPointOnRay) {
        optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);
      }
      if (optionalPointOnSegment) {
        optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);
      }
      return sqrDist;
    }
    intersectSphere(sphere, target) {
      _vector$2.subVectors(sphere.center, this.origin);
      const tca = _vector$2.dot(this.direction);
      const d2 = _vector$2.dot(_vector$2) - tca * tca;
      const radius2 = sphere.radius * sphere.radius;
      if (d2 > radius2)
        return null;
      const thc = Math.sqrt(radius2 - d2);
      const t0 = tca - thc;
      const t1 = tca + thc;
      if (t0 < 0 && t1 < 0)
        return null;
      if (t0 < 0)
        return this.at(t1, target);
      return this.at(t0, target);
    }
    intersectsSphere(sphere) {
      return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
    }
    distanceToPlane(plane) {
      const denominator = plane.normal.dot(this.direction);
      if (denominator === 0) {
        if (plane.distanceToPoint(this.origin) === 0) {
          return 0;
        }
        return null;
      }
      const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
      return t >= 0 ? t : null;
    }
    intersectPlane(plane, target) {
      const t = this.distanceToPlane(plane);
      if (t === null) {
        return null;
      }
      return this.at(t, target);
    }
    intersectsPlane(plane) {
      const distToPoint = plane.distanceToPoint(this.origin);
      if (distToPoint === 0) {
        return true;
      }
      const denominator = plane.normal.dot(this.direction);
      if (denominator * distToPoint < 0) {
        return true;
      }
      return false;
    }
    intersectBox(box, target) {
      let tmin, tmax, tymin, tymax, tzmin, tzmax;
      const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
      const origin = this.origin;
      if (invdirx >= 0) {
        tmin = (box.min.x - origin.x) * invdirx;
        tmax = (box.max.x - origin.x) * invdirx;
      } else {
        tmin = (box.max.x - origin.x) * invdirx;
        tmax = (box.min.x - origin.x) * invdirx;
      }
      if (invdiry >= 0) {
        tymin = (box.min.y - origin.y) * invdiry;
        tymax = (box.max.y - origin.y) * invdiry;
      } else {
        tymin = (box.max.y - origin.y) * invdiry;
        tymax = (box.min.y - origin.y) * invdiry;
      }
      if (tmin > tymax || tymin > tmax)
        return null;
      if (tymin > tmin || tmin !== tmin)
        tmin = tymin;
      if (tymax < tmax || tmax !== tmax)
        tmax = tymax;
      if (invdirz >= 0) {
        tzmin = (box.min.z - origin.z) * invdirz;
        tzmax = (box.max.z - origin.z) * invdirz;
      } else {
        tzmin = (box.max.z - origin.z) * invdirz;
        tzmax = (box.min.z - origin.z) * invdirz;
      }
      if (tmin > tzmax || tzmin > tmax)
        return null;
      if (tzmin > tmin || tmin !== tmin)
        tmin = tzmin;
      if (tzmax < tmax || tmax !== tmax)
        tmax = tzmax;
      if (tmax < 0)
        return null;
      return this.at(tmin >= 0 ? tmin : tmax, target);
    }
    intersectsBox(box) {
      return this.intersectBox(box, _vector$2) !== null;
    }
    intersectTriangle(a, b, c, backfaceCulling, target) {
      _edge1.subVectors(b, a);
      _edge2.subVectors(c, a);
      _normal.crossVectors(_edge1, _edge2);
      let DdN = this.direction.dot(_normal);
      let sign2;
      if (DdN > 0) {
        if (backfaceCulling)
          return null;
        sign2 = 1;
      } else if (DdN < 0) {
        sign2 = -1;
        DdN = -DdN;
      } else {
        return null;
      }
      _diff.subVectors(this.origin, a);
      const DdQxE2 = sign2 * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
      if (DdQxE2 < 0) {
        return null;
      }
      const DdE1xQ = sign2 * this.direction.dot(_edge1.cross(_diff));
      if (DdE1xQ < 0) {
        return null;
      }
      if (DdQxE2 + DdE1xQ > DdN) {
        return null;
      }
      const QdN = -sign2 * _diff.dot(_normal);
      if (QdN < 0) {
        return null;
      }
      return this.at(QdN / DdN, target);
    }
    applyMatrix4(matrix4) {
      this.origin.applyMatrix4(matrix4);
      this.direction.transformDirection(matrix4);
      return this;
    }
    equals(ray) {
      return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
    }
  };
  var Matrix4 = class {
    constructor() {
      Object.defineProperty(this, "isMatrix4", {value: true});
      this.elements = [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ];
      if (arguments.length > 0) {
        console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
      }
    }
    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      const te = this.elements;
      te[0] = n11;
      te[4] = n12;
      te[8] = n13;
      te[12] = n14;
      te[1] = n21;
      te[5] = n22;
      te[9] = n23;
      te[13] = n24;
      te[2] = n31;
      te[6] = n32;
      te[10] = n33;
      te[14] = n34;
      te[3] = n41;
      te[7] = n42;
      te[11] = n43;
      te[15] = n44;
      return this;
    }
    identity() {
      this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      return this;
    }
    clone() {
      return new Matrix4().fromArray(this.elements);
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      te[9] = me[9];
      te[10] = me[10];
      te[11] = me[11];
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      te[15] = me[15];
      return this;
    }
    copyPosition(m) {
      const te = this.elements, me = m.elements;
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrixColumn(this, 0);
      yAxis.setFromMatrixColumn(this, 1);
      zAxis.setFromMatrixColumn(this, 2);
      return this;
    }
    makeBasis(xAxis, yAxis, zAxis) {
      this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
      return this;
    }
    extractRotation(m) {
      const te = this.elements;
      const me = m.elements;
      const scaleX = 1 / _v1$1.setFromMatrixColumn(m, 0).length();
      const scaleY = 1 / _v1$1.setFromMatrixColumn(m, 1).length();
      const scaleZ = 1 / _v1$1.setFromMatrixColumn(m, 2).length();
      te[0] = me[0] * scaleX;
      te[1] = me[1] * scaleX;
      te[2] = me[2] * scaleX;
      te[3] = 0;
      te[4] = me[4] * scaleY;
      te[5] = me[5] * scaleY;
      te[6] = me[6] * scaleY;
      te[7] = 0;
      te[8] = me[8] * scaleZ;
      te[9] = me[9] * scaleZ;
      te[10] = me[10] * scaleZ;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromEuler(euler) {
      if (!(euler && euler.isEuler)) {
        console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
      }
      const te = this.elements;
      const x = euler.x, y = euler.y, z = euler.z;
      const a = Math.cos(x), b = Math.sin(x);
      const c = Math.cos(y), d = Math.sin(y);
      const e = Math.cos(z), f = Math.sin(z);
      if (euler.order === "XYZ") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = -c * f;
        te[8] = d;
        te[1] = af + be * d;
        te[5] = ae - bf * d;
        te[9] = -b * c;
        te[2] = bf - ae * d;
        te[6] = be + af * d;
        te[10] = a * c;
      } else if (euler.order === "YXZ") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce + df * b;
        te[4] = de * b - cf;
        te[8] = a * d;
        te[1] = a * f;
        te[5] = a * e;
        te[9] = -b;
        te[2] = cf * b - de;
        te[6] = df + ce * b;
        te[10] = a * c;
      } else if (euler.order === "ZXY") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce - df * b;
        te[4] = -a * f;
        te[8] = de + cf * b;
        te[1] = cf + de * b;
        te[5] = a * e;
        te[9] = df - ce * b;
        te[2] = -a * d;
        te[6] = b;
        te[10] = a * c;
      } else if (euler.order === "ZYX") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = be * d - af;
        te[8] = ae * d + bf;
        te[1] = c * f;
        te[5] = bf * d + ae;
        te[9] = af * d - be;
        te[2] = -d;
        te[6] = b * c;
        te[10] = a * c;
      } else if (euler.order === "YZX") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = bd - ac * f;
        te[8] = bc * f + ad;
        te[1] = f;
        te[5] = a * e;
        te[9] = -b * e;
        te[2] = -d * e;
        te[6] = ad * f + bc;
        te[10] = ac - bd * f;
      } else if (euler.order === "XZY") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = -f;
        te[8] = d * e;
        te[1] = ac * f + bd;
        te[5] = a * e;
        te[9] = ad * f - bc;
        te[2] = bc * f - ad;
        te[6] = b * e;
        te[10] = bd * f + ac;
      }
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromQuaternion(q) {
      return this.compose(_zero, q, _one);
    }
    lookAt(eye, target, up) {
      const te = this.elements;
      _z.subVectors(eye, target);
      if (_z.lengthSq() === 0) {
        _z.z = 1;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
      if (_x.lengthSq() === 0) {
        if (Math.abs(up.z) === 1) {
          _z.x += 1e-4;
        } else {
          _z.z += 1e-4;
        }
        _z.normalize();
        _x.crossVectors(up, _z);
      }
      _x.normalize();
      _y.crossVectors(_z, _x);
      te[0] = _x.x;
      te[4] = _y.x;
      te[8] = _z.x;
      te[1] = _x.y;
      te[5] = _y.y;
      te[9] = _z.y;
      te[2] = _x.z;
      te[6] = _y.z;
      te[10] = _z.z;
      return this;
    }
    multiply(m, n) {
      if (n !== void 0) {
        console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.");
        return this.multiplyMatrices(m, n);
      }
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
      const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
      const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
      const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
      const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
      const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
      const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
      const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[4] *= s;
      te[8] *= s;
      te[12] *= s;
      te[1] *= s;
      te[5] *= s;
      te[9] *= s;
      te[13] *= s;
      te[2] *= s;
      te[6] *= s;
      te[10] *= s;
      te[14] *= s;
      te[3] *= s;
      te[7] *= s;
      te[11] *= s;
      te[15] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
      const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
      const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
      const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
      return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
    transpose() {
      const te = this.elements;
      let tmp2;
      tmp2 = te[1];
      te[1] = te[4];
      te[4] = tmp2;
      tmp2 = te[2];
      te[2] = te[8];
      te[8] = tmp2;
      tmp2 = te[6];
      te[6] = te[9];
      te[9] = tmp2;
      tmp2 = te[3];
      te[3] = te[12];
      te[12] = tmp2;
      tmp2 = te[7];
      te[7] = te[13];
      te[13] = tmp2;
      tmp2 = te[11];
      te[11] = te[14];
      te[14] = tmp2;
      return this;
    }
    setPosition(x, y, z) {
      const te = this.elements;
      if (x.isVector3) {
        te[12] = x.x;
        te[13] = x.y;
        te[14] = x.z;
      } else {
        te[12] = x;
        te[13] = y;
        te[14] = z;
      }
      return this;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
      const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
      if (det === 0)
        return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
      te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
      te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
      te[4] = t12 * detInv;
      te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
      te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
      te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
      te[8] = t13 * detInv;
      te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
      te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
      te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
      te[12] = t14 * detInv;
      te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
      te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
      te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
      return this;
    }
    scale(v) {
      const te = this.elements;
      const x = v.x, y = v.y, z = v.z;
      te[0] *= x;
      te[4] *= y;
      te[8] *= z;
      te[1] *= x;
      te[5] *= y;
      te[9] *= z;
      te[2] *= x;
      te[6] *= y;
      te[10] *= z;
      te[3] *= x;
      te[7] *= y;
      te[11] *= z;
      return this;
    }
    getMaxScaleOnAxis() {
      const te = this.elements;
      const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
      const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
      const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    makeTranslation(x, y, z) {
      this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
      return this;
    }
    makeRotationX(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
      return this;
    }
    makeRotationY(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
      return this;
    }
    makeRotationZ(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      return this;
    }
    makeRotationAxis(axis, angle) {
      const c = Math.cos(angle);
      const s = Math.sin(angle);
      const t = 1 - c;
      const x = axis.x, y = axis.y, z = axis.z;
      const tx = t * x, ty = t * y;
      this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
      return this;
    }
    makeScale(x, y, z) {
      this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
      return this;
    }
    makeShear(x, y, z) {
      this.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);
      return this;
    }
    compose(position, quaternion, scale) {
      const te = this.elements;
      const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
      const x2 = x + x, y2 = y + y, z2 = z + z;
      const xx = x * x2, xy = x * y2, xz = x * z2;
      const yy = y * y2, yz = y * z2, zz = z * z2;
      const wx = w * x2, wy = w * y2, wz = w * z2;
      const sx = scale.x, sy = scale.y, sz = scale.z;
      te[0] = (1 - (yy + zz)) * sx;
      te[1] = (xy + wz) * sx;
      te[2] = (xz - wy) * sx;
      te[3] = 0;
      te[4] = (xy - wz) * sy;
      te[5] = (1 - (xx + zz)) * sy;
      te[6] = (yz + wx) * sy;
      te[7] = 0;
      te[8] = (xz + wy) * sz;
      te[9] = (yz - wx) * sz;
      te[10] = (1 - (xx + yy)) * sz;
      te[11] = 0;
      te[12] = position.x;
      te[13] = position.y;
      te[14] = position.z;
      te[15] = 1;
      return this;
    }
    decompose(position, quaternion, scale) {
      const te = this.elements;
      let sx = _v1$1.set(te[0], te[1], te[2]).length();
      const sy = _v1$1.set(te[4], te[5], te[6]).length();
      const sz = _v1$1.set(te[8], te[9], te[10]).length();
      const det = this.determinant();
      if (det < 0)
        sx = -sx;
      position.x = te[12];
      position.y = te[13];
      position.z = te[14];
      _m1.copy(this);
      const invSX = 1 / sx;
      const invSY = 1 / sy;
      const invSZ = 1 / sz;
      _m1.elements[0] *= invSX;
      _m1.elements[1] *= invSX;
      _m1.elements[2] *= invSX;
      _m1.elements[4] *= invSY;
      _m1.elements[5] *= invSY;
      _m1.elements[6] *= invSY;
      _m1.elements[8] *= invSZ;
      _m1.elements[9] *= invSZ;
      _m1.elements[10] *= invSZ;
      quaternion.setFromRotationMatrix(_m1);
      scale.x = sx;
      scale.y = sy;
      scale.z = sz;
      return this;
    }
    makePerspective(left, right, top, bottom, near, far) {
      if (far === void 0) {
        console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
      }
      const te = this.elements;
      const x = 2 * near / (right - left);
      const y = 2 * near / (top - bottom);
      const a = (right + left) / (right - left);
      const b = (top + bottom) / (top - bottom);
      const c = -(far + near) / (far - near);
      const d = -2 * far * near / (far - near);
      te[0] = x;
      te[4] = 0;
      te[8] = a;
      te[12] = 0;
      te[1] = 0;
      te[5] = y;
      te[9] = b;
      te[13] = 0;
      te[2] = 0;
      te[6] = 0;
      te[10] = c;
      te[14] = d;
      te[3] = 0;
      te[7] = 0;
      te[11] = -1;
      te[15] = 0;
      return this;
    }
    makeOrthographic(left, right, top, bottom, near, far) {
      const te = this.elements;
      const w = 1 / (right - left);
      const h = 1 / (top - bottom);
      const p = 1 / (far - near);
      const x = (right + left) * w;
      const y = (top + bottom) * h;
      const z = (far + near) * p;
      te[0] = 2 * w;
      te[4] = 0;
      te[8] = 0;
      te[12] = -x;
      te[1] = 0;
      te[5] = 2 * h;
      te[9] = 0;
      te[13] = -y;
      te[2] = 0;
      te[6] = 0;
      te[10] = -2 * p;
      te[14] = -z;
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[15] = 1;
      return this;
    }
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i = 0; i < 16; i++) {
        if (te[i] !== me[i])
          return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i = 0; i < 16; i++) {
        this.elements[i] = array[i + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      array[offset + 9] = te[9];
      array[offset + 10] = te[10];
      array[offset + 11] = te[11];
      array[offset + 12] = te[12];
      array[offset + 13] = te[13];
      array[offset + 14] = te[14];
      array[offset + 15] = te[15];
      return array;
    }
  };
  var _v1$1 = /* @__PURE__ */ new Vector3();
  var _m1 = /* @__PURE__ */ new Matrix4();
  var _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
  var _one = /* @__PURE__ */ new Vector3(1, 1, 1);
  var _x = /* @__PURE__ */ new Vector3();
  var _y = /* @__PURE__ */ new Vector3();
  var _z = /* @__PURE__ */ new Vector3();
  var Euler = class {
    constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {
      Object.defineProperty(this, "isEuler", {value: true});
      this._x = x;
      this._y = y;
      this._z = z;
      this._order = order;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get order() {
      return this._order;
    }
    set order(value) {
      this._order = value;
      this._onChangeCallback();
    }
    set(x, y, z, order) {
      this._x = x;
      this._y = y;
      this._z = z;
      this._order = order || this._order;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(euler) {
      this._x = euler._x;
      this._y = euler._y;
      this._z = euler._z;
      this._order = euler._order;
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m, order, update2) {
      const clamp = MathUtils.clamp;
      const te = m.elements;
      const m11 = te[0], m12 = te[4], m13 = te[8];
      const m21 = te[1], m22 = te[5], m23 = te[9];
      const m31 = te[2], m32 = te[6], m33 = te[10];
      order = order || this._order;
      switch (order) {
        case "XYZ":
          this._y = Math.asin(clamp(m13, -1, 1));
          if (Math.abs(m13) < 0.9999999) {
            this._x = Math.atan2(-m23, m33);
            this._z = Math.atan2(-m12, m11);
          } else {
            this._x = Math.atan2(m32, m22);
            this._z = 0;
          }
          break;
        case "YXZ":
          this._x = Math.asin(-clamp(m23, -1, 1));
          if (Math.abs(m23) < 0.9999999) {
            this._y = Math.atan2(m13, m33);
            this._z = Math.atan2(m21, m22);
          } else {
            this._y = Math.atan2(-m31, m11);
            this._z = 0;
          }
          break;
        case "ZXY":
          this._x = Math.asin(clamp(m32, -1, 1));
          if (Math.abs(m32) < 0.9999999) {
            this._y = Math.atan2(-m31, m33);
            this._z = Math.atan2(-m12, m22);
          } else {
            this._y = 0;
            this._z = Math.atan2(m21, m11);
          }
          break;
        case "ZYX":
          this._y = Math.asin(-clamp(m31, -1, 1));
          if (Math.abs(m31) < 0.9999999) {
            this._x = Math.atan2(m32, m33);
            this._z = Math.atan2(m21, m11);
          } else {
            this._x = 0;
            this._z = Math.atan2(-m12, m22);
          }
          break;
        case "YZX":
          this._z = Math.asin(clamp(m21, -1, 1));
          if (Math.abs(m21) < 0.9999999) {
            this._x = Math.atan2(-m23, m22);
            this._y = Math.atan2(-m31, m11);
          } else {
            this._x = 0;
            this._y = Math.atan2(m13, m33);
          }
          break;
        case "XZY":
          this._z = Math.asin(-clamp(m12, -1, 1));
          if (Math.abs(m12) < 0.9999999) {
            this._x = Math.atan2(m32, m22);
            this._y = Math.atan2(m13, m11);
          } else {
            this._x = Math.atan2(-m23, m33);
            this._y = 0;
          }
          break;
        default:
          console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
      }
      this._order = order;
      if (update2 !== false)
        this._onChangeCallback();
      return this;
    }
    setFromQuaternion(q, order, update2) {
      _matrix.makeRotationFromQuaternion(q);
      return this.setFromRotationMatrix(_matrix, order, update2);
    }
    setFromVector3(v, order) {
      return this.set(v.x, v.y, v.z, order || this._order);
    }
    reorder(newOrder) {
      _quaternion$1.setFromEuler(this);
      return this.setFromQuaternion(_quaternion$1, newOrder);
    }
    equals(euler) {
      return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
    }
    fromArray(array) {
      this._x = array[0];
      this._y = array[1];
      this._z = array[2];
      if (array[3] !== void 0)
        this._order = array[3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._order;
      return array;
    }
    toVector3(optionalResult) {
      if (optionalResult) {
        return optionalResult.set(this._x, this._y, this._z);
      } else {
        return new Vector3(this._x, this._y, this._z);
      }
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
  };
  Euler.DefaultOrder = "XYZ";
  Euler.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"];
  var _matrix = /* @__PURE__ */ new Matrix4();
  var _quaternion$1 = /* @__PURE__ */ new Quaternion();
  var Layers = class {
    constructor() {
      this.mask = 1 | 0;
    }
    set(channel) {
      this.mask = 1 << channel | 0;
    }
    enable(channel) {
      this.mask |= 1 << channel | 0;
    }
    enableAll() {
      this.mask = 4294967295 | 0;
    }
    toggle(channel) {
      this.mask ^= 1 << channel | 0;
    }
    disable(channel) {
      this.mask &= ~(1 << channel | 0);
    }
    disableAll() {
      this.mask = 0;
    }
    test(layers) {
      return (this.mask & layers.mask) !== 0;
    }
  };
  var _object3DId = 0;
  var _v1$2 = new Vector3();
  var _q1 = new Quaternion();
  var _m1$1 = new Matrix4();
  var _target = new Vector3();
  var _position = new Vector3();
  var _scale = new Vector3();
  var _quaternion$2 = new Quaternion();
  var _xAxis = new Vector3(1, 0, 0);
  var _yAxis = new Vector3(0, 1, 0);
  var _zAxis = new Vector3(0, 0, 1);
  var _addedEvent = {type: "added"};
  var _removedEvent = {type: "removed"};
  function Object3D() {
    Object.defineProperty(this, "id", {value: _object3DId++});
    this.uuid = MathUtils.generateUUID();
    this.name = "";
    this.type = "Object3D";
    this.parent = null;
    this.children = [];
    this.up = Object3D.DefaultUp.clone();
    const position = new Vector3();
    const rotation = new Euler();
    const quaternion = new Quaternion();
    const scale = new Vector3(1, 1, 1);
    function onRotationChange() {
      quaternion.setFromEuler(rotation, false);
    }
    function onQuaternionChange() {
      rotation.setFromQuaternion(quaternion, void 0, false);
    }
    rotation._onChange(onRotationChange);
    quaternion._onChange(onQuaternionChange);
    Object.defineProperties(this, {
      position: {
        configurable: true,
        enumerable: true,
        value: position
      },
      rotation: {
        configurable: true,
        enumerable: true,
        value: rotation
      },
      quaternion: {
        configurable: true,
        enumerable: true,
        value: quaternion
      },
      scale: {
        configurable: true,
        enumerable: true,
        value: scale
      },
      modelViewMatrix: {
        value: new Matrix4()
      },
      normalMatrix: {
        value: new Matrix3()
      }
    });
    this.matrix = new Matrix4();
    this.matrixWorld = new Matrix4();
    this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
    this.matrixWorldNeedsUpdate = false;
    this.layers = new Layers();
    this.visible = true;
    this.castShadow = false;
    this.receiveShadow = false;
    this.frustumCulled = true;
    this.renderOrder = 0;
    this.animations = [];
    this.userData = {};
  }
  Object3D.DefaultUp = new Vector3(0, 1, 0);
  Object3D.DefaultMatrixAutoUpdate = true;
  Object3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
    constructor: Object3D,
    isObject3D: true,
    onBeforeRender: function() {
    },
    onAfterRender: function() {
    },
    applyMatrix4: function(matrix) {
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      this.matrix.premultiply(matrix);
      this.matrix.decompose(this.position, this.quaternion, this.scale);
    },
    applyQuaternion: function(q) {
      this.quaternion.premultiply(q);
      return this;
    },
    setRotationFromAxisAngle: function(axis, angle) {
      this.quaternion.setFromAxisAngle(axis, angle);
    },
    setRotationFromEuler: function(euler) {
      this.quaternion.setFromEuler(euler, true);
    },
    setRotationFromMatrix: function(m) {
      this.quaternion.setFromRotationMatrix(m);
    },
    setRotationFromQuaternion: function(q) {
      this.quaternion.copy(q);
    },
    rotateOnAxis: function(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.multiply(_q1);
      return this;
    },
    rotateOnWorldAxis: function(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.premultiply(_q1);
      return this;
    },
    rotateX: function(angle) {
      return this.rotateOnAxis(_xAxis, angle);
    },
    rotateY: function(angle) {
      return this.rotateOnAxis(_yAxis, angle);
    },
    rotateZ: function(angle) {
      return this.rotateOnAxis(_zAxis, angle);
    },
    translateOnAxis: function(axis, distance) {
      _v1$2.copy(axis).applyQuaternion(this.quaternion);
      this.position.add(_v1$2.multiplyScalar(distance));
      return this;
    },
    translateX: function(distance) {
      return this.translateOnAxis(_xAxis, distance);
    },
    translateY: function(distance) {
      return this.translateOnAxis(_yAxis, distance);
    },
    translateZ: function(distance) {
      return this.translateOnAxis(_zAxis, distance);
    },
    localToWorld: function(vector) {
      return vector.applyMatrix4(this.matrixWorld);
    },
    worldToLocal: function(vector) {
      return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
    },
    lookAt: function(x, y, z) {
      if (x.isVector3) {
        _target.copy(x);
      } else {
        _target.set(x, y, z);
      }
      const parent = this.parent;
      this.updateWorldMatrix(true, false);
      _position.setFromMatrixPosition(this.matrixWorld);
      if (this.isCamera || this.isLight) {
        _m1$1.lookAt(_position, _target, this.up);
      } else {
        _m1$1.lookAt(_target, _position, this.up);
      }
      this.quaternion.setFromRotationMatrix(_m1$1);
      if (parent) {
        _m1$1.extractRotation(parent.matrixWorld);
        _q1.setFromRotationMatrix(_m1$1);
        this.quaternion.premultiply(_q1.invert());
      }
    },
    add: function(object) {
      if (arguments.length > 1) {
        for (let i = 0; i < arguments.length; i++) {
          this.add(arguments[i]);
        }
        return this;
      }
      if (object === this) {
        console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
        return this;
      }
      if (object && object.isObject3D) {
        if (object.parent !== null) {
          object.parent.remove(object);
        }
        object.parent = this;
        this.children.push(object);
        object.dispatchEvent(_addedEvent);
      } else {
        console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
      }
      return this;
    },
    remove: function(object) {
      if (arguments.length > 1) {
        for (let i = 0; i < arguments.length; i++) {
          this.remove(arguments[i]);
        }
        return this;
      }
      const index = this.children.indexOf(object);
      if (index !== -1) {
        object.parent = null;
        this.children.splice(index, 1);
        object.dispatchEvent(_removedEvent);
      }
      return this;
    },
    clear: function() {
      for (let i = 0; i < this.children.length; i++) {
        const object = this.children[i];
        object.parent = null;
        object.dispatchEvent(_removedEvent);
      }
      this.children.length = 0;
      return this;
    },
    attach: function(object) {
      this.updateWorldMatrix(true, false);
      _m1$1.copy(this.matrixWorld).invert();
      if (object.parent !== null) {
        object.parent.updateWorldMatrix(true, false);
        _m1$1.multiply(object.parent.matrixWorld);
      }
      object.applyMatrix4(_m1$1);
      object.updateWorldMatrix(false, false);
      this.add(object);
      return this;
    },
    getObjectById: function(id) {
      return this.getObjectByProperty("id", id);
    },
    getObjectByName: function(name) {
      return this.getObjectByProperty("name", name);
    },
    getObjectByProperty: function(name, value) {
      if (this[name] === value)
        return this;
      for (let i = 0, l = this.children.length; i < l; i++) {
        const child = this.children[i];
        const object = child.getObjectByProperty(name, value);
        if (object !== void 0) {
          return object;
        }
      }
      return void 0;
    },
    getWorldPosition: function(target) {
      if (target === void 0) {
        console.warn("THREE.Object3D: .getWorldPosition() target is now required");
        target = new Vector3();
      }
      this.updateWorldMatrix(true, false);
      return target.setFromMatrixPosition(this.matrixWorld);
    },
    getWorldQuaternion: function(target) {
      if (target === void 0) {
        console.warn("THREE.Object3D: .getWorldQuaternion() target is now required");
        target = new Quaternion();
      }
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position, target, _scale);
      return target;
    },
    getWorldScale: function(target) {
      if (target === void 0) {
        console.warn("THREE.Object3D: .getWorldScale() target is now required");
        target = new Vector3();
      }
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position, _quaternion$2, target);
      return target;
    },
    getWorldDirection: function(target) {
      if (target === void 0) {
        console.warn("THREE.Object3D: .getWorldDirection() target is now required");
        target = new Vector3();
      }
      this.updateWorldMatrix(true, false);
      const e = this.matrixWorld.elements;
      return target.set(e[8], e[9], e[10]).normalize();
    },
    raycast: function() {
    },
    traverse: function(callback) {
      callback(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].traverse(callback);
      }
    },
    traverseVisible: function(callback) {
      if (this.visible === false)
        return;
      callback(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].traverseVisible(callback);
      }
    },
    traverseAncestors: function(callback) {
      const parent = this.parent;
      if (parent !== null) {
        callback(parent);
        parent.traverseAncestors(callback);
      }
    },
    updateMatrix: function() {
      this.matrix.compose(this.position, this.quaternion, this.scale);
      this.matrixWorldNeedsUpdate = true;
    },
    updateMatrixWorld: function(force) {
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      if (this.matrixWorldNeedsUpdate || force) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
        this.matrixWorldNeedsUpdate = false;
        force = true;
      }
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].updateMatrixWorld(force);
      }
    },
    updateWorldMatrix: function(updateParents, updateChildren) {
      const parent = this.parent;
      if (updateParents === true && parent !== null) {
        parent.updateWorldMatrix(true, false);
      }
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      if (this.parent === null) {
        this.matrixWorld.copy(this.matrix);
      } else {
        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      }
      if (updateChildren === true) {
        const children = this.children;
        for (let i = 0, l = children.length; i < l; i++) {
          children[i].updateWorldMatrix(false, true);
        }
      }
    },
    toJSON: function(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      const output = {};
      if (isRootObject) {
        meta = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
          shapes: {},
          skeletons: {},
          animations: {}
        };
        output.metadata = {
          version: 4.5,
          type: "Object",
          generator: "Object3D.toJSON"
        };
      }
      const object = {};
      object.uuid = this.uuid;
      object.type = this.type;
      if (this.name !== "")
        object.name = this.name;
      if (this.castShadow === true)
        object.castShadow = true;
      if (this.receiveShadow === true)
        object.receiveShadow = true;
      if (this.visible === false)
        object.visible = false;
      if (this.frustumCulled === false)
        object.frustumCulled = false;
      if (this.renderOrder !== 0)
        object.renderOrder = this.renderOrder;
      if (JSON.stringify(this.userData) !== "{}")
        object.userData = this.userData;
      object.layers = this.layers.mask;
      object.matrix = this.matrix.toArray();
      if (this.matrixAutoUpdate === false)
        object.matrixAutoUpdate = false;
      if (this.isInstancedMesh) {
        object.type = "InstancedMesh";
        object.count = this.count;
        object.instanceMatrix = this.instanceMatrix.toJSON();
      }
      function serialize(library, element) {
        if (library[element.uuid] === void 0) {
          library[element.uuid] = element.toJSON(meta);
        }
        return element.uuid;
      }
      if (this.isMesh || this.isLine || this.isPoints) {
        object.geometry = serialize(meta.geometries, this.geometry);
        const parameters = this.geometry.parameters;
        if (parameters !== void 0 && parameters.shapes !== void 0) {
          const shapes = parameters.shapes;
          if (Array.isArray(shapes)) {
            for (let i = 0, l = shapes.length; i < l; i++) {
              const shape = shapes[i];
              serialize(meta.shapes, shape);
            }
          } else {
            serialize(meta.shapes, shapes);
          }
        }
      }
      if (this.isSkinnedMesh) {
        object.bindMode = this.bindMode;
        object.bindMatrix = this.bindMatrix.toArray();
        if (this.skeleton !== void 0) {
          serialize(meta.skeletons, this.skeleton);
          object.skeleton = this.skeleton.uuid;
        }
      }
      if (this.material !== void 0) {
        if (Array.isArray(this.material)) {
          const uuids = [];
          for (let i = 0, l = this.material.length; i < l; i++) {
            uuids.push(serialize(meta.materials, this.material[i]));
          }
          object.material = uuids;
        } else {
          object.material = serialize(meta.materials, this.material);
        }
      }
      if (this.children.length > 0) {
        object.children = [];
        for (let i = 0; i < this.children.length; i++) {
          object.children.push(this.children[i].toJSON(meta).object);
        }
      }
      if (this.animations.length > 0) {
        object.animations = [];
        for (let i = 0; i < this.animations.length; i++) {
          const animation = this.animations[i];
          object.animations.push(serialize(meta.animations, animation));
        }
      }
      if (isRootObject) {
        const geometries = extractFromCache(meta.geometries);
        const materials = extractFromCache(meta.materials);
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        const shapes = extractFromCache(meta.shapes);
        const skeletons = extractFromCache(meta.skeletons);
        const animations = extractFromCache(meta.animations);
        if (geometries.length > 0)
          output.geometries = geometries;
        if (materials.length > 0)
          output.materials = materials;
        if (textures.length > 0)
          output.textures = textures;
        if (images.length > 0)
          output.images = images;
        if (shapes.length > 0)
          output.shapes = shapes;
        if (skeletons.length > 0)
          output.skeletons = skeletons;
        if (animations.length > 0)
          output.animations = animations;
      }
      output.object = object;
      return output;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data = cache[key];
          delete data.metadata;
          values.push(data);
        }
        return values;
      }
    },
    clone: function(recursive) {
      return new this.constructor().copy(this, recursive);
    },
    copy: function(source, recursive = true) {
      this.name = source.name;
      this.up.copy(source.up);
      this.position.copy(source.position);
      this.rotation.order = source.rotation.order;
      this.quaternion.copy(source.quaternion);
      this.scale.copy(source.scale);
      this.matrix.copy(source.matrix);
      this.matrixWorld.copy(source.matrixWorld);
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
      this.layers.mask = source.layers.mask;
      this.visible = source.visible;
      this.castShadow = source.castShadow;
      this.receiveShadow = source.receiveShadow;
      this.frustumCulled = source.frustumCulled;
      this.renderOrder = source.renderOrder;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      if (recursive === true) {
        for (let i = 0; i < source.children.length; i++) {
          const child = source.children[i];
          this.add(child.clone());
        }
      }
      return this;
    }
  });
  var _vector1 = /* @__PURE__ */ new Vector3();
  var _vector2 = /* @__PURE__ */ new Vector3();
  var _normalMatrix = /* @__PURE__ */ new Matrix3();
  var Plane = class {
    constructor(normal, constant) {
      Object.defineProperty(this, "isPlane", {value: true});
      this.normal = normal !== void 0 ? normal : new Vector3(1, 0, 0);
      this.constant = constant !== void 0 ? constant : 0;
    }
    set(normal, constant) {
      this.normal.copy(normal);
      this.constant = constant;
      return this;
    }
    setComponents(x, y, z, w) {
      this.normal.set(x, y, z);
      this.constant = w;
      return this;
    }
    setFromNormalAndCoplanarPoint(normal, point) {
      this.normal.copy(normal);
      this.constant = -point.dot(this.normal);
      return this;
    }
    setFromCoplanarPoints(a, b, c) {
      const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
      this.setFromNormalAndCoplanarPoint(normal, a);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(plane) {
      this.normal.copy(plane.normal);
      this.constant = plane.constant;
      return this;
    }
    normalize() {
      const inverseNormalLength = 1 / this.normal.length();
      this.normal.multiplyScalar(inverseNormalLength);
      this.constant *= inverseNormalLength;
      return this;
    }
    negate() {
      this.constant *= -1;
      this.normal.negate();
      return this;
    }
    distanceToPoint(point) {
      return this.normal.dot(point) + this.constant;
    }
    distanceToSphere(sphere) {
      return this.distanceToPoint(sphere.center) - sphere.radius;
    }
    projectPoint(point, target) {
      if (target === void 0) {
        console.warn("THREE.Plane: .projectPoint() target is now required");
        target = new Vector3();
      }
      return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);
    }
    intersectLine(line, target) {
      if (target === void 0) {
        console.warn("THREE.Plane: .intersectLine() target is now required");
        target = new Vector3();
      }
      const direction = line.delta(_vector1);
      const denominator = this.normal.dot(direction);
      if (denominator === 0) {
        if (this.distanceToPoint(line.start) === 0) {
          return target.copy(line.start);
        }
        return void 0;
      }
      const t = -(line.start.dot(this.normal) + this.constant) / denominator;
      if (t < 0 || t > 1) {
        return void 0;
      }
      return target.copy(direction).multiplyScalar(t).add(line.start);
    }
    intersectsLine(line) {
      const startSign = this.distanceToPoint(line.start);
      const endSign = this.distanceToPoint(line.end);
      return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
    }
    intersectsBox(box) {
      return box.intersectsPlane(this);
    }
    intersectsSphere(sphere) {
      return sphere.intersectsPlane(this);
    }
    coplanarPoint(target) {
      if (target === void 0) {
        console.warn("THREE.Plane: .coplanarPoint() target is now required");
        target = new Vector3();
      }
      return target.copy(this.normal).multiplyScalar(-this.constant);
    }
    applyMatrix4(matrix, optionalNormalMatrix) {
      const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
      const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
      const normal = this.normal.applyMatrix3(normalMatrix).normalize();
      this.constant = -referencePoint.dot(normal);
      return this;
    }
    translate(offset) {
      this.constant -= offset.dot(this.normal);
      return this;
    }
    equals(plane) {
      return plane.normal.equals(this.normal) && plane.constant === this.constant;
    }
  };
  var _v0$1 = /* @__PURE__ */ new Vector3();
  var _v1$3 = /* @__PURE__ */ new Vector3();
  var _v2$1 = /* @__PURE__ */ new Vector3();
  var _v3 = /* @__PURE__ */ new Vector3();
  var _vab = /* @__PURE__ */ new Vector3();
  var _vac = /* @__PURE__ */ new Vector3();
  var _vbc = /* @__PURE__ */ new Vector3();
  var _vap = /* @__PURE__ */ new Vector3();
  var _vbp = /* @__PURE__ */ new Vector3();
  var _vcp = /* @__PURE__ */ new Vector3();
  var Triangle = class {
    constructor(a, b, c) {
      this.a = a !== void 0 ? a : new Vector3();
      this.b = b !== void 0 ? b : new Vector3();
      this.c = c !== void 0 ? c : new Vector3();
    }
    static getNormal(a, b, c, target) {
      if (target === void 0) {
        console.warn("THREE.Triangle: .getNormal() target is now required");
        target = new Vector3();
      }
      target.subVectors(c, b);
      _v0$1.subVectors(a, b);
      target.cross(_v0$1);
      const targetLengthSq = target.lengthSq();
      if (targetLengthSq > 0) {
        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
      }
      return target.set(0, 0, 0);
    }
    static getBarycoord(point, a, b, c, target) {
      _v0$1.subVectors(c, a);
      _v1$3.subVectors(b, a);
      _v2$1.subVectors(point, a);
      const dot00 = _v0$1.dot(_v0$1);
      const dot01 = _v0$1.dot(_v1$3);
      const dot02 = _v0$1.dot(_v2$1);
      const dot11 = _v1$3.dot(_v1$3);
      const dot12 = _v1$3.dot(_v2$1);
      const denom = dot00 * dot11 - dot01 * dot01;
      if (target === void 0) {
        console.warn("THREE.Triangle: .getBarycoord() target is now required");
        target = new Vector3();
      }
      if (denom === 0) {
        return target.set(-2, -1, -1);
      }
      const invDenom = 1 / denom;
      const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
      const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
      return target.set(1 - u - v, v, u);
    }
    static containsPoint(point, a, b, c) {
      this.getBarycoord(point, a, b, c, _v3);
      return _v3.x >= 0 && _v3.y >= 0 && _v3.x + _v3.y <= 1;
    }
    static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
      this.getBarycoord(point, p1, p2, p3, _v3);
      target.set(0, 0);
      target.addScaledVector(uv1, _v3.x);
      target.addScaledVector(uv2, _v3.y);
      target.addScaledVector(uv3, _v3.z);
      return target;
    }
    static isFrontFacing(a, b, c, direction) {
      _v0$1.subVectors(c, b);
      _v1$3.subVectors(a, b);
      return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
    }
    set(a, b, c) {
      this.a.copy(a);
      this.b.copy(b);
      this.c.copy(c);
      return this;
    }
    setFromPointsAndIndices(points, i0, i1, i2) {
      this.a.copy(points[i0]);
      this.b.copy(points[i1]);
      this.c.copy(points[i2]);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(triangle) {
      this.a.copy(triangle.a);
      this.b.copy(triangle.b);
      this.c.copy(triangle.c);
      return this;
    }
    getArea() {
      _v0$1.subVectors(this.c, this.b);
      _v1$3.subVectors(this.a, this.b);
      return _v0$1.cross(_v1$3).length() * 0.5;
    }
    getMidpoint(target) {
      if (target === void 0) {
        console.warn("THREE.Triangle: .getMidpoint() target is now required");
        target = new Vector3();
      }
      return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(target) {
      return Triangle.getNormal(this.a, this.b, this.c, target);
    }
    getPlane(target) {
      if (target === void 0) {
        console.warn("THREE.Triangle: .getPlane() target is now required");
        target = new Plane();
      }
      return target.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(point, target) {
      return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
    }
    getUV(point, uv1, uv2, uv3, target) {
      return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
    }
    containsPoint(point) {
      return Triangle.containsPoint(point, this.a, this.b, this.c);
    }
    isFrontFacing(direction) {
      return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
    }
    intersectsBox(box) {
      return box.intersectsTriangle(this);
    }
    closestPointToPoint(p, target) {
      if (target === void 0) {
        console.warn("THREE.Triangle: .closestPointToPoint() target is now required");
        target = new Vector3();
      }
      const a = this.a, b = this.b, c = this.c;
      let v, w;
      _vab.subVectors(b, a);
      _vac.subVectors(c, a);
      _vap.subVectors(p, a);
      const d1 = _vab.dot(_vap);
      const d2 = _vac.dot(_vap);
      if (d1 <= 0 && d2 <= 0) {
        return target.copy(a);
      }
      _vbp.subVectors(p, b);
      const d3 = _vab.dot(_vbp);
      const d4 = _vac.dot(_vbp);
      if (d3 >= 0 && d4 <= d3) {
        return target.copy(b);
      }
      const vc = d1 * d4 - d3 * d2;
      if (vc <= 0 && d1 >= 0 && d3 <= 0) {
        v = d1 / (d1 - d3);
        return target.copy(a).addScaledVector(_vab, v);
      }
      _vcp.subVectors(p, c);
      const d5 = _vab.dot(_vcp);
      const d6 = _vac.dot(_vcp);
      if (d6 >= 0 && d5 <= d6) {
        return target.copy(c);
      }
      const vb = d5 * d2 - d1 * d6;
      if (vb <= 0 && d2 >= 0 && d6 <= 0) {
        w = d2 / (d2 - d6);
        return target.copy(a).addScaledVector(_vac, w);
      }
      const va = d3 * d6 - d5 * d4;
      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
        _vbc.subVectors(c, b);
        w = (d4 - d3) / (d4 - d3 + (d5 - d6));
        return target.copy(b).addScaledVector(_vbc, w);
      }
      const denom = 1 / (va + vb + vc);
      v = vb * denom;
      w = vc * denom;
      return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
    }
    equals(triangle) {
      return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
    }
  };
  var _colorKeywords = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  var _hslA = {h: 0, s: 0, l: 0};
  var _hslB = {h: 0, s: 0, l: 0};
  function hue2rgb(p, q, t) {
    if (t < 0)
      t += 1;
    if (t > 1)
      t -= 1;
    if (t < 1 / 6)
      return p + (q - p) * 6 * t;
    if (t < 1 / 2)
      return q;
    if (t < 2 / 3)
      return p + (q - p) * 6 * (2 / 3 - t);
    return p;
  }
  function SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
  }
  function LinearToSRGB(c) {
    return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
  }
  var Color = class {
    constructor(r, g, b) {
      Object.defineProperty(this, "isColor", {value: true});
      if (g === void 0 && b === void 0) {
        return this.set(r);
      }
      return this.setRGB(r, g, b);
    }
    set(value) {
      if (value && value.isColor) {
        this.copy(value);
      } else if (typeof value === "number") {
        this.setHex(value);
      } else if (typeof value === "string") {
        this.setStyle(value);
      }
      return this;
    }
    setScalar(scalar) {
      this.r = scalar;
      this.g = scalar;
      this.b = scalar;
      return this;
    }
    setHex(hex) {
      hex = Math.floor(hex);
      this.r = (hex >> 16 & 255) / 255;
      this.g = (hex >> 8 & 255) / 255;
      this.b = (hex & 255) / 255;
      return this;
    }
    setRGB(r, g, b) {
      this.r = r;
      this.g = g;
      this.b = b;
      return this;
    }
    setHSL(h, s, l) {
      h = MathUtils.euclideanModulo(h, 1);
      s = MathUtils.clamp(s, 0, 1);
      l = MathUtils.clamp(l, 0, 1);
      if (s === 0) {
        this.r = this.g = this.b = l;
      } else {
        const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
        const q = 2 * l - p;
        this.r = hue2rgb(q, p, h + 1 / 3);
        this.g = hue2rgb(q, p, h);
        this.b = hue2rgb(q, p, h - 1 / 3);
      }
      return this;
    }
    setStyle(style) {
      function handleAlpha(string) {
        if (string === void 0)
          return;
        if (parseFloat(string) < 1) {
          console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
        }
      }
      let m;
      if (m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(style)) {
        let color;
        const name = m[1];
        const components = m[2];
        switch (name) {
          case "rgb":
          case "rgba":
            if (color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
              this.r = Math.min(255, parseInt(color[1], 10)) / 255;
              this.g = Math.min(255, parseInt(color[2], 10)) / 255;
              this.b = Math.min(255, parseInt(color[3], 10)) / 255;
              handleAlpha(color[5]);
              return this;
            }
            if (color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
              this.r = Math.min(100, parseInt(color[1], 10)) / 100;
              this.g = Math.min(100, parseInt(color[2], 10)) / 100;
              this.b = Math.min(100, parseInt(color[3], 10)) / 100;
              handleAlpha(color[5]);
              return this;
            }
            break;
          case "hsl":
          case "hsla":
            if (color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
              const h = parseFloat(color[1]) / 360;
              const s = parseInt(color[2], 10) / 100;
              const l = parseInt(color[3], 10) / 100;
              handleAlpha(color[5]);
              return this.setHSL(h, s, l);
            }
            break;
        }
      } else if (m = /^\#([A-Fa-f0-9]+)$/.exec(style)) {
        const hex = m[1];
        const size = hex.length;
        if (size === 3) {
          this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
          this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
          this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;
          return this;
        } else if (size === 6) {
          this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
          this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
          this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;
          return this;
        }
      }
      if (style && style.length > 0) {
        return this.setColorName(style);
      }
      return this;
    }
    setColorName(style) {
      const hex = _colorKeywords[style];
      if (hex !== void 0) {
        this.setHex(hex);
      } else {
        console.warn("THREE.Color: Unknown color " + style);
      }
      return this;
    }
    clone() {
      return new this.constructor(this.r, this.g, this.b);
    }
    copy(color) {
      this.r = color.r;
      this.g = color.g;
      this.b = color.b;
      return this;
    }
    copyGammaToLinear(color, gammaFactor = 2) {
      this.r = Math.pow(color.r, gammaFactor);
      this.g = Math.pow(color.g, gammaFactor);
      this.b = Math.pow(color.b, gammaFactor);
      return this;
    }
    copyLinearToGamma(color, gammaFactor = 2) {
      const safeInverse = gammaFactor > 0 ? 1 / gammaFactor : 1;
      this.r = Math.pow(color.r, safeInverse);
      this.g = Math.pow(color.g, safeInverse);
      this.b = Math.pow(color.b, safeInverse);
      return this;
    }
    convertGammaToLinear(gammaFactor) {
      this.copyGammaToLinear(this, gammaFactor);
      return this;
    }
    convertLinearToGamma(gammaFactor) {
      this.copyLinearToGamma(this, gammaFactor);
      return this;
    }
    copySRGBToLinear(color) {
      this.r = SRGBToLinear(color.r);
      this.g = SRGBToLinear(color.g);
      this.b = SRGBToLinear(color.b);
      return this;
    }
    copyLinearToSRGB(color) {
      this.r = LinearToSRGB(color.r);
      this.g = LinearToSRGB(color.g);
      this.b = LinearToSRGB(color.b);
      return this;
    }
    convertSRGBToLinear() {
      this.copySRGBToLinear(this);
      return this;
    }
    convertLinearToSRGB() {
      this.copyLinearToSRGB(this);
      return this;
    }
    getHex() {
      return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
    }
    getHexString() {
      return ("000000" + this.getHex().toString(16)).slice(-6);
    }
    getHSL(target) {
      if (target === void 0) {
        console.warn("THREE.Color: .getHSL() target is now required");
        target = {h: 0, s: 0, l: 0};
      }
      const r = this.r, g = this.g, b = this.b;
      const max = Math.max(r, g, b);
      const min = Math.min(r, g, b);
      let hue, saturation;
      const lightness = (min + max) / 2;
      if (min === max) {
        hue = 0;
        saturation = 0;
      } else {
        const delta = max - min;
        saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
        switch (max) {
          case r:
            hue = (g - b) / delta + (g < b ? 6 : 0);
            break;
          case g:
            hue = (b - r) / delta + 2;
            break;
          case b:
            hue = (r - g) / delta + 4;
            break;
        }
        hue /= 6;
      }
      target.h = hue;
      target.s = saturation;
      target.l = lightness;
      return target;
    }
    getStyle() {
      return "rgb(" + (this.r * 255 | 0) + "," + (this.g * 255 | 0) + "," + (this.b * 255 | 0) + ")";
    }
    offsetHSL(h, s, l) {
      this.getHSL(_hslA);
      _hslA.h += h;
      _hslA.s += s;
      _hslA.l += l;
      this.setHSL(_hslA.h, _hslA.s, _hslA.l);
      return this;
    }
    add(color) {
      this.r += color.r;
      this.g += color.g;
      this.b += color.b;
      return this;
    }
    addColors(color1, color2) {
      this.r = color1.r + color2.r;
      this.g = color1.g + color2.g;
      this.b = color1.b + color2.b;
      return this;
    }
    addScalar(s) {
      this.r += s;
      this.g += s;
      this.b += s;
      return this;
    }
    sub(color) {
      this.r = Math.max(0, this.r - color.r);
      this.g = Math.max(0, this.g - color.g);
      this.b = Math.max(0, this.b - color.b);
      return this;
    }
    multiply(color) {
      this.r *= color.r;
      this.g *= color.g;
      this.b *= color.b;
      return this;
    }
    multiplyScalar(s) {
      this.r *= s;
      this.g *= s;
      this.b *= s;
      return this;
    }
    lerp(color, alpha) {
      this.r += (color.r - this.r) * alpha;
      this.g += (color.g - this.g) * alpha;
      this.b += (color.b - this.b) * alpha;
      return this;
    }
    lerpHSL(color, alpha) {
      this.getHSL(_hslA);
      color.getHSL(_hslB);
      const h = MathUtils.lerp(_hslA.h, _hslB.h, alpha);
      const s = MathUtils.lerp(_hslA.s, _hslB.s, alpha);
      const l = MathUtils.lerp(_hslA.l, _hslB.l, alpha);
      this.setHSL(h, s, l);
      return this;
    }
    equals(c) {
      return c.r === this.r && c.g === this.g && c.b === this.b;
    }
    fromArray(array, offset = 0) {
      this.r = array[offset];
      this.g = array[offset + 1];
      this.b = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.r;
      array[offset + 1] = this.g;
      array[offset + 2] = this.b;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.r = attribute.getX(index);
      this.g = attribute.getY(index);
      this.b = attribute.getZ(index);
      if (attribute.normalized === true) {
        this.r /= 255;
        this.g /= 255;
        this.b /= 255;
      }
      return this;
    }
    toJSON() {
      return this.getHex();
    }
  };
  Color.NAMES = _colorKeywords;
  Color.prototype.r = 1;
  Color.prototype.g = 1;
  Color.prototype.b = 1;
  var Face3 = class {
    constructor(a, b, c, normal, color, materialIndex = 0) {
      this.a = a;
      this.b = b;
      this.c = c;
      this.normal = normal && normal.isVector3 ? normal : new Vector3();
      this.vertexNormals = Array.isArray(normal) ? normal : [];
      this.color = color && color.isColor ? color : new Color();
      this.vertexColors = Array.isArray(color) ? color : [];
      this.materialIndex = materialIndex;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.a = source.a;
      this.b = source.b;
      this.c = source.c;
      this.normal.copy(source.normal);
      this.color.copy(source.color);
      this.materialIndex = source.materialIndex;
      for (let i = 0, il = source.vertexNormals.length; i < il; i++) {
        this.vertexNormals[i] = source.vertexNormals[i].clone();
      }
      for (let i = 0, il = source.vertexColors.length; i < il; i++) {
        this.vertexColors[i] = source.vertexColors[i].clone();
      }
      return this;
    }
  };
  var materialId = 0;
  function Material() {
    Object.defineProperty(this, "id", {value: materialId++});
    this.uuid = MathUtils.generateUUID();
    this.name = "";
    this.type = "Material";
    this.fog = true;
    this.blending = NormalBlending;
    this.side = FrontSide;
    this.flatShading = false;
    this.vertexColors = false;
    this.opacity = 1;
    this.transparent = false;
    this.blendSrc = SrcAlphaFactor;
    this.blendDst = OneMinusSrcAlphaFactor;
    this.blendEquation = AddEquation;
    this.blendSrcAlpha = null;
    this.blendDstAlpha = null;
    this.blendEquationAlpha = null;
    this.depthFunc = LessEqualDepth;
    this.depthTest = true;
    this.depthWrite = true;
    this.stencilWriteMask = 255;
    this.stencilFunc = AlwaysStencilFunc;
    this.stencilRef = 0;
    this.stencilFuncMask = 255;
    this.stencilFail = KeepStencilOp;
    this.stencilZFail = KeepStencilOp;
    this.stencilZPass = KeepStencilOp;
    this.stencilWrite = false;
    this.clippingPlanes = null;
    this.clipIntersection = false;
    this.clipShadows = false;
    this.shadowSide = null;
    this.colorWrite = true;
    this.precision = null;
    this.polygonOffset = false;
    this.polygonOffsetFactor = 0;
    this.polygonOffsetUnits = 0;
    this.dithering = false;
    this.alphaTest = 0;
    this.premultipliedAlpha = false;
    this.visible = true;
    this.toneMapped = true;
    this.userData = {};
    this.version = 0;
  }
  Material.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
    constructor: Material,
    isMaterial: true,
    onBeforeCompile: function() {
    },
    customProgramCacheKey: function() {
      return this.onBeforeCompile.toString();
    },
    setValues: function(values) {
      if (values === void 0)
        return;
      for (const key in values) {
        const newValue = values[key];
        if (newValue === void 0) {
          console.warn("THREE.Material: '" + key + "' parameter is undefined.");
          continue;
        }
        if (key === "shading") {
          console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
          this.flatShading = newValue === FlatShading ? true : false;
          continue;
        }
        const currentValue = this[key];
        if (currentValue === void 0) {
          console.warn("THREE." + this.type + ": '" + key + "' is not a property of this material.");
          continue;
        }
        if (currentValue && currentValue.isColor) {
          currentValue.set(newValue);
        } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
          currentValue.copy(newValue);
        } else {
          this[key] = newValue;
        }
      }
    },
    toJSON: function(meta) {
      const isRoot = meta === void 0 || typeof meta === "string";
      if (isRoot) {
        meta = {
          textures: {},
          images: {}
        };
      }
      const data = {
        metadata: {
          version: 4.5,
          type: "Material",
          generator: "Material.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "")
        data.name = this.name;
      if (this.color && this.color.isColor)
        data.color = this.color.getHex();
      if (this.roughness !== void 0)
        data.roughness = this.roughness;
      if (this.metalness !== void 0)
        data.metalness = this.metalness;
      if (this.sheen && this.sheen.isColor)
        data.sheen = this.sheen.getHex();
      if (this.emissive && this.emissive.isColor)
        data.emissive = this.emissive.getHex();
      if (this.emissiveIntensity && this.emissiveIntensity !== 1)
        data.emissiveIntensity = this.emissiveIntensity;
      if (this.specular && this.specular.isColor)
        data.specular = this.specular.getHex();
      if (this.shininess !== void 0)
        data.shininess = this.shininess;
      if (this.clearcoat !== void 0)
        data.clearcoat = this.clearcoat;
      if (this.clearcoatRoughness !== void 0)
        data.clearcoatRoughness = this.clearcoatRoughness;
      if (this.clearcoatMap && this.clearcoatMap.isTexture) {
        data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
      }
      if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
        data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
      }
      if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
        data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
        data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
      }
      if (this.map && this.map.isTexture)
        data.map = this.map.toJSON(meta).uuid;
      if (this.matcap && this.matcap.isTexture)
        data.matcap = this.matcap.toJSON(meta).uuid;
      if (this.alphaMap && this.alphaMap.isTexture)
        data.alphaMap = this.alphaMap.toJSON(meta).uuid;
      if (this.lightMap && this.lightMap.isTexture)
        data.lightMap = this.lightMap.toJSON(meta).uuid;
      if (this.aoMap && this.aoMap.isTexture) {
        data.aoMap = this.aoMap.toJSON(meta).uuid;
        data.aoMapIntensity = this.aoMapIntensity;
      }
      if (this.bumpMap && this.bumpMap.isTexture) {
        data.bumpMap = this.bumpMap.toJSON(meta).uuid;
        data.bumpScale = this.bumpScale;
      }
      if (this.normalMap && this.normalMap.isTexture) {
        data.normalMap = this.normalMap.toJSON(meta).uuid;
        data.normalMapType = this.normalMapType;
        data.normalScale = this.normalScale.toArray();
      }
      if (this.displacementMap && this.displacementMap.isTexture) {
        data.displacementMap = this.displacementMap.toJSON(meta).uuid;
        data.displacementScale = this.displacementScale;
        data.displacementBias = this.displacementBias;
      }
      if (this.roughnessMap && this.roughnessMap.isTexture)
        data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
      if (this.metalnessMap && this.metalnessMap.isTexture)
        data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
      if (this.emissiveMap && this.emissiveMap.isTexture)
        data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
      if (this.specularMap && this.specularMap.isTexture)
        data.specularMap = this.specularMap.toJSON(meta).uuid;
      if (this.envMap && this.envMap.isTexture) {
        data.envMap = this.envMap.toJSON(meta).uuid;
        data.reflectivity = this.reflectivity;
        data.refractionRatio = this.refractionRatio;
        if (this.combine !== void 0)
          data.combine = this.combine;
        if (this.envMapIntensity !== void 0)
          data.envMapIntensity = this.envMapIntensity;
      }
      if (this.gradientMap && this.gradientMap.isTexture) {
        data.gradientMap = this.gradientMap.toJSON(meta).uuid;
      }
      if (this.size !== void 0)
        data.size = this.size;
      if (this.sizeAttenuation !== void 0)
        data.sizeAttenuation = this.sizeAttenuation;
      if (this.blending !== NormalBlending)
        data.blending = this.blending;
      if (this.flatShading === true)
        data.flatShading = this.flatShading;
      if (this.side !== FrontSide)
        data.side = this.side;
      if (this.vertexColors)
        data.vertexColors = true;
      if (this.opacity < 1)
        data.opacity = this.opacity;
      if (this.transparent === true)
        data.transparent = this.transparent;
      data.depthFunc = this.depthFunc;
      data.depthTest = this.depthTest;
      data.depthWrite = this.depthWrite;
      data.stencilWrite = this.stencilWrite;
      data.stencilWriteMask = this.stencilWriteMask;
      data.stencilFunc = this.stencilFunc;
      data.stencilRef = this.stencilRef;
      data.stencilFuncMask = this.stencilFuncMask;
      data.stencilFail = this.stencilFail;
      data.stencilZFail = this.stencilZFail;
      data.stencilZPass = this.stencilZPass;
      if (this.rotation && this.rotation !== 0)
        data.rotation = this.rotation;
      if (this.polygonOffset === true)
        data.polygonOffset = true;
      if (this.polygonOffsetFactor !== 0)
        data.polygonOffsetFactor = this.polygonOffsetFactor;
      if (this.polygonOffsetUnits !== 0)
        data.polygonOffsetUnits = this.polygonOffsetUnits;
      if (this.linewidth && this.linewidth !== 1)
        data.linewidth = this.linewidth;
      if (this.dashSize !== void 0)
        data.dashSize = this.dashSize;
      if (this.gapSize !== void 0)
        data.gapSize = this.gapSize;
      if (this.scale !== void 0)
        data.scale = this.scale;
      if (this.dithering === true)
        data.dithering = true;
      if (this.alphaTest > 0)
        data.alphaTest = this.alphaTest;
      if (this.premultipliedAlpha === true)
        data.premultipliedAlpha = this.premultipliedAlpha;
      if (this.wireframe === true)
        data.wireframe = this.wireframe;
      if (this.wireframeLinewidth > 1)
        data.wireframeLinewidth = this.wireframeLinewidth;
      if (this.wireframeLinecap !== "round")
        data.wireframeLinecap = this.wireframeLinecap;
      if (this.wireframeLinejoin !== "round")
        data.wireframeLinejoin = this.wireframeLinejoin;
      if (this.morphTargets === true)
        data.morphTargets = true;
      if (this.morphNormals === true)
        data.morphNormals = true;
      if (this.skinning === true)
        data.skinning = true;
      if (this.visible === false)
        data.visible = false;
      if (this.toneMapped === false)
        data.toneMapped = false;
      if (JSON.stringify(this.userData) !== "{}")
        data.userData = this.userData;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data2 = cache[key];
          delete data2.metadata;
          values.push(data2);
        }
        return values;
      }
      if (isRoot) {
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        if (textures.length > 0)
          data.textures = textures;
        if (images.length > 0)
          data.images = images;
      }
      return data;
    },
    clone: function() {
      return new this.constructor().copy(this);
    },
    copy: function(source) {
      this.name = source.name;
      this.fog = source.fog;
      this.blending = source.blending;
      this.side = source.side;
      this.flatShading = source.flatShading;
      this.vertexColors = source.vertexColors;
      this.opacity = source.opacity;
      this.transparent = source.transparent;
      this.blendSrc = source.blendSrc;
      this.blendDst = source.blendDst;
      this.blendEquation = source.blendEquation;
      this.blendSrcAlpha = source.blendSrcAlpha;
      this.blendDstAlpha = source.blendDstAlpha;
      this.blendEquationAlpha = source.blendEquationAlpha;
      this.depthFunc = source.depthFunc;
      this.depthTest = source.depthTest;
      this.depthWrite = source.depthWrite;
      this.stencilWriteMask = source.stencilWriteMask;
      this.stencilFunc = source.stencilFunc;
      this.stencilRef = source.stencilRef;
      this.stencilFuncMask = source.stencilFuncMask;
      this.stencilFail = source.stencilFail;
      this.stencilZFail = source.stencilZFail;
      this.stencilZPass = source.stencilZPass;
      this.stencilWrite = source.stencilWrite;
      const srcPlanes = source.clippingPlanes;
      let dstPlanes = null;
      if (srcPlanes !== null) {
        const n = srcPlanes.length;
        dstPlanes = new Array(n);
        for (let i = 0; i !== n; ++i) {
          dstPlanes[i] = srcPlanes[i].clone();
        }
      }
      this.clippingPlanes = dstPlanes;
      this.clipIntersection = source.clipIntersection;
      this.clipShadows = source.clipShadows;
      this.shadowSide = source.shadowSide;
      this.colorWrite = source.colorWrite;
      this.precision = source.precision;
      this.polygonOffset = source.polygonOffset;
      this.polygonOffsetFactor = source.polygonOffsetFactor;
      this.polygonOffsetUnits = source.polygonOffsetUnits;
      this.dithering = source.dithering;
      this.alphaTest = source.alphaTest;
      this.premultipliedAlpha = source.premultipliedAlpha;
      this.visible = source.visible;
      this.toneMapped = source.toneMapped;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      return this;
    },
    dispose: function() {
      this.dispatchEvent({type: "dispose"});
    }
  });
  Object.defineProperty(Material.prototype, "needsUpdate", {
    set: function(value) {
      if (value === true)
        this.version++;
    }
  });
  function MeshBasicMaterial(parameters) {
    Material.call(this);
    this.type = "MeshBasicMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.combine = MultiplyOperation;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.skinning = false;
    this.morphTargets = false;
    this.setValues(parameters);
  }
  MeshBasicMaterial.prototype = Object.create(Material.prototype);
  MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;
  MeshBasicMaterial.prototype.isMeshBasicMaterial = true;
  MeshBasicMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    return this;
  };
  var _vector$3 = new Vector3();
  var _vector2$1 = new Vector2();
  function BufferAttribute(array, itemSize, normalized) {
    if (Array.isArray(array)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.name = "";
    this.array = array;
    this.itemSize = itemSize;
    this.count = array !== void 0 ? array.length / itemSize : 0;
    this.normalized = normalized === true;
    this.usage = StaticDrawUsage;
    this.updateRange = {offset: 0, count: -1};
    this.version = 0;
  }
  Object.defineProperty(BufferAttribute.prototype, "needsUpdate", {
    set: function(value) {
      if (value === true)
        this.version++;
    }
  });
  Object.assign(BufferAttribute.prototype, {
    isBufferAttribute: true,
    onUploadCallback: function() {
    },
    setUsage: function(value) {
      this.usage = value;
      return this;
    },
    copy: function(source) {
      this.name = source.name;
      this.array = new source.array.constructor(source.array);
      this.itemSize = source.itemSize;
      this.count = source.count;
      this.normalized = source.normalized;
      this.usage = source.usage;
      return this;
    },
    copyAt: function(index1, attribute, index2) {
      index1 *= this.itemSize;
      index2 *= attribute.itemSize;
      for (let i = 0, l = this.itemSize; i < l; i++) {
        this.array[index1 + i] = attribute.array[index2 + i];
      }
      return this;
    },
    copyArray: function(array) {
      this.array.set(array);
      return this;
    },
    copyColorsArray: function(colors) {
      const array = this.array;
      let offset = 0;
      for (let i = 0, l = colors.length; i < l; i++) {
        let color = colors[i];
        if (color === void 0) {
          console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i);
          color = new Color();
        }
        array[offset++] = color.r;
        array[offset++] = color.g;
        array[offset++] = color.b;
      }
      return this;
    },
    copyVector2sArray: function(vectors) {
      const array = this.array;
      let offset = 0;
      for (let i = 0, l = vectors.length; i < l; i++) {
        let vector = vectors[i];
        if (vector === void 0) {
          console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i);
          vector = new Vector2();
        }
        array[offset++] = vector.x;
        array[offset++] = vector.y;
      }
      return this;
    },
    copyVector3sArray: function(vectors) {
      const array = this.array;
      let offset = 0;
      for (let i = 0, l = vectors.length; i < l; i++) {
        let vector = vectors[i];
        if (vector === void 0) {
          console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i);
          vector = new Vector3();
        }
        array[offset++] = vector.x;
        array[offset++] = vector.y;
        array[offset++] = vector.z;
      }
      return this;
    },
    copyVector4sArray: function(vectors) {
      const array = this.array;
      let offset = 0;
      for (let i = 0, l = vectors.length; i < l; i++) {
        let vector = vectors[i];
        if (vector === void 0) {
          console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i);
          vector = new Vector4();
        }
        array[offset++] = vector.x;
        array[offset++] = vector.y;
        array[offset++] = vector.z;
        array[offset++] = vector.w;
      }
      return this;
    },
    applyMatrix3: function(m) {
      if (this.itemSize === 2) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector2$1.fromBufferAttribute(this, i);
          _vector2$1.applyMatrix3(m);
          this.setXY(i, _vector2$1.x, _vector2$1.y);
        }
      } else if (this.itemSize === 3) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector$3.fromBufferAttribute(this, i);
          _vector$3.applyMatrix3(m);
          this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
        }
      }
      return this;
    },
    applyMatrix4: function(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$3.x = this.getX(i);
        _vector$3.y = this.getY(i);
        _vector$3.z = this.getZ(i);
        _vector$3.applyMatrix4(m);
        this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
      }
      return this;
    },
    applyNormalMatrix: function(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$3.x = this.getX(i);
        _vector$3.y = this.getY(i);
        _vector$3.z = this.getZ(i);
        _vector$3.applyNormalMatrix(m);
        this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
      }
      return this;
    },
    transformDirection: function(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$3.x = this.getX(i);
        _vector$3.y = this.getY(i);
        _vector$3.z = this.getZ(i);
        _vector$3.transformDirection(m);
        this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
      }
      return this;
    },
    set: function(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    },
    getX: function(index) {
      return this.array[index * this.itemSize];
    },
    setX: function(index, x) {
      this.array[index * this.itemSize] = x;
      return this;
    },
    getY: function(index) {
      return this.array[index * this.itemSize + 1];
    },
    setY: function(index, y) {
      this.array[index * this.itemSize + 1] = y;
      return this;
    },
    getZ: function(index) {
      return this.array[index * this.itemSize + 2];
    },
    setZ: function(index, z) {
      this.array[index * this.itemSize + 2] = z;
      return this;
    },
    getW: function(index) {
      return this.array[index * this.itemSize + 3];
    },
    setW: function(index, w) {
      this.array[index * this.itemSize + 3] = w;
      return this;
    },
    setXY: function(index, x, y) {
      index *= this.itemSize;
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      return this;
    },
    setXYZ: function(index, x, y, z) {
      index *= this.itemSize;
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      return this;
    },
    setXYZW: function(index, x, y, z, w) {
      index *= this.itemSize;
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      this.array[index + 3] = w;
      return this;
    },
    onUpload: function(callback) {
      this.onUploadCallback = callback;
      return this;
    },
    clone: function() {
      return new this.constructor(this.array, this.itemSize).copy(this);
    },
    toJSON: function() {
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: Array.prototype.slice.call(this.array),
        normalized: this.normalized
      };
    }
  });
  function Int8BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Int8Array(array), itemSize, normalized);
  }
  Int8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;
  function Uint8BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);
  }
  Uint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;
  function Uint8ClampedBufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);
  }
  Uint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;
  function Int16BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Int16Array(array), itemSize, normalized);
  }
  Int16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;
  function Uint16BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);
  }
  Uint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;
  function Int32BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Int32Array(array), itemSize, normalized);
  }
  Int32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;
  function Uint32BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);
  }
  Uint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;
  function Float16BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);
  }
  Float16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Float16BufferAttribute.prototype.constructor = Float16BufferAttribute;
  Float16BufferAttribute.prototype.isFloat16BufferAttribute = true;
  function Float32BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Float32Array(array), itemSize, normalized);
  }
  Float32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;
  function Float64BufferAttribute(array, itemSize, normalized) {
    BufferAttribute.call(this, new Float64Array(array), itemSize, normalized);
  }
  Float64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
  Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;
  var DirectGeometry = class {
    constructor() {
      this.vertices = [];
      this.normals = [];
      this.colors = [];
      this.uvs = [];
      this.uvs2 = [];
      this.groups = [];
      this.morphTargets = {};
      this.skinWeights = [];
      this.skinIndices = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      this.verticesNeedUpdate = false;
      this.normalsNeedUpdate = false;
      this.colorsNeedUpdate = false;
      this.uvsNeedUpdate = false;
      this.groupsNeedUpdate = false;
    }
    computeGroups(geometry) {
      const groups = [];
      let group2, i;
      let materialIndex = void 0;
      const faces = geometry.faces;
      for (i = 0; i < faces.length; i++) {
        const face = faces[i];
        if (face.materialIndex !== materialIndex) {
          materialIndex = face.materialIndex;
          if (group2 !== void 0) {
            group2.count = i * 3 - group2.start;
            groups.push(group2);
          }
          group2 = {
            start: i * 3,
            materialIndex
          };
        }
      }
      if (group2 !== void 0) {
        group2.count = i * 3 - group2.start;
        groups.push(group2);
      }
      this.groups = groups;
    }
    fromGeometry(geometry) {
      const faces = geometry.faces;
      const vertices = geometry.vertices;
      const faceVertexUvs = geometry.faceVertexUvs;
      const hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;
      const hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0;
      const morphTargets = geometry.morphTargets;
      const morphTargetsLength = morphTargets.length;
      let morphTargetsPosition;
      if (morphTargetsLength > 0) {
        morphTargetsPosition = [];
        for (let i = 0; i < morphTargetsLength; i++) {
          morphTargetsPosition[i] = {
            name: morphTargets[i].name,
            data: []
          };
        }
        this.morphTargets.position = morphTargetsPosition;
      }
      const morphNormals = geometry.morphNormals;
      const morphNormalsLength = morphNormals.length;
      let morphTargetsNormal;
      if (morphNormalsLength > 0) {
        morphTargetsNormal = [];
        for (let i = 0; i < morphNormalsLength; i++) {
          morphTargetsNormal[i] = {
            name: morphNormals[i].name,
            data: []
          };
        }
        this.morphTargets.normal = morphTargetsNormal;
      }
      const skinIndices = geometry.skinIndices;
      const skinWeights = geometry.skinWeights;
      const hasSkinIndices = skinIndices.length === vertices.length;
      const hasSkinWeights = skinWeights.length === vertices.length;
      if (vertices.length > 0 && faces.length === 0) {
        console.error("THREE.DirectGeometry: Faceless geometries are not supported.");
      }
      for (let i = 0; i < faces.length; i++) {
        const face = faces[i];
        this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);
        const vertexNormals = face.vertexNormals;
        if (vertexNormals.length === 3) {
          this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);
        } else {
          const normal = face.normal;
          this.normals.push(normal, normal, normal);
        }
        const vertexColors = face.vertexColors;
        if (vertexColors.length === 3) {
          this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);
        } else {
          const color = face.color;
          this.colors.push(color, color, color);
        }
        if (hasFaceVertexUv === true) {
          const vertexUvs = faceVertexUvs[0][i];
          if (vertexUvs !== void 0) {
            this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);
          } else {
            console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", i);
            this.uvs.push(new Vector2(), new Vector2(), new Vector2());
          }
        }
        if (hasFaceVertexUv2 === true) {
          const vertexUvs = faceVertexUvs[1][i];
          if (vertexUvs !== void 0) {
            this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);
          } else {
            console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", i);
            this.uvs2.push(new Vector2(), new Vector2(), new Vector2());
          }
        }
        for (let j = 0; j < morphTargetsLength; j++) {
          const morphTarget = morphTargets[j].vertices;
          morphTargetsPosition[j].data.push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);
        }
        for (let j = 0; j < morphNormalsLength; j++) {
          const morphNormal = morphNormals[j].vertexNormals[i];
          morphTargetsNormal[j].data.push(morphNormal.a, morphNormal.b, morphNormal.c);
        }
        if (hasSkinIndices) {
          this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);
        }
        if (hasSkinWeights) {
          this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);
        }
      }
      this.computeGroups(geometry);
      this.verticesNeedUpdate = geometry.verticesNeedUpdate;
      this.normalsNeedUpdate = geometry.normalsNeedUpdate;
      this.colorsNeedUpdate = geometry.colorsNeedUpdate;
      this.uvsNeedUpdate = geometry.uvsNeedUpdate;
      this.groupsNeedUpdate = geometry.groupsNeedUpdate;
      if (geometry.boundingSphere !== null) {
        this.boundingSphere = geometry.boundingSphere.clone();
      }
      if (geometry.boundingBox !== null) {
        this.boundingBox = geometry.boundingBox.clone();
      }
      return this;
    }
  };
  function arrayMax(array) {
    if (array.length === 0)
      return -Infinity;
    let max = array[0];
    for (let i = 1, l = array.length; i < l; ++i) {
      if (array[i] > max)
        max = array[i];
    }
    return max;
  }
  var TYPED_ARRAYS = {
    Int8Array,
    Uint8Array,
    Uint8ClampedArray: typeof Uint8ClampedArray !== "undefined" ? Uint8ClampedArray : Uint8Array,
    Int16Array,
    Uint16Array,
    Int32Array,
    Uint32Array,
    Float32Array,
    Float64Array
  };
  function getTypedArray(type, buffer) {
    return new TYPED_ARRAYS[type](buffer);
  }
  var _bufferGeometryId = 1;
  var _m1$2 = new Matrix4();
  var _obj = new Object3D();
  var _offset = new Vector3();
  var _box$2 = new Box3();
  var _boxMorphTargets = new Box3();
  var _vector$4 = new Vector3();
  function BufferGeometry() {
    Object.defineProperty(this, "id", {value: _bufferGeometryId += 2});
    this.uuid = MathUtils.generateUUID();
    this.name = "";
    this.type = "BufferGeometry";
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.morphTargetsRelative = false;
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    this.drawRange = {start: 0, count: Infinity};
    this.userData = {};
  }
  BufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
    constructor: BufferGeometry,
    isBufferGeometry: true,
    getIndex: function() {
      return this.index;
    },
    setIndex: function(index) {
      if (Array.isArray(index)) {
        this.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
      } else {
        this.index = index;
      }
      return this;
    },
    getAttribute: function(name) {
      return this.attributes[name];
    },
    setAttribute: function(name, attribute) {
      this.attributes[name] = attribute;
      return this;
    },
    deleteAttribute: function(name) {
      delete this.attributes[name];
      return this;
    },
    hasAttribute: function(name) {
      return this.attributes[name] !== void 0;
    },
    addGroup: function(start, count, materialIndex = 0) {
      this.groups.push({
        start,
        count,
        materialIndex
      });
    },
    clearGroups: function() {
      this.groups = [];
    },
    setDrawRange: function(start, count) {
      this.drawRange.start = start;
      this.drawRange.count = count;
    },
    applyMatrix4: function(matrix) {
      const position = this.attributes.position;
      if (position !== void 0) {
        position.applyMatrix4(matrix);
        position.needsUpdate = true;
      }
      const normal = this.attributes.normal;
      if (normal !== void 0) {
        const normalMatrix = new Matrix3().getNormalMatrix(matrix);
        normal.applyNormalMatrix(normalMatrix);
        normal.needsUpdate = true;
      }
      const tangent = this.attributes.tangent;
      if (tangent !== void 0) {
        tangent.transformDirection(matrix);
        tangent.needsUpdate = true;
      }
      if (this.boundingBox !== null) {
        this.computeBoundingBox();
      }
      if (this.boundingSphere !== null) {
        this.computeBoundingSphere();
      }
      return this;
    },
    rotateX: function(angle) {
      _m1$2.makeRotationX(angle);
      this.applyMatrix4(_m1$2);
      return this;
    },
    rotateY: function(angle) {
      _m1$2.makeRotationY(angle);
      this.applyMatrix4(_m1$2);
      return this;
    },
    rotateZ: function(angle) {
      _m1$2.makeRotationZ(angle);
      this.applyMatrix4(_m1$2);
      return this;
    },
    translate: function(x, y, z) {
      _m1$2.makeTranslation(x, y, z);
      this.applyMatrix4(_m1$2);
      return this;
    },
    scale: function(x, y, z) {
      _m1$2.makeScale(x, y, z);
      this.applyMatrix4(_m1$2);
      return this;
    },
    lookAt: function(vector) {
      _obj.lookAt(vector);
      _obj.updateMatrix();
      this.applyMatrix4(_obj.matrix);
      return this;
    },
    center: function() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(_offset).negate();
      this.translate(_offset.x, _offset.y, _offset.z);
      return this;
    },
    setFromObject: function(object) {
      const geometry = object.geometry;
      if (object.isPoints || object.isLine) {
        const positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);
        const colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);
        this.setAttribute("position", positions.copyVector3sArray(geometry.vertices));
        this.setAttribute("color", colors.copyColorsArray(geometry.colors));
        if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {
          const lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);
          this.setAttribute("lineDistance", lineDistances.copyArray(geometry.lineDistances));
        }
        if (geometry.boundingSphere !== null) {
          this.boundingSphere = geometry.boundingSphere.clone();
        }
        if (geometry.boundingBox !== null) {
          this.boundingBox = geometry.boundingBox.clone();
        }
      } else if (object.isMesh) {
        if (geometry && geometry.isGeometry) {
          this.fromGeometry(geometry);
        }
      }
      return this;
    },
    setFromPoints: function(points) {
      const position = [];
      for (let i = 0, l = points.length; i < l; i++) {
        const point = points[i];
        position.push(point.x, point.y, point.z || 0);
      }
      this.setAttribute("position", new Float32BufferAttribute(position, 3));
      return this;
    },
    updateFromObject: function(object) {
      let geometry = object.geometry;
      if (object.isMesh) {
        let direct = geometry.__directGeometry;
        if (geometry.elementsNeedUpdate === true) {
          direct = void 0;
          geometry.elementsNeedUpdate = false;
        }
        if (direct === void 0) {
          return this.fromGeometry(geometry);
        }
        direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
        direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
        direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
        direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
        direct.groupsNeedUpdate = geometry.groupsNeedUpdate;
        geometry.verticesNeedUpdate = false;
        geometry.normalsNeedUpdate = false;
        geometry.colorsNeedUpdate = false;
        geometry.uvsNeedUpdate = false;
        geometry.groupsNeedUpdate = false;
        geometry = direct;
      }
      if (geometry.verticesNeedUpdate === true) {
        const attribute = this.attributes.position;
        if (attribute !== void 0) {
          attribute.copyVector3sArray(geometry.vertices);
          attribute.needsUpdate = true;
        }
        geometry.verticesNeedUpdate = false;
      }
      if (geometry.normalsNeedUpdate === true) {
        const attribute = this.attributes.normal;
        if (attribute !== void 0) {
          attribute.copyVector3sArray(geometry.normals);
          attribute.needsUpdate = true;
        }
        geometry.normalsNeedUpdate = false;
      }
      if (geometry.colorsNeedUpdate === true) {
        const attribute = this.attributes.color;
        if (attribute !== void 0) {
          attribute.copyColorsArray(geometry.colors);
          attribute.needsUpdate = true;
        }
        geometry.colorsNeedUpdate = false;
      }
      if (geometry.uvsNeedUpdate) {
        const attribute = this.attributes.uv;
        if (attribute !== void 0) {
          attribute.copyVector2sArray(geometry.uvs);
          attribute.needsUpdate = true;
        }
        geometry.uvsNeedUpdate = false;
      }
      if (geometry.lineDistancesNeedUpdate) {
        const attribute = this.attributes.lineDistance;
        if (attribute !== void 0) {
          attribute.copyArray(geometry.lineDistances);
          attribute.needsUpdate = true;
        }
        geometry.lineDistancesNeedUpdate = false;
      }
      if (geometry.groupsNeedUpdate) {
        geometry.computeGroups(object.geometry);
        this.groups = geometry.groups;
        geometry.groupsNeedUpdate = false;
      }
      return this;
    },
    fromGeometry: function(geometry) {
      geometry.__directGeometry = new DirectGeometry().fromGeometry(geometry);
      return this.fromDirectGeometry(geometry.__directGeometry);
    },
    fromDirectGeometry: function(geometry) {
      const positions = new Float32Array(geometry.vertices.length * 3);
      this.setAttribute("position", new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));
      if (geometry.normals.length > 0) {
        const normals = new Float32Array(geometry.normals.length * 3);
        this.setAttribute("normal", new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));
      }
      if (geometry.colors.length > 0) {
        const colors = new Float32Array(geometry.colors.length * 3);
        this.setAttribute("color", new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));
      }
      if (geometry.uvs.length > 0) {
        const uvs = new Float32Array(geometry.uvs.length * 2);
        this.setAttribute("uv", new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));
      }
      if (geometry.uvs2.length > 0) {
        const uvs2 = new Float32Array(geometry.uvs2.length * 2);
        this.setAttribute("uv2", new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));
      }
      this.groups = geometry.groups;
      for (const name in geometry.morphTargets) {
        const array = [];
        const morphTargets = geometry.morphTargets[name];
        for (let i = 0, l = morphTargets.length; i < l; i++) {
          const morphTarget = morphTargets[i];
          const attribute = new Float32BufferAttribute(morphTarget.data.length * 3, 3);
          attribute.name = morphTarget.name;
          array.push(attribute.copyVector3sArray(morphTarget.data));
        }
        this.morphAttributes[name] = array;
      }
      if (geometry.skinIndices.length > 0) {
        const skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);
        this.setAttribute("skinIndex", skinIndices.copyVector4sArray(geometry.skinIndices));
      }
      if (geometry.skinWeights.length > 0) {
        const skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);
        this.setAttribute("skinWeight", skinWeights.copyVector4sArray(geometry.skinWeights));
      }
      if (geometry.boundingSphere !== null) {
        this.boundingSphere = geometry.boundingSphere.clone();
      }
      if (geometry.boundingBox !== null) {
        this.boundingBox = geometry.boundingBox.clone();
      }
      return this;
    },
    computeBoundingBox: function() {
      if (this.boundingBox === null) {
        this.boundingBox = new Box3();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
        this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(Infinity, Infinity, Infinity));
        return;
      }
      if (position !== void 0) {
        this.boundingBox.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            _box$2.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$4.addVectors(this.boundingBox.min, _box$2.min);
              this.boundingBox.expandByPoint(_vector$4);
              _vector$4.addVectors(this.boundingBox.max, _box$2.max);
              this.boundingBox.expandByPoint(_vector$4);
            } else {
              this.boundingBox.expandByPoint(_box$2.min);
              this.boundingBox.expandByPoint(_box$2.max);
            }
          }
        }
      } else {
        this.boundingBox.makeEmpty();
      }
      if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
      }
    },
    computeBoundingSphere: function() {
      if (this.boundingSphere === null) {
        this.boundingSphere = new Sphere();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
        this.boundingSphere.set(new Vector3(), Infinity);
        return;
      }
      if (position) {
        const center = this.boundingSphere.center;
        _box$2.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            _boxMorphTargets.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$4.addVectors(_box$2.min, _boxMorphTargets.min);
              _box$2.expandByPoint(_vector$4);
              _vector$4.addVectors(_box$2.max, _boxMorphTargets.max);
              _box$2.expandByPoint(_vector$4);
            } else {
              _box$2.expandByPoint(_boxMorphTargets.min);
              _box$2.expandByPoint(_boxMorphTargets.max);
            }
          }
        }
        _box$2.getCenter(center);
        let maxRadiusSq = 0;
        for (let i = 0, il = position.count; i < il; i++) {
          _vector$4.fromBufferAttribute(position, i);
          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));
        }
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            const morphTargetsRelative = this.morphTargetsRelative;
            for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
              _vector$4.fromBufferAttribute(morphAttribute, j);
              if (morphTargetsRelative) {
                _offset.fromBufferAttribute(position, j);
                _vector$4.add(_offset);
              }
              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));
            }
          }
        }
        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
        if (isNaN(this.boundingSphere.radius)) {
          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      }
    },
    computeFaceNormals: function() {
    },
    computeVertexNormals: function() {
      const index = this.index;
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute !== void 0) {
        let normalAttribute = this.getAttribute("normal");
        if (normalAttribute === void 0) {
          normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
          this.setAttribute("normal", normalAttribute);
        } else {
          for (let i = 0, il = normalAttribute.count; i < il; i++) {
            normalAttribute.setXYZ(i, 0, 0, 0);
          }
        }
        const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
        const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
        const cb = new Vector3(), ab = new Vector3();
        if (index) {
          for (let i = 0, il = index.count; i < il; i += 3) {
            const vA = index.getX(i + 0);
            const vB = index.getX(i + 1);
            const vC = index.getX(i + 2);
            pA.fromBufferAttribute(positionAttribute, vA);
            pB.fromBufferAttribute(positionAttribute, vB);
            pC.fromBufferAttribute(positionAttribute, vC);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            nA.fromBufferAttribute(normalAttribute, vA);
            nB.fromBufferAttribute(normalAttribute, vB);
            nC.fromBufferAttribute(normalAttribute, vC);
            nA.add(cb);
            nB.add(cb);
            nC.add(cb);
            normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
            normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
            normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
          }
        } else {
          for (let i = 0, il = positionAttribute.count; i < il; i += 3) {
            pA.fromBufferAttribute(positionAttribute, i + 0);
            pB.fromBufferAttribute(positionAttribute, i + 1);
            pC.fromBufferAttribute(positionAttribute, i + 2);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
          }
        }
        this.normalizeNormals();
        normalAttribute.needsUpdate = true;
      }
    },
    merge: function(geometry, offset) {
      if (!(geometry && geometry.isBufferGeometry)) {
        console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", geometry);
        return;
      }
      if (offset === void 0) {
        offset = 0;
        console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.");
      }
      const attributes = this.attributes;
      for (const key in attributes) {
        if (geometry.attributes[key] === void 0)
          continue;
        const attribute1 = attributes[key];
        const attributeArray1 = attribute1.array;
        const attribute2 = geometry.attributes[key];
        const attributeArray2 = attribute2.array;
        const attributeOffset = attribute2.itemSize * offset;
        const length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);
        for (let i = 0, j = attributeOffset; i < length; i++, j++) {
          attributeArray1[j] = attributeArray2[i];
        }
      }
      return this;
    },
    normalizeNormals: function() {
      const normals = this.attributes.normal;
      for (let i = 0, il = normals.count; i < il; i++) {
        _vector$4.fromBufferAttribute(normals, i);
        _vector$4.normalize();
        normals.setXYZ(i, _vector$4.x, _vector$4.y, _vector$4.z);
      }
    },
    toNonIndexed: function() {
      function convertBufferAttribute(attribute, indices2) {
        const array = attribute.array;
        const itemSize = attribute.itemSize;
        const normalized = attribute.normalized;
        const array2 = new array.constructor(indices2.length * itemSize);
        let index = 0, index2 = 0;
        for (let i = 0, l = indices2.length; i < l; i++) {
          index = indices2[i] * itemSize;
          for (let j = 0; j < itemSize; j++) {
            array2[index2++] = array[index++];
          }
        }
        return new BufferAttribute(array2, itemSize, normalized);
      }
      if (this.index === null) {
        console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.");
        return this;
      }
      const geometry2 = new BufferGeometry();
      const indices = this.index.array;
      const attributes = this.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        const newAttribute = convertBufferAttribute(attribute, indices);
        geometry2.setAttribute(name, newAttribute);
      }
      const morphAttributes = this.morphAttributes;
      for (const name in morphAttributes) {
        const morphArray = [];
        const morphAttribute = morphAttributes[name];
        for (let i = 0, il = morphAttribute.length; i < il; i++) {
          const attribute = morphAttribute[i];
          const newAttribute = convertBufferAttribute(attribute, indices);
          morphArray.push(newAttribute);
        }
        geometry2.morphAttributes[name] = morphArray;
      }
      geometry2.morphTargetsRelative = this.morphTargetsRelative;
      const groups = this.groups;
      for (let i = 0, l = groups.length; i < l; i++) {
        const group2 = groups[i];
        geometry2.addGroup(group2.start, group2.count, group2.materialIndex);
      }
      return geometry2;
    },
    toJSON: function() {
      const data = {
        metadata: {
          version: 4.5,
          type: "BufferGeometry",
          generator: "BufferGeometry.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "")
        data.name = this.name;
      if (Object.keys(this.userData).length > 0)
        data.userData = this.userData;
      if (this.parameters !== void 0) {
        const parameters = this.parameters;
        for (const key in parameters) {
          if (parameters[key] !== void 0)
            data[key] = parameters[key];
        }
        return data;
      }
      data.data = {attributes: {}};
      const index = this.index;
      if (index !== null) {
        data.data.index = {
          type: index.array.constructor.name,
          array: Array.prototype.slice.call(index.array)
        };
      }
      const attributes = this.attributes;
      for (const key in attributes) {
        const attribute = attributes[key];
        const attributeData = attribute.toJSON(data.data);
        if (attribute.name !== "")
          attributeData.name = attribute.name;
        data.data.attributes[key] = attributeData;
      }
      const morphAttributes = {};
      let hasMorphAttributes = false;
      for (const key in this.morphAttributes) {
        const attributeArray = this.morphAttributes[key];
        const array = [];
        for (let i = 0, il = attributeArray.length; i < il; i++) {
          const attribute = attributeArray[i];
          const attributeData = attribute.toJSON(data.data);
          if (attribute.name !== "")
            attributeData.name = attribute.name;
          array.push(attributeData);
        }
        if (array.length > 0) {
          morphAttributes[key] = array;
          hasMorphAttributes = true;
        }
      }
      if (hasMorphAttributes) {
        data.data.morphAttributes = morphAttributes;
        data.data.morphTargetsRelative = this.morphTargetsRelative;
      }
      const groups = this.groups;
      if (groups.length > 0) {
        data.data.groups = JSON.parse(JSON.stringify(groups));
      }
      const boundingSphere = this.boundingSphere;
      if (boundingSphere !== null) {
        data.data.boundingSphere = {
          center: boundingSphere.center.toArray(),
          radius: boundingSphere.radius
        };
      }
      return data;
    },
    clone: function() {
      return new BufferGeometry().copy(this);
    },
    copy: function(source) {
      this.index = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      const data = {};
      this.name = source.name;
      const index = source.index;
      if (index !== null) {
        this.setIndex(index.clone(data));
      }
      const attributes = source.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        this.setAttribute(name, attribute.clone(data));
      }
      const morphAttributes = source.morphAttributes;
      for (const name in morphAttributes) {
        const array = [];
        const morphAttribute = morphAttributes[name];
        for (let i = 0, l = morphAttribute.length; i < l; i++) {
          array.push(morphAttribute[i].clone(data));
        }
        this.morphAttributes[name] = array;
      }
      this.morphTargetsRelative = source.morphTargetsRelative;
      const groups = source.groups;
      for (let i = 0, l = groups.length; i < l; i++) {
        const group2 = groups[i];
        this.addGroup(group2.start, group2.count, group2.materialIndex);
      }
      const boundingBox = source.boundingBox;
      if (boundingBox !== null) {
        this.boundingBox = boundingBox.clone();
      }
      const boundingSphere = source.boundingSphere;
      if (boundingSphere !== null) {
        this.boundingSphere = boundingSphere.clone();
      }
      this.drawRange.start = source.drawRange.start;
      this.drawRange.count = source.drawRange.count;
      this.userData = source.userData;
      return this;
    },
    dispose: function() {
      this.dispatchEvent({type: "dispose"});
    }
  });
  var _inverseMatrix = new Matrix4();
  var _ray = new Ray();
  var _sphere = new Sphere();
  var _vA = new Vector3();
  var _vB = new Vector3();
  var _vC = new Vector3();
  var _tempA = new Vector3();
  var _tempB = new Vector3();
  var _tempC = new Vector3();
  var _morphA = new Vector3();
  var _morphB = new Vector3();
  var _morphC = new Vector3();
  var _uvA = new Vector2();
  var _uvB = new Vector2();
  var _uvC = new Vector2();
  var _intersectionPoint = new Vector3();
  var _intersectionPointWorld = new Vector3();
  function Mesh(geometry, material) {
    Object3D.call(this);
    this.type = "Mesh";
    this.geometry = geometry !== void 0 ? geometry : new BufferGeometry();
    this.material = material !== void 0 ? material : new MeshBasicMaterial();
    this.updateMorphTargets();
  }
  Mesh.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Mesh,
    isMesh: true,
    copy: function(source) {
      Object3D.prototype.copy.call(this, source);
      if (source.morphTargetInfluences !== void 0) {
        this.morphTargetInfluences = source.morphTargetInfluences.slice();
      }
      if (source.morphTargetDictionary !== void 0) {
        this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
      }
      this.material = source.material;
      this.geometry = source.geometry;
      return this;
    },
    updateMorphTargets: function() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
          const morphAttribute = morphAttributes[keys[0]];
          if (morphAttribute !== void 0) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
              const name = morphAttribute[m].name || String(m);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m;
            }
          }
        }
      } else {
        const morphTargets = geometry.morphTargets;
        if (morphTargets !== void 0 && morphTargets.length > 0) {
          console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
      }
    },
    raycast: function(raycaster, intersects2) {
      const geometry = this.geometry;
      const material = this.material;
      const matrixWorld = this.matrixWorld;
      if (material === void 0)
        return;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere.copy(geometry.boundingSphere);
      _sphere.applyMatrix4(matrixWorld);
      if (raycaster.ray.intersectsSphere(_sphere) === false)
        return;
      _inverseMatrix.copy(matrixWorld).invert();
      _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
      if (geometry.boundingBox !== null) {
        if (_ray.intersectsBox(geometry.boundingBox) === false)
          return;
      }
      let intersection;
      if (geometry.isBufferGeometry) {
        const index = geometry.index;
        const position = geometry.attributes.position;
        const morphPosition = geometry.morphAttributes.position;
        const morphTargetsRelative = geometry.morphTargetsRelative;
        const uv = geometry.attributes.uv;
        const uv2 = geometry.attributes.uv2;
        const groups = geometry.groups;
        const drawRange = geometry.drawRange;
        if (index !== null) {
          if (Array.isArray(material)) {
            for (let i = 0, il = groups.length; i < il; i++) {
              const group2 = groups[i];
              const groupMaterial = material[group2.materialIndex];
              const start = Math.max(group2.start, drawRange.start);
              const end = Math.min(group2.start + group2.count, drawRange.start + drawRange.count);
              for (let j = start, jl = end; j < jl; j += 3) {
                const a = index.getX(j);
                const b = index.getX(j + 1);
                const c = index.getX(j + 2);
                intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
                if (intersection) {
                  intersection.faceIndex = Math.floor(j / 3);
                  intersection.face.materialIndex = group2.materialIndex;
                  intersects2.push(intersection);
                }
              }
            }
          } else {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(index.count, drawRange.start + drawRange.count);
            for (let i = start, il = end; i < il; i += 3) {
              const a = index.getX(i);
              const b = index.getX(i + 1);
              const c = index.getX(i + 2);
              intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(i / 3);
                intersects2.push(intersection);
              }
            }
          }
        } else if (position !== void 0) {
          if (Array.isArray(material)) {
            for (let i = 0, il = groups.length; i < il; i++) {
              const group2 = groups[i];
              const groupMaterial = material[group2.materialIndex];
              const start = Math.max(group2.start, drawRange.start);
              const end = Math.min(group2.start + group2.count, drawRange.start + drawRange.count);
              for (let j = start, jl = end; j < jl; j += 3) {
                const a = j;
                const b = j + 1;
                const c = j + 2;
                intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
                if (intersection) {
                  intersection.faceIndex = Math.floor(j / 3);
                  intersection.face.materialIndex = group2.materialIndex;
                  intersects2.push(intersection);
                }
              }
            }
          } else {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(position.count, drawRange.start + drawRange.count);
            for (let i = start, il = end; i < il; i += 3) {
              const a = i;
              const b = i + 1;
              const c = i + 2;
              intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(i / 3);
                intersects2.push(intersection);
              }
            }
          }
        }
      } else if (geometry.isGeometry) {
        const isMultiMaterial = Array.isArray(material);
        const vertices = geometry.vertices;
        const faces = geometry.faces;
        let uvs;
        const faceVertexUvs = geometry.faceVertexUvs[0];
        if (faceVertexUvs.length > 0)
          uvs = faceVertexUvs;
        for (let f = 0, fl = faces.length; f < fl; f++) {
          const face = faces[f];
          const faceMaterial = isMultiMaterial ? material[face.materialIndex] : material;
          if (faceMaterial === void 0)
            continue;
          const fvA = vertices[face.a];
          const fvB = vertices[face.b];
          const fvC = vertices[face.c];
          intersection = checkIntersection(this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint);
          if (intersection) {
            if (uvs && uvs[f]) {
              const uvs_f = uvs[f];
              _uvA.copy(uvs_f[0]);
              _uvB.copy(uvs_f[1]);
              _uvC.copy(uvs_f[2]);
              intersection.uv = Triangle.getUV(_intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2());
            }
            intersection.face = face;
            intersection.faceIndex = f;
            intersects2.push(intersection);
          }
        }
      }
    }
  });
  function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
    let intersect;
    if (material.side === BackSide) {
      intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    } else {
      intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);
    }
    if (intersect === null)
      return null;
    _intersectionPointWorld.copy(point);
    _intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
    if (distance < raycaster.near || distance > raycaster.far)
      return null;
    return {
      distance,
      point: _intersectionPointWorld.clone(),
      object
    };
  }
  function checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {
    _vA.fromBufferAttribute(position, a);
    _vB.fromBufferAttribute(position, b);
    _vC.fromBufferAttribute(position, c);
    const morphInfluences = object.morphTargetInfluences;
    if (material.morphTargets && morphPosition && morphInfluences) {
      _morphA.set(0, 0, 0);
      _morphB.set(0, 0, 0);
      _morphC.set(0, 0, 0);
      for (let i = 0, il = morphPosition.length; i < il; i++) {
        const influence = morphInfluences[i];
        const morphAttribute = morphPosition[i];
        if (influence === 0)
          continue;
        _tempA.fromBufferAttribute(morphAttribute, a);
        _tempB.fromBufferAttribute(morphAttribute, b);
        _tempC.fromBufferAttribute(morphAttribute, c);
        if (morphTargetsRelative) {
          _morphA.addScaledVector(_tempA, influence);
          _morphB.addScaledVector(_tempB, influence);
          _morphC.addScaledVector(_tempC, influence);
        } else {
          _morphA.addScaledVector(_tempA.sub(_vA), influence);
          _morphB.addScaledVector(_tempB.sub(_vB), influence);
          _morphC.addScaledVector(_tempC.sub(_vC), influence);
        }
      }
      _vA.add(_morphA);
      _vB.add(_morphB);
      _vC.add(_morphC);
    }
    if (object.isSkinnedMesh) {
      object.boneTransform(a, _vA);
      object.boneTransform(b, _vB);
      object.boneTransform(c, _vC);
    }
    const intersection = checkIntersection(object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint);
    if (intersection) {
      if (uv) {
        _uvA.fromBufferAttribute(uv, a);
        _uvB.fromBufferAttribute(uv, b);
        _uvC.fromBufferAttribute(uv, c);
        intersection.uv = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());
      }
      if (uv2) {
        _uvA.fromBufferAttribute(uv2, a);
        _uvB.fromBufferAttribute(uv2, b);
        _uvC.fromBufferAttribute(uv2, c);
        intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());
      }
      const face = new Face3(a, b, c);
      Triangle.getNormal(_vA, _vB, _vC, face.normal);
      intersection.face = face;
    }
    return intersection;
  }
  var BoxBufferGeometry = class extends BufferGeometry {
    constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
      super();
      this.type = "BoxBufferGeometry";
      this.parameters = {
        width,
        height,
        depth,
        widthSegments,
        heightSegments,
        depthSegments
      };
      const scope = this;
      widthSegments = Math.floor(widthSegments);
      heightSegments = Math.floor(heightSegments);
      depthSegments = Math.floor(depthSegments);
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      let numberOfVertices = 0;
      let groupStart = 0;
      buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0);
      buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1);
      buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2);
      buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3);
      buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4);
      buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5);
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      function buildPlane(u, v, w, udir, vdir, width2, height2, depth2, gridX, gridY, materialIndex) {
        const segmentWidth = width2 / gridX;
        const segmentHeight = height2 / gridY;
        const widthHalf = width2 / 2;
        const heightHalf = height2 / 2;
        const depthHalf = depth2 / 2;
        const gridX1 = gridX + 1;
        const gridY1 = gridY + 1;
        let vertexCounter = 0;
        let groupCount = 0;
        const vector = new Vector3();
        for (let iy = 0; iy < gridY1; iy++) {
          const y = iy * segmentHeight - heightHalf;
          for (let ix = 0; ix < gridX1; ix++) {
            const x = ix * segmentWidth - widthHalf;
            vector[u] = x * udir;
            vector[v] = y * vdir;
            vector[w] = depthHalf;
            vertices.push(vector.x, vector.y, vector.z);
            vector[u] = 0;
            vector[v] = 0;
            vector[w] = depth2 > 0 ? 1 : -1;
            normals.push(vector.x, vector.y, vector.z);
            uvs.push(ix / gridX);
            uvs.push(1 - iy / gridY);
            vertexCounter += 1;
          }
        }
        for (let iy = 0; iy < gridY; iy++) {
          for (let ix = 0; ix < gridX; ix++) {
            const a = numberOfVertices + ix + gridX1 * iy;
            const b = numberOfVertices + ix + gridX1 * (iy + 1);
            const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
            const d = numberOfVertices + (ix + 1) + gridX1 * iy;
            indices.push(a, b, d);
            indices.push(b, c, d);
            groupCount += 6;
          }
        }
        scope.addGroup(groupStart, groupCount, materialIndex);
        groupStart += groupCount;
        numberOfVertices += vertexCounter;
      }
    }
  };
  function cloneUniforms(src) {
    const dst = {};
    for (const u in src) {
      dst[u] = {};
      for (const p in src[u]) {
        const property = src[u][p];
        if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture)) {
          dst[u][p] = property.clone();
        } else if (Array.isArray(property)) {
          dst[u][p] = property.slice();
        } else {
          dst[u][p] = property;
        }
      }
    }
    return dst;
  }
  function mergeUniforms(uniforms) {
    const merged = {};
    for (let u = 0; u < uniforms.length; u++) {
      const tmp2 = cloneUniforms(uniforms[u]);
      for (const p in tmp2) {
        merged[p] = tmp2[p];
      }
    }
    return merged;
  }
  var UniformsUtils = {clone: cloneUniforms, merge: mergeUniforms};
  var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
  var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
  function ShaderMaterial(parameters) {
    Material.call(this);
    this.type = "ShaderMaterial";
    this.defines = {};
    this.uniforms = {};
    this.vertexShader = default_vertex;
    this.fragmentShader = default_fragment;
    this.linewidth = 1;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.fog = false;
    this.lights = false;
    this.clipping = false;
    this.skinning = false;
    this.morphTargets = false;
    this.morphNormals = false;
    this.extensions = {
      derivatives: false,
      fragDepth: false,
      drawBuffers: false,
      shaderTextureLOD: false
    };
    this.defaultAttributeValues = {
      color: [1, 1, 1],
      uv: [0, 0],
      uv2: [0, 0]
    };
    this.index0AttributeName = void 0;
    this.uniformsNeedUpdate = false;
    this.glslVersion = null;
    if (parameters !== void 0) {
      if (parameters.attributes !== void 0) {
        console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.");
      }
      this.setValues(parameters);
    }
  }
  ShaderMaterial.prototype = Object.create(Material.prototype);
  ShaderMaterial.prototype.constructor = ShaderMaterial;
  ShaderMaterial.prototype.isShaderMaterial = true;
  ShaderMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.fragmentShader = source.fragmentShader;
    this.vertexShader = source.vertexShader;
    this.uniforms = cloneUniforms(source.uniforms);
    this.defines = Object.assign({}, source.defines);
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.lights = source.lights;
    this.clipping = source.clipping;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.morphNormals = source.morphNormals;
    this.extensions = Object.assign({}, source.extensions);
    this.glslVersion = source.glslVersion;
    return this;
  };
  ShaderMaterial.prototype.toJSON = function(meta) {
    const data = Material.prototype.toJSON.call(this, meta);
    data.glslVersion = this.glslVersion;
    data.uniforms = {};
    for (const name in this.uniforms) {
      const uniform = this.uniforms[name];
      const value = uniform.value;
      if (value && value.isTexture) {
        data.uniforms[name] = {
          type: "t",
          value: value.toJSON(meta).uuid
        };
      } else if (value && value.isColor) {
        data.uniforms[name] = {
          type: "c",
          value: value.getHex()
        };
      } else if (value && value.isVector2) {
        data.uniforms[name] = {
          type: "v2",
          value: value.toArray()
        };
      } else if (value && value.isVector3) {
        data.uniforms[name] = {
          type: "v3",
          value: value.toArray()
        };
      } else if (value && value.isVector4) {
        data.uniforms[name] = {
          type: "v4",
          value: value.toArray()
        };
      } else if (value && value.isMatrix3) {
        data.uniforms[name] = {
          type: "m3",
          value: value.toArray()
        };
      } else if (value && value.isMatrix4) {
        data.uniforms[name] = {
          type: "m4",
          value: value.toArray()
        };
      } else {
        data.uniforms[name] = {
          value
        };
      }
    }
    if (Object.keys(this.defines).length > 0)
      data.defines = this.defines;
    data.vertexShader = this.vertexShader;
    data.fragmentShader = this.fragmentShader;
    const extensions = {};
    for (const key in this.extensions) {
      if (this.extensions[key] === true)
        extensions[key] = true;
    }
    if (Object.keys(extensions).length > 0)
      data.extensions = extensions;
    return data;
  };
  function Camera() {
    Object3D.call(this);
    this.type = "Camera";
    this.matrixWorldInverse = new Matrix4();
    this.projectionMatrix = new Matrix4();
    this.projectionMatrixInverse = new Matrix4();
  }
  Camera.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Camera,
    isCamera: true,
    copy: function(source, recursive) {
      Object3D.prototype.copy.call(this, source, recursive);
      this.matrixWorldInverse.copy(source.matrixWorldInverse);
      this.projectionMatrix.copy(source.projectionMatrix);
      this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
      return this;
    },
    getWorldDirection: function(target) {
      if (target === void 0) {
        console.warn("THREE.Camera: .getWorldDirection() target is now required");
        target = new Vector3();
      }
      this.updateWorldMatrix(true, false);
      const e = this.matrixWorld.elements;
      return target.set(-e[8], -e[9], -e[10]).normalize();
    },
    updateMatrixWorld: function(force) {
      Object3D.prototype.updateMatrixWorld.call(this, force);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    },
    updateWorldMatrix: function(updateParents, updateChildren) {
      Object3D.prototype.updateWorldMatrix.call(this, updateParents, updateChildren);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    },
    clone: function() {
      return new this.constructor().copy(this);
    }
  });
  function PerspectiveCamera(fov2 = 50, aspect2 = 1, near = 0.1, far = 2e3) {
    Camera.call(this);
    this.type = "PerspectiveCamera";
    this.fov = fov2;
    this.zoom = 1;
    this.near = near;
    this.far = far;
    this.focus = 10;
    this.aspect = aspect2;
    this.view = null;
    this.filmGauge = 35;
    this.filmOffset = 0;
    this.updateProjectionMatrix();
  }
  PerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {
    constructor: PerspectiveCamera,
    isPerspectiveCamera: true,
    copy: function(source, recursive) {
      Camera.prototype.copy.call(this, source, recursive);
      this.fov = source.fov;
      this.zoom = source.zoom;
      this.near = source.near;
      this.far = source.far;
      this.focus = source.focus;
      this.aspect = source.aspect;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      this.filmGauge = source.filmGauge;
      this.filmOffset = source.filmOffset;
      return this;
    },
    setFocalLength: function(focalLength) {
      const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
      this.fov = MathUtils.RAD2DEG * 2 * Math.atan(vExtentSlope);
      this.updateProjectionMatrix();
    },
    getFocalLength: function() {
      const vExtentSlope = Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov);
      return 0.5 * this.getFilmHeight() / vExtentSlope;
    },
    getEffectiveFOV: function() {
      return MathUtils.RAD2DEG * 2 * Math.atan(Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom);
    },
    getFilmWidth: function() {
      return this.filmGauge * Math.min(this.aspect, 1);
    },
    getFilmHeight: function() {
      return this.filmGauge / Math.max(this.aspect, 1);
    },
    setViewOffset: function(fullWidth, fullHeight, x, y, width, height) {
      this.aspect = fullWidth / fullHeight;
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }
      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x;
      this.view.offsetY = y;
      this.view.width = width;
      this.view.height = height;
      this.updateProjectionMatrix();
    },
    clearViewOffset: function() {
      if (this.view !== null) {
        this.view.enabled = false;
      }
      this.updateProjectionMatrix();
    },
    updateProjectionMatrix: function() {
      const near = this.near;
      let top = near * Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom;
      let height = 2 * top;
      let width = this.aspect * height;
      let left = -0.5 * width;
      const view = this.view;
      if (this.view !== null && this.view.enabled) {
        const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
        left += view.offsetX * width / fullWidth;
        top -= view.offsetY * height / fullHeight;
        width *= view.width / fullWidth;
        height *= view.height / fullHeight;
      }
      const skew = this.filmOffset;
      if (skew !== 0)
        left += near * skew / this.getFilmWidth();
      this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    },
    toJSON: function(meta) {
      const data = Object3D.prototype.toJSON.call(this, meta);
      data.object.fov = this.fov;
      data.object.zoom = this.zoom;
      data.object.near = this.near;
      data.object.far = this.far;
      data.object.focus = this.focus;
      data.object.aspect = this.aspect;
      if (this.view !== null)
        data.object.view = Object.assign({}, this.view);
      data.object.filmGauge = this.filmGauge;
      data.object.filmOffset = this.filmOffset;
      return data;
    }
  });
  var fov = 90;
  var aspect = 1;
  function CubeCamera(near, far, renderTarget) {
    Object3D.call(this);
    this.type = "CubeCamera";
    if (renderTarget.isWebGLCubeRenderTarget !== true) {
      console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");
      return;
    }
    this.renderTarget = renderTarget;
    const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
    cameraPX.layers = this.layers;
    cameraPX.up.set(0, -1, 0);
    cameraPX.lookAt(new Vector3(1, 0, 0));
    this.add(cameraPX);
    const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
    cameraNX.layers = this.layers;
    cameraNX.up.set(0, -1, 0);
    cameraNX.lookAt(new Vector3(-1, 0, 0));
    this.add(cameraNX);
    const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
    cameraPY.layers = this.layers;
    cameraPY.up.set(0, 0, 1);
    cameraPY.lookAt(new Vector3(0, 1, 0));
    this.add(cameraPY);
    const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
    cameraNY.layers = this.layers;
    cameraNY.up.set(0, 0, -1);
    cameraNY.lookAt(new Vector3(0, -1, 0));
    this.add(cameraNY);
    const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
    cameraPZ.layers = this.layers;
    cameraPZ.up.set(0, -1, 0);
    cameraPZ.lookAt(new Vector3(0, 0, 1));
    this.add(cameraPZ);
    const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
    cameraNZ.layers = this.layers;
    cameraNZ.up.set(0, -1, 0);
    cameraNZ.lookAt(new Vector3(0, 0, -1));
    this.add(cameraNZ);
    this.update = function(renderer3, scene2) {
      if (this.parent === null)
        this.updateMatrixWorld();
      const currentXrEnabled = renderer3.xr.enabled;
      const currentRenderTarget = renderer3.getRenderTarget();
      renderer3.xr.enabled = false;
      const generateMipmaps = renderTarget.texture.generateMipmaps;
      renderTarget.texture.generateMipmaps = false;
      renderer3.setRenderTarget(renderTarget, 0);
      renderer3.render(scene2, cameraPX);
      renderer3.setRenderTarget(renderTarget, 1);
      renderer3.render(scene2, cameraNX);
      renderer3.setRenderTarget(renderTarget, 2);
      renderer3.render(scene2, cameraPY);
      renderer3.setRenderTarget(renderTarget, 3);
      renderer3.render(scene2, cameraNY);
      renderer3.setRenderTarget(renderTarget, 4);
      renderer3.render(scene2, cameraPZ);
      renderTarget.texture.generateMipmaps = generateMipmaps;
      renderer3.setRenderTarget(renderTarget, 5);
      renderer3.render(scene2, cameraNZ);
      renderer3.setRenderTarget(currentRenderTarget);
      renderer3.xr.enabled = currentXrEnabled;
    };
  }
  CubeCamera.prototype = Object.create(Object3D.prototype);
  CubeCamera.prototype.constructor = CubeCamera;
  function CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
    images = images !== void 0 ? images : [];
    mapping = mapping !== void 0 ? mapping : CubeReflectionMapping;
    format = format !== void 0 ? format : RGBFormat;
    Texture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
    this.flipY = false;
    this._needsFlipEnvMap = true;
  }
  CubeTexture.prototype = Object.create(Texture.prototype);
  CubeTexture.prototype.constructor = CubeTexture;
  CubeTexture.prototype.isCubeTexture = true;
  Object.defineProperty(CubeTexture.prototype, "images", {
    get: function() {
      return this.image;
    },
    set: function(value) {
      this.image = value;
    }
  });
  function WebGLCubeRenderTarget(size, options, dummy) {
    if (Number.isInteger(options)) {
      console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )");
      options = dummy;
    }
    WebGLRenderTarget.call(this, size, size, options);
    options = options || {};
    this.texture = new CubeTexture(void 0, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
    this.texture._needsFlipEnvMap = false;
  }
  WebGLCubeRenderTarget.prototype = Object.create(WebGLRenderTarget.prototype);
  WebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;
  WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;
  WebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function(renderer3, texture) {
    this.texture.type = texture.type;
    this.texture.format = RGBAFormat;
    this.texture.encoding = texture.encoding;
    this.texture.generateMipmaps = texture.generateMipmaps;
    this.texture.minFilter = texture.minFilter;
    this.texture.magFilter = texture.magFilter;
    const shader = {
      uniforms: {
        tEquirect: {value: null}
      },
      vertexShader: `

			varying vec3 vWorldDirection;

			vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

				return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

			}

			void main() {

				vWorldDirection = transformDirection( position, modelMatrix );

				#include <begin_vertex>
				#include <project_vertex>

			}
		`,
      fragmentShader: `

			uniform sampler2D tEquirect;

			varying vec3 vWorldDirection;

			#include <common>

			void main() {

				vec3 direction = normalize( vWorldDirection );

				vec2 sampleUV = equirectUv( direction );

				gl_FragColor = texture2D( tEquirect, sampleUV );

			}
		`
    };
    const geometry = new BoxBufferGeometry(5, 5, 5);
    const material = new ShaderMaterial({
      name: "CubemapFromEquirect",
      uniforms: cloneUniforms(shader.uniforms),
      vertexShader: shader.vertexShader,
      fragmentShader: shader.fragmentShader,
      side: BackSide,
      blending: NoBlending
    });
    material.uniforms.tEquirect.value = texture;
    const mesh = new Mesh(geometry, material);
    const currentMinFilter = texture.minFilter;
    if (texture.minFilter === LinearMipmapLinearFilter)
      texture.minFilter = LinearFilter;
    const camera2 = new CubeCamera(1, 10, this);
    camera2.update(renderer3, mesh);
    texture.minFilter = currentMinFilter;
    mesh.geometry.dispose();
    mesh.material.dispose();
    return this;
  };
  WebGLCubeRenderTarget.prototype.clear = function(renderer3, color, depth, stencil) {
    const currentRenderTarget = renderer3.getRenderTarget();
    for (let i = 0; i < 6; i++) {
      renderer3.setRenderTarget(this, i);
      renderer3.clear(color, depth, stencil);
    }
    renderer3.setRenderTarget(currentRenderTarget);
  };
  function DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
    Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
    this.image = {data: data || null, width: width || 1, height: height || 1};
    this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
    this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
    this.generateMipmaps = false;
    this.flipY = false;
    this.unpackAlignment = 1;
    this.needsUpdate = true;
  }
  DataTexture.prototype = Object.create(Texture.prototype);
  DataTexture.prototype.constructor = DataTexture;
  DataTexture.prototype.isDataTexture = true;
  var _sphere$1 = /* @__PURE__ */ new Sphere();
  var _vector$5 = /* @__PURE__ */ new Vector3();
  var Frustum = class {
    constructor(p0, p1, p2, p3, p4, p5) {
      this.planes = [
        p0 !== void 0 ? p0 : new Plane(),
        p1 !== void 0 ? p1 : new Plane(),
        p2 !== void 0 ? p2 : new Plane(),
        p3 !== void 0 ? p3 : new Plane(),
        p4 !== void 0 ? p4 : new Plane(),
        p5 !== void 0 ? p5 : new Plane()
      ];
    }
    set(p0, p1, p2, p3, p4, p5) {
      const planes = this.planes;
      planes[0].copy(p0);
      planes[1].copy(p1);
      planes[2].copy(p2);
      planes[3].copy(p3);
      planes[4].copy(p4);
      planes[5].copy(p5);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(frustum) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        planes[i].copy(frustum.planes[i]);
      }
      return this;
    }
    setFromProjectionMatrix(m) {
      const planes = this.planes;
      const me = m.elements;
      const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
      const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
      const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
      const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
      planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
      planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
      planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
      planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
      planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
      planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
      return this;
    }
    intersectsObject(object) {
      const geometry = object.geometry;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere$1.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
      return this.intersectsSphere(_sphere$1);
    }
    intersectsSprite(sprite) {
      _sphere$1.center.set(0, 0, 0);
      _sphere$1.radius = 0.7071067811865476;
      _sphere$1.applyMatrix4(sprite.matrixWorld);
      return this.intersectsSphere(_sphere$1);
    }
    intersectsSphere(sphere) {
      const planes = this.planes;
      const center = sphere.center;
      const negRadius = -sphere.radius;
      for (let i = 0; i < 6; i++) {
        const distance = planes[i].distanceToPoint(center);
        if (distance < negRadius) {
          return false;
        }
      }
      return true;
    }
    intersectsBox(box) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        const plane = planes[i];
        _vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;
        _vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;
        _vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;
        if (plane.distanceToPoint(_vector$5) < 0) {
          return false;
        }
      }
      return true;
    }
    containsPoint(point) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        if (planes[i].distanceToPoint(point) < 0) {
          return false;
        }
      }
      return true;
    }
  };
  function WebGLAnimation() {
    let context = null;
    let isAnimating = false;
    let animationLoop = null;
    let requestId = null;
    function onAnimationFrame(time, frame) {
      animationLoop(time, frame);
      requestId = context.requestAnimationFrame(onAnimationFrame);
    }
    return {
      start: function() {
        if (isAnimating === true)
          return;
        if (animationLoop === null)
          return;
        requestId = context.requestAnimationFrame(onAnimationFrame);
        isAnimating = true;
      },
      stop: function() {
        context.cancelAnimationFrame(requestId);
        isAnimating = false;
      },
      setAnimationLoop: function(callback) {
        animationLoop = callback;
      },
      setContext: function(value) {
        context = value;
      }
    };
  }
  function WebGLAttributes(gl, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    const buffers = new WeakMap();
    function createBuffer(attribute, bufferType) {
      const array = attribute.array;
      const usage = attribute.usage;
      const buffer = gl.createBuffer();
      gl.bindBuffer(bufferType, buffer);
      gl.bufferData(bufferType, array, usage);
      attribute.onUploadCallback();
      let type = 5126;
      if (array instanceof Float32Array) {
        type = 5126;
      } else if (array instanceof Float64Array) {
        console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.");
      } else if (array instanceof Uint16Array) {
        if (attribute.isFloat16BufferAttribute) {
          if (isWebGL2) {
            type = 5131;
          } else {
            console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
          }
        } else {
          type = 5123;
        }
      } else if (array instanceof Int16Array) {
        type = 5122;
      } else if (array instanceof Uint32Array) {
        type = 5125;
      } else if (array instanceof Int32Array) {
        type = 5124;
      } else if (array instanceof Int8Array) {
        type = 5120;
      } else if (array instanceof Uint8Array) {
        type = 5121;
      }
      return {
        buffer,
        type,
        bytesPerElement: array.BYTES_PER_ELEMENT,
        version: attribute.version
      };
    }
    function updateBuffer(buffer, attribute, bufferType) {
      const array = attribute.array;
      const updateRange = attribute.updateRange;
      gl.bindBuffer(bufferType, buffer);
      if (updateRange.count === -1) {
        gl.bufferSubData(bufferType, 0, array);
      } else {
        if (isWebGL2) {
          gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);
        } else {
          gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
        }
        updateRange.count = -1;
      }
    }
    function get(attribute) {
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      return buffers.get(attribute);
    }
    function remove(attribute) {
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      const data = buffers.get(attribute);
      if (data) {
        gl.deleteBuffer(data.buffer);
        buffers.delete(attribute);
      }
    }
    function update2(attribute, bufferType) {
      if (attribute.isGLBufferAttribute) {
        const cached = buffers.get(attribute);
        if (!cached || cached.version < attribute.version) {
          buffers.set(attribute, {
            buffer: attribute.buffer,
            type: attribute.type,
            bytesPerElement: attribute.elementSize,
            version: attribute.version
          });
        }
        return;
      }
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      const data = buffers.get(attribute);
      if (data === void 0) {
        buffers.set(attribute, createBuffer(attribute, bufferType));
      } else if (data.version < attribute.version) {
        updateBuffer(data.buffer, attribute, bufferType);
        data.version = attribute.version;
      }
    }
    return {
      get,
      remove,
      update: update2
    };
  }
  var PlaneBufferGeometry = class extends BufferGeometry {
    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
      super();
      this.type = "PlaneBufferGeometry";
      this.parameters = {
        width,
        height,
        widthSegments,
        heightSegments
      };
      const width_half = width / 2;
      const height_half = height / 2;
      const gridX = Math.floor(widthSegments);
      const gridY = Math.floor(heightSegments);
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      const segment_width = width / gridX;
      const segment_height = height / gridY;
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      for (let iy = 0; iy < gridY1; iy++) {
        const y = iy * segment_height - height_half;
        for (let ix = 0; ix < gridX1; ix++) {
          const x = ix * segment_width - width_half;
          vertices.push(x, -y, 0);
          normals.push(0, 0, 1);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a = ix + gridX1 * iy;
          const b = ix + gridX1 * (iy + 1);
          const c = ix + 1 + gridX1 * (iy + 1);
          const d = ix + 1 + gridX1 * iy;
          indices.push(a, b, d);
          indices.push(b, c, d);
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
  };
  var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
  var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
  var alphatest_fragment = "#ifdef ALPHATEST\n	if ( diffuseColor.a < ALPHATEST ) discard;\n#endif";
  var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n	#endif\n#endif";
  var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
  var begin_vertex = "vec3 transformed = vec3( position );";
  var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
  var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	return vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n	if( cutoffDistance > 0.0 ) {\n		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n	}\n	return distanceFalloff;\n#else\n	if( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n		return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n	}\n	return 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n	float fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n	vec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n	return Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	return 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( incidentLight.direction + viewDir );\n	float dotNL = saturate( dot( normal, incidentLight.direction ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n	return specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	vec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n	vec3 FssEss = F * brdf.x + brdf.y;\n	float Ess = brdf.x + brdf.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n	float invAlpha = 1.0 / roughness;\n	float cos2h = NoH * NoH;\n	float sin2h = max(1.0 - cos2h, 0.0078125);	return (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n	return saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n	vec3 N = geometry.normal;\n	vec3 V = geometry.viewDir;\n	vec3 H = normalize( V + L );\n	float dotNH = saturate( dot( N, H ) );\n	return specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif";
  var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 );\n		fDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
  var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif";
  var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
  var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
  var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
  var color_fragment = "#ifdef USE_COLOR\n	diffuseColor.rgb *= vColor;\n#endif";
  var color_pars_fragment = "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif";
  var color_pars_vertex = "#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";
  var color_vertex = "#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor.xyz *= color.xyz;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";
  var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	float distance = dot( planeNormal, point - pointOnPlane );\n	return - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n	return dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}";
  var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_maxMipLevel 8.0\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_maxTileSize 256.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n		vec2 f = fract( uv );\n		uv += 0.5 - f;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		if ( mipInt < cubeUV_maxMipLevel ) {\n			uv.y += 2.0 * cubeUV_maxTileSize;\n		}\n		uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n		uv *= texelSize;\n		vec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.x += texelSize;\n		vec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.y += texelSize;\n		vec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.x -= texelSize;\n		vec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		vec3 tm = mix( tl, tr, f.x );\n		vec3 bm = mix( bl, br, f.x );\n		return mix( tm, bm, f.y );\n	}\n	#define r0 1.0\n	#define v0 0.339\n	#define m0 - 2.0\n	#define r1 0.8\n	#define v1 0.276\n	#define m1 - 1.0\n	#define r4 0.4\n	#define v4 0.046\n	#define m4 2.0\n	#define r5 0.305\n	#define v5 0.016\n	#define m5 3.0\n	#define r6 0.21\n	#define v6 0.0038\n	#define m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= r1 ) {\n			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n		} else if ( roughness >= r4 ) {\n			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n		} else if ( roughness >= r5 ) {\n			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n		} else if ( roughness >= r6 ) {\n			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
  var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
  var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
  var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";
  var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
  var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
  var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
  var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n	float maxComponent = max( max( value.r, value.g ), value.b );\n	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.r, max( value.g, value.b ) );\n	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n	M = ceil( M * 255.0 ) / 255.0;\n	return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.r, max( value.g, value.b ) );\n	float D = max( maxRange / maxRGB, 1.0 );\n	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n	vec4 vResult;\n	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n	vResult.w = fract( Le );\n	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n	return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n	float Le = value.z * 255.0 + value.w;\n	vec3 Xp_Y_XYZp;\n	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n	return vec4( max( vRGB, 0.0 ), 1.0 );\n}";
  var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifndef ENVMAP_TYPE_CUBE_UV\n		envColor = envMapTexelToLinear( envColor );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
  var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform int maxMipLevel;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
  var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
  var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
  var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
  var fog_vertex = "#ifdef USE_FOG\n	fogDepth = - mvPosition.z;\n#endif";
  var fog_pars_vertex = "#ifdef USE_FOG\n	varying float fogDepth;\n#endif";
  var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
  var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float fogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
  var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return texture2D( gradientMap, coord ).rgb;\n	#else\n		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n	#endif\n}";
  var lightmap_fragment = "#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n	reflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif";
  var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
  var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n	vIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		#ifdef DOUBLE_SIDED\n			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif";
  var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n	vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	return irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		directLight.color = directionalLight.color;\n		directLight.direction = directionalLight.direction;\n		directLight.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		directLight.color = pointLight.color;\n		directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n		directLight.visible = ( directLight.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		float angleCos = dot( directLight.direction, spotLight.direction );\n		if ( angleCos > spotLight.coneCos ) {\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n			directLight.color = spotLight.color;\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n		float dotNL = dot( geometry.normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			irradiance *= PI;\n		#endif\n		return irradiance;\n	}\n#endif";
  var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n	#ifdef ENVMAP_MODE_REFRACTION\n		uniform float refractionRatio;\n	#endif\n	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n		#else\n			vec4 envMapColor = vec4( 0.0 );\n		#endif\n		return PI * envMapColor.rgb * envMapIntensity;\n	}\n	float getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n		float maxMIPLevelScalar = float( maxMIPLevel );\n		float sigma = PI * roughness * roughness / ( 1.0 + roughness );\n		float desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n	}\n	vec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( -viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n		#else\n			vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n		#endif\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n		float specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n		#endif\n		return envMapColor.rgb * envMapIntensity;\n	}\n#endif";
  var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
  var lights_toon_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )	(0)";
  var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
  var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)";
  var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheen;\n#endif";
  var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float specularRoughness;\n	vec3 specularColor;\n#ifdef CLEARCOAT\n	float clearcoat;\n	float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n	vec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n	return DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.specularRoughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	#ifdef CLEARCOAT\n		float ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = ccDotNL * directLight.color;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			ccIrradiance *= PI;\n		#endif\n		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n		reflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n	#else\n		float clearcoatDHR = 0.0;\n	#endif\n	#ifdef USE_SHEEN\n		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n			material.specularRoughness,\n			directLight.direction,\n			geometry,\n			material.sheenColor\n		);\n	#else\n		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n	#endif\n	reflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef CLEARCOAT\n		float ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n		float ccDotNL = ccDotNV;\n		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n	#else\n		float clearcoatDHR = 0.0;\n	#endif\n	float clearcoatInv = 1.0 - clearcoatDHR;\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	BRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n	reflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
  var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointDirectLightIrradiance( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
  var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	radiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n	#ifdef CLEARCOAT\n		clearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n	#endif\n#endif";
  var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
  var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
  var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
  var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";
  var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";
  var map_fragment = "#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor = mapTexelToLinear( texelColor );\n	diffuseColor *= texelColor;\n#endif";
  var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
  var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n	vec4 mapTexel = texture2D( map, uv );\n	diffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
  var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	uniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
  var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
  var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
  var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n	objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n	objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n	objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif";
  var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifndef USE_MORPHNORMALS\n		uniform float morphTargetInfluences[ 8 ];\n	#else\n		uniform float morphTargetInfluences[ 4 ];\n	#endif\n#endif";
  var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n	transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n	transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n	transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n	#ifndef USE_MORPHNORMALS\n		transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n		transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n		transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n		transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n	#endif\n#endif";
  var normal_fragment_begin = "#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#endif\n	#ifdef USE_TANGENT\n		vec3 tangent = normalize( vTangent );\n		vec3 bitangent = normalize( vBitangent );\n		#ifdef DOUBLE_SIDED\n			tangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n			bitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		#endif\n		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n			mat3 vTBN = mat3( tangent, bitangent, normal );\n		#endif\n	#endif\n#endif\nvec3 geometryNormal = normal;";
  var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	#ifdef USE_TANGENT\n		normal = normalize( vTBN * mapN );\n	#else\n		normal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n	#endif\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";
  var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		float scale = sign( st1.t * st0.s - st0.t * st1.s );\n		vec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n		vec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n		vec3 N = normalize( surf_norm );\n		mat3 tsn = mat3( S, T, N );\n		mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		return normalize( tsn * mapN );\n	}\n#endif";
  var clearcoat_normal_fragment_begin = "#ifdef CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif";
  var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	#ifdef USE_TANGENT\n		clearcoatNormal = normalize( vTBN * clearcoatMapN );\n	#else\n		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n	#endif\n#endif";
  var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif";
  var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n	return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
  var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
  var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
  var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
  var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
  var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
  var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
  var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";
  var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
  var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		vec4 shadowWorldPosition;\n	#endif\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n#endif";
  var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
  var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
  var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform highp sampler2D boneTexture;\n		uniform int boneTextureSize;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureSize ) );\n			float y = floor( j / float( boneTextureSize ) );\n			float dx = 1.0 / float( boneTextureSize );\n			float dy = 1.0 / float( boneTextureSize );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif";
  var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
  var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
  var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
  var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
  var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
  var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
  var transmissionmap_fragment = "#ifdef USE_TRANSMISSIONMAP\n	totalTransmission *= texture2D( transmissionMap, vUv ).r;\n#endif";
  var transmissionmap_pars_fragment = "#ifdef USE_TRANSMISSIONMAP\n	uniform sampler2D transmissionMap;\n#endif";
  var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n	varying vec2 vUv;\n#endif";
  var uv_pars_vertex = "#ifdef USE_UV\n	#ifdef UVS_VERTEX_ONLY\n		vec2 vUv;\n	#else\n		varying vec2 vUv;\n	#endif\n	uniform mat3 uvTransform;\n#endif";
  var uv_vertex = "#ifdef USE_UV\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
  var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif";
  var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n	uniform mat3 uv2Transform;\n#endif";
  var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";
  var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
  var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	gl_FragColor = mapTexelToLinear( texColor );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
  var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
  var cube_frag = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	vec3 vReflect = vWorldDirection;\n	#include <envmap_fragment>\n	gl_FragColor = envColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
  var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
  var depth_frag = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";
  var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
  var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
  var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
  var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	vec4 texColor = texture2D( tEquirect, sampleUV );\n	gl_FragColor = mapTexelToLinear( texColor );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
  var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
  var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
  var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
  var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n	\n		vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_ENVMAP\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
  var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	#ifdef DOUBLE_SIDED\n		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n	#else\n		reflectedLight.indirectDiffuse += vIndirectFront;\n	#endif\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n		matcapColor = matcapTexelToLinear( matcapColor );\n	#else\n		vec4 matcapColor = vec4( 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#ifndef FLAT_SHADED\n		vNormal = normalize( transformedNormal );\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
  var meshtoon_frag = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var meshtoon_vert = "#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var meshphysical_frag = "#define STANDARD\n#ifdef PHYSICAL\n	#define REFLECTIVITY\n	#define CLEARCOAT\n	#define TRANSMISSION\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSMISSION\n	uniform float transmission;\n#endif\n#ifdef REFLECTIVITY\n	uniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <transmissionmap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#ifdef TRANSMISSION\n		float totalTransmission = transmission;\n	#endif\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <transmissionmap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#ifdef TRANSMISSION\n		diffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\n	#endif\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var meshphysical_vert = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";
  var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
  var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
  var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
  var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
  var shadow_vert = "#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
  var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
  var ShaderChunk = {
    alphamap_fragment,
    alphamap_pars_fragment,
    alphatest_fragment,
    aomap_fragment,
    aomap_pars_fragment,
    begin_vertex,
    beginnormal_vertex,
    bsdfs,
    bumpmap_pars_fragment,
    clipping_planes_fragment,
    clipping_planes_pars_fragment,
    clipping_planes_pars_vertex,
    clipping_planes_vertex,
    color_fragment,
    color_pars_fragment,
    color_pars_vertex,
    color_vertex,
    common,
    cube_uv_reflection_fragment,
    defaultnormal_vertex,
    displacementmap_pars_vertex,
    displacementmap_vertex,
    emissivemap_fragment,
    emissivemap_pars_fragment,
    encodings_fragment,
    encodings_pars_fragment,
    envmap_fragment,
    envmap_common_pars_fragment,
    envmap_pars_fragment,
    envmap_pars_vertex,
    envmap_physical_pars_fragment,
    envmap_vertex,
    fog_vertex,
    fog_pars_vertex,
    fog_fragment,
    fog_pars_fragment,
    gradientmap_pars_fragment,
    lightmap_fragment,
    lightmap_pars_fragment,
    lights_lambert_vertex,
    lights_pars_begin,
    lights_toon_fragment,
    lights_toon_pars_fragment,
    lights_phong_fragment,
    lights_phong_pars_fragment,
    lights_physical_fragment,
    lights_physical_pars_fragment,
    lights_fragment_begin,
    lights_fragment_maps,
    lights_fragment_end,
    logdepthbuf_fragment,
    logdepthbuf_pars_fragment,
    logdepthbuf_pars_vertex,
    logdepthbuf_vertex,
    map_fragment,
    map_pars_fragment,
    map_particle_fragment,
    map_particle_pars_fragment,
    metalnessmap_fragment,
    metalnessmap_pars_fragment,
    morphnormal_vertex,
    morphtarget_pars_vertex,
    morphtarget_vertex,
    normal_fragment_begin,
    normal_fragment_maps,
    normalmap_pars_fragment,
    clearcoat_normal_fragment_begin,
    clearcoat_normal_fragment_maps,
    clearcoat_pars_fragment,
    packing,
    premultiplied_alpha_fragment,
    project_vertex,
    dithering_fragment,
    dithering_pars_fragment,
    roughnessmap_fragment,
    roughnessmap_pars_fragment,
    shadowmap_pars_fragment,
    shadowmap_pars_vertex,
    shadowmap_vertex,
    shadowmask_pars_fragment,
    skinbase_vertex,
    skinning_pars_vertex,
    skinning_vertex,
    skinnormal_vertex,
    specularmap_fragment,
    specularmap_pars_fragment,
    tonemapping_fragment,
    tonemapping_pars_fragment,
    transmissionmap_fragment,
    transmissionmap_pars_fragment,
    uv_pars_fragment,
    uv_pars_vertex,
    uv_vertex,
    uv2_pars_fragment,
    uv2_pars_vertex,
    uv2_vertex,
    worldpos_vertex,
    background_frag,
    background_vert,
    cube_frag,
    cube_vert,
    depth_frag,
    depth_vert,
    distanceRGBA_frag,
    distanceRGBA_vert,
    equirect_frag,
    equirect_vert,
    linedashed_frag,
    linedashed_vert,
    meshbasic_frag,
    meshbasic_vert,
    meshlambert_frag,
    meshlambert_vert,
    meshmatcap_frag,
    meshmatcap_vert,
    meshtoon_frag,
    meshtoon_vert,
    meshphong_frag,
    meshphong_vert,
    meshphysical_frag,
    meshphysical_vert,
    normal_frag,
    normal_vert,
    points_frag,
    points_vert,
    shadow_frag,
    shadow_vert,
    sprite_frag,
    sprite_vert
  };
  var UniformsLib = {
    common: {
      diffuse: {value: new Color(15658734)},
      opacity: {value: 1},
      map: {value: null},
      uvTransform: {value: new Matrix3()},
      uv2Transform: {value: new Matrix3()},
      alphaMap: {value: null}
    },
    specularmap: {
      specularMap: {value: null}
    },
    envmap: {
      envMap: {value: null},
      flipEnvMap: {value: -1},
      reflectivity: {value: 1},
      refractionRatio: {value: 0.98},
      maxMipLevel: {value: 0}
    },
    aomap: {
      aoMap: {value: null},
      aoMapIntensity: {value: 1}
    },
    lightmap: {
      lightMap: {value: null},
      lightMapIntensity: {value: 1}
    },
    emissivemap: {
      emissiveMap: {value: null}
    },
    bumpmap: {
      bumpMap: {value: null},
      bumpScale: {value: 1}
    },
    normalmap: {
      normalMap: {value: null},
      normalScale: {value: new Vector2(1, 1)}
    },
    displacementmap: {
      displacementMap: {value: null},
      displacementScale: {value: 1},
      displacementBias: {value: 0}
    },
    roughnessmap: {
      roughnessMap: {value: null}
    },
    metalnessmap: {
      metalnessMap: {value: null}
    },
    gradientmap: {
      gradientMap: {value: null}
    },
    fog: {
      fogDensity: {value: 25e-5},
      fogNear: {value: 1},
      fogFar: {value: 2e3},
      fogColor: {value: new Color(16777215)}
    },
    lights: {
      ambientLightColor: {value: []},
      lightProbe: {value: []},
      directionalLights: {value: [], properties: {
        direction: {},
        color: {}
      }},
      directionalLightShadows: {value: [], properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      }},
      directionalShadowMap: {value: []},
      directionalShadowMatrix: {value: []},
      spotLights: {value: [], properties: {
        color: {},
        position: {},
        direction: {},
        distance: {},
        coneCos: {},
        penumbraCos: {},
        decay: {}
      }},
      spotLightShadows: {value: [], properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      }},
      spotShadowMap: {value: []},
      spotShadowMatrix: {value: []},
      pointLights: {value: [], properties: {
        color: {},
        position: {},
        decay: {},
        distance: {}
      }},
      pointLightShadows: {value: [], properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {},
        shadowCameraNear: {},
        shadowCameraFar: {}
      }},
      pointShadowMap: {value: []},
      pointShadowMatrix: {value: []},
      hemisphereLights: {value: [], properties: {
        direction: {},
        skyColor: {},
        groundColor: {}
      }},
      rectAreaLights: {value: [], properties: {
        color: {},
        position: {},
        width: {},
        height: {}
      }},
      ltc_1: {value: null},
      ltc_2: {value: null}
    },
    points: {
      diffuse: {value: new Color(15658734)},
      opacity: {value: 1},
      size: {value: 1},
      scale: {value: 1},
      map: {value: null},
      alphaMap: {value: null},
      uvTransform: {value: new Matrix3()}
    },
    sprite: {
      diffuse: {value: new Color(15658734)},
      opacity: {value: 1},
      center: {value: new Vector2(0.5, 0.5)},
      rotation: {value: 0},
      map: {value: null},
      alphaMap: {value: null},
      uvTransform: {value: new Matrix3()}
    }
  };
  var ShaderLib = {
    basic: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.meshbasic_vert,
      fragmentShader: ShaderChunk.meshbasic_frag
    },
    lambert: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: {value: new Color(0)}
        }
      ]),
      vertexShader: ShaderChunk.meshlambert_vert,
      fragmentShader: ShaderChunk.meshlambert_frag
    },
    phong: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: {value: new Color(0)},
          specular: {value: new Color(1118481)},
          shininess: {value: 30}
        }
      ]),
      vertexShader: ShaderChunk.meshphong_vert,
      fragmentShader: ShaderChunk.meshphong_frag
    },
    standard: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.roughnessmap,
        UniformsLib.metalnessmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: {value: new Color(0)},
          roughness: {value: 1},
          metalness: {value: 0},
          envMapIntensity: {value: 1}
        }
      ]),
      vertexShader: ShaderChunk.meshphysical_vert,
      fragmentShader: ShaderChunk.meshphysical_frag
    },
    toon: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.gradientmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: {value: new Color(0)}
        }
      ]),
      vertexShader: ShaderChunk.meshtoon_vert,
      fragmentShader: ShaderChunk.meshtoon_frag
    },
    matcap: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        {
          matcap: {value: null}
        }
      ]),
      vertexShader: ShaderChunk.meshmatcap_vert,
      fragmentShader: ShaderChunk.meshmatcap_frag
    },
    points: {
      uniforms: mergeUniforms([
        UniformsLib.points,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.points_vert,
      fragmentShader: ShaderChunk.points_frag
    },
    dashed: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.fog,
        {
          scale: {value: 1},
          dashSize: {value: 1},
          totalSize: {value: 2}
        }
      ]),
      vertexShader: ShaderChunk.linedashed_vert,
      fragmentShader: ShaderChunk.linedashed_frag
    },
    depth: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.displacementmap
      ]),
      vertexShader: ShaderChunk.depth_vert,
      fragmentShader: ShaderChunk.depth_frag
    },
    normal: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        {
          opacity: {value: 1}
        }
      ]),
      vertexShader: ShaderChunk.normal_vert,
      fragmentShader: ShaderChunk.normal_frag
    },
    sprite: {
      uniforms: mergeUniforms([
        UniformsLib.sprite,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.sprite_vert,
      fragmentShader: ShaderChunk.sprite_frag
    },
    background: {
      uniforms: {
        uvTransform: {value: new Matrix3()},
        t2D: {value: null}
      },
      vertexShader: ShaderChunk.background_vert,
      fragmentShader: ShaderChunk.background_frag
    },
    cube: {
      uniforms: mergeUniforms([
        UniformsLib.envmap,
        {
          opacity: {value: 1}
        }
      ]),
      vertexShader: ShaderChunk.cube_vert,
      fragmentShader: ShaderChunk.cube_frag
    },
    equirect: {
      uniforms: {
        tEquirect: {value: null}
      },
      vertexShader: ShaderChunk.equirect_vert,
      fragmentShader: ShaderChunk.equirect_frag
    },
    distanceRGBA: {
      uniforms: mergeUniforms([
        UniformsLib.common,
        UniformsLib.displacementmap,
        {
          referencePosition: {value: new Vector3()},
          nearDistance: {value: 1},
          farDistance: {value: 1e3}
        }
      ]),
      vertexShader: ShaderChunk.distanceRGBA_vert,
      fragmentShader: ShaderChunk.distanceRGBA_frag
    },
    shadow: {
      uniforms: mergeUniforms([
        UniformsLib.lights,
        UniformsLib.fog,
        {
          color: {value: new Color(0)},
          opacity: {value: 1}
        }
      ]),
      vertexShader: ShaderChunk.shadow_vert,
      fragmentShader: ShaderChunk.shadow_frag
    }
  };
  ShaderLib.physical = {
    uniforms: mergeUniforms([
      ShaderLib.standard.uniforms,
      {
        clearcoat: {value: 0},
        clearcoatMap: {value: null},
        clearcoatRoughness: {value: 0},
        clearcoatRoughnessMap: {value: null},
        clearcoatNormalScale: {value: new Vector2(1, 1)},
        clearcoatNormalMap: {value: null},
        sheen: {value: new Color(0)},
        transmission: {value: 0},
        transmissionMap: {value: null}
      }
    ]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
  };
  function WebGLBackground(renderer3, cubemaps, state, objects, premultipliedAlpha) {
    const clearColor = new Color(0);
    let clearAlpha = 0;
    let planeMesh;
    let boxMesh;
    let currentBackground = null;
    let currentBackgroundVersion = 0;
    let currentTonemapping = null;
    function render(renderList, scene2, camera2, forceClear) {
      let background = scene2.isScene === true ? scene2.background : null;
      if (background && background.isTexture) {
        background = cubemaps.get(background);
      }
      const xr = renderer3.xr;
      const session = xr.getSession && xr.getSession();
      if (session && session.environmentBlendMode === "additive") {
        background = null;
      }
      if (background === null) {
        setClear(clearColor, clearAlpha);
      } else if (background && background.isColor) {
        setClear(background, 1);
        forceClear = true;
      }
      if (renderer3.autoClear || forceClear) {
        renderer3.clear(renderer3.autoClearColor, renderer3.autoClearDepth, renderer3.autoClearStencil);
      }
      if (background && (background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping)) {
        if (boxMesh === void 0) {
          boxMesh = new Mesh(new BoxBufferGeometry(1, 1, 1), new ShaderMaterial({
            name: "BackgroundCubeMaterial",
            uniforms: cloneUniforms(ShaderLib.cube.uniforms),
            vertexShader: ShaderLib.cube.vertexShader,
            fragmentShader: ShaderLib.cube.fragmentShader,
            side: BackSide,
            depthTest: false,
            depthWrite: false,
            fog: false
          }));
          boxMesh.geometry.deleteAttribute("normal");
          boxMesh.geometry.deleteAttribute("uv");
          boxMesh.onBeforeRender = function(renderer4, scene3, camera3) {
            this.matrixWorld.copyPosition(camera3.matrixWorld);
          };
          Object.defineProperty(boxMesh.material, "envMap", {
            get: function() {
              return this.uniforms.envMap.value;
            }
          });
          objects.update(boxMesh);
        }
        if (background.isWebGLCubeRenderTarget) {
          background = background.texture;
        }
        boxMesh.material.uniforms.envMap.value = background;
        boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;
        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer3.toneMapping) {
          boxMesh.material.needsUpdate = true;
          currentBackground = background;
          currentBackgroundVersion = background.version;
          currentTonemapping = renderer3.toneMapping;
        }
        renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
      } else if (background && background.isTexture) {
        if (planeMesh === void 0) {
          planeMesh = new Mesh(new PlaneBufferGeometry(2, 2), new ShaderMaterial({
            name: "BackgroundMaterial",
            uniforms: cloneUniforms(ShaderLib.background.uniforms),
            vertexShader: ShaderLib.background.vertexShader,
            fragmentShader: ShaderLib.background.fragmentShader,
            side: FrontSide,
            depthTest: false,
            depthWrite: false,
            fog: false
          }));
          planeMesh.geometry.deleteAttribute("normal");
          Object.defineProperty(planeMesh.material, "map", {
            get: function() {
              return this.uniforms.t2D.value;
            }
          });
          objects.update(planeMesh);
        }
        planeMesh.material.uniforms.t2D.value = background;
        if (background.matrixAutoUpdate === true) {
          background.updateMatrix();
        }
        planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer3.toneMapping) {
          planeMesh.material.needsUpdate = true;
          currentBackground = background;
          currentBackgroundVersion = background.version;
          currentTonemapping = renderer3.toneMapping;
        }
        renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
      }
    }
    function setClear(color, alpha) {
      state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);
    }
    return {
      getClearColor: function() {
        return clearColor;
      },
      setClearColor: function(color, alpha = 1) {
        clearColor.set(color);
        clearAlpha = alpha;
        setClear(clearColor, clearAlpha);
      },
      getClearAlpha: function() {
        return clearAlpha;
      },
      setClearAlpha: function(alpha) {
        clearAlpha = alpha;
        setClear(clearColor, clearAlpha);
      },
      render
    };
  }
  function WebGLBindingStates(gl, extensions, attributes, capabilities) {
    const maxVertexAttributes = gl.getParameter(34921);
    const extension = capabilities.isWebGL2 ? null : extensions.get("OES_vertex_array_object");
    const vaoAvailable = capabilities.isWebGL2 || extension !== null;
    const bindingStates = {};
    const defaultState = createBindingState(null);
    let currentState = defaultState;
    function setup(object, material, program, geometry, index) {
      let updateBuffers = false;
      if (vaoAvailable) {
        const state = getBindingState(geometry, program, material);
        if (currentState !== state) {
          currentState = state;
          bindVertexArrayObject(currentState.object);
        }
        updateBuffers = needsUpdate(geometry, index);
        if (updateBuffers)
          saveCache(geometry, index);
      } else {
        const wireframe = material.wireframe === true;
        if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
          currentState.geometry = geometry.id;
          currentState.program = program.id;
          currentState.wireframe = wireframe;
          updateBuffers = true;
        }
      }
      if (object.isInstancedMesh === true) {
        updateBuffers = true;
      }
      if (index !== null) {
        attributes.update(index, 34963);
      }
      if (updateBuffers) {
        setupVertexAttributes(object, material, program, geometry);
        if (index !== null) {
          gl.bindBuffer(34963, attributes.get(index).buffer);
        }
      }
    }
    function createVertexArrayObject() {
      if (capabilities.isWebGL2)
        return gl.createVertexArray();
      return extension.createVertexArrayOES();
    }
    function bindVertexArrayObject(vao) {
      if (capabilities.isWebGL2)
        return gl.bindVertexArray(vao);
      return extension.bindVertexArrayOES(vao);
    }
    function deleteVertexArrayObject(vao) {
      if (capabilities.isWebGL2)
        return gl.deleteVertexArray(vao);
      return extension.deleteVertexArrayOES(vao);
    }
    function getBindingState(geometry, program, material) {
      const wireframe = material.wireframe === true;
      let programMap = bindingStates[geometry.id];
      if (programMap === void 0) {
        programMap = {};
        bindingStates[geometry.id] = programMap;
      }
      let stateMap = programMap[program.id];
      if (stateMap === void 0) {
        stateMap = {};
        programMap[program.id] = stateMap;
      }
      let state = stateMap[wireframe];
      if (state === void 0) {
        state = createBindingState(createVertexArrayObject());
        stateMap[wireframe] = state;
      }
      return state;
    }
    function createBindingState(vao) {
      const newAttributes = [];
      const enabledAttributes = [];
      const attributeDivisors = [];
      for (let i = 0; i < maxVertexAttributes; i++) {
        newAttributes[i] = 0;
        enabledAttributes[i] = 0;
        attributeDivisors[i] = 0;
      }
      return {
        geometry: null,
        program: null,
        wireframe: false,
        newAttributes,
        enabledAttributes,
        attributeDivisors,
        object: vao,
        attributes: {},
        index: null
      };
    }
    function needsUpdate(geometry, index) {
      const cachedAttributes = currentState.attributes;
      const geometryAttributes = geometry.attributes;
      let attributesNum = 0;
      for (const key in geometryAttributes) {
        const cachedAttribute = cachedAttributes[key];
        const geometryAttribute = geometryAttributes[key];
        if (cachedAttribute === void 0)
          return true;
        if (cachedAttribute.attribute !== geometryAttribute)
          return true;
        if (cachedAttribute.data !== geometryAttribute.data)
          return true;
        attributesNum++;
      }
      if (currentState.attributesNum !== attributesNum)
        return true;
      if (currentState.index !== index)
        return true;
      return false;
    }
    function saveCache(geometry, index) {
      const cache = {};
      const attributes2 = geometry.attributes;
      let attributesNum = 0;
      for (const key in attributes2) {
        const attribute = attributes2[key];
        const data = {};
        data.attribute = attribute;
        if (attribute.data) {
          data.data = attribute.data;
        }
        cache[key] = data;
        attributesNum++;
      }
      currentState.attributes = cache;
      currentState.attributesNum = attributesNum;
      currentState.index = index;
    }
    function initAttributes() {
      const newAttributes = currentState.newAttributes;
      for (let i = 0, il = newAttributes.length; i < il; i++) {
        newAttributes[i] = 0;
      }
    }
    function enableAttribute(attribute) {
      enableAttributeAndDivisor(attribute, 0);
    }
    function enableAttributeAndDivisor(attribute, meshPerAttribute) {
      const newAttributes = currentState.newAttributes;
      const enabledAttributes = currentState.enabledAttributes;
      const attributeDivisors = currentState.attributeDivisors;
      newAttributes[attribute] = 1;
      if (enabledAttributes[attribute] === 0) {
        gl.enableVertexAttribArray(attribute);
        enabledAttributes[attribute] = 1;
      }
      if (attributeDivisors[attribute] !== meshPerAttribute) {
        const extension2 = capabilities.isWebGL2 ? gl : extensions.get("ANGLE_instanced_arrays");
        extension2[capabilities.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](attribute, meshPerAttribute);
        attributeDivisors[attribute] = meshPerAttribute;
      }
    }
    function disableUnusedAttributes() {
      const newAttributes = currentState.newAttributes;
      const enabledAttributes = currentState.enabledAttributes;
      for (let i = 0, il = enabledAttributes.length; i < il; i++) {
        if (enabledAttributes[i] !== newAttributes[i]) {
          gl.disableVertexAttribArray(i);
          enabledAttributes[i] = 0;
        }
      }
    }
    function vertexAttribPointer(index, size, type, normalized, stride, offset) {
      if (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) {
        gl.vertexAttribIPointer(index, size, type, stride, offset);
      } else {
        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
      }
    }
    function setupVertexAttributes(object, material, program, geometry) {
      if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
        if (extensions.get("ANGLE_instanced_arrays") === null)
          return;
      }
      initAttributes();
      const geometryAttributes = geometry.attributes;
      const programAttributes = program.getAttributes();
      const materialDefaultAttributeValues = material.defaultAttributeValues;
      for (const name in programAttributes) {
        const programAttribute = programAttributes[name];
        if (programAttribute >= 0) {
          const geometryAttribute = geometryAttributes[name];
          if (geometryAttribute !== void 0) {
            const normalized = geometryAttribute.normalized;
            const size = geometryAttribute.itemSize;
            const attribute = attributes.get(geometryAttribute);
            if (attribute === void 0)
              continue;
            const buffer = attribute.buffer;
            const type = attribute.type;
            const bytesPerElement = attribute.bytesPerElement;
            if (geometryAttribute.isInterleavedBufferAttribute) {
              const data = geometryAttribute.data;
              const stride = data.stride;
              const offset = geometryAttribute.offset;
              if (data && data.isInstancedInterleavedBuffer) {
                enableAttributeAndDivisor(programAttribute, data.meshPerAttribute);
                if (geometry._maxInstanceCount === void 0) {
                  geometry._maxInstanceCount = data.meshPerAttribute * data.count;
                }
              } else {
                enableAttribute(programAttribute);
              }
              gl.bindBuffer(34962, buffer);
              vertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);
            } else {
              if (geometryAttribute.isInstancedBufferAttribute) {
                enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);
                if (geometry._maxInstanceCount === void 0) {
                  geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
                }
              } else {
                enableAttribute(programAttribute);
              }
              gl.bindBuffer(34962, buffer);
              vertexAttribPointer(programAttribute, size, type, normalized, 0, 0);
            }
          } else if (name === "instanceMatrix") {
            const attribute = attributes.get(object.instanceMatrix);
            if (attribute === void 0)
              continue;
            const buffer = attribute.buffer;
            const type = attribute.type;
            enableAttributeAndDivisor(programAttribute + 0, 1);
            enableAttributeAndDivisor(programAttribute + 1, 1);
            enableAttributeAndDivisor(programAttribute + 2, 1);
            enableAttributeAndDivisor(programAttribute + 3, 1);
            gl.bindBuffer(34962, buffer);
            gl.vertexAttribPointer(programAttribute + 0, 4, type, false, 64, 0);
            gl.vertexAttribPointer(programAttribute + 1, 4, type, false, 64, 16);
            gl.vertexAttribPointer(programAttribute + 2, 4, type, false, 64, 32);
            gl.vertexAttribPointer(programAttribute + 3, 4, type, false, 64, 48);
          } else if (name === "instanceColor") {
            const attribute = attributes.get(object.instanceColor);
            if (attribute === void 0)
              continue;
            const buffer = attribute.buffer;
            const type = attribute.type;
            enableAttributeAndDivisor(programAttribute, 1);
            gl.bindBuffer(34962, buffer);
            gl.vertexAttribPointer(programAttribute, 3, type, false, 12, 0);
          } else if (materialDefaultAttributeValues !== void 0) {
            const value = materialDefaultAttributeValues[name];
            if (value !== void 0) {
              switch (value.length) {
                case 2:
                  gl.vertexAttrib2fv(programAttribute, value);
                  break;
                case 3:
                  gl.vertexAttrib3fv(programAttribute, value);
                  break;
                case 4:
                  gl.vertexAttrib4fv(programAttribute, value);
                  break;
                default:
                  gl.vertexAttrib1fv(programAttribute, value);
              }
            }
          }
        }
      }
      disableUnusedAttributes();
    }
    function dispose() {
      reset();
      for (const geometryId in bindingStates) {
        const programMap = bindingStates[geometryId];
        for (const programId in programMap) {
          const stateMap = programMap[programId];
          for (const wireframe in stateMap) {
            deleteVertexArrayObject(stateMap[wireframe].object);
            delete stateMap[wireframe];
          }
          delete programMap[programId];
        }
        delete bindingStates[geometryId];
      }
    }
    function releaseStatesOfGeometry(geometry) {
      if (bindingStates[geometry.id] === void 0)
        return;
      const programMap = bindingStates[geometry.id];
      for (const programId in programMap) {
        const stateMap = programMap[programId];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[programId];
      }
      delete bindingStates[geometry.id];
    }
    function releaseStatesOfProgram(program) {
      for (const geometryId in bindingStates) {
        const programMap = bindingStates[geometryId];
        if (programMap[program.id] === void 0)
          continue;
        const stateMap = programMap[program.id];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[program.id];
      }
    }
    function reset() {
      resetDefaultState();
      if (currentState === defaultState)
        return;
      currentState = defaultState;
      bindVertexArrayObject(currentState.object);
    }
    function resetDefaultState() {
      defaultState.geometry = null;
      defaultState.program = null;
      defaultState.wireframe = false;
    }
    return {
      setup,
      reset,
      resetDefaultState,
      dispose,
      releaseStatesOfGeometry,
      releaseStatesOfProgram,
      initAttributes,
      enableAttribute,
      disableUnusedAttributes
    };
  }
  function WebGLBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
      mode = value;
    }
    function render(start, count) {
      gl.drawArrays(mode, start, count);
      info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
      if (primcount === 0)
        return;
      let extension, methodName;
      if (isWebGL2) {
        extension = gl;
        methodName = "drawArraysInstanced";
      } else {
        extension = extensions.get("ANGLE_instanced_arrays");
        methodName = "drawArraysInstancedANGLE";
        if (extension === null) {
          console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
          return;
        }
      }
      extension[methodName](mode, start, count, primcount);
      info.update(count, mode, primcount);
    }
    this.setMode = setMode;
    this.render = render;
    this.renderInstances = renderInstances;
  }
  function WebGLCapabilities(gl, extensions, parameters) {
    let maxAnisotropy;
    function getMaxAnisotropy() {
      if (maxAnisotropy !== void 0)
        return maxAnisotropy;
      const extension = extensions.get("EXT_texture_filter_anisotropic");
      if (extension !== null) {
        maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
      } else {
        maxAnisotropy = 0;
      }
      return maxAnisotropy;
    }
    function getMaxPrecision(precision2) {
      if (precision2 === "highp") {
        if (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) {
          return "highp";
        }
        precision2 = "mediump";
      }
      if (precision2 === "mediump") {
        if (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) {
          return "mediump";
        }
      }
      return "lowp";
    }
    const isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== "undefined" && gl instanceof WebGL2ComputeRenderingContext;
    let precision = parameters.precision !== void 0 ? parameters.precision : "highp";
    const maxPrecision = getMaxPrecision(precision);
    if (maxPrecision !== precision) {
      console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
      precision = maxPrecision;
    }
    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
    const maxTextures = gl.getParameter(34930);
    const maxVertexTextures = gl.getParameter(35660);
    const maxTextureSize = gl.getParameter(3379);
    const maxCubemapSize = gl.getParameter(34076);
    const maxAttributes = gl.getParameter(34921);
    const maxVertexUniforms = gl.getParameter(36347);
    const maxVaryings = gl.getParameter(36348);
    const maxFragmentUniforms = gl.getParameter(36349);
    const vertexTextures = maxVertexTextures > 0;
    const floatFragmentTextures = isWebGL2 || !!extensions.get("OES_texture_float");
    const floatVertexTextures = vertexTextures && floatFragmentTextures;
    const maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;
    return {
      isWebGL2,
      getMaxAnisotropy,
      getMaxPrecision,
      precision,
      logarithmicDepthBuffer,
      maxTextures,
      maxVertexTextures,
      maxTextureSize,
      maxCubemapSize,
      maxAttributes,
      maxVertexUniforms,
      maxVaryings,
      maxFragmentUniforms,
      vertexTextures,
      floatFragmentTextures,
      floatVertexTextures,
      maxSamples
    };
  }
  function WebGLClipping(properties) {
    const scope = this;
    let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
    const plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = {value: null, needsUpdate: false};
    this.uniform = uniform;
    this.numPlanes = 0;
    this.numIntersection = 0;
    this.init = function(planes, enableLocalClipping, camera2) {
      const enabled = planes.length !== 0 || enableLocalClipping || numGlobalPlanes !== 0 || localClippingEnabled;
      localClippingEnabled = enableLocalClipping;
      globalState = projectPlanes(planes, camera2, 0);
      numGlobalPlanes = planes.length;
      return enabled;
    };
    this.beginShadows = function() {
      renderingShadows = true;
      projectPlanes(null);
    };
    this.endShadows = function() {
      renderingShadows = false;
      resetGlobalState();
    };
    this.setState = function(material, camera2, useCache) {
      const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
      const materialProperties = properties.get(material);
      if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
        if (renderingShadows) {
          projectPlanes(null);
        } else {
          resetGlobalState();
        }
      } else {
        const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
        let dstArray = materialProperties.clippingState || null;
        uniform.value = dstArray;
        dstArray = projectPlanes(planes, camera2, lGlobal, useCache);
        for (let i = 0; i !== lGlobal; ++i) {
          dstArray[i] = globalState[i];
        }
        materialProperties.clippingState = dstArray;
        this.numIntersection = clipIntersection ? this.numPlanes : 0;
        this.numPlanes += nGlobal;
      }
    };
    function resetGlobalState() {
      if (uniform.value !== globalState) {
        uniform.value = globalState;
        uniform.needsUpdate = numGlobalPlanes > 0;
      }
      scope.numPlanes = numGlobalPlanes;
      scope.numIntersection = 0;
    }
    function projectPlanes(planes, camera2, dstOffset, skipTransform) {
      const nPlanes = planes !== null ? planes.length : 0;
      let dstArray = null;
      if (nPlanes !== 0) {
        dstArray = uniform.value;
        if (skipTransform !== true || dstArray === null) {
          const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera2.matrixWorldInverse;
          viewNormalMatrix.getNormalMatrix(viewMatrix);
          if (dstArray === null || dstArray.length < flatSize) {
            dstArray = new Float32Array(flatSize);
          }
          for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
            plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
            plane.normal.toArray(dstArray, i4);
            dstArray[i4 + 3] = plane.constant;
          }
        }
        uniform.value = dstArray;
        uniform.needsUpdate = true;
      }
      scope.numPlanes = nPlanes;
      scope.numIntersection = 0;
      return dstArray;
    }
  }
  function WebGLCubeMaps(renderer3) {
    let cubemaps = new WeakMap();
    function mapTextureMapping(texture, mapping) {
      if (mapping === EquirectangularReflectionMapping) {
        texture.mapping = CubeReflectionMapping;
      } else if (mapping === EquirectangularRefractionMapping) {
        texture.mapping = CubeRefractionMapping;
      }
      return texture;
    }
    function get(texture) {
      if (texture && texture.isTexture) {
        const mapping = texture.mapping;
        if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
          if (cubemaps.has(texture)) {
            const cubemap = cubemaps.get(texture).texture;
            return mapTextureMapping(cubemap, texture.mapping);
          } else {
            const image = texture.image;
            if (image && image.height > 0) {
              const currentRenderList = renderer3.getRenderList();
              const currentRenderTarget = renderer3.getRenderTarget();
              const currentRenderState = renderer3.getRenderState();
              const renderTarget = new WebGLCubeRenderTarget(image.height / 2);
              renderTarget.fromEquirectangularTexture(renderer3, texture);
              cubemaps.set(texture, renderTarget);
              renderer3.setRenderTarget(currentRenderTarget);
              renderer3.setRenderList(currentRenderList);
              renderer3.setRenderState(currentRenderState);
              texture.addEventListener("dispose", onTextureDispose);
              return mapTextureMapping(renderTarget.texture, texture.mapping);
            } else {
              return null;
            }
          }
        }
      }
      return texture;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      const cubemap = cubemaps.get(texture);
      if (cubemap !== void 0) {
        cubemaps.delete(texture);
        cubemap.dispose();
      }
    }
    function dispose() {
      cubemaps = new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  function WebGLExtensions(gl) {
    const extensions = {};
    return {
      has: function(name) {
        if (extensions[name] !== void 0) {
          return extensions[name] !== null;
        }
        let extension;
        switch (name) {
          case "WEBGL_depth_texture":
            extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
            break;
          case "EXT_texture_filter_anisotropic":
            extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
            break;
          case "WEBGL_compressed_texture_s3tc":
            extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
            break;
          case "WEBGL_compressed_texture_pvrtc":
            extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
            break;
          default:
            extension = gl.getExtension(name);
        }
        extensions[name] = extension;
        return extension !== null;
      },
      get: function(name) {
        if (!this.has(name)) {
          console.warn("THREE.WebGLRenderer: " + name + " extension not supported.");
        }
        return extensions[name];
      }
    };
  }
  function WebGLGeometries(gl, attributes, info, bindingStates) {
    const geometries = new WeakMap();
    const wireframeAttributes = new WeakMap();
    function onGeometryDispose(event) {
      const geometry = event.target;
      const buffergeometry = geometries.get(geometry);
      if (buffergeometry.index !== null) {
        attributes.remove(buffergeometry.index);
      }
      for (const name in buffergeometry.attributes) {
        attributes.remove(buffergeometry.attributes[name]);
      }
      geometry.removeEventListener("dispose", onGeometryDispose);
      geometries.delete(geometry);
      const attribute = wireframeAttributes.get(buffergeometry);
      if (attribute) {
        attributes.remove(attribute);
        wireframeAttributes.delete(buffergeometry);
      }
      bindingStates.releaseStatesOfGeometry(buffergeometry);
      if (geometry.isInstancedBufferGeometry === true) {
        delete geometry._maxInstanceCount;
      }
      info.memory.geometries--;
    }
    function get(object, geometry) {
      let buffergeometry = geometries.get(geometry);
      if (buffergeometry)
        return buffergeometry;
      geometry.addEventListener("dispose", onGeometryDispose);
      if (geometry.isBufferGeometry) {
        buffergeometry = geometry;
      } else if (geometry.isGeometry) {
        if (geometry._bufferGeometry === void 0) {
          geometry._bufferGeometry = new BufferGeometry().setFromObject(object);
        }
        buffergeometry = geometry._bufferGeometry;
      }
      geometries.set(geometry, buffergeometry);
      info.memory.geometries++;
      return buffergeometry;
    }
    function update2(geometry) {
      const geometryAttributes = geometry.attributes;
      for (const name in geometryAttributes) {
        attributes.update(geometryAttributes[name], 34962);
      }
      const morphAttributes = geometry.morphAttributes;
      for (const name in morphAttributes) {
        const array = morphAttributes[name];
        for (let i = 0, l = array.length; i < l; i++) {
          attributes.update(array[i], 34962);
        }
      }
    }
    function updateWireframeAttribute(geometry) {
      const indices = [];
      const geometryIndex = geometry.index;
      const geometryPosition = geometry.attributes.position;
      let version = 0;
      if (geometryIndex !== null) {
        const array = geometryIndex.array;
        version = geometryIndex.version;
        for (let i = 0, l = array.length; i < l; i += 3) {
          const a = array[i + 0];
          const b = array[i + 1];
          const c = array[i + 2];
          indices.push(a, b, b, c, c, a);
        }
      } else {
        const array = geometryPosition.array;
        version = geometryPosition.version;
        for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {
          const a = i + 0;
          const b = i + 1;
          const c = i + 2;
          indices.push(a, b, b, c, c, a);
        }
      }
      const attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
      attribute.version = version;
      const previousAttribute = wireframeAttributes.get(geometry);
      if (previousAttribute)
        attributes.remove(previousAttribute);
      wireframeAttributes.set(geometry, attribute);
    }
    function getWireframeAttribute(geometry) {
      const currentAttribute = wireframeAttributes.get(geometry);
      if (currentAttribute) {
        const geometryIndex = geometry.index;
        if (geometryIndex !== null) {
          if (currentAttribute.version < geometryIndex.version) {
            updateWireframeAttribute(geometry);
          }
        }
      } else {
        updateWireframeAttribute(geometry);
      }
      return wireframeAttributes.get(geometry);
    }
    return {
      get,
      update: update2,
      getWireframeAttribute
    };
  }
  function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
      mode = value;
    }
    let type, bytesPerElement;
    function setIndex(value) {
      type = value.type;
      bytesPerElement = value.bytesPerElement;
    }
    function render(start, count) {
      gl.drawElements(mode, count, type, start * bytesPerElement);
      info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
      if (primcount === 0)
        return;
      let extension, methodName;
      if (isWebGL2) {
        extension = gl;
        methodName = "drawElementsInstanced";
      } else {
        extension = extensions.get("ANGLE_instanced_arrays");
        methodName = "drawElementsInstancedANGLE";
        if (extension === null) {
          console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
          return;
        }
      }
      extension[methodName](mode, count, type, start * bytesPerElement, primcount);
      info.update(count, mode, primcount);
    }
    this.setMode = setMode;
    this.setIndex = setIndex;
    this.render = render;
    this.renderInstances = renderInstances;
  }
  function WebGLInfo(gl) {
    const memory = {
      geometries: 0,
      textures: 0
    };
    const render = {
      frame: 0,
      calls: 0,
      triangles: 0,
      points: 0,
      lines: 0
    };
    function update2(count, mode, instanceCount) {
      render.calls++;
      switch (mode) {
        case 4:
          render.triangles += instanceCount * (count / 3);
          break;
        case 1:
          render.lines += instanceCount * (count / 2);
          break;
        case 3:
          render.lines += instanceCount * (count - 1);
          break;
        case 2:
          render.lines += instanceCount * count;
          break;
        case 0:
          render.points += instanceCount * count;
          break;
        default:
          console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
          break;
      }
    }
    function reset() {
      render.frame++;
      render.calls = 0;
      render.triangles = 0;
      render.points = 0;
      render.lines = 0;
    }
    return {
      memory,
      render,
      programs: null,
      autoReset: true,
      reset,
      update: update2
    };
  }
  function numericalSort(a, b) {
    return a[0] - b[0];
  }
  function absNumericalSort(a, b) {
    return Math.abs(b[1]) - Math.abs(a[1]);
  }
  function WebGLMorphtargets(gl) {
    const influencesList = {};
    const morphInfluences = new Float32Array(8);
    const workInfluences = [];
    for (let i = 0; i < 8; i++) {
      workInfluences[i] = [i, 0];
    }
    function update2(object, geometry, material, program) {
      const objectInfluences = object.morphTargetInfluences;
      const length = objectInfluences === void 0 ? 0 : objectInfluences.length;
      let influences = influencesList[geometry.id];
      if (influences === void 0) {
        influences = [];
        for (let i = 0; i < length; i++) {
          influences[i] = [i, 0];
        }
        influencesList[geometry.id] = influences;
      }
      for (let i = 0; i < length; i++) {
        const influence = influences[i];
        influence[0] = i;
        influence[1] = objectInfluences[i];
      }
      influences.sort(absNumericalSort);
      for (let i = 0; i < 8; i++) {
        if (i < length && influences[i][1]) {
          workInfluences[i][0] = influences[i][0];
          workInfluences[i][1] = influences[i][1];
        } else {
          workInfluences[i][0] = Number.MAX_SAFE_INTEGER;
          workInfluences[i][1] = 0;
        }
      }
      workInfluences.sort(numericalSort);
      const morphTargets = material.morphTargets && geometry.morphAttributes.position;
      const morphNormals = material.morphNormals && geometry.morphAttributes.normal;
      let morphInfluencesSum = 0;
      for (let i = 0; i < 8; i++) {
        const influence = workInfluences[i];
        const index = influence[0];
        const value = influence[1];
        if (index !== Number.MAX_SAFE_INTEGER && value) {
          if (morphTargets && geometry.getAttribute("morphTarget" + i) !== morphTargets[index]) {
            geometry.setAttribute("morphTarget" + i, morphTargets[index]);
          }
          if (morphNormals && geometry.getAttribute("morphNormal" + i) !== morphNormals[index]) {
            geometry.setAttribute("morphNormal" + i, morphNormals[index]);
          }
          morphInfluences[i] = value;
          morphInfluencesSum += value;
        } else {
          if (morphTargets && geometry.hasAttribute("morphTarget" + i) === true) {
            geometry.deleteAttribute("morphTarget" + i);
          }
          if (morphNormals && geometry.hasAttribute("morphNormal" + i) === true) {
            geometry.deleteAttribute("morphNormal" + i);
          }
          morphInfluences[i] = 0;
        }
      }
      const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
      program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
      program.getUniforms().setValue(gl, "morphTargetInfluences", morphInfluences);
    }
    return {
      update: update2
    };
  }
  function WebGLObjects(gl, geometries, attributes, info) {
    let updateMap = new WeakMap();
    function update2(object) {
      const frame = info.render.frame;
      const geometry = object.geometry;
      const buffergeometry = geometries.get(object, geometry);
      if (updateMap.get(buffergeometry) !== frame) {
        if (geometry.isGeometry) {
          buffergeometry.updateFromObject(object);
        }
        geometries.update(buffergeometry);
        updateMap.set(buffergeometry, frame);
      }
      if (object.isInstancedMesh) {
        attributes.update(object.instanceMatrix, 34962);
        if (object.instanceColor !== null) {
          attributes.update(object.instanceColor, 34962);
        }
      }
      return buffergeometry;
    }
    function dispose() {
      updateMap = new WeakMap();
    }
    return {
      update: update2,
      dispose
    };
  }
  function DataTexture2DArray(data = null, width = 1, height = 1, depth = 1) {
    Texture.call(this, null);
    this.image = {data, width, height, depth};
    this.magFilter = NearestFilter;
    this.minFilter = NearestFilter;
    this.wrapR = ClampToEdgeWrapping;
    this.generateMipmaps = false;
    this.flipY = false;
    this.needsUpdate = true;
  }
  DataTexture2DArray.prototype = Object.create(Texture.prototype);
  DataTexture2DArray.prototype.constructor = DataTexture2DArray;
  DataTexture2DArray.prototype.isDataTexture2DArray = true;
  function DataTexture3D(data = null, width = 1, height = 1, depth = 1) {
    Texture.call(this, null);
    this.image = {data, width, height, depth};
    this.magFilter = NearestFilter;
    this.minFilter = NearestFilter;
    this.wrapR = ClampToEdgeWrapping;
    this.generateMipmaps = false;
    this.flipY = false;
    this.needsUpdate = true;
  }
  DataTexture3D.prototype = Object.create(Texture.prototype);
  DataTexture3D.prototype.constructor = DataTexture3D;
  DataTexture3D.prototype.isDataTexture3D = true;
  var emptyTexture = new Texture();
  var emptyTexture2dArray = new DataTexture2DArray();
  var emptyTexture3d = new DataTexture3D();
  var emptyCubeTexture = new CubeTexture();
  var arrayCacheF32 = [];
  var arrayCacheI32 = [];
  var mat4array = new Float32Array(16);
  var mat3array = new Float32Array(9);
  var mat2array = new Float32Array(4);
  function flatten(array, nBlocks, blockSize) {
    const firstElem = array[0];
    if (firstElem <= 0 || firstElem > 0)
      return array;
    const n = nBlocks * blockSize;
    let r = arrayCacheF32[n];
    if (r === void 0) {
      r = new Float32Array(n);
      arrayCacheF32[n] = r;
    }
    if (nBlocks !== 0) {
      firstElem.toArray(r, 0);
      for (let i = 1, offset = 0; i !== nBlocks; ++i) {
        offset += blockSize;
        array[i].toArray(r, offset);
      }
    }
    return r;
  }
  function arraysEqual(a, b) {
    if (a.length !== b.length)
      return false;
    for (let i = 0, l = a.length; i < l; i++) {
      if (a[i] !== b[i])
        return false;
    }
    return true;
  }
  function copyArray(a, b) {
    for (let i = 0, l = b.length; i < l; i++) {
      a[i] = b[i];
    }
  }
  function allocTexUnits(textures, n) {
    let r = arrayCacheI32[n];
    if (r === void 0) {
      r = new Int32Array(n);
      arrayCacheI32[n] = r;
    }
    for (let i = 0; i !== n; ++i) {
      r[i] = textures.allocateTextureUnit();
    }
    return r;
  }
  function setValueV1f(gl, v) {
    const cache = this.cache;
    if (cache[0] === v)
      return;
    gl.uniform1f(this.addr, v);
    cache[0] = v;
  }
  function setValueV2f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y) {
        gl.uniform2f(this.addr, v.x, v.y);
        cache[0] = v.x;
        cache[1] = v.y;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform2fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV3f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
        gl.uniform3f(this.addr, v.x, v.y, v.z);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
      }
    } else if (v.r !== void 0) {
      if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
        gl.uniform3f(this.addr, v.r, v.g, v.b);
        cache[0] = v.r;
        cache[1] = v.g;
        cache[2] = v.b;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform3fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV4f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
        gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
        cache[3] = v.w;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform4fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueM2(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v))
        return;
      gl.uniformMatrix2fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat2array.set(elements);
      gl.uniformMatrix2fv(this.addr, false, mat2array);
      copyArray(cache, elements);
    }
  }
  function setValueM3(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v))
        return;
      gl.uniformMatrix3fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat3array.set(elements);
      gl.uniformMatrix3fv(this.addr, false, mat3array);
      copyArray(cache, elements);
    }
  }
  function setValueM4(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v))
        return;
      gl.uniformMatrix4fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat4array.set(elements);
      gl.uniformMatrix4fv(this.addr, false, mat4array);
      copyArray(cache, elements);
    }
  }
  function setValueT1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.safeSetTexture2D(v || emptyTexture, unit);
  }
  function setValueT2DArray1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTexture2DArray(v || emptyTexture2dArray, unit);
  }
  function setValueT3D1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTexture3D(v || emptyTexture3d, unit);
  }
  function setValueT6(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.safeSetTextureCube(v || emptyCubeTexture, unit);
  }
  function setValueV1i(gl, v) {
    const cache = this.cache;
    if (cache[0] === v)
      return;
    gl.uniform1i(this.addr, v);
    cache[0] = v;
  }
  function setValueV2i(gl, v) {
    const cache = this.cache;
    if (arraysEqual(cache, v))
      return;
    gl.uniform2iv(this.addr, v);
    copyArray(cache, v);
  }
  function setValueV3i(gl, v) {
    const cache = this.cache;
    if (arraysEqual(cache, v))
      return;
    gl.uniform3iv(this.addr, v);
    copyArray(cache, v);
  }
  function setValueV4i(gl, v) {
    const cache = this.cache;
    if (arraysEqual(cache, v))
      return;
    gl.uniform4iv(this.addr, v);
    copyArray(cache, v);
  }
  function setValueV1ui(gl, v) {
    const cache = this.cache;
    if (cache[0] === v)
      return;
    gl.uniform1ui(this.addr, v);
    cache[0] = v;
  }
  function getSingularSetter(type) {
    switch (type) {
      case 5126:
        return setValueV1f;
      case 35664:
        return setValueV2f;
      case 35665:
        return setValueV3f;
      case 35666:
        return setValueV4f;
      case 35674:
        return setValueM2;
      case 35675:
        return setValueM3;
      case 35676:
        return setValueM4;
      case 5124:
      case 35670:
        return setValueV1i;
      case 35667:
      case 35671:
        return setValueV2i;
      case 35668:
      case 35672:
        return setValueV3i;
      case 35669:
      case 35673:
        return setValueV4i;
      case 5125:
        return setValueV1ui;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return setValueT1;
      case 35679:
      case 36299:
      case 36307:
        return setValueT3D1;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return setValueT6;
      case 36289:
      case 36303:
      case 36311:
      case 36292:
        return setValueT2DArray1;
    }
  }
  function setValueV1fArray(gl, v) {
    gl.uniform1fv(this.addr, v);
  }
  function setValueV1iArray(gl, v) {
    gl.uniform1iv(this.addr, v);
  }
  function setValueV2iArray(gl, v) {
    gl.uniform2iv(this.addr, v);
  }
  function setValueV3iArray(gl, v) {
    gl.uniform3iv(this.addr, v);
  }
  function setValueV4iArray(gl, v) {
    gl.uniform4iv(this.addr, v);
  }
  function setValueV2fArray(gl, v) {
    const data = flatten(v, this.size, 2);
    gl.uniform2fv(this.addr, data);
  }
  function setValueV3fArray(gl, v) {
    const data = flatten(v, this.size, 3);
    gl.uniform3fv(this.addr, data);
  }
  function setValueV4fArray(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniform4fv(this.addr, data);
  }
  function setValueM2Array(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniformMatrix2fv(this.addr, false, data);
  }
  function setValueM3Array(gl, v) {
    const data = flatten(v, this.size, 9);
    gl.uniformMatrix3fv(this.addr, false, data);
  }
  function setValueM4Array(gl, v) {
    const data = flatten(v, this.size, 16);
    gl.uniformMatrix4fv(this.addr, false, data);
  }
  function setValueT1Array(gl, v, textures) {
    const n = v.length;
    const units = allocTexUnits(textures, n);
    gl.uniform1iv(this.addr, units);
    for (let i = 0; i !== n; ++i) {
      textures.safeSetTexture2D(v[i] || emptyTexture, units[i]);
    }
  }
  function setValueT6Array(gl, v, textures) {
    const n = v.length;
    const units = allocTexUnits(textures, n);
    gl.uniform1iv(this.addr, units);
    for (let i = 0; i !== n; ++i) {
      textures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);
    }
  }
  function getPureArraySetter(type) {
    switch (type) {
      case 5126:
        return setValueV1fArray;
      case 35664:
        return setValueV2fArray;
      case 35665:
        return setValueV3fArray;
      case 35666:
        return setValueV4fArray;
      case 35674:
        return setValueM2Array;
      case 35675:
        return setValueM3Array;
      case 35676:
        return setValueM4Array;
      case 5124:
      case 35670:
        return setValueV1iArray;
      case 35667:
      case 35671:
        return setValueV2iArray;
      case 35668:
      case 35672:
        return setValueV3iArray;
      case 35669:
      case 35673:
        return setValueV4iArray;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return setValueT1Array;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return setValueT6Array;
    }
  }
  function SingleUniform(id, activeInfo, addr) {
    this.id = id;
    this.addr = addr;
    this.cache = [];
    this.setValue = getSingularSetter(activeInfo.type);
  }
  function PureArrayUniform(id, activeInfo, addr) {
    this.id = id;
    this.addr = addr;
    this.cache = [];
    this.size = activeInfo.size;
    this.setValue = getPureArraySetter(activeInfo.type);
  }
  PureArrayUniform.prototype.updateCache = function(data) {
    const cache = this.cache;
    if (data instanceof Float32Array && cache.length !== data.length) {
      this.cache = new Float32Array(data.length);
    }
    copyArray(cache, data);
  };
  function StructuredUniform(id) {
    this.id = id;
    this.seq = [];
    this.map = {};
  }
  StructuredUniform.prototype.setValue = function(gl, value, textures) {
    const seq = this.seq;
    for (let i = 0, n = seq.length; i !== n; ++i) {
      const u = seq[i];
      u.setValue(gl, value[u.id], textures);
    }
  };
  var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;
  function addUniform(container, uniformObject) {
    container.seq.push(uniformObject);
    container.map[uniformObject.id] = uniformObject;
  }
  function parseUniform(activeInfo, addr, container) {
    const path = activeInfo.name, pathLength = path.length;
    RePathPart.lastIndex = 0;
    while (true) {
      const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
      let id = match[1];
      const idIsIndex = match[2] === "]", subscript = match[3];
      if (idIsIndex)
        id = id | 0;
      if (subscript === void 0 || subscript === "[" && matchEnd + 2 === pathLength) {
        addUniform(container, subscript === void 0 ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
        break;
      } else {
        const map = container.map;
        let next = map[id];
        if (next === void 0) {
          next = new StructuredUniform(id);
          addUniform(container, next);
        }
        container = next;
      }
    }
  }
  function WebGLUniforms(gl, program) {
    this.seq = [];
    this.map = {};
    const n = gl.getProgramParameter(program, 35718);
    for (let i = 0; i < n; ++i) {
      const info = gl.getActiveUniform(program, i), addr = gl.getUniformLocation(program, info.name);
      parseUniform(info, addr, this);
    }
  }
  WebGLUniforms.prototype.setValue = function(gl, name, value, textures) {
    const u = this.map[name];
    if (u !== void 0)
      u.setValue(gl, value, textures);
  };
  WebGLUniforms.prototype.setOptional = function(gl, object, name) {
    const v = object[name];
    if (v !== void 0)
      this.setValue(gl, name, v);
  };
  WebGLUniforms.upload = function(gl, seq, values, textures) {
    for (let i = 0, n = seq.length; i !== n; ++i) {
      const u = seq[i], v = values[u.id];
      if (v.needsUpdate !== false) {
        u.setValue(gl, v.value, textures);
      }
    }
  };
  WebGLUniforms.seqWithValue = function(seq, values) {
    const r = [];
    for (let i = 0, n = seq.length; i !== n; ++i) {
      const u = seq[i];
      if (u.id in values)
        r.push(u);
    }
    return r;
  };
  function WebGLShader(gl, type, string) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, string);
    gl.compileShader(shader);
    return shader;
  }
  var programIdCount = 0;
  function addLineNumbers(string) {
    const lines = string.split("\n");
    for (let i = 0; i < lines.length; i++) {
      lines[i] = i + 1 + ": " + lines[i];
    }
    return lines.join("\n");
  }
  function getEncodingComponents(encoding) {
    switch (encoding) {
      case LinearEncoding:
        return ["Linear", "( value )"];
      case sRGBEncoding:
        return ["sRGB", "( value )"];
      case RGBEEncoding:
        return ["RGBE", "( value )"];
      case RGBM7Encoding:
        return ["RGBM", "( value, 7.0 )"];
      case RGBM16Encoding:
        return ["RGBM", "( value, 16.0 )"];
      case RGBDEncoding:
        return ["RGBD", "( value, 256.0 )"];
      case GammaEncoding:
        return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
      case LogLuvEncoding:
        return ["LogLuv", "( value )"];
      default:
        console.warn("THREE.WebGLProgram: Unsupported encoding:", encoding);
        return ["Linear", "( value )"];
    }
  }
  function getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, 35713);
    const log = gl.getShaderInfoLog(shader).trim();
    if (status && log === "")
      return "";
    const source = gl.getShaderSource(shader);
    return "THREE.WebGLShader: gl.getShaderInfoLog() " + type + "\n" + log + addLineNumbers(source);
  }
  function getTexelDecodingFunction(functionName, encoding) {
    const components = getEncodingComponents(encoding);
    return "vec4 " + functionName + "( vec4 value ) { return " + components[0] + "ToLinear" + components[1] + "; }";
  }
  function getTexelEncodingFunction(functionName, encoding) {
    const components = getEncodingComponents(encoding);
    return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[0] + components[1] + "; }";
  }
  function getToneMappingFunction(functionName, toneMapping) {
    let toneMappingName;
    switch (toneMapping) {
      case LinearToneMapping:
        toneMappingName = "Linear";
        break;
      case ReinhardToneMapping:
        toneMappingName = "Reinhard";
        break;
      case CineonToneMapping:
        toneMappingName = "OptimizedCineon";
        break;
      case ACESFilmicToneMapping:
        toneMappingName = "ACESFilmic";
        break;
      case CustomToneMapping:
        toneMappingName = "Custom";
        break;
      default:
        console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
        toneMappingName = "Linear";
    }
    return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
  }
  function generateExtensions(parameters) {
    const chunks = [
      parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
      (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
      parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
      (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
    ];
    return chunks.filter(filterEmptyLine).join("\n");
  }
  function generateDefines(defines) {
    const chunks = [];
    for (const name in defines) {
      const value = defines[name];
      if (value === false)
        continue;
      chunks.push("#define " + name + " " + value);
    }
    return chunks.join("\n");
  }
  function fetchAttributeLocations(gl, program) {
    const attributes = {};
    const n = gl.getProgramParameter(program, 35721);
    for (let i = 0; i < n; i++) {
      const info = gl.getActiveAttrib(program, i);
      const name = info.name;
      attributes[name] = gl.getAttribLocation(program, name);
    }
    return attributes;
  }
  function filterEmptyLine(string) {
    return string !== "";
  }
  function replaceLightNums(string, parameters) {
    return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
  }
  function replaceClippingPlaneNums(string, parameters) {
    return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
  }
  var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
  function resolveIncludes(string) {
    return string.replace(includePattern, includeReplacer);
  }
  function includeReplacer(match, include) {
    const string = ShaderChunk[include];
    if (string === void 0) {
      throw new Error("Can not resolve #include <" + include + ">");
    }
    return resolveIncludes(string);
  }
  var deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
  var unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
  function unrollLoops(string) {
    return string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);
  }
  function deprecatedLoopReplacer(match, start, end, snippet) {
    console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.");
    return loopReplacer(match, start, end, snippet);
  }
  function loopReplacer(match, start, end, snippet) {
    let string = "";
    for (let i = parseInt(start); i < parseInt(end); i++) {
      string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i + " ]").replace(/UNROLLED_LOOP_INDEX/g, i);
    }
    return string;
  }
  function generatePrecision(parameters) {
    let precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";
    if (parameters.precision === "highp") {
      precisionstring += "\n#define HIGH_PRECISION";
    } else if (parameters.precision === "mediump") {
      precisionstring += "\n#define MEDIUM_PRECISION";
    } else if (parameters.precision === "lowp") {
      precisionstring += "\n#define LOW_PRECISION";
    }
    return precisionstring;
  }
  function generateShadowMapTypeDefine(parameters) {
    let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
    if (parameters.shadowMapType === PCFShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
    } else if (parameters.shadowMapType === PCFSoftShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
    } else if (parameters.shadowMapType === VSMShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
    }
    return shadowMapTypeDefine;
  }
  function generateEnvMapTypeDefine(parameters) {
    let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
    if (parameters.envMap) {
      switch (parameters.envMapMode) {
        case CubeReflectionMapping:
        case CubeRefractionMapping:
          envMapTypeDefine = "ENVMAP_TYPE_CUBE";
          break;
        case CubeUVReflectionMapping:
        case CubeUVRefractionMapping:
          envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
          break;
      }
    }
    return envMapTypeDefine;
  }
  function generateEnvMapModeDefine(parameters) {
    let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
    if (parameters.envMap) {
      switch (parameters.envMapMode) {
        case CubeRefractionMapping:
        case CubeUVRefractionMapping:
          envMapModeDefine = "ENVMAP_MODE_REFRACTION";
          break;
      }
    }
    return envMapModeDefine;
  }
  function generateEnvMapBlendingDefine(parameters) {
    let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
    if (parameters.envMap) {
      switch (parameters.combine) {
        case MultiplyOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
          break;
        case MixOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
          break;
        case AddOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
          break;
      }
    }
    return envMapBlendingDefine;
  }
  function WebGLProgram(renderer3, cacheKey, parameters, bindingStates) {
    const gl = renderer3.getContext();
    const defines = parameters.defines;
    let vertexShader = parameters.vertexShader;
    let fragmentShader = parameters.fragmentShader;
    const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
    const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
    const envMapModeDefine = generateEnvMapModeDefine(parameters);
    const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
    const gammaFactorDefine = renderer3.gammaFactor > 0 ? renderer3.gammaFactor : 1;
    const customExtensions = parameters.isWebGL2 ? "" : generateExtensions(parameters);
    const customDefines = generateDefines(defines);
    const program = gl.createProgram();
    let prefixVertex, prefixFragment;
    let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
    if (parameters.isRawShaderMaterial) {
      prefixVertex = [
        customDefines
      ].filter(filterEmptyLine).join("\n");
      if (prefixVertex.length > 0) {
        prefixVertex += "\n";
      }
      prefixFragment = [
        customExtensions,
        customDefines
      ].filter(filterEmptyLine).join("\n");
      if (prefixFragment.length > 0) {
        prefixFragment += "\n";
      }
    } else {
      prefixVertex = [
        generatePrecision(parameters),
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines,
        parameters.instancing ? "#define USE_INSTANCING" : "",
        parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
        parameters.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",
        "#define GAMMA_FACTOR " + gammaFactorDefine,
        "#define MAX_BONES " + parameters.maxBones,
        parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
        parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
        parameters.map ? "#define USE_MAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.envMap ? "#define " + envMapModeDefine : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.aoMap ? "#define USE_AOMAP" : "",
        parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.normalMap && parameters.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
        parameters.normalMap && parameters.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
        parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        parameters.displacementMap && parameters.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
        parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
        parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        parameters.vertexTangents ? "#define USE_TANGENT" : "",
        parameters.vertexColors ? "#define USE_COLOR" : "",
        parameters.vertexUvs ? "#define USE_UV" : "",
        parameters.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
        parameters.flatShading ? "#define FLAT_SHADED" : "",
        parameters.skinning ? "#define USE_SKINNING" : "",
        parameters.useVertexTexture ? "#define BONE_TEXTURE" : "",
        parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
        parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",
        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        "uniform mat4 modelMatrix;",
        "uniform mat4 modelViewMatrix;",
        "uniform mat4 projectionMatrix;",
        "uniform mat4 viewMatrix;",
        "uniform mat3 normalMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        "#ifdef USE_INSTANCING",
        "	attribute mat4 instanceMatrix;",
        "#endif",
        "#ifdef USE_INSTANCING_COLOR",
        "	attribute vec3 instanceColor;",
        "#endif",
        "attribute vec3 position;",
        "attribute vec3 normal;",
        "attribute vec2 uv;",
        "#ifdef USE_TANGENT",
        "	attribute vec4 tangent;",
        "#endif",
        "#ifdef USE_COLOR",
        "	attribute vec3 color;",
        "#endif",
        "#ifdef USE_MORPHTARGETS",
        "	attribute vec3 morphTarget0;",
        "	attribute vec3 morphTarget1;",
        "	attribute vec3 morphTarget2;",
        "	attribute vec3 morphTarget3;",
        "	#ifdef USE_MORPHNORMALS",
        "		attribute vec3 morphNormal0;",
        "		attribute vec3 morphNormal1;",
        "		attribute vec3 morphNormal2;",
        "		attribute vec3 morphNormal3;",
        "	#else",
        "		attribute vec3 morphTarget4;",
        "		attribute vec3 morphTarget5;",
        "		attribute vec3 morphTarget6;",
        "		attribute vec3 morphTarget7;",
        "	#endif",
        "#endif",
        "#ifdef USE_SKINNING",
        "	attribute vec4 skinIndex;",
        "	attribute vec4 skinWeight;",
        "#endif",
        "\n"
      ].filter(filterEmptyLine).join("\n");
      prefixFragment = [
        customExtensions,
        generatePrecision(parameters),
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines,
        parameters.alphaTest ? "#define ALPHATEST " + parameters.alphaTest + (parameters.alphaTest % 1 ? "" : ".0") : "",
        "#define GAMMA_FACTOR " + gammaFactorDefine,
        parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
        parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
        parameters.map ? "#define USE_MAP" : "",
        parameters.matcap ? "#define USE_MATCAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.envMap ? "#define " + envMapTypeDefine : "",
        parameters.envMap ? "#define " + envMapModeDefine : "",
        parameters.envMap ? "#define " + envMapBlendingDefine : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.aoMap ? "#define USE_AOMAP" : "",
        parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.normalMap && parameters.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
        parameters.normalMap && parameters.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
        parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
        parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
        parameters.sheen ? "#define USE_SHEEN" : "",
        parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        parameters.vertexTangents ? "#define USE_TANGENT" : "",
        parameters.vertexColors || parameters.instancingColor ? "#define USE_COLOR" : "",
        parameters.vertexUvs ? "#define USE_UV" : "",
        parameters.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
        parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
        parameters.flatShading ? "#define FLAT_SHADED" : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",
        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
        parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "",
        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "",
        "uniform mat4 viewMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
        parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
        parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
        parameters.dithering ? "#define DITHERING" : "",
        ShaderChunk["encodings_pars_fragment"],
        parameters.map ? getTexelDecodingFunction("mapTexelToLinear", parameters.mapEncoding) : "",
        parameters.matcap ? getTexelDecodingFunction("matcapTexelToLinear", parameters.matcapEncoding) : "",
        parameters.envMap ? getTexelDecodingFunction("envMapTexelToLinear", parameters.envMapEncoding) : "",
        parameters.emissiveMap ? getTexelDecodingFunction("emissiveMapTexelToLinear", parameters.emissiveMapEncoding) : "",
        parameters.lightMap ? getTexelDecodingFunction("lightMapTexelToLinear", parameters.lightMapEncoding) : "",
        getTexelEncodingFunction("linearToOutputTexel", parameters.outputEncoding),
        parameters.depthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
        "\n"
      ].filter(filterEmptyLine).join("\n");
    }
    vertexShader = resolveIncludes(vertexShader);
    vertexShader = replaceLightNums(vertexShader, parameters);
    vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
    fragmentShader = resolveIncludes(fragmentShader);
    fragmentShader = replaceLightNums(fragmentShader, parameters);
    fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
    vertexShader = unrollLoops(vertexShader);
    fragmentShader = unrollLoops(fragmentShader);
    if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
      versionString = "#version 300 es\n";
      prefixVertex = [
        "#define attribute in",
        "#define varying out",
        "#define texture2D texture"
      ].join("\n") + "\n" + prefixVertex;
      prefixFragment = [
        "#define varying in",
        parameters.glslVersion === GLSL3 ? "" : "out highp vec4 pc_fragColor;",
        parameters.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
        "#define gl_FragDepthEXT gl_FragDepth",
        "#define texture2D texture",
        "#define textureCube texture",
        "#define texture2DProj textureProj",
        "#define texture2DLodEXT textureLod",
        "#define texture2DProjLodEXT textureProjLod",
        "#define textureCubeLodEXT textureLod",
        "#define texture2DGradEXT textureGrad",
        "#define texture2DProjGradEXT textureProjGrad",
        "#define textureCubeGradEXT textureGrad"
      ].join("\n") + "\n" + prefixFragment;
    }
    const vertexGlsl = versionString + prefixVertex + vertexShader;
    const fragmentGlsl = versionString + prefixFragment + fragmentShader;
    const glVertexShader = WebGLShader(gl, 35633, vertexGlsl);
    const glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);
    gl.attachShader(program, glVertexShader);
    gl.attachShader(program, glFragmentShader);
    if (parameters.index0AttributeName !== void 0) {
      gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
    } else if (parameters.morphTargets === true) {
      gl.bindAttribLocation(program, 0, "position");
    }
    gl.linkProgram(program);
    if (renderer3.debug.checkShaderErrors) {
      const programLog = gl.getProgramInfoLog(program).trim();
      const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
      const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
      let runnable = true;
      let haveDiagnostics = true;
      if (gl.getProgramParameter(program, 35714) === false) {
        runnable = false;
        const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
        const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
        console.error("THREE.WebGLProgram: shader error: ", gl.getError(), "35715", gl.getProgramParameter(program, 35715), "gl.getProgramInfoLog", programLog, vertexErrors, fragmentErrors);
      } else if (programLog !== "") {
        console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", programLog);
      } else if (vertexLog === "" || fragmentLog === "") {
        haveDiagnostics = false;
      }
      if (haveDiagnostics) {
        this.diagnostics = {
          runnable,
          programLog,
          vertexShader: {
            log: vertexLog,
            prefix: prefixVertex
          },
          fragmentShader: {
            log: fragmentLog,
            prefix: prefixFragment
          }
        };
      }
    }
    gl.deleteShader(glVertexShader);
    gl.deleteShader(glFragmentShader);
    let cachedUniforms;
    this.getUniforms = function() {
      if (cachedUniforms === void 0) {
        cachedUniforms = new WebGLUniforms(gl, program);
      }
      return cachedUniforms;
    };
    let cachedAttributes;
    this.getAttributes = function() {
      if (cachedAttributes === void 0) {
        cachedAttributes = fetchAttributeLocations(gl, program);
      }
      return cachedAttributes;
    };
    this.destroy = function() {
      bindingStates.releaseStatesOfProgram(this);
      gl.deleteProgram(program);
      this.program = void 0;
    };
    this.name = parameters.shaderName;
    this.id = programIdCount++;
    this.cacheKey = cacheKey;
    this.usedTimes = 1;
    this.program = program;
    this.vertexShader = glVertexShader;
    this.fragmentShader = glFragmentShader;
    return this;
  }
  function WebGLPrograms(renderer3, cubemaps, extensions, capabilities, bindingStates, clipping) {
    const programs = [];
    const isWebGL2 = capabilities.isWebGL2;
    const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    const floatVertexTextures = capabilities.floatVertexTextures;
    const maxVertexUniforms = capabilities.maxVertexUniforms;
    const vertexTextures = capabilities.vertexTextures;
    let precision = capabilities.precision;
    const shaderIDs = {
      MeshDepthMaterial: "depth",
      MeshDistanceMaterial: "distanceRGBA",
      MeshNormalMaterial: "normal",
      MeshBasicMaterial: "basic",
      MeshLambertMaterial: "lambert",
      MeshPhongMaterial: "phong",
      MeshToonMaterial: "toon",
      MeshStandardMaterial: "physical",
      MeshPhysicalMaterial: "physical",
      MeshMatcapMaterial: "matcap",
      LineBasicMaterial: "basic",
      LineDashedMaterial: "dashed",
      PointsMaterial: "points",
      ShadowMaterial: "shadow",
      SpriteMaterial: "sprite"
    };
    const parameterNames = [
      "precision",
      "isWebGL2",
      "supportsVertexTextures",
      "outputEncoding",
      "instancing",
      "instancingColor",
      "map",
      "mapEncoding",
      "matcap",
      "matcapEncoding",
      "envMap",
      "envMapMode",
      "envMapEncoding",
      "envMapCubeUV",
      "lightMap",
      "lightMapEncoding",
      "aoMap",
      "emissiveMap",
      "emissiveMapEncoding",
      "bumpMap",
      "normalMap",
      "objectSpaceNormalMap",
      "tangentSpaceNormalMap",
      "clearcoatMap",
      "clearcoatRoughnessMap",
      "clearcoatNormalMap",
      "displacementMap",
      "specularMap",
      "roughnessMap",
      "metalnessMap",
      "gradientMap",
      "alphaMap",
      "combine",
      "vertexColors",
      "vertexTangents",
      "vertexUvs",
      "uvsVertexOnly",
      "fog",
      "useFog",
      "fogExp2",
      "flatShading",
      "sizeAttenuation",
      "logarithmicDepthBuffer",
      "skinning",
      "maxBones",
      "useVertexTexture",
      "morphTargets",
      "morphNormals",
      "maxMorphTargets",
      "maxMorphNormals",
      "premultipliedAlpha",
      "numDirLights",
      "numPointLights",
      "numSpotLights",
      "numHemiLights",
      "numRectAreaLights",
      "numDirLightShadows",
      "numPointLightShadows",
      "numSpotLightShadows",
      "shadowMapEnabled",
      "shadowMapType",
      "toneMapping",
      "physicallyCorrectLights",
      "alphaTest",
      "doubleSided",
      "flipSided",
      "numClippingPlanes",
      "numClipIntersection",
      "depthPacking",
      "dithering",
      "sheen",
      "transmissionMap"
    ];
    function getMaxBones(object) {
      const skeleton = object.skeleton;
      const bones = skeleton.bones;
      if (floatVertexTextures) {
        return 1024;
      } else {
        const nVertexUniforms = maxVertexUniforms;
        const nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);
        const maxBones = Math.min(nVertexMatrices, bones.length);
        if (maxBones < bones.length) {
          console.warn("THREE.WebGLRenderer: Skeleton has " + bones.length + " bones. This GPU supports " + maxBones + ".");
          return 0;
        }
        return maxBones;
      }
    }
    function getTextureEncodingFromMap(map) {
      let encoding;
      if (!map) {
        encoding = LinearEncoding;
      } else if (map.isTexture) {
        encoding = map.encoding;
      } else if (map.isWebGLRenderTarget) {
        console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.");
        encoding = map.texture.encoding;
      }
      return encoding;
    }
    function getParameters(material, lights, shadows, scene2, object) {
      const fog = scene2.fog;
      const environment = material.isMeshStandardMaterial ? scene2.environment : null;
      const envMap = cubemaps.get(material.envMap || environment);
      const shaderID = shaderIDs[material.type];
      const maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;
      if (material.precision !== null) {
        precision = capabilities.getMaxPrecision(material.precision);
        if (precision !== material.precision) {
          console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
        }
      }
      let vertexShader, fragmentShader;
      if (shaderID) {
        const shader = ShaderLib[shaderID];
        vertexShader = shader.vertexShader;
        fragmentShader = shader.fragmentShader;
      } else {
        vertexShader = material.vertexShader;
        fragmentShader = material.fragmentShader;
      }
      const currentRenderTarget = renderer3.getRenderTarget();
      const parameters = {
        isWebGL2,
        shaderID,
        shaderName: material.type,
        vertexShader,
        fragmentShader,
        defines: material.defines,
        isRawShaderMaterial: material.isRawShaderMaterial === true,
        glslVersion: material.glslVersion,
        precision,
        instancing: object.isInstancedMesh === true,
        instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,
        supportsVertexTextures: vertexTextures,
        outputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer3.outputEncoding,
        map: !!material.map,
        mapEncoding: getTextureEncodingFromMap(material.map),
        matcap: !!material.matcap,
        matcapEncoding: getTextureEncodingFromMap(material.matcap),
        envMap: !!envMap,
        envMapMode: envMap && envMap.mapping,
        envMapEncoding: getTextureEncodingFromMap(envMap),
        envMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),
        lightMap: !!material.lightMap,
        lightMapEncoding: getTextureEncodingFromMap(material.lightMap),
        aoMap: !!material.aoMap,
        emissiveMap: !!material.emissiveMap,
        emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),
        bumpMap: !!material.bumpMap,
        normalMap: !!material.normalMap,
        objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
        tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
        clearcoatMap: !!material.clearcoatMap,
        clearcoatRoughnessMap: !!material.clearcoatRoughnessMap,
        clearcoatNormalMap: !!material.clearcoatNormalMap,
        displacementMap: !!material.displacementMap,
        roughnessMap: !!material.roughnessMap,
        metalnessMap: !!material.metalnessMap,
        specularMap: !!material.specularMap,
        alphaMap: !!material.alphaMap,
        gradientMap: !!material.gradientMap,
        sheen: !!material.sheen,
        transmissionMap: !!material.transmissionMap,
        combine: material.combine,
        vertexTangents: material.normalMap && material.vertexTangents,
        vertexColors: material.vertexColors,
        vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap,
        uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmissionMap) && !!material.displacementMap,
        fog: !!fog,
        useFog: material.fog,
        fogExp2: fog && fog.isFogExp2,
        flatShading: material.flatShading,
        sizeAttenuation: material.sizeAttenuation,
        logarithmicDepthBuffer,
        skinning: material.skinning && maxBones > 0,
        maxBones,
        useVertexTexture: floatVertexTextures,
        morphTargets: material.morphTargets,
        morphNormals: material.morphNormals,
        maxMorphTargets: renderer3.maxMorphTargets,
        maxMorphNormals: renderer3.maxMorphNormals,
        numDirLights: lights.directional.length,
        numPointLights: lights.point.length,
        numSpotLights: lights.spot.length,
        numRectAreaLights: lights.rectArea.length,
        numHemiLights: lights.hemi.length,
        numDirLightShadows: lights.directionalShadowMap.length,
        numPointLightShadows: lights.pointShadowMap.length,
        numSpotLightShadows: lights.spotShadowMap.length,
        numClippingPlanes: clipping.numPlanes,
        numClipIntersection: clipping.numIntersection,
        dithering: material.dithering,
        shadowMapEnabled: renderer3.shadowMap.enabled && shadows.length > 0,
        shadowMapType: renderer3.shadowMap.type,
        toneMapping: material.toneMapped ? renderer3.toneMapping : NoToneMapping,
        physicallyCorrectLights: renderer3.physicallyCorrectLights,
        premultipliedAlpha: material.premultipliedAlpha,
        alphaTest: material.alphaTest,
        doubleSided: material.side === DoubleSide,
        flipSided: material.side === BackSide,
        depthPacking: material.depthPacking !== void 0 ? material.depthPacking : false,
        index0AttributeName: material.index0AttributeName,
        extensionDerivatives: material.extensions && material.extensions.derivatives,
        extensionFragDepth: material.extensions && material.extensions.fragDepth,
        extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
        extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
        rendererExtensionFragDepth: isWebGL2 || extensions.has("EXT_frag_depth"),
        rendererExtensionDrawBuffers: isWebGL2 || extensions.has("WEBGL_draw_buffers"),
        rendererExtensionShaderTextureLod: isWebGL2 || extensions.has("EXT_shader_texture_lod"),
        customProgramCacheKey: material.customProgramCacheKey()
      };
      return parameters;
    }
    function getProgramCacheKey(parameters) {
      const array = [];
      if (parameters.shaderID) {
        array.push(parameters.shaderID);
      } else {
        array.push(parameters.fragmentShader);
        array.push(parameters.vertexShader);
      }
      if (parameters.defines !== void 0) {
        for (const name in parameters.defines) {
          array.push(name);
          array.push(parameters.defines[name]);
        }
      }
      if (parameters.isRawShaderMaterial === false) {
        for (let i = 0; i < parameterNames.length; i++) {
          array.push(parameters[parameterNames[i]]);
        }
        array.push(renderer3.outputEncoding);
        array.push(renderer3.gammaFactor);
      }
      array.push(parameters.customProgramCacheKey);
      return array.join();
    }
    function getUniforms(material) {
      const shaderID = shaderIDs[material.type];
      let uniforms;
      if (shaderID) {
        const shader = ShaderLib[shaderID];
        uniforms = UniformsUtils.clone(shader.uniforms);
      } else {
        uniforms = material.uniforms;
      }
      return uniforms;
    }
    function acquireProgram(parameters, cacheKey) {
      let program;
      for (let p = 0, pl = programs.length; p < pl; p++) {
        const preexistingProgram = programs[p];
        if (preexistingProgram.cacheKey === cacheKey) {
          program = preexistingProgram;
          ++program.usedTimes;
          break;
        }
      }
      if (program === void 0) {
        program = new WebGLProgram(renderer3, cacheKey, parameters, bindingStates);
        programs.push(program);
      }
      return program;
    }
    function releaseProgram(program) {
      if (--program.usedTimes === 0) {
        const i = programs.indexOf(program);
        programs[i] = programs[programs.length - 1];
        programs.pop();
        program.destroy();
      }
    }
    return {
      getParameters,
      getProgramCacheKey,
      getUniforms,
      acquireProgram,
      releaseProgram,
      programs
    };
  }
  function WebGLProperties() {
    let properties = new WeakMap();
    function get(object) {
      let map = properties.get(object);
      if (map === void 0) {
        map = {};
        properties.set(object, map);
      }
      return map;
    }
    function remove(object) {
      properties.delete(object);
    }
    function update2(object, key, value) {
      properties.get(object)[key] = value;
    }
    function dispose() {
      properties = new WeakMap();
    }
    return {
      get,
      remove,
      update: update2,
      dispose
    };
  }
  function painterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) {
      return a.groupOrder - b.groupOrder;
    } else if (a.renderOrder !== b.renderOrder) {
      return a.renderOrder - b.renderOrder;
    } else if (a.program !== b.program) {
      return a.program.id - b.program.id;
    } else if (a.material.id !== b.material.id) {
      return a.material.id - b.material.id;
    } else if (a.z !== b.z) {
      return a.z - b.z;
    } else {
      return a.id - b.id;
    }
  }
  function reversePainterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) {
      return a.groupOrder - b.groupOrder;
    } else if (a.renderOrder !== b.renderOrder) {
      return a.renderOrder - b.renderOrder;
    } else if (a.z !== b.z) {
      return b.z - a.z;
    } else {
      return a.id - b.id;
    }
  }
  function WebGLRenderList(properties) {
    const renderItems = [];
    let renderItemsIndex = 0;
    const opaque = [];
    const transparent = [];
    const defaultProgram = {id: -1};
    function init() {
      renderItemsIndex = 0;
      opaque.length = 0;
      transparent.length = 0;
    }
    function getNextRenderItem(object, geometry, material, groupOrder, z, group2) {
      let renderItem = renderItems[renderItemsIndex];
      const materialProperties = properties.get(material);
      if (renderItem === void 0) {
        renderItem = {
          id: object.id,
          object,
          geometry,
          material,
          program: materialProperties.program || defaultProgram,
          groupOrder,
          renderOrder: object.renderOrder,
          z,
          group: group2
        };
        renderItems[renderItemsIndex] = renderItem;
      } else {
        renderItem.id = object.id;
        renderItem.object = object;
        renderItem.geometry = geometry;
        renderItem.material = material;
        renderItem.program = materialProperties.program || defaultProgram;
        renderItem.groupOrder = groupOrder;
        renderItem.renderOrder = object.renderOrder;
        renderItem.z = z;
        renderItem.group = group2;
      }
      renderItemsIndex++;
      return renderItem;
    }
    function push(object, geometry, material, groupOrder, z, group2) {
      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group2);
      (material.transparent === true ? transparent : opaque).push(renderItem);
    }
    function unshift(object, geometry, material, groupOrder, z, group2) {
      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group2);
      (material.transparent === true ? transparent : opaque).unshift(renderItem);
    }
    function sort(customOpaqueSort, customTransparentSort) {
      if (opaque.length > 1)
        opaque.sort(customOpaqueSort || painterSortStable);
      if (transparent.length > 1)
        transparent.sort(customTransparentSort || reversePainterSortStable);
    }
    function finish() {
      for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {
        const renderItem = renderItems[i];
        if (renderItem.id === null)
          break;
        renderItem.id = null;
        renderItem.object = null;
        renderItem.geometry = null;
        renderItem.material = null;
        renderItem.program = null;
        renderItem.group = null;
      }
    }
    return {
      opaque,
      transparent,
      init,
      push,
      unshift,
      finish,
      sort
    };
  }
  function WebGLRenderLists(properties) {
    let lists = new WeakMap();
    function get(scene2, camera2) {
      const cameras = lists.get(scene2);
      let list;
      if (cameras === void 0) {
        list = new WebGLRenderList(properties);
        lists.set(scene2, new WeakMap());
        lists.get(scene2).set(camera2, list);
      } else {
        list = cameras.get(camera2);
        if (list === void 0) {
          list = new WebGLRenderList(properties);
          cameras.set(camera2, list);
        }
      }
      return list;
    }
    function dispose() {
      lists = new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  function UniformsCache() {
    const lights = {};
    return {
      get: function(light) {
        if (lights[light.id] !== void 0) {
          return lights[light.id];
        }
        let uniforms;
        switch (light.type) {
          case "DirectionalLight":
            uniforms = {
              direction: new Vector3(),
              color: new Color()
            };
            break;
          case "SpotLight":
            uniforms = {
              position: new Vector3(),
              direction: new Vector3(),
              color: new Color(),
              distance: 0,
              coneCos: 0,
              penumbraCos: 0,
              decay: 0
            };
            break;
          case "PointLight":
            uniforms = {
              position: new Vector3(),
              color: new Color(),
              distance: 0,
              decay: 0
            };
            break;
          case "HemisphereLight":
            uniforms = {
              direction: new Vector3(),
              skyColor: new Color(),
              groundColor: new Color()
            };
            break;
          case "RectAreaLight":
            uniforms = {
              color: new Color(),
              position: new Vector3(),
              halfWidth: new Vector3(),
              halfHeight: new Vector3()
            };
            break;
        }
        lights[light.id] = uniforms;
        return uniforms;
      }
    };
  }
  function ShadowUniformsCache() {
    const lights = {};
    return {
      get: function(light) {
        if (lights[light.id] !== void 0) {
          return lights[light.id];
        }
        let uniforms;
        switch (light.type) {
          case "DirectionalLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2()
            };
            break;
          case "SpotLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2()
            };
            break;
          case "PointLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2(),
              shadowCameraNear: 1,
              shadowCameraFar: 1e3
            };
            break;
        }
        lights[light.id] = uniforms;
        return uniforms;
      }
    };
  }
  var nextVersion = 0;
  function shadowCastingLightsFirst(lightA, lightB) {
    return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);
  }
  function WebGLLights(extensions, capabilities) {
    const cache = new UniformsCache();
    const shadowCache = ShadowUniformsCache();
    const state = {
      version: 0,
      hash: {
        directionalLength: -1,
        pointLength: -1,
        spotLength: -1,
        rectAreaLength: -1,
        hemiLength: -1,
        numDirectionalShadows: -1,
        numPointShadows: -1,
        numSpotShadows: -1
      },
      ambient: [0, 0, 0],
      probe: [],
      directional: [],
      directionalShadow: [],
      directionalShadowMap: [],
      directionalShadowMatrix: [],
      spot: [],
      spotShadow: [],
      spotShadowMap: [],
      spotShadowMatrix: [],
      rectArea: [],
      rectAreaLTC1: null,
      rectAreaLTC2: null,
      point: [],
      pointShadow: [],
      pointShadowMap: [],
      pointShadowMatrix: [],
      hemi: []
    };
    for (let i = 0; i < 9; i++)
      state.probe.push(new Vector3());
    const vector3 = new Vector3();
    const matrix4 = new Matrix4();
    const matrix42 = new Matrix4();
    function setup(lights, shadows, camera2) {
      let r = 0, g = 0, b = 0;
      for (let i = 0; i < 9; i++)
        state.probe[i].set(0, 0, 0);
      let directionalLength = 0;
      let pointLength = 0;
      let spotLength = 0;
      let rectAreaLength = 0;
      let hemiLength = 0;
      let numDirectionalShadows = 0;
      let numPointShadows = 0;
      let numSpotShadows = 0;
      const viewMatrix = camera2.matrixWorldInverse;
      lights.sort(shadowCastingLightsFirst);
      for (let i = 0, l = lights.length; i < l; i++) {
        const light = lights[i];
        const color = light.color;
        const intensity = light.intensity;
        const distance = light.distance;
        const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
        if (light.isAmbientLight) {
          r += color.r * intensity;
          g += color.g * intensity;
          b += color.b * intensity;
        } else if (light.isLightProbe) {
          for (let j = 0; j < 9; j++) {
            state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
          }
        } else if (light.isDirectionalLight) {
          const uniforms = cache.get(light);
          uniforms.color.copy(light.color).multiplyScalar(light.intensity);
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          vector3.setFromMatrixPosition(light.target.matrixWorld);
          uniforms.direction.sub(vector3);
          uniforms.direction.transformDirection(viewMatrix);
          if (light.castShadow) {
            const shadow = light.shadow;
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            state.directionalShadow[directionalLength] = shadowUniforms;
            state.directionalShadowMap[directionalLength] = shadowMap;
            state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
            numDirectionalShadows++;
          }
          state.directional[directionalLength] = uniforms;
          directionalLength++;
        } else if (light.isSpotLight) {
          const uniforms = cache.get(light);
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          uniforms.color.copy(color).multiplyScalar(intensity);
          uniforms.distance = distance;
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          vector3.setFromMatrixPosition(light.target.matrixWorld);
          uniforms.direction.sub(vector3);
          uniforms.direction.transformDirection(viewMatrix);
          uniforms.coneCos = Math.cos(light.angle);
          uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
          uniforms.decay = light.decay;
          if (light.castShadow) {
            const shadow = light.shadow;
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            state.spotShadow[spotLength] = shadowUniforms;
            state.spotShadowMap[spotLength] = shadowMap;
            state.spotShadowMatrix[spotLength] = light.shadow.matrix;
            numSpotShadows++;
          }
          state.spot[spotLength] = uniforms;
          spotLength++;
        } else if (light.isRectAreaLight) {
          const uniforms = cache.get(light);
          uniforms.color.copy(color).multiplyScalar(intensity);
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          matrix42.identity();
          matrix4.copy(light.matrixWorld);
          matrix4.premultiply(viewMatrix);
          matrix42.extractRotation(matrix4);
          uniforms.halfWidth.set(light.width * 0.5, 0, 0);
          uniforms.halfHeight.set(0, light.height * 0.5, 0);
          uniforms.halfWidth.applyMatrix4(matrix42);
          uniforms.halfHeight.applyMatrix4(matrix42);
          state.rectArea[rectAreaLength] = uniforms;
          rectAreaLength++;
        } else if (light.isPointLight) {
          const uniforms = cache.get(light);
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          uniforms.color.copy(light.color).multiplyScalar(light.intensity);
          uniforms.distance = light.distance;
          uniforms.decay = light.decay;
          if (light.castShadow) {
            const shadow = light.shadow;
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            shadowUniforms.shadowCameraNear = shadow.camera.near;
            shadowUniforms.shadowCameraFar = shadow.camera.far;
            state.pointShadow[pointLength] = shadowUniforms;
            state.pointShadowMap[pointLength] = shadowMap;
            state.pointShadowMatrix[pointLength] = light.shadow.matrix;
            numPointShadows++;
          }
          state.point[pointLength] = uniforms;
          pointLength++;
        } else if (light.isHemisphereLight) {
          const uniforms = cache.get(light);
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          uniforms.direction.transformDirection(viewMatrix);
          uniforms.direction.normalize();
          uniforms.skyColor.copy(light.color).multiplyScalar(intensity);
          uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);
          state.hemi[hemiLength] = uniforms;
          hemiLength++;
        }
      }
      if (rectAreaLength > 0) {
        if (capabilities.isWebGL2) {
          state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
          state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
        } else {
          if (extensions.has("OES_texture_float_linear") === true) {
            state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
            state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
          } else if (extensions.has("OES_texture_half_float_linear") === true) {
            state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
            state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
          } else {
            console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.");
          }
        }
      }
      state.ambient[0] = r;
      state.ambient[1] = g;
      state.ambient[2] = b;
      const hash = state.hash;
      if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {
        state.directional.length = directionalLength;
        state.spot.length = spotLength;
        state.rectArea.length = rectAreaLength;
        state.point.length = pointLength;
        state.hemi.length = hemiLength;
        state.directionalShadow.length = numDirectionalShadows;
        state.directionalShadowMap.length = numDirectionalShadows;
        state.pointShadow.length = numPointShadows;
        state.pointShadowMap.length = numPointShadows;
        state.spotShadow.length = numSpotShadows;
        state.spotShadowMap.length = numSpotShadows;
        state.directionalShadowMatrix.length = numDirectionalShadows;
        state.pointShadowMatrix.length = numPointShadows;
        state.spotShadowMatrix.length = numSpotShadows;
        hash.directionalLength = directionalLength;
        hash.pointLength = pointLength;
        hash.spotLength = spotLength;
        hash.rectAreaLength = rectAreaLength;
        hash.hemiLength = hemiLength;
        hash.numDirectionalShadows = numDirectionalShadows;
        hash.numPointShadows = numPointShadows;
        hash.numSpotShadows = numSpotShadows;
        state.version = nextVersion++;
      }
    }
    return {
      setup,
      state
    };
  }
  function WebGLRenderState(extensions, capabilities) {
    const lights = new WebGLLights(extensions, capabilities);
    const lightsArray = [];
    const shadowsArray = [];
    function init() {
      lightsArray.length = 0;
      shadowsArray.length = 0;
    }
    function pushLight(light) {
      lightsArray.push(light);
    }
    function pushShadow(shadowLight) {
      shadowsArray.push(shadowLight);
    }
    function setupLights(camera2) {
      lights.setup(lightsArray, shadowsArray, camera2);
    }
    const state = {
      lightsArray,
      shadowsArray,
      lights
    };
    return {
      init,
      state,
      setupLights,
      pushLight,
      pushShadow
    };
  }
  function WebGLRenderStates(extensions, capabilities) {
    let renderStates = new WeakMap();
    function get(scene2, camera2) {
      let renderState;
      if (renderStates.has(scene2) === false) {
        renderState = new WebGLRenderState(extensions, capabilities);
        renderStates.set(scene2, new WeakMap());
        renderStates.get(scene2).set(camera2, renderState);
      } else {
        if (renderStates.get(scene2).has(camera2) === false) {
          renderState = new WebGLRenderState(extensions, capabilities);
          renderStates.get(scene2).set(camera2, renderState);
        } else {
          renderState = renderStates.get(scene2).get(camera2);
        }
      }
      return renderState;
    }
    function dispose() {
      renderStates = new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  function MeshDepthMaterial(parameters) {
    Material.call(this);
    this.type = "MeshDepthMaterial";
    this.depthPacking = BasicDepthPacking;
    this.skinning = false;
    this.morphTargets = false;
    this.map = null;
    this.alphaMap = null;
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.fog = false;
    this.setValues(parameters);
  }
  MeshDepthMaterial.prototype = Object.create(Material.prototype);
  MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;
  MeshDepthMaterial.prototype.isMeshDepthMaterial = true;
  MeshDepthMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.depthPacking = source.depthPacking;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    return this;
  };
  function MeshDistanceMaterial(parameters) {
    Material.call(this);
    this.type = "MeshDistanceMaterial";
    this.referencePosition = new Vector3();
    this.nearDistance = 1;
    this.farDistance = 1e3;
    this.skinning = false;
    this.morphTargets = false;
    this.map = null;
    this.alphaMap = null;
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.fog = false;
    this.setValues(parameters);
  }
  MeshDistanceMaterial.prototype = Object.create(Material.prototype);
  MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;
  MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;
  MeshDistanceMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.referencePosition.copy(source.referencePosition);
    this.nearDistance = source.nearDistance;
    this.farDistance = source.farDistance;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    return this;
  };
  var vsm_frag = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n	for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n		#ifdef HORIZONAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean * HALF_SAMPLE_RATE;\n	squared_mean = squared_mean * HALF_SAMPLE_RATE;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
  var vsm_vert = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
  function WebGLShadowMap(_renderer, _objects, maxTextureSize) {
    let _frustum = new Frustum();
    const _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport = new Vector4(), _depthMaterials = [], _distanceMaterials = [], _materialCache = {};
    const shadowSide = {0: BackSide, 1: FrontSide, 2: DoubleSide};
    const shadowMaterialVertical = new ShaderMaterial({
      defines: {
        SAMPLE_RATE: 2 / 8,
        HALF_SAMPLE_RATE: 1 / 8
      },
      uniforms: {
        shadow_pass: {value: null},
        resolution: {value: new Vector2()},
        radius: {value: 4}
      },
      vertexShader: vsm_vert,
      fragmentShader: vsm_frag
    });
    const shadowMaterialHorizonal = shadowMaterialVertical.clone();
    shadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;
    const fullScreenTri = new BufferGeometry();
    fullScreenTri.setAttribute("position", new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
    const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
    const scope = this;
    this.enabled = false;
    this.autoUpdate = true;
    this.needsUpdate = false;
    this.type = PCFShadowMap;
    this.render = function(lights, scene2, camera2) {
      if (scope.enabled === false)
        return;
      if (scope.autoUpdate === false && scope.needsUpdate === false)
        return;
      if (lights.length === 0)
        return;
      const currentRenderTarget = _renderer.getRenderTarget();
      const activeCubeFace = _renderer.getActiveCubeFace();
      const activeMipmapLevel = _renderer.getActiveMipmapLevel();
      const _state = _renderer.state;
      _state.setBlending(NoBlending);
      _state.buffers.color.setClear(1, 1, 1, 1);
      _state.buffers.depth.setTest(true);
      _state.setScissorTest(false);
      for (let i = 0, il = lights.length; i < il; i++) {
        const light = lights[i];
        const shadow = light.shadow;
        if (shadow === void 0) {
          console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
          continue;
        }
        if (shadow.autoUpdate === false && shadow.needsUpdate === false)
          continue;
        _shadowMapSize.copy(shadow.mapSize);
        const shadowFrameExtents = shadow.getFrameExtents();
        _shadowMapSize.multiply(shadowFrameExtents);
        _viewportSize.copy(shadow.mapSize);
        if (_shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize) {
          if (_shadowMapSize.x > maxTextureSize) {
            _viewportSize.x = Math.floor(maxTextureSize / shadowFrameExtents.x);
            _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
            shadow.mapSize.x = _viewportSize.x;
          }
          if (_shadowMapSize.y > maxTextureSize) {
            _viewportSize.y = Math.floor(maxTextureSize / shadowFrameExtents.y);
            _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
            shadow.mapSize.y = _viewportSize.y;
          }
        }
        if (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {
          const pars = {minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat};
          shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
          shadow.map.texture.name = light.name + ".shadowMap";
          shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
          shadow.camera.updateProjectionMatrix();
        }
        if (shadow.map === null) {
          const pars = {minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat};
          shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
          shadow.map.texture.name = light.name + ".shadowMap";
          shadow.camera.updateProjectionMatrix();
        }
        _renderer.setRenderTarget(shadow.map);
        _renderer.clear();
        const viewportCount = shadow.getViewportCount();
        for (let vp = 0; vp < viewportCount; vp++) {
          const viewport = shadow.getViewport(vp);
          _viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);
          _state.viewport(_viewport);
          shadow.updateMatrices(light, vp);
          _frustum = shadow.getFrustum();
          renderObject(scene2, camera2, shadow.camera, light, this.type);
        }
        if (!shadow.isPointLightShadow && this.type === VSMShadowMap) {
          VSMPass(shadow, camera2);
        }
        shadow.needsUpdate = false;
      }
      scope.needsUpdate = false;
      _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
    };
    function VSMPass(shadow, camera2) {
      const geometry = _objects.update(fullScreenMesh);
      shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
      shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
      shadowMaterialVertical.uniforms.radius.value = shadow.radius;
      _renderer.setRenderTarget(shadow.mapPass);
      _renderer.clear();
      _renderer.renderBufferDirect(camera2, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
      shadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;
      shadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;
      shadowMaterialHorizonal.uniforms.radius.value = shadow.radius;
      _renderer.setRenderTarget(shadow.map);
      _renderer.clear();
      _renderer.renderBufferDirect(camera2, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null);
    }
    function getDepthMaterialVariant(useMorphing, useSkinning, useInstancing) {
      const index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;
      let material = _depthMaterials[index];
      if (material === void 0) {
        material = new MeshDepthMaterial({
          depthPacking: RGBADepthPacking,
          morphTargets: useMorphing,
          skinning: useSkinning
        });
        _depthMaterials[index] = material;
      }
      return material;
    }
    function getDistanceMaterialVariant(useMorphing, useSkinning, useInstancing) {
      const index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;
      let material = _distanceMaterials[index];
      if (material === void 0) {
        material = new MeshDistanceMaterial({
          morphTargets: useMorphing,
          skinning: useSkinning
        });
        _distanceMaterials[index] = material;
      }
      return material;
    }
    function getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {
      let result = null;
      let getMaterialVariant = getDepthMaterialVariant;
      let customMaterial = object.customDepthMaterial;
      if (light.isPointLight === true) {
        getMaterialVariant = getDistanceMaterialVariant;
        customMaterial = object.customDistanceMaterial;
      }
      if (customMaterial === void 0) {
        let useMorphing = false;
        if (material.morphTargets === true) {
          useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;
        }
        let useSkinning = false;
        if (object.isSkinnedMesh === true) {
          if (material.skinning === true) {
            useSkinning = true;
          } else {
            console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", object);
          }
        }
        const useInstancing = object.isInstancedMesh === true;
        result = getMaterialVariant(useMorphing, useSkinning, useInstancing);
      } else {
        result = customMaterial;
      }
      if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {
        const keyA = result.uuid, keyB = material.uuid;
        let materialsForVariant = _materialCache[keyA];
        if (materialsForVariant === void 0) {
          materialsForVariant = {};
          _materialCache[keyA] = materialsForVariant;
        }
        let cachedMaterial = materialsForVariant[keyB];
        if (cachedMaterial === void 0) {
          cachedMaterial = result.clone();
          materialsForVariant[keyB] = cachedMaterial;
        }
        result = cachedMaterial;
      }
      result.visible = material.visible;
      result.wireframe = material.wireframe;
      if (type === VSMShadowMap) {
        result.side = material.shadowSide !== null ? material.shadowSide : material.side;
      } else {
        result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
      }
      result.clipShadows = material.clipShadows;
      result.clippingPlanes = material.clippingPlanes;
      result.clipIntersection = material.clipIntersection;
      result.wireframeLinewidth = material.wireframeLinewidth;
      result.linewidth = material.linewidth;
      if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
        result.referencePosition.setFromMatrixPosition(light.matrixWorld);
        result.nearDistance = shadowCameraNear;
        result.farDistance = shadowCameraFar;
      }
      return result;
    }
    function renderObject(object, camera2, shadowCamera, light, type) {
      if (object.visible === false)
        return;
      const visible = object.layers.test(camera2.layers);
      if (visible && (object.isMesh || object.isLine || object.isPoints)) {
        if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
          object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
          const geometry = _objects.update(object);
          const material = object.material;
          if (Array.isArray(material)) {
            const groups = geometry.groups;
            for (let k = 0, kl = groups.length; k < kl; k++) {
              const group2 = groups[k];
              const groupMaterial = material[group2.materialIndex];
              if (groupMaterial && groupMaterial.visible) {
                const depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);
                _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group2);
              }
            }
          } else if (material.visible) {
            const depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);
            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
          }
        }
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        renderObject(children[i], camera2, shadowCamera, light, type);
      }
    }
  }
  function WebGLState(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function ColorBuffer() {
      let locked = false;
      const color = new Vector4();
      let currentColorMask = null;
      const currentColorClear = new Vector4(0, 0, 0, 0);
      return {
        setMask: function(colorMask) {
          if (currentColorMask !== colorMask && !locked) {
            gl.colorMask(colorMask, colorMask, colorMask, colorMask);
            currentColorMask = colorMask;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(r, g, b, a, premultipliedAlpha) {
          if (premultipliedAlpha === true) {
            r *= a;
            g *= a;
            b *= a;
          }
          color.set(r, g, b, a);
          if (currentColorClear.equals(color) === false) {
            gl.clearColor(r, g, b, a);
            currentColorClear.copy(color);
          }
        },
        reset: function() {
          locked = false;
          currentColorMask = null;
          currentColorClear.set(-1, 0, 0, 0);
        }
      };
    }
    function DepthBuffer() {
      let locked = false;
      let currentDepthMask = null;
      let currentDepthFunc = null;
      let currentDepthClear = null;
      return {
        setTest: function(depthTest) {
          if (depthTest) {
            enable(2929);
          } else {
            disable(2929);
          }
        },
        setMask: function(depthMask) {
          if (currentDepthMask !== depthMask && !locked) {
            gl.depthMask(depthMask);
            currentDepthMask = depthMask;
          }
        },
        setFunc: function(depthFunc) {
          if (currentDepthFunc !== depthFunc) {
            if (depthFunc) {
              switch (depthFunc) {
                case NeverDepth:
                  gl.depthFunc(512);
                  break;
                case AlwaysDepth:
                  gl.depthFunc(519);
                  break;
                case LessDepth:
                  gl.depthFunc(513);
                  break;
                case LessEqualDepth:
                  gl.depthFunc(515);
                  break;
                case EqualDepth:
                  gl.depthFunc(514);
                  break;
                case GreaterEqualDepth:
                  gl.depthFunc(518);
                  break;
                case GreaterDepth:
                  gl.depthFunc(516);
                  break;
                case NotEqualDepth:
                  gl.depthFunc(517);
                  break;
                default:
                  gl.depthFunc(515);
              }
            } else {
              gl.depthFunc(515);
            }
            currentDepthFunc = depthFunc;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(depth) {
          if (currentDepthClear !== depth) {
            gl.clearDepth(depth);
            currentDepthClear = depth;
          }
        },
        reset: function() {
          locked = false;
          currentDepthMask = null;
          currentDepthFunc = null;
          currentDepthClear = null;
        }
      };
    }
    function StencilBuffer() {
      let locked = false;
      let currentStencilMask = null;
      let currentStencilFunc = null;
      let currentStencilRef = null;
      let currentStencilFuncMask = null;
      let currentStencilFail = null;
      let currentStencilZFail = null;
      let currentStencilZPass = null;
      let currentStencilClear = null;
      return {
        setTest: function(stencilTest) {
          if (!locked) {
            if (stencilTest) {
              enable(2960);
            } else {
              disable(2960);
            }
          }
        },
        setMask: function(stencilMask) {
          if (currentStencilMask !== stencilMask && !locked) {
            gl.stencilMask(stencilMask);
            currentStencilMask = stencilMask;
          }
        },
        setFunc: function(stencilFunc, stencilRef, stencilMask) {
          if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
            gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
            currentStencilFunc = stencilFunc;
            currentStencilRef = stencilRef;
            currentStencilFuncMask = stencilMask;
          }
        },
        setOp: function(stencilFail, stencilZFail, stencilZPass) {
          if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
            gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
            currentStencilFail = stencilFail;
            currentStencilZFail = stencilZFail;
            currentStencilZPass = stencilZPass;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(stencil) {
          if (currentStencilClear !== stencil) {
            gl.clearStencil(stencil);
            currentStencilClear = stencil;
          }
        },
        reset: function() {
          locked = false;
          currentStencilMask = null;
          currentStencilFunc = null;
          currentStencilRef = null;
          currentStencilFuncMask = null;
          currentStencilFail = null;
          currentStencilZFail = null;
          currentStencilZPass = null;
          currentStencilClear = null;
        }
      };
    }
    const colorBuffer = new ColorBuffer();
    const depthBuffer = new DepthBuffer();
    const stencilBuffer = new StencilBuffer();
    let enabledCapabilities = {};
    let currentProgram = null;
    let currentBlendingEnabled = null;
    let currentBlending = null;
    let currentBlendEquation = null;
    let currentBlendSrc = null;
    let currentBlendDst = null;
    let currentBlendEquationAlpha = null;
    let currentBlendSrcAlpha = null;
    let currentBlendDstAlpha = null;
    let currentPremultipledAlpha = false;
    let currentFlipSided = null;
    let currentCullFace = null;
    let currentLineWidth = null;
    let currentPolygonOffsetFactor = null;
    let currentPolygonOffsetUnits = null;
    const maxTextures = gl.getParameter(35661);
    let lineWidthAvailable = false;
    let version = 0;
    const glVersion = gl.getParameter(7938);
    if (glVersion.indexOf("WebGL") !== -1) {
      version = parseFloat(/^WebGL\ ([0-9])/.exec(glVersion)[1]);
      lineWidthAvailable = version >= 1;
    } else if (glVersion.indexOf("OpenGL ES") !== -1) {
      version = parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(glVersion)[1]);
      lineWidthAvailable = version >= 2;
    }
    let currentTextureSlot = null;
    let currentBoundTextures = {};
    const currentScissor = new Vector4();
    const currentViewport = new Vector4();
    function createTexture(type, target, count) {
      const data = new Uint8Array(4);
      const texture = gl.createTexture();
      gl.bindTexture(type, texture);
      gl.texParameteri(type, 10241, 9728);
      gl.texParameteri(type, 10240, 9728);
      for (let i = 0; i < count; i++) {
        gl.texImage2D(target + i, 0, 6408, 1, 1, 0, 6408, 5121, data);
      }
      return texture;
    }
    const emptyTextures = {};
    emptyTextures[3553] = createTexture(3553, 3553, 1);
    emptyTextures[34067] = createTexture(34067, 34069, 6);
    colorBuffer.setClear(0, 0, 0, 1);
    depthBuffer.setClear(1);
    stencilBuffer.setClear(0);
    enable(2929);
    depthBuffer.setFunc(LessEqualDepth);
    setFlipSided(false);
    setCullFace(CullFaceBack);
    enable(2884);
    setBlending(NoBlending);
    function enable(id) {
      if (enabledCapabilities[id] !== true) {
        gl.enable(id);
        enabledCapabilities[id] = true;
      }
    }
    function disable(id) {
      if (enabledCapabilities[id] !== false) {
        gl.disable(id);
        enabledCapabilities[id] = false;
      }
    }
    function useProgram(program) {
      if (currentProgram !== program) {
        gl.useProgram(program);
        currentProgram = program;
        return true;
      }
      return false;
    }
    const equationToGL = {
      [AddEquation]: 32774,
      [SubtractEquation]: 32778,
      [ReverseSubtractEquation]: 32779
    };
    if (isWebGL2) {
      equationToGL[MinEquation] = 32775;
      equationToGL[MaxEquation] = 32776;
    } else {
      const extension = extensions.get("EXT_blend_minmax");
      if (extension !== null) {
        equationToGL[MinEquation] = extension.MIN_EXT;
        equationToGL[MaxEquation] = extension.MAX_EXT;
      }
    }
    const factorToGL = {
      [ZeroFactor]: 0,
      [OneFactor]: 1,
      [SrcColorFactor]: 768,
      [SrcAlphaFactor]: 770,
      [SrcAlphaSaturateFactor]: 776,
      [DstColorFactor]: 774,
      [DstAlphaFactor]: 772,
      [OneMinusSrcColorFactor]: 769,
      [OneMinusSrcAlphaFactor]: 771,
      [OneMinusDstColorFactor]: 775,
      [OneMinusDstAlphaFactor]: 773
    };
    function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
      if (blending === NoBlending) {
        if (currentBlendingEnabled) {
          disable(3042);
          currentBlendingEnabled = false;
        }
        return;
      }
      if (!currentBlendingEnabled) {
        enable(3042);
        currentBlendingEnabled = true;
      }
      if (blending !== CustomBlending) {
        if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
          if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
            gl.blendEquation(32774);
            currentBlendEquation = AddEquation;
            currentBlendEquationAlpha = AddEquation;
          }
          if (premultipliedAlpha) {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(1, 771, 1, 771);
                break;
              case AdditiveBlending:
                gl.blendFunc(1, 1);
                break;
              case SubtractiveBlending:
                gl.blendFuncSeparate(0, 0, 769, 771);
                break;
              case MultiplyBlending:
                gl.blendFuncSeparate(0, 768, 0, 770);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          } else {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(770, 771, 1, 771);
                break;
              case AdditiveBlending:
                gl.blendFunc(770, 1);
                break;
              case SubtractiveBlending:
                gl.blendFunc(0, 769);
                break;
              case MultiplyBlending:
                gl.blendFunc(0, 768);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          }
          currentBlendSrc = null;
          currentBlendDst = null;
          currentBlendSrcAlpha = null;
          currentBlendDstAlpha = null;
          currentBlending = blending;
          currentPremultipledAlpha = premultipliedAlpha;
        }
        return;
      }
      blendEquationAlpha = blendEquationAlpha || blendEquation;
      blendSrcAlpha = blendSrcAlpha || blendSrc;
      blendDstAlpha = blendDstAlpha || blendDst;
      if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
        gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
        currentBlendEquation = blendEquation;
        currentBlendEquationAlpha = blendEquationAlpha;
      }
      if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
        gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
        currentBlendSrc = blendSrc;
        currentBlendDst = blendDst;
        currentBlendSrcAlpha = blendSrcAlpha;
        currentBlendDstAlpha = blendDstAlpha;
      }
      currentBlending = blending;
      currentPremultipledAlpha = null;
    }
    function setMaterial(material, frontFaceCW) {
      material.side === DoubleSide ? disable(2884) : enable(2884);
      let flipSided = material.side === BackSide;
      if (frontFaceCW)
        flipSided = !flipSided;
      setFlipSided(flipSided);
      material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
      depthBuffer.setFunc(material.depthFunc);
      depthBuffer.setTest(material.depthTest);
      depthBuffer.setMask(material.depthWrite);
      colorBuffer.setMask(material.colorWrite);
      const stencilWrite = material.stencilWrite;
      stencilBuffer.setTest(stencilWrite);
      if (stencilWrite) {
        stencilBuffer.setMask(material.stencilWriteMask);
        stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
        stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
      }
      setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
    }
    function setFlipSided(flipSided) {
      if (currentFlipSided !== flipSided) {
        if (flipSided) {
          gl.frontFace(2304);
        } else {
          gl.frontFace(2305);
        }
        currentFlipSided = flipSided;
      }
    }
    function setCullFace(cullFace) {
      if (cullFace !== CullFaceNone) {
        enable(2884);
        if (cullFace !== currentCullFace) {
          if (cullFace === CullFaceBack) {
            gl.cullFace(1029);
          } else if (cullFace === CullFaceFront) {
            gl.cullFace(1028);
          } else {
            gl.cullFace(1032);
          }
        }
      } else {
        disable(2884);
      }
      currentCullFace = cullFace;
    }
    function setLineWidth(width) {
      if (width !== currentLineWidth) {
        if (lineWidthAvailable)
          gl.lineWidth(width);
        currentLineWidth = width;
      }
    }
    function setPolygonOffset(polygonOffset, factor, units) {
      if (polygonOffset) {
        enable(32823);
        if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
          gl.polygonOffset(factor, units);
          currentPolygonOffsetFactor = factor;
          currentPolygonOffsetUnits = units;
        }
      } else {
        disable(32823);
      }
    }
    function setScissorTest(scissorTest) {
      if (scissorTest) {
        enable(3089);
      } else {
        disable(3089);
      }
    }
    function activeTexture(webglSlot) {
      if (webglSlot === void 0)
        webglSlot = 33984 + maxTextures - 1;
      if (currentTextureSlot !== webglSlot) {
        gl.activeTexture(webglSlot);
        currentTextureSlot = webglSlot;
      }
    }
    function bindTexture(webglType, webglTexture) {
      if (currentTextureSlot === null) {
        activeTexture();
      }
      let boundTexture = currentBoundTextures[currentTextureSlot];
      if (boundTexture === void 0) {
        boundTexture = {type: void 0, texture: void 0};
        currentBoundTextures[currentTextureSlot] = boundTexture;
      }
      if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
        gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
        boundTexture.type = webglType;
        boundTexture.texture = webglTexture;
      }
    }
    function unbindTexture() {
      const boundTexture = currentBoundTextures[currentTextureSlot];
      if (boundTexture !== void 0 && boundTexture.type !== void 0) {
        gl.bindTexture(boundTexture.type, null);
        boundTexture.type = void 0;
        boundTexture.texture = void 0;
      }
    }
    function compressedTexImage2D() {
      try {
        gl.compressedTexImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texImage2D() {
      try {
        gl.texImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texImage3D() {
      try {
        gl.texImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function scissor(scissor2) {
      if (currentScissor.equals(scissor2) === false) {
        gl.scissor(scissor2.x, scissor2.y, scissor2.z, scissor2.w);
        currentScissor.copy(scissor2);
      }
    }
    function viewport(viewport2) {
      if (currentViewport.equals(viewport2) === false) {
        gl.viewport(viewport2.x, viewport2.y, viewport2.z, viewport2.w);
        currentViewport.copy(viewport2);
      }
    }
    function reset() {
      enabledCapabilities = {};
      currentTextureSlot = null;
      currentBoundTextures = {};
      currentProgram = null;
      currentBlendingEnabled = null;
      currentBlending = null;
      currentBlendEquation = null;
      currentBlendSrc = null;
      currentBlendDst = null;
      currentBlendEquationAlpha = null;
      currentBlendSrcAlpha = null;
      currentBlendDstAlpha = null;
      currentPremultipledAlpha = false;
      currentFlipSided = null;
      currentCullFace = null;
      currentLineWidth = null;
      currentPolygonOffsetFactor = null;
      currentPolygonOffsetUnits = null;
      colorBuffer.reset();
      depthBuffer.reset();
      stencilBuffer.reset();
    }
    return {
      buffers: {
        color: colorBuffer,
        depth: depthBuffer,
        stencil: stencilBuffer
      },
      enable,
      disable,
      useProgram,
      setBlending,
      setMaterial,
      setFlipSided,
      setCullFace,
      setLineWidth,
      setPolygonOffset,
      setScissorTest,
      activeTexture,
      bindTexture,
      unbindTexture,
      compressedTexImage2D,
      texImage2D,
      texImage3D,
      scissor,
      viewport,
      reset
    };
  }
  function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
    const isWebGL2 = capabilities.isWebGL2;
    const maxTextures = capabilities.maxTextures;
    const maxCubemapSize = capabilities.maxCubemapSize;
    const maxTextureSize = capabilities.maxTextureSize;
    const maxSamples = capabilities.maxSamples;
    const _videoTextures = new WeakMap();
    let _canvas2;
    let useOffscreenCanvas = false;
    try {
      useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
    } catch (err) {
    }
    function createCanvas(width, height) {
      return useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
    }
    function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
      let scale = 1;
      if (image.width > maxSize || image.height > maxSize) {
        scale = maxSize / Math.max(image.width, image.height);
      }
      if (scale < 1 || needsPowerOfTwo === true) {
        if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
          const floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;
          const width = floor(scale * image.width);
          const height = floor(scale * image.height);
          if (_canvas2 === void 0)
            _canvas2 = createCanvas(width, height);
          const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas2;
          canvas.width = width;
          canvas.height = height;
          const context = canvas.getContext("2d");
          context.drawImage(image, 0, 0, width, height);
          console.warn("THREE.WebGLRenderer: Texture has been resized from (" + image.width + "x" + image.height + ") to (" + width + "x" + height + ").");
          return canvas;
        } else {
          if ("data" in image) {
            console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + image.width + "x" + image.height + ").");
          }
          return image;
        }
      }
      return image;
    }
    function isPowerOfTwo(image) {
      return MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);
    }
    function textureNeedsPowerOfTwo(texture) {
      if (isWebGL2)
        return false;
      return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    }
    function textureNeedsGenerateMipmaps(texture, supportsMips) {
      return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    }
    function generateMipmap(target, texture, width, height) {
      _gl.generateMipmap(target);
      const textureProperties = properties.get(texture);
      textureProperties.__maxMipLevel = Math.log(Math.max(width, height)) * Math.LOG2E;
    }
    function getInternalFormat(internalFormatName, glFormat, glType) {
      if (isWebGL2 === false)
        return glFormat;
      if (internalFormatName !== null) {
        if (_gl[internalFormatName] !== void 0)
          return _gl[internalFormatName];
        console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
      }
      let internalFormat = glFormat;
      if (glFormat === 6403) {
        if (glType === 5126)
          internalFormat = 33326;
        if (glType === 5131)
          internalFormat = 33325;
        if (glType === 5121)
          internalFormat = 33321;
      }
      if (glFormat === 6407) {
        if (glType === 5126)
          internalFormat = 34837;
        if (glType === 5131)
          internalFormat = 34843;
        if (glType === 5121)
          internalFormat = 32849;
      }
      if (glFormat === 6408) {
        if (glType === 5126)
          internalFormat = 34836;
        if (glType === 5131)
          internalFormat = 34842;
        if (glType === 5121)
          internalFormat = 32856;
      }
      if (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 34842 || internalFormat === 34836) {
        extensions.get("EXT_color_buffer_float");
      }
      return internalFormat;
    }
    function filterFallback(f) {
      if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {
        return 9728;
      }
      return 9729;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      deallocateTexture(texture);
      if (texture.isVideoTexture) {
        _videoTextures.delete(texture);
      }
      info.memory.textures--;
    }
    function onRenderTargetDispose(event) {
      const renderTarget = event.target;
      renderTarget.removeEventListener("dispose", onRenderTargetDispose);
      deallocateRenderTarget(renderTarget);
      info.memory.textures--;
    }
    function deallocateTexture(texture) {
      const textureProperties = properties.get(texture);
      if (textureProperties.__webglInit === void 0)
        return;
      _gl.deleteTexture(textureProperties.__webglTexture);
      properties.remove(texture);
    }
    function deallocateRenderTarget(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      const textureProperties = properties.get(renderTarget.texture);
      if (!renderTarget)
        return;
      if (textureProperties.__webglTexture !== void 0) {
        _gl.deleteTexture(textureProperties.__webglTexture);
      }
      if (renderTarget.depthTexture) {
        renderTarget.depthTexture.dispose();
      }
      if (renderTarget.isWebGLCubeRenderTarget) {
        for (let i = 0; i < 6; i++) {
          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
          if (renderTargetProperties.__webglDepthbuffer)
            _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
        }
      } else {
        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
        if (renderTargetProperties.__webglDepthbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
        if (renderTargetProperties.__webglMultisampledFramebuffer)
          _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
        if (renderTargetProperties.__webglColorRenderbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);
        if (renderTargetProperties.__webglDepthRenderbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
      }
      properties.remove(renderTarget.texture);
      properties.remove(renderTarget);
    }
    let textureUnits = 0;
    function resetTextureUnits() {
      textureUnits = 0;
    }
    function allocateTextureUnit() {
      const textureUnit = textureUnits;
      if (textureUnit >= maxTextures) {
        console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + maxTextures);
      }
      textureUnits += 1;
      return textureUnit;
    }
    function setTexture2D(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.isVideoTexture)
        updateVideoTexture(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        const image = texture.image;
        if (image === void 0) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
        } else if (image.complete === false) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
        } else {
          uploadTexture(textureProperties, texture, slot);
          return;
        }
      }
      state.activeTexture(33984 + slot);
      state.bindTexture(3553, textureProperties.__webglTexture);
    }
    function setTexture2DArray(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
      state.activeTexture(33984 + slot);
      state.bindTexture(35866, textureProperties.__webglTexture);
    }
    function setTexture3D(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
      state.activeTexture(33984 + slot);
      state.bindTexture(32879, textureProperties.__webglTexture);
    }
    function setTextureCube(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadCubeTexture(textureProperties, texture, slot);
        return;
      }
      state.activeTexture(33984 + slot);
      state.bindTexture(34067, textureProperties.__webglTexture);
    }
    const wrappingToGL = {
      [RepeatWrapping]: 10497,
      [ClampToEdgeWrapping]: 33071,
      [MirroredRepeatWrapping]: 33648
    };
    const filterToGL = {
      [NearestFilter]: 9728,
      [NearestMipmapNearestFilter]: 9984,
      [NearestMipmapLinearFilter]: 9986,
      [LinearFilter]: 9729,
      [LinearMipmapNearestFilter]: 9985,
      [LinearMipmapLinearFilter]: 9987
    };
    function setTextureParameters(textureType, texture, supportsMips) {
      if (supportsMips) {
        _gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);
        _gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);
        if (textureType === 32879 || textureType === 35866) {
          _gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);
        }
        _gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);
        _gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);
      } else {
        _gl.texParameteri(textureType, 10242, 33071);
        _gl.texParameteri(textureType, 10243, 33071);
        if (textureType === 32879 || textureType === 35866) {
          _gl.texParameteri(textureType, 32882, 33071);
        }
        if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {
          console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.");
        }
        _gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));
        _gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));
        if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
          console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.");
        }
      }
      const extension = extensions.get("EXT_texture_filter_anisotropic");
      if (extension) {
        if (texture.type === FloatType && extensions.get("OES_texture_float_linear") === null)
          return;
        if (texture.type === HalfFloatType && (isWebGL2 || extensions.get("OES_texture_half_float_linear")) === null)
          return;
        if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
          _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
          properties.get(texture).__currentAnisotropy = texture.anisotropy;
        }
      }
    }
    function initTexture(textureProperties, texture) {
      if (textureProperties.__webglInit === void 0) {
        textureProperties.__webglInit = true;
        texture.addEventListener("dispose", onTextureDispose);
        textureProperties.__webglTexture = _gl.createTexture();
        info.memory.textures++;
      }
    }
    function uploadTexture(textureProperties, texture, slot) {
      let textureType = 3553;
      if (texture.isDataTexture2DArray)
        textureType = 35866;
      if (texture.isDataTexture3D)
        textureType = 32879;
      initTexture(textureProperties, texture);
      state.activeTexture(33984 + slot);
      state.bindTexture(textureType, textureProperties.__webglTexture);
      _gl.pixelStorei(37440, texture.flipY);
      _gl.pixelStorei(37441, texture.premultiplyAlpha);
      _gl.pixelStorei(3317, texture.unpackAlignment);
      const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;
      const image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
      const supportsMips = isPowerOfTwo(image) || isWebGL2, glFormat = utils.convert(texture.format);
      let glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);
      setTextureParameters(textureType, texture, supportsMips);
      let mipmap;
      const mipmaps = texture.mipmaps;
      if (texture.isDepthTexture) {
        glInternalFormat = 6402;
        if (isWebGL2) {
          if (texture.type === FloatType) {
            glInternalFormat = 36012;
          } else if (texture.type === UnsignedIntType) {
            glInternalFormat = 33190;
          } else if (texture.type === UnsignedInt248Type) {
            glInternalFormat = 35056;
          } else {
            glInternalFormat = 33189;
          }
        } else {
          if (texture.type === FloatType) {
            console.error("WebGLRenderer: Floating point depth texture requires WebGL2.");
          }
        }
        if (texture.format === DepthFormat && glInternalFormat === 6402) {
          if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
            console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");
            texture.type = UnsignedShortType;
            glType = utils.convert(texture.type);
          }
        }
        if (texture.format === DepthStencilFormat && glInternalFormat === 6402) {
          glInternalFormat = 34041;
          if (texture.type !== UnsignedInt248Type) {
            console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");
            texture.type = UnsignedInt248Type;
            glType = utils.convert(texture.type);
          }
        }
        state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
      } else if (texture.isDataTexture) {
        if (mipmaps.length > 0 && supportsMips) {
          for (let i = 0, il = mipmaps.length; i < il; i++) {
            mipmap = mipmaps[i];
            state.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
          }
          texture.generateMipmaps = false;
          textureProperties.__maxMipLevel = mipmaps.length - 1;
        } else {
          state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
          textureProperties.__maxMipLevel = 0;
        }
      } else if (texture.isCompressedTexture) {
        for (let i = 0, il = mipmaps.length; i < il; i++) {
          mipmap = mipmaps[i];
          if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
            if (glFormat !== null) {
              state.compressedTexImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
            } else {
              console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
            }
          } else {
            state.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
          }
        }
        textureProperties.__maxMipLevel = mipmaps.length - 1;
      } else if (texture.isDataTexture2DArray) {
        state.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        textureProperties.__maxMipLevel = 0;
      } else if (texture.isDataTexture3D) {
        state.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        textureProperties.__maxMipLevel = 0;
      } else {
        if (mipmaps.length > 0 && supportsMips) {
          for (let i = 0, il = mipmaps.length; i < il; i++) {
            mipmap = mipmaps[i];
            state.texImage2D(3553, i, glInternalFormat, glFormat, glType, mipmap);
          }
          texture.generateMipmaps = false;
          textureProperties.__maxMipLevel = mipmaps.length - 1;
        } else {
          state.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);
          textureProperties.__maxMipLevel = 0;
        }
      }
      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
        generateMipmap(textureType, texture, image.width, image.height);
      }
      textureProperties.__version = texture.version;
      if (texture.onUpdate)
        texture.onUpdate(texture);
    }
    function uploadCubeTexture(textureProperties, texture, slot) {
      if (texture.image.length !== 6)
        return;
      initTexture(textureProperties, texture);
      state.activeTexture(33984 + slot);
      state.bindTexture(34067, textureProperties.__webglTexture);
      _gl.pixelStorei(37440, texture.flipY);
      const isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);
      const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
      const cubeImage = [];
      for (let i = 0; i < 6; i++) {
        if (!isCompressed && !isDataTexture) {
          cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);
        } else {
          cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
        }
      }
      const image = cubeImage[0], supportsMips = isPowerOfTwo(image) || isWebGL2, glFormat = utils.convert(texture.format), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);
      setTextureParameters(34067, texture, supportsMips);
      let mipmaps;
      if (isCompressed) {
        for (let i = 0; i < 6; i++) {
          mipmaps = cubeImage[i].mipmaps;
          for (let j = 0; j < mipmaps.length; j++) {
            const mipmap = mipmaps[j];
            if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
              if (glFormat !== null) {
                state.compressedTexImage2D(34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
              }
            } else {
              state.texImage2D(34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
            }
          }
        }
        textureProperties.__maxMipLevel = mipmaps.length - 1;
      } else {
        mipmaps = texture.mipmaps;
        for (let i = 0; i < 6; i++) {
          if (isDataTexture) {
            state.texImage2D(34069 + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
            for (let j = 0; j < mipmaps.length; j++) {
              const mipmap = mipmaps[j];
              const mipmapImage = mipmap.image[i].image;
              state.texImage2D(34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
            }
          } else {
            state.texImage2D(34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
            for (let j = 0; j < mipmaps.length; j++) {
              const mipmap = mipmaps[j];
              state.texImage2D(34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);
            }
          }
        }
        textureProperties.__maxMipLevel = mipmaps.length;
      }
      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
        generateMipmap(34067, texture, image.width, image.height);
      }
      textureProperties.__version = texture.version;
      if (texture.onUpdate)
        texture.onUpdate(texture);
    }
    function setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {
      const glFormat = utils.convert(renderTarget.texture.format);
      const glType = utils.convert(renderTarget.texture.type);
      const glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);
      state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
      _gl.bindFramebuffer(36160, framebuffer);
      _gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);
      _gl.bindFramebuffer(36160, null);
    }
    function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
      _gl.bindRenderbuffer(36161, renderbuffer);
      if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
        let glInternalFormat = 33189;
        if (isMultisample) {
          const depthTexture = renderTarget.depthTexture;
          if (depthTexture && depthTexture.isDepthTexture) {
            if (depthTexture.type === FloatType) {
              glInternalFormat = 36012;
            } else if (depthTexture.type === UnsignedIntType) {
              glInternalFormat = 33190;
            }
          }
          const samples = getRenderTargetSamples(renderTarget);
          _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
        }
        _gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);
      } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
        if (isMultisample) {
          const samples = getRenderTargetSamples(renderTarget);
          _gl.renderbufferStorageMultisample(36161, samples, 35056, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);
        }
        _gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);
      } else {
        const glFormat = utils.convert(renderTarget.texture.format);
        const glType = utils.convert(renderTarget.texture.type);
        const glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);
        if (isMultisample) {
          const samples = getRenderTargetSamples(renderTarget);
          _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
        }
      }
      _gl.bindRenderbuffer(36161, null);
    }
    function setupDepthTexture(framebuffer, renderTarget) {
      const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
      if (isCube)
        throw new Error("Depth Texture with cube render targets is not supported");
      _gl.bindFramebuffer(36160, framebuffer);
      if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
        throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
      }
      if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
        renderTarget.depthTexture.image.width = renderTarget.width;
        renderTarget.depthTexture.image.height = renderTarget.height;
        renderTarget.depthTexture.needsUpdate = true;
      }
      setTexture2D(renderTarget.depthTexture, 0);
      const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
      if (renderTarget.depthTexture.format === DepthFormat) {
        _gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);
      } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
        _gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);
      } else {
        throw new Error("Unknown depthTexture format");
      }
    }
    function setupDepthRenderbuffer(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      if (renderTarget.depthTexture) {
        if (isCube)
          throw new Error("target.depthTexture not supported in Cube render targets");
        setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
      } else {
        if (isCube) {
          renderTargetProperties.__webglDepthbuffer = [];
          for (let i = 0; i < 6; i++) {
            _gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i]);
            renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
          }
        } else {
          _gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);
          renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
        }
      }
      _gl.bindFramebuffer(36160, null);
    }
    function setupRenderTarget(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      const textureProperties = properties.get(renderTarget.texture);
      renderTarget.addEventListener("dispose", onRenderTargetDispose);
      textureProperties.__webglTexture = _gl.createTexture();
      info.memory.textures++;
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      const isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;
      const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;
      if (isWebGL2 && renderTarget.texture.format === RGBFormat && (renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType)) {
        renderTarget.texture.format = RGBAFormat;
        console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.");
      }
      if (isCube) {
        renderTargetProperties.__webglFramebuffer = [];
        for (let i = 0; i < 6; i++) {
          renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
        }
      } else {
        renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
        if (isMultisample) {
          if (isWebGL2) {
            renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
            renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();
            _gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);
            const glFormat = utils.convert(renderTarget.texture.format);
            const glType = utils.convert(renderTarget.texture.type);
            const glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);
            const samples = getRenderTargetSamples(renderTarget);
            _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            _gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
            _gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);
            _gl.bindRenderbuffer(36161, null);
            if (renderTarget.depthBuffer) {
              renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
              setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
            }
            _gl.bindFramebuffer(36160, null);
          } else {
            console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
          }
        }
      }
      if (isCube) {
        state.bindTexture(34067, textureProperties.__webglTexture);
        setTextureParameters(34067, renderTarget.texture, supportsMips);
        for (let i = 0; i < 6; i++) {
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, 36064, 34069 + i);
        }
        if (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {
          generateMipmap(34067, renderTarget.texture, renderTarget.width, renderTarget.height);
        }
        state.bindTexture(34067, null);
      } else {
        state.bindTexture(3553, textureProperties.__webglTexture);
        setTextureParameters(3553, renderTarget.texture, supportsMips);
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553);
        if (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {
          generateMipmap(3553, renderTarget.texture, renderTarget.width, renderTarget.height);
        }
        state.bindTexture(3553, null);
      }
      if (renderTarget.depthBuffer) {
        setupDepthRenderbuffer(renderTarget);
      }
    }
    function updateRenderTargetMipmap(renderTarget) {
      const texture = renderTarget.texture;
      const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;
      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
        const target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
        const webglTexture = properties.get(texture).__webglTexture;
        state.bindTexture(target, webglTexture);
        generateMipmap(target, texture, renderTarget.width, renderTarget.height);
        state.bindTexture(target, null);
      }
    }
    function updateMultisampleRenderTarget(renderTarget) {
      if (renderTarget.isWebGLMultisampleRenderTarget) {
        if (isWebGL2) {
          const renderTargetProperties = properties.get(renderTarget);
          _gl.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);
          _gl.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);
          const width = renderTarget.width;
          const height = renderTarget.height;
          let mask = 16384;
          if (renderTarget.depthBuffer)
            mask |= 256;
          if (renderTarget.stencilBuffer)
            mask |= 1024;
          _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);
          _gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
        } else {
          console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
        }
      }
    }
    function getRenderTargetSamples(renderTarget) {
      return isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;
    }
    function updateVideoTexture(texture) {
      const frame = info.render.frame;
      if (_videoTextures.get(texture) !== frame) {
        _videoTextures.set(texture, frame);
        texture.update();
      }
    }
    let warnedTexture2D = false;
    let warnedTextureCube = false;
    function safeSetTexture2D(texture, slot) {
      if (texture && texture.isWebGLRenderTarget) {
        if (warnedTexture2D === false) {
          console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.");
          warnedTexture2D = true;
        }
        texture = texture.texture;
      }
      setTexture2D(texture, slot);
    }
    function safeSetTextureCube(texture, slot) {
      if (texture && texture.isWebGLCubeRenderTarget) {
        if (warnedTextureCube === false) {
          console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.");
          warnedTextureCube = true;
        }
        texture = texture.texture;
      }
      setTextureCube(texture, slot);
    }
    this.allocateTextureUnit = allocateTextureUnit;
    this.resetTextureUnits = resetTextureUnits;
    this.setTexture2D = setTexture2D;
    this.setTexture2DArray = setTexture2DArray;
    this.setTexture3D = setTexture3D;
    this.setTextureCube = setTextureCube;
    this.setupRenderTarget = setupRenderTarget;
    this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    this.safeSetTexture2D = safeSetTexture2D;
    this.safeSetTextureCube = safeSetTextureCube;
  }
  function WebGLUtils(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function convert(p) {
      let extension;
      if (p === UnsignedByteType)
        return 5121;
      if (p === UnsignedShort4444Type)
        return 32819;
      if (p === UnsignedShort5551Type)
        return 32820;
      if (p === UnsignedShort565Type)
        return 33635;
      if (p === ByteType)
        return 5120;
      if (p === ShortType)
        return 5122;
      if (p === UnsignedShortType)
        return 5123;
      if (p === IntType)
        return 5124;
      if (p === UnsignedIntType)
        return 5125;
      if (p === FloatType)
        return 5126;
      if (p === HalfFloatType) {
        if (isWebGL2)
          return 5131;
        extension = extensions.get("OES_texture_half_float");
        if (extension !== null) {
          return extension.HALF_FLOAT_OES;
        } else {
          return null;
        }
      }
      if (p === AlphaFormat)
        return 6406;
      if (p === RGBFormat)
        return 6407;
      if (p === RGBAFormat)
        return 6408;
      if (p === LuminanceFormat)
        return 6409;
      if (p === LuminanceAlphaFormat)
        return 6410;
      if (p === DepthFormat)
        return 6402;
      if (p === DepthStencilFormat)
        return 34041;
      if (p === RedFormat)
        return 6403;
      if (p === RedIntegerFormat)
        return 36244;
      if (p === RGFormat)
        return 33319;
      if (p === RGIntegerFormat)
        return 33320;
      if (p === RGBIntegerFormat)
        return 36248;
      if (p === RGBAIntegerFormat)
        return 36249;
      if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
        extension = extensions.get("WEBGL_compressed_texture_s3tc");
        if (extension !== null) {
          if (p === RGB_S3TC_DXT1_Format)
            return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
          if (p === RGBA_S3TC_DXT1_Format)
            return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          if (p === RGBA_S3TC_DXT3_Format)
            return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          if (p === RGBA_S3TC_DXT5_Format)
            return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      }
      if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
        extension = extensions.get("WEBGL_compressed_texture_pvrtc");
        if (extension !== null) {
          if (p === RGB_PVRTC_4BPPV1_Format)
            return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
          if (p === RGB_PVRTC_2BPPV1_Format)
            return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
          if (p === RGBA_PVRTC_4BPPV1_Format)
            return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
          if (p === RGBA_PVRTC_2BPPV1_Format)
            return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        } else {
          return null;
        }
      }
      if (p === RGB_ETC1_Format) {
        extension = extensions.get("WEBGL_compressed_texture_etc1");
        if (extension !== null) {
          return extension.COMPRESSED_RGB_ETC1_WEBGL;
        } else {
          return null;
        }
      }
      if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
        extension = extensions.get("WEBGL_compressed_texture_etc");
        if (extension !== null) {
          if (p === RGB_ETC2_Format)
            return extension.COMPRESSED_RGB8_ETC2;
          if (p === RGBA_ETC2_EAC_Format)
            return extension.COMPRESSED_RGBA8_ETC2_EAC;
        }
      }
      if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {
        extension = extensions.get("WEBGL_compressed_texture_astc");
        if (extension !== null) {
          return p;
        } else {
          return null;
        }
      }
      if (p === RGBA_BPTC_Format) {
        extension = extensions.get("EXT_texture_compression_bptc");
        if (extension !== null) {
          return p;
        } else {
          return null;
        }
      }
      if (p === UnsignedInt248Type) {
        if (isWebGL2)
          return 34042;
        extension = extensions.get("WEBGL_depth_texture");
        if (extension !== null) {
          return extension.UNSIGNED_INT_24_8_WEBGL;
        } else {
          return null;
        }
      }
    }
    return {convert};
  }
  function ArrayCamera(array = []) {
    PerspectiveCamera.call(this);
    this.cameras = array;
  }
  ArrayCamera.prototype = Object.assign(Object.create(PerspectiveCamera.prototype), {
    constructor: ArrayCamera,
    isArrayCamera: true
  });
  function Group() {
    Object3D.call(this);
    this.type = "Group";
  }
  Group.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Group,
    isGroup: true
  });
  function WebXRController() {
    this._targetRay = null;
    this._grip = null;
    this._hand = null;
  }
  Object.assign(WebXRController.prototype, {
    constructor: WebXRController,
    getHandSpace: function() {
      if (this._hand === null) {
        this._hand = new Group();
        this._hand.matrixAutoUpdate = false;
        this._hand.visible = false;
        this._hand.joints = [];
        this._hand.inputState = {pinching: false};
        if (window.XRHand) {
          for (let i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i++) {
            const joint = new Group();
            joint.matrixAutoUpdate = false;
            joint.visible = false;
            this._hand.joints.push(joint);
            this._hand.add(joint);
          }
        }
      }
      return this._hand;
    },
    getTargetRaySpace: function() {
      if (this._targetRay === null) {
        this._targetRay = new Group();
        this._targetRay.matrixAutoUpdate = false;
        this._targetRay.visible = false;
      }
      return this._targetRay;
    },
    getGripSpace: function() {
      if (this._grip === null) {
        this._grip = new Group();
        this._grip.matrixAutoUpdate = false;
        this._grip.visible = false;
      }
      return this._grip;
    },
    dispatchEvent: function(event) {
      if (this._targetRay !== null) {
        this._targetRay.dispatchEvent(event);
      }
      if (this._grip !== null) {
        this._grip.dispatchEvent(event);
      }
      if (this._hand !== null) {
        this._hand.dispatchEvent(event);
      }
      return this;
    },
    disconnect: function(inputSource) {
      this.dispatchEvent({type: "disconnected", data: inputSource});
      if (this._targetRay !== null) {
        this._targetRay.visible = false;
      }
      if (this._grip !== null) {
        this._grip.visible = false;
      }
      if (this._hand !== null) {
        this._hand.visible = false;
      }
      return this;
    },
    update: function(inputSource, frame, referenceSpace) {
      let inputPose = null;
      let gripPose = null;
      let handPose = null;
      const targetRay = this._targetRay;
      const grip = this._grip;
      const hand = this._hand;
      if (inputSource && frame.session.visibilityState !== "visible-blurred") {
        if (hand && inputSource.hand) {
          handPose = true;
          for (let i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i++) {
            if (inputSource.hand[i]) {
              const jointPose = frame.getJointPose(inputSource.hand[i], referenceSpace);
              const joint = hand.joints[i];
              if (jointPose !== null) {
                joint.matrix.fromArray(jointPose.transform.matrix);
                joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
                joint.jointRadius = jointPose.radius;
              }
              joint.visible = jointPose !== null;
              const indexTip = hand.joints[window.XRHand.INDEX_PHALANX_TIP];
              const thumbTip = hand.joints[window.XRHand.THUMB_PHALANX_TIP];
              const distance = indexTip.position.distanceTo(thumbTip.position);
              const distanceToPinch = 0.02;
              const threshold = 5e-3;
              if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
                hand.inputState.pinching = false;
                this.dispatchEvent({
                  type: "pinchend",
                  handedness: inputSource.handedness,
                  target: this
                });
              } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
                hand.inputState.pinching = true;
                this.dispatchEvent({
                  type: "pinchstart",
                  handedness: inputSource.handedness,
                  target: this
                });
              }
            }
          }
        } else {
          if (targetRay !== null) {
            inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
            if (inputPose !== null) {
              targetRay.matrix.fromArray(inputPose.transform.matrix);
              targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
            }
          }
          if (grip !== null && inputSource.gripSpace) {
            gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
            if (gripPose !== null) {
              grip.matrix.fromArray(gripPose.transform.matrix);
              grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
            }
          }
        }
      }
      if (targetRay !== null) {
        targetRay.visible = inputPose !== null;
      }
      if (grip !== null) {
        grip.visible = gripPose !== null;
      }
      if (hand !== null) {
        hand.visible = handPose !== null;
      }
      return this;
    }
  });
  function WebXRManager(renderer3, gl) {
    const scope = this;
    let session = null;
    let framebufferScaleFactor = 1;
    let referenceSpace = null;
    let referenceSpaceType = "local-floor";
    let pose = null;
    const controllers = [];
    const inputSourcesMap = new Map();
    const cameraL = new PerspectiveCamera();
    cameraL.layers.enable(1);
    cameraL.viewport = new Vector4();
    const cameraR = new PerspectiveCamera();
    cameraR.layers.enable(2);
    cameraR.viewport = new Vector4();
    const cameras = [cameraL, cameraR];
    const cameraVR = new ArrayCamera();
    cameraVR.layers.enable(1);
    cameraVR.layers.enable(2);
    let _currentDepthNear = null;
    let _currentDepthFar = null;
    this.enabled = false;
    this.isPresenting = false;
    this.getController = function(index) {
      let controller = controllers[index];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index] = controller;
      }
      return controller.getTargetRaySpace();
    };
    this.getControllerGrip = function(index) {
      let controller = controllers[index];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index] = controller;
      }
      return controller.getGripSpace();
    };
    this.getHand = function(index) {
      let controller = controllers[index];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index] = controller;
      }
      return controller.getHandSpace();
    };
    function onSessionEvent(event) {
      const controller = inputSourcesMap.get(event.inputSource);
      if (controller) {
        controller.dispatchEvent({type: event.type, data: event.inputSource});
      }
    }
    function onSessionEnd() {
      inputSourcesMap.forEach(function(controller, inputSource) {
        controller.disconnect(inputSource);
      });
      inputSourcesMap.clear();
      renderer3.setFramebuffer(null);
      renderer3.setRenderTarget(renderer3.getRenderTarget());
      animation.stop();
      scope.isPresenting = false;
      scope.dispatchEvent({type: "sessionend"});
    }
    function onRequestReferenceSpace(value) {
      referenceSpace = value;
      animation.setContext(session);
      animation.start();
      scope.isPresenting = true;
      scope.dispatchEvent({type: "sessionstart"});
    }
    this.setFramebufferScaleFactor = function(value) {
      framebufferScaleFactor = value;
      if (scope.isPresenting === true) {
        console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
      }
    };
    this.setReferenceSpaceType = function(value) {
      referenceSpaceType = value;
      if (scope.isPresenting === true) {
        console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
      }
    };
    this.getReferenceSpace = function() {
      return referenceSpace;
    };
    this.getSession = function() {
      return session;
    };
    this.setSession = function(value) {
      session = value;
      if (session !== null) {
        session.addEventListener("select", onSessionEvent);
        session.addEventListener("selectstart", onSessionEvent);
        session.addEventListener("selectend", onSessionEvent);
        session.addEventListener("squeeze", onSessionEvent);
        session.addEventListener("squeezestart", onSessionEvent);
        session.addEventListener("squeezeend", onSessionEvent);
        session.addEventListener("end", onSessionEnd);
        const attributes = gl.getContextAttributes();
        if (attributes.xrCompatible !== true) {
          gl.makeXRCompatible();
        }
        const layerInit = {
          antialias: attributes.antialias,
          alpha: attributes.alpha,
          depth: attributes.depth,
          stencil: attributes.stencil,
          framebufferScaleFactor
        };
        const baseLayer = new XRWebGLLayer(session, gl, layerInit);
        session.updateRenderState({baseLayer});
        session.requestReferenceSpace(referenceSpaceType).then(onRequestReferenceSpace);
        session.addEventListener("inputsourceschange", updateInputSources);
      }
    };
    function updateInputSources(event) {
      const inputSources = session.inputSources;
      for (let i = 0; i < controllers.length; i++) {
        inputSourcesMap.set(inputSources[i], controllers[i]);
      }
      for (let i = 0; i < event.removed.length; i++) {
        const inputSource = event.removed[i];
        const controller = inputSourcesMap.get(inputSource);
        if (controller) {
          controller.dispatchEvent({type: "disconnected", data: inputSource});
          inputSourcesMap.delete(inputSource);
        }
      }
      for (let i = 0; i < event.added.length; i++) {
        const inputSource = event.added[i];
        const controller = inputSourcesMap.get(inputSource);
        if (controller) {
          controller.dispatchEvent({type: "connected", data: inputSource});
        }
      }
    }
    const cameraLPos = new Vector3();
    const cameraRPos = new Vector3();
    function setProjectionFromUnion(camera2, cameraL2, cameraR2) {
      cameraLPos.setFromMatrixPosition(cameraL2.matrixWorld);
      cameraRPos.setFromMatrixPosition(cameraR2.matrixWorld);
      const ipd = cameraLPos.distanceTo(cameraRPos);
      const projL = cameraL2.projectionMatrix.elements;
      const projR = cameraR2.projectionMatrix.elements;
      const near = projL[14] / (projL[10] - 1);
      const far = projL[14] / (projL[10] + 1);
      const topFov = (projL[9] + 1) / projL[5];
      const bottomFov = (projL[9] - 1) / projL[5];
      const leftFov = (projL[8] - 1) / projL[0];
      const rightFov = (projR[8] + 1) / projR[0];
      const left = near * leftFov;
      const right = near * rightFov;
      const zOffset = ipd / (-leftFov + rightFov);
      const xOffset = zOffset * -leftFov;
      cameraL2.matrixWorld.decompose(camera2.position, camera2.quaternion, camera2.scale);
      camera2.translateX(xOffset);
      camera2.translateZ(zOffset);
      camera2.matrixWorld.compose(camera2.position, camera2.quaternion, camera2.scale);
      camera2.matrixWorldInverse.copy(camera2.matrixWorld).invert();
      const near2 = near + zOffset;
      const far2 = far + zOffset;
      const left2 = left - xOffset;
      const right2 = right + (ipd - xOffset);
      const top2 = topFov * far / far2 * near2;
      const bottom2 = bottomFov * far / far2 * near2;
      camera2.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
    }
    function updateCamera(camera2, parent) {
      if (parent === null) {
        camera2.matrixWorld.copy(camera2.matrix);
      } else {
        camera2.matrixWorld.multiplyMatrices(parent.matrixWorld, camera2.matrix);
      }
      camera2.matrixWorldInverse.copy(camera2.matrixWorld).invert();
    }
    this.getCamera = function(camera2) {
      cameraVR.near = cameraR.near = cameraL.near = camera2.near;
      cameraVR.far = cameraR.far = cameraL.far = camera2.far;
      if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {
        session.updateRenderState({
          depthNear: cameraVR.near,
          depthFar: cameraVR.far
        });
        _currentDepthNear = cameraVR.near;
        _currentDepthFar = cameraVR.far;
      }
      const parent = camera2.parent;
      const cameras2 = cameraVR.cameras;
      updateCamera(cameraVR, parent);
      for (let i = 0; i < cameras2.length; i++) {
        updateCamera(cameras2[i], parent);
      }
      camera2.matrixWorld.copy(cameraVR.matrixWorld);
      const children = camera2.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].updateMatrixWorld(true);
      }
      if (cameras2.length === 2) {
        setProjectionFromUnion(cameraVR, cameraL, cameraR);
      } else {
        cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);
      }
      return cameraVR;
    };
    let onAnimationFrameCallback = null;
    function onAnimationFrame(time, frame) {
      pose = frame.getViewerPose(referenceSpace);
      if (pose !== null) {
        const views = pose.views;
        const baseLayer = session.renderState.baseLayer;
        renderer3.setFramebuffer(baseLayer.framebuffer);
        let cameraVRNeedsUpdate = false;
        if (views.length !== cameraVR.cameras.length) {
          cameraVR.cameras.length = 0;
          cameraVRNeedsUpdate = true;
        }
        for (let i = 0; i < views.length; i++) {
          const view = views[i];
          const viewport = baseLayer.getViewport(view);
          const camera2 = cameras[i];
          camera2.matrix.fromArray(view.transform.matrix);
          camera2.projectionMatrix.fromArray(view.projectionMatrix);
          camera2.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
          if (i === 0) {
            cameraVR.matrix.copy(camera2.matrix);
          }
          if (cameraVRNeedsUpdate === true) {
            cameraVR.cameras.push(camera2);
          }
        }
      }
      const inputSources = session.inputSources;
      for (let i = 0; i < controllers.length; i++) {
        const controller = controllers[i];
        const inputSource = inputSources[i];
        controller.update(inputSource, frame, referenceSpace);
      }
      if (onAnimationFrameCallback)
        onAnimationFrameCallback(time, frame);
    }
    const animation = new WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);
    this.setAnimationLoop = function(callback) {
      onAnimationFrameCallback = callback;
    };
    this.dispose = function() {
    };
  }
  Object.assign(WebXRManager.prototype, EventDispatcher.prototype);
  function WebGLMaterials(properties) {
    function refreshFogUniforms(uniforms, fog) {
      uniforms.fogColor.value.copy(fog.color);
      if (fog.isFog) {
        uniforms.fogNear.value = fog.near;
        uniforms.fogFar.value = fog.far;
      } else if (fog.isFogExp2) {
        uniforms.fogDensity.value = fog.density;
      }
    }
    function refreshMaterialUniforms(uniforms, material, pixelRatio, height) {
      if (material.isMeshBasicMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshLambertMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsLambert(uniforms, material);
      } else if (material.isMeshToonMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsToon(uniforms, material);
      } else if (material.isMeshPhongMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsPhong(uniforms, material);
      } else if (material.isMeshStandardMaterial) {
        refreshUniformsCommon(uniforms, material);
        if (material.isMeshPhysicalMaterial) {
          refreshUniformsPhysical(uniforms, material);
        } else {
          refreshUniformsStandard(uniforms, material);
        }
      } else if (material.isMeshMatcapMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsMatcap(uniforms, material);
      } else if (material.isMeshDepthMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsDepth(uniforms, material);
      } else if (material.isMeshDistanceMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsDistance(uniforms, material);
      } else if (material.isMeshNormalMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsNormal(uniforms, material);
      } else if (material.isLineBasicMaterial) {
        refreshUniformsLine(uniforms, material);
        if (material.isLineDashedMaterial) {
          refreshUniformsDash(uniforms, material);
        }
      } else if (material.isPointsMaterial) {
        refreshUniformsPoints(uniforms, material, pixelRatio, height);
      } else if (material.isSpriteMaterial) {
        refreshUniformsSprites(uniforms, material);
      } else if (material.isShadowMaterial) {
        uniforms.color.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
      } else if (material.isShaderMaterial) {
        material.uniformsNeedUpdate = false;
      }
    }
    function refreshUniformsCommon(uniforms, material) {
      uniforms.opacity.value = material.opacity;
      if (material.color) {
        uniforms.diffuse.value.copy(material.color);
      }
      if (material.emissive) {
        uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
      }
      if (material.map) {
        uniforms.map.value = material.map;
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
      }
      if (material.specularMap) {
        uniforms.specularMap.value = material.specularMap;
      }
      const envMap = properties.get(material).envMap;
      if (envMap) {
        uniforms.envMap.value = envMap;
        uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;
        uniforms.reflectivity.value = material.reflectivity;
        uniforms.refractionRatio.value = material.refractionRatio;
        const maxMipLevel = properties.get(envMap).__maxMipLevel;
        if (maxMipLevel !== void 0) {
          uniforms.maxMipLevel.value = maxMipLevel;
        }
      }
      if (material.lightMap) {
        uniforms.lightMap.value = material.lightMap;
        uniforms.lightMapIntensity.value = material.lightMapIntensity;
      }
      if (material.aoMap) {
        uniforms.aoMap.value = material.aoMap;
        uniforms.aoMapIntensity.value = material.aoMapIntensity;
      }
      let uvScaleMap;
      if (material.map) {
        uvScaleMap = material.map;
      } else if (material.specularMap) {
        uvScaleMap = material.specularMap;
      } else if (material.displacementMap) {
        uvScaleMap = material.displacementMap;
      } else if (material.normalMap) {
        uvScaleMap = material.normalMap;
      } else if (material.bumpMap) {
        uvScaleMap = material.bumpMap;
      } else if (material.roughnessMap) {
        uvScaleMap = material.roughnessMap;
      } else if (material.metalnessMap) {
        uvScaleMap = material.metalnessMap;
      } else if (material.alphaMap) {
        uvScaleMap = material.alphaMap;
      } else if (material.emissiveMap) {
        uvScaleMap = material.emissiveMap;
      } else if (material.clearcoatMap) {
        uvScaleMap = material.clearcoatMap;
      } else if (material.clearcoatNormalMap) {
        uvScaleMap = material.clearcoatNormalMap;
      } else if (material.clearcoatRoughnessMap) {
        uvScaleMap = material.clearcoatRoughnessMap;
      }
      if (uvScaleMap !== void 0) {
        if (uvScaleMap.isWebGLRenderTarget) {
          uvScaleMap = uvScaleMap.texture;
        }
        if (uvScaleMap.matrixAutoUpdate === true) {
          uvScaleMap.updateMatrix();
        }
        uniforms.uvTransform.value.copy(uvScaleMap.matrix);
      }
      let uv2ScaleMap;
      if (material.aoMap) {
        uv2ScaleMap = material.aoMap;
      } else if (material.lightMap) {
        uv2ScaleMap = material.lightMap;
      }
      if (uv2ScaleMap !== void 0) {
        if (uv2ScaleMap.isWebGLRenderTarget) {
          uv2ScaleMap = uv2ScaleMap.texture;
        }
        if (uv2ScaleMap.matrixAutoUpdate === true) {
          uv2ScaleMap.updateMatrix();
        }
        uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);
      }
    }
    function refreshUniformsLine(uniforms, material) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
    }
    function refreshUniformsDash(uniforms, material) {
      uniforms.dashSize.value = material.dashSize;
      uniforms.totalSize.value = material.dashSize + material.gapSize;
      uniforms.scale.value = material.scale;
    }
    function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      uniforms.size.value = material.size * pixelRatio;
      uniforms.scale.value = height * 0.5;
      if (material.map) {
        uniforms.map.value = material.map;
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
      }
      let uvScaleMap;
      if (material.map) {
        uvScaleMap = material.map;
      } else if (material.alphaMap) {
        uvScaleMap = material.alphaMap;
      }
      if (uvScaleMap !== void 0) {
        if (uvScaleMap.matrixAutoUpdate === true) {
          uvScaleMap.updateMatrix();
        }
        uniforms.uvTransform.value.copy(uvScaleMap.matrix);
      }
    }
    function refreshUniformsSprites(uniforms, material) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      uniforms.rotation.value = material.rotation;
      if (material.map) {
        uniforms.map.value = material.map;
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
      }
      let uvScaleMap;
      if (material.map) {
        uvScaleMap = material.map;
      } else if (material.alphaMap) {
        uvScaleMap = material.alphaMap;
      }
      if (uvScaleMap !== void 0) {
        if (uvScaleMap.matrixAutoUpdate === true) {
          uvScaleMap.updateMatrix();
        }
        uniforms.uvTransform.value.copy(uvScaleMap.matrix);
      }
    }
    function refreshUniformsLambert(uniforms, material) {
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
      }
    }
    function refreshUniformsPhong(uniforms, material) {
      uniforms.specular.value.copy(material.specular);
      uniforms.shininess.value = Math.max(material.shininess, 1e-4);
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    function refreshUniformsToon(uniforms, material) {
      if (material.gradientMap) {
        uniforms.gradientMap.value = material.gradientMap;
      }
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    function refreshUniformsStandard(uniforms, material) {
      uniforms.roughness.value = material.roughness;
      uniforms.metalness.value = material.metalness;
      if (material.roughnessMap) {
        uniforms.roughnessMap.value = material.roughnessMap;
      }
      if (material.metalnessMap) {
        uniforms.metalnessMap.value = material.metalnessMap;
      }
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
      const envMap = properties.get(material).envMap;
      if (envMap) {
        uniforms.envMapIntensity.value = material.envMapIntensity;
      }
    }
    function refreshUniformsPhysical(uniforms, material) {
      refreshUniformsStandard(uniforms, material);
      uniforms.reflectivity.value = material.reflectivity;
      uniforms.clearcoat.value = material.clearcoat;
      uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
      if (material.sheen)
        uniforms.sheen.value.copy(material.sheen);
      if (material.clearcoatMap) {
        uniforms.clearcoatMap.value = material.clearcoatMap;
      }
      if (material.clearcoatRoughnessMap) {
        uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
      }
      if (material.clearcoatNormalMap) {
        uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
        uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
        if (material.side === BackSide) {
          uniforms.clearcoatNormalScale.value.negate();
        }
      }
      uniforms.transmission.value = material.transmission;
      if (material.transmissionMap) {
        uniforms.transmissionMap.value = material.transmissionMap;
      }
    }
    function refreshUniformsMatcap(uniforms, material) {
      if (material.matcap) {
        uniforms.matcap.value = material.matcap;
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    function refreshUniformsDepth(uniforms, material) {
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    function refreshUniformsDistance(uniforms, material) {
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
      uniforms.referencePosition.value.copy(material.referencePosition);
      uniforms.nearDistance.value = material.nearDistance;
      uniforms.farDistance.value = material.farDistance;
    }
    function refreshUniformsNormal(uniforms, material) {
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide)
          uniforms.bumpScale.value *= -1;
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide)
          uniforms.normalScale.value.negate();
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
    }
    return {
      refreshFogUniforms,
      refreshMaterialUniforms
    };
  }
  function createCanvasElement() {
    const canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
    canvas.style.display = "block";
    return canvas;
  }
  function WebGLRenderer(parameters) {
    parameters = parameters || {};
    const _canvas2 = parameters.canvas !== void 0 ? parameters.canvas : createCanvasElement(), _context2 = parameters.context !== void 0 ? parameters.context : null, _alpha = parameters.alpha !== void 0 ? parameters.alpha : false, _depth = parameters.depth !== void 0 ? parameters.depth : true, _stencil = parameters.stencil !== void 0 ? parameters.stencil : true, _antialias = parameters.antialias !== void 0 ? parameters.antialias : false, _premultipliedAlpha = parameters.premultipliedAlpha !== void 0 ? parameters.premultipliedAlpha : true, _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== void 0 ? parameters.preserveDrawingBuffer : false, _powerPreference = parameters.powerPreference !== void 0 ? parameters.powerPreference : "default", _failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== void 0 ? parameters.failIfMajorPerformanceCaveat : false;
    let currentRenderList = null;
    let currentRenderState = null;
    this.domElement = _canvas2;
    this.debug = {
      checkShaderErrors: true
    };
    this.autoClear = true;
    this.autoClearColor = true;
    this.autoClearDepth = true;
    this.autoClearStencil = true;
    this.sortObjects = true;
    this.clippingPlanes = [];
    this.localClippingEnabled = false;
    this.gammaFactor = 2;
    this.outputEncoding = LinearEncoding;
    this.physicallyCorrectLights = false;
    this.toneMapping = NoToneMapping;
    this.toneMappingExposure = 1;
    this.maxMorphTargets = 8;
    this.maxMorphNormals = 4;
    const _this = this;
    let _isContextLost = false;
    let _framebuffer = null;
    let _currentActiveCubeFace = 0;
    let _currentActiveMipmapLevel = 0;
    let _currentRenderTarget = null;
    let _currentFramebuffer = null;
    let _currentMaterialId = -1;
    let _currentCamera = null;
    let _currentArrayCamera = null;
    const _currentViewport = new Vector4();
    const _currentScissor = new Vector4();
    let _currentScissorTest = null;
    let _width = _canvas2.width;
    let _height = _canvas2.height;
    let _pixelRatio = 1;
    let _opaqueSort = null;
    let _transparentSort = null;
    const _viewport = new Vector4(0, 0, _width, _height);
    const _scissor = new Vector4(0, 0, _width, _height);
    let _scissorTest = false;
    const _frustum = new Frustum();
    let _clippingEnabled = false;
    let _localClippingEnabled = false;
    const _projScreenMatrix = new Matrix4();
    const _vector3 = new Vector3();
    const _emptyScene = {background: null, fog: null, environment: null, overrideMaterial: null, isScene: true};
    function getTargetPixelRatio() {
      return _currentRenderTarget === null ? _pixelRatio : 1;
    }
    let _gl = _context2;
    function getContext(contextNames, contextAttributes) {
      for (let i = 0; i < contextNames.length; i++) {
        const contextName = contextNames[i];
        const context = _canvas2.getContext(contextName, contextAttributes);
        if (context !== null)
          return context;
      }
      return null;
    }
    try {
      const contextAttributes = {
        alpha: _alpha,
        depth: _depth,
        stencil: _stencil,
        antialias: _antialias,
        premultipliedAlpha: _premultipliedAlpha,
        preserveDrawingBuffer: _preserveDrawingBuffer,
        powerPreference: _powerPreference,
        failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
      };
      _canvas2.addEventListener("webglcontextlost", onContextLost, false);
      _canvas2.addEventListener("webglcontextrestored", onContextRestore, false);
      if (_gl === null) {
        const contextNames = ["webgl2", "webgl", "experimental-webgl"];
        if (_this.isWebGL1Renderer === true) {
          contextNames.shift();
        }
        _gl = getContext(contextNames, contextAttributes);
        if (_gl === null) {
          if (getContext(contextNames)) {
            throw new Error("Error creating WebGL context with your selected attributes.");
          } else {
            throw new Error("Error creating WebGL context.");
          }
        }
      }
      if (_gl.getShaderPrecisionFormat === void 0) {
        _gl.getShaderPrecisionFormat = function() {
          return {rangeMin: 1, rangeMax: 1, precision: 1};
        };
      }
    } catch (error) {
      console.error("THREE.WebGLRenderer: " + error.message);
      throw error;
    }
    let extensions, capabilities, state, info;
    let properties, textures, cubemaps, attributes, geometries, objects;
    let programCache, materials, renderLists, renderStates, clipping;
    let background, morphtargets, bufferRenderer, indexedBufferRenderer;
    let utils, bindingStates;
    function initGLContext() {
      extensions = new WebGLExtensions(_gl);
      capabilities = new WebGLCapabilities(_gl, extensions, parameters);
      if (capabilities.isWebGL2 === false) {
        extensions.get("WEBGL_depth_texture");
        extensions.get("OES_texture_float");
        extensions.get("OES_texture_half_float");
        extensions.get("OES_texture_half_float_linear");
        extensions.get("OES_standard_derivatives");
        extensions.get("OES_element_index_uint");
        extensions.get("OES_vertex_array_object");
        extensions.get("ANGLE_instanced_arrays");
      }
      extensions.get("OES_texture_float_linear");
      utils = new WebGLUtils(_gl, extensions, capabilities);
      state = new WebGLState(_gl, extensions, capabilities);
      state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
      state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
      info = new WebGLInfo(_gl);
      properties = new WebGLProperties();
      textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
      cubemaps = new WebGLCubeMaps(_this);
      attributes = new WebGLAttributes(_gl, capabilities);
      bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);
      geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
      objects = new WebGLObjects(_gl, geometries, attributes, info);
      morphtargets = new WebGLMorphtargets(_gl);
      clipping = new WebGLClipping(properties);
      programCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);
      materials = new WebGLMaterials(properties);
      renderLists = new WebGLRenderLists(properties);
      renderStates = new WebGLRenderStates(extensions, capabilities);
      background = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);
      bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);
      indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
      info.programs = programCache.programs;
      _this.capabilities = capabilities;
      _this.extensions = extensions;
      _this.properties = properties;
      _this.renderLists = renderLists;
      _this.state = state;
      _this.info = info;
    }
    initGLContext();
    const xr = new WebXRManager(_this, _gl);
    this.xr = xr;
    const shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);
    this.shadowMap = shadowMap;
    this.getContext = function() {
      return _gl;
    };
    this.getContextAttributes = function() {
      return _gl.getContextAttributes();
    };
    this.forceContextLoss = function() {
      const extension = extensions.get("WEBGL_lose_context");
      if (extension)
        extension.loseContext();
    };
    this.forceContextRestore = function() {
      const extension = extensions.get("WEBGL_lose_context");
      if (extension)
        extension.restoreContext();
    };
    this.getPixelRatio = function() {
      return _pixelRatio;
    };
    this.setPixelRatio = function(value) {
      if (value === void 0)
        return;
      _pixelRatio = value;
      this.setSize(_width, _height, false);
    };
    this.getSize = function(target) {
      if (target === void 0) {
        console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument");
        target = new Vector2();
      }
      return target.set(_width, _height);
    };
    this.setSize = function(width, height, updateStyle) {
      if (xr.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      _width = width;
      _height = height;
      _canvas2.width = Math.floor(width * _pixelRatio);
      _canvas2.height = Math.floor(height * _pixelRatio);
      if (updateStyle !== false) {
        _canvas2.style.width = width + "px";
        _canvas2.style.height = height + "px";
      }
      this.setViewport(0, 0, width, height);
    };
    this.getDrawingBufferSize = function(target) {
      if (target === void 0) {
        console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument");
        target = new Vector2();
      }
      return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
    };
    this.setDrawingBufferSize = function(width, height, pixelRatio) {
      _width = width;
      _height = height;
      _pixelRatio = pixelRatio;
      _canvas2.width = Math.floor(width * pixelRatio);
      _canvas2.height = Math.floor(height * pixelRatio);
      this.setViewport(0, 0, width, height);
    };
    this.getCurrentViewport = function(target) {
      if (target === void 0) {
        console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument");
        target = new Vector4();
      }
      return target.copy(_currentViewport);
    };
    this.getViewport = function(target) {
      return target.copy(_viewport);
    };
    this.setViewport = function(x, y, width, height) {
      if (x.isVector4) {
        _viewport.set(x.x, x.y, x.z, x.w);
      } else {
        _viewport.set(x, y, width, height);
      }
      state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
    };
    this.getScissor = function(target) {
      return target.copy(_scissor);
    };
    this.setScissor = function(x, y, width, height) {
      if (x.isVector4) {
        _scissor.set(x.x, x.y, x.z, x.w);
      } else {
        _scissor.set(x, y, width, height);
      }
      state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
    };
    this.getScissorTest = function() {
      return _scissorTest;
    };
    this.setScissorTest = function(boolean) {
      state.setScissorTest(_scissorTest = boolean);
    };
    this.setOpaqueSort = function(method) {
      _opaqueSort = method;
    };
    this.setTransparentSort = function(method) {
      _transparentSort = method;
    };
    this.getClearColor = function() {
      return background.getClearColor();
    };
    this.setClearColor = function() {
      background.setClearColor.apply(background, arguments);
    };
    this.getClearAlpha = function() {
      return background.getClearAlpha();
    };
    this.setClearAlpha = function() {
      background.setClearAlpha.apply(background, arguments);
    };
    this.clear = function(color, depth, stencil) {
      let bits = 0;
      if (color === void 0 || color)
        bits |= 16384;
      if (depth === void 0 || depth)
        bits |= 256;
      if (stencil === void 0 || stencil)
        bits |= 1024;
      _gl.clear(bits);
    };
    this.clearColor = function() {
      this.clear(true, false, false);
    };
    this.clearDepth = function() {
      this.clear(false, true, false);
    };
    this.clearStencil = function() {
      this.clear(false, false, true);
    };
    this.dispose = function() {
      _canvas2.removeEventListener("webglcontextlost", onContextLost, false);
      _canvas2.removeEventListener("webglcontextrestored", onContextRestore, false);
      renderLists.dispose();
      renderStates.dispose();
      properties.dispose();
      cubemaps.dispose();
      objects.dispose();
      bindingStates.dispose();
      xr.dispose();
      animation.stop();
    };
    function onContextLost(event) {
      event.preventDefault();
      console.log("THREE.WebGLRenderer: Context Lost.");
      _isContextLost = true;
    }
    function onContextRestore() {
      console.log("THREE.WebGLRenderer: Context Restored.");
      _isContextLost = false;
      initGLContext();
    }
    function onMaterialDispose(event) {
      const material = event.target;
      material.removeEventListener("dispose", onMaterialDispose);
      deallocateMaterial(material);
    }
    function deallocateMaterial(material) {
      releaseMaterialProgramReference(material);
      properties.remove(material);
    }
    function releaseMaterialProgramReference(material) {
      const programInfo = properties.get(material).program;
      if (programInfo !== void 0) {
        programCache.releaseProgram(programInfo);
      }
    }
    function renderObjectImmediate(object, program) {
      object.render(function(object2) {
        _this.renderBufferImmediate(object2, program);
      });
    }
    this.renderBufferImmediate = function(object, program) {
      bindingStates.initAttributes();
      const buffers = properties.get(object);
      if (object.hasPositions && !buffers.position)
        buffers.position = _gl.createBuffer();
      if (object.hasNormals && !buffers.normal)
        buffers.normal = _gl.createBuffer();
      if (object.hasUvs && !buffers.uv)
        buffers.uv = _gl.createBuffer();
      if (object.hasColors && !buffers.color)
        buffers.color = _gl.createBuffer();
      const programAttributes = program.getAttributes();
      if (object.hasPositions) {
        _gl.bindBuffer(34962, buffers.position);
        _gl.bufferData(34962, object.positionArray, 35048);
        bindingStates.enableAttribute(programAttributes.position);
        _gl.vertexAttribPointer(programAttributes.position, 3, 5126, false, 0, 0);
      }
      if (object.hasNormals) {
        _gl.bindBuffer(34962, buffers.normal);
        _gl.bufferData(34962, object.normalArray, 35048);
        bindingStates.enableAttribute(programAttributes.normal);
        _gl.vertexAttribPointer(programAttributes.normal, 3, 5126, false, 0, 0);
      }
      if (object.hasUvs) {
        _gl.bindBuffer(34962, buffers.uv);
        _gl.bufferData(34962, object.uvArray, 35048);
        bindingStates.enableAttribute(programAttributes.uv);
        _gl.vertexAttribPointer(programAttributes.uv, 2, 5126, false, 0, 0);
      }
      if (object.hasColors) {
        _gl.bindBuffer(34962, buffers.color);
        _gl.bufferData(34962, object.colorArray, 35048);
        bindingStates.enableAttribute(programAttributes.color);
        _gl.vertexAttribPointer(programAttributes.color, 3, 5126, false, 0, 0);
      }
      bindingStates.disableUnusedAttributes();
      _gl.drawArrays(4, 0, object.count);
      object.count = 0;
    };
    this.renderBufferDirect = function(camera2, scene2, geometry, material, object, group2) {
      if (scene2 === null)
        scene2 = _emptyScene;
      const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
      const program = setProgram(camera2, scene2, material, object);
      state.setMaterial(material, frontFaceCW);
      let index = geometry.index;
      const position = geometry.attributes.position;
      if (index === null) {
        if (position === void 0 || position.count === 0)
          return;
      } else if (index.count === 0) {
        return;
      }
      let rangeFactor = 1;
      if (material.wireframe === true) {
        index = geometries.getWireframeAttribute(geometry);
        rangeFactor = 2;
      }
      if (material.morphTargets || material.morphNormals) {
        morphtargets.update(object, geometry, material, program);
      }
      bindingStates.setup(object, material, program, geometry, index);
      let attribute;
      let renderer3 = bufferRenderer;
      if (index !== null) {
        attribute = attributes.get(index);
        renderer3 = indexedBufferRenderer;
        renderer3.setIndex(attribute);
      }
      const dataCount = index !== null ? index.count : position.count;
      const rangeStart = geometry.drawRange.start * rangeFactor;
      const rangeCount = geometry.drawRange.count * rangeFactor;
      const groupStart = group2 !== null ? group2.start * rangeFactor : 0;
      const groupCount = group2 !== null ? group2.count * rangeFactor : Infinity;
      const drawStart = Math.max(rangeStart, groupStart);
      const drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;
      const drawCount = Math.max(0, drawEnd - drawStart + 1);
      if (drawCount === 0)
        return;
      if (object.isMesh) {
        if (material.wireframe === true) {
          state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
          renderer3.setMode(1);
        } else {
          renderer3.setMode(4);
        }
      } else if (object.isLine) {
        let lineWidth = material.linewidth;
        if (lineWidth === void 0)
          lineWidth = 1;
        state.setLineWidth(lineWidth * getTargetPixelRatio());
        if (object.isLineSegments) {
          renderer3.setMode(1);
        } else if (object.isLineLoop) {
          renderer3.setMode(2);
        } else {
          renderer3.setMode(3);
        }
      } else if (object.isPoints) {
        renderer3.setMode(0);
      } else if (object.isSprite) {
        renderer3.setMode(4);
      }
      if (object.isInstancedMesh) {
        renderer3.renderInstances(drawStart, drawCount, object.count);
      } else if (geometry.isInstancedBufferGeometry) {
        const instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);
        renderer3.renderInstances(drawStart, drawCount, instanceCount);
      } else {
        renderer3.render(drawStart, drawCount);
      }
    };
    this.compile = function(scene2, camera2) {
      currentRenderState = renderStates.get(scene2, camera2);
      currentRenderState.init();
      scene2.traverseVisible(function(object) {
        if (object.isLight && object.layers.test(camera2.layers)) {
          currentRenderState.pushLight(object);
          if (object.castShadow) {
            currentRenderState.pushShadow(object);
          }
        }
      });
      currentRenderState.setupLights(camera2);
      const compiled = new WeakMap();
      scene2.traverse(function(object) {
        const material = object.material;
        if (material) {
          if (Array.isArray(material)) {
            for (let i = 0; i < material.length; i++) {
              const material2 = material[i];
              if (compiled.has(material2) === false) {
                initMaterial(material2, scene2, object);
                compiled.set(material2);
              }
            }
          } else if (compiled.has(material) === false) {
            initMaterial(material, scene2, object);
            compiled.set(material);
          }
        }
      });
    };
    let onAnimationFrameCallback = null;
    function onAnimationFrame(time) {
      if (xr.isPresenting)
        return;
      if (onAnimationFrameCallback)
        onAnimationFrameCallback(time);
    }
    const animation = new WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);
    if (typeof window !== "undefined")
      animation.setContext(window);
    this.setAnimationLoop = function(callback) {
      onAnimationFrameCallback = callback;
      xr.setAnimationLoop(callback);
      callback === null ? animation.stop() : animation.start();
    };
    this.render = function(scene2, camera2) {
      let renderTarget, forceClear;
      if (arguments[2] !== void 0) {
        console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.");
        renderTarget = arguments[2];
      }
      if (arguments[3] !== void 0) {
        console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.");
        forceClear = arguments[3];
      }
      if (camera2 !== void 0 && camera2.isCamera !== true) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (_isContextLost === true)
        return;
      bindingStates.resetDefaultState();
      _currentMaterialId = -1;
      _currentCamera = null;
      if (scene2.autoUpdate === true)
        scene2.updateMatrixWorld();
      if (camera2.parent === null)
        camera2.updateMatrixWorld();
      if (xr.enabled === true && xr.isPresenting === true) {
        camera2 = xr.getCamera(camera2);
      }
      if (scene2.isScene === true)
        scene2.onBeforeRender(_this, scene2, camera2, renderTarget || _currentRenderTarget);
      currentRenderState = renderStates.get(scene2, camera2);
      currentRenderState.init();
      _projScreenMatrix.multiplyMatrices(camera2.projectionMatrix, camera2.matrixWorldInverse);
      _frustum.setFromProjectionMatrix(_projScreenMatrix);
      _localClippingEnabled = this.localClippingEnabled;
      _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera2);
      currentRenderList = renderLists.get(scene2, camera2);
      currentRenderList.init();
      projectObject(scene2, camera2, 0, _this.sortObjects);
      currentRenderList.finish();
      if (_this.sortObjects === true) {
        currentRenderList.sort(_opaqueSort, _transparentSort);
      }
      if (_clippingEnabled === true)
        clipping.beginShadows();
      const shadowsArray = currentRenderState.state.shadowsArray;
      shadowMap.render(shadowsArray, scene2, camera2);
      currentRenderState.setupLights(camera2);
      if (_clippingEnabled === true)
        clipping.endShadows();
      if (this.info.autoReset === true)
        this.info.reset();
      if (renderTarget !== void 0) {
        this.setRenderTarget(renderTarget);
      }
      background.render(currentRenderList, scene2, camera2, forceClear);
      const opaqueObjects = currentRenderList.opaque;
      const transparentObjects = currentRenderList.transparent;
      if (opaqueObjects.length > 0)
        renderObjects(opaqueObjects, scene2, camera2);
      if (transparentObjects.length > 0)
        renderObjects(transparentObjects, scene2, camera2);
      if (scene2.isScene === true)
        scene2.onAfterRender(_this, scene2, camera2);
      if (_currentRenderTarget !== null) {
        textures.updateRenderTargetMipmap(_currentRenderTarget);
        textures.updateMultisampleRenderTarget(_currentRenderTarget);
      }
      state.buffers.depth.setTest(true);
      state.buffers.depth.setMask(true);
      state.buffers.color.setMask(true);
      state.setPolygonOffset(false);
      currentRenderList = null;
      currentRenderState = null;
    };
    function projectObject(object, camera2, groupOrder, sortObjects) {
      if (object.visible === false)
        return;
      const visible = object.layers.test(camera2.layers);
      if (visible) {
        if (object.isGroup) {
          groupOrder = object.renderOrder;
        } else if (object.isLOD) {
          if (object.autoUpdate === true)
            object.update(camera2);
        } else if (object.isLight) {
          currentRenderState.pushLight(object);
          if (object.castShadow) {
            currentRenderState.pushShadow(object);
          }
        } else if (object.isSprite) {
          if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
            if (sortObjects) {
              _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
            }
            const geometry = objects.update(object);
            const material = object.material;
            if (material.visible) {
              currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
            }
          }
        } else if (object.isImmediateRenderObject) {
          if (sortObjects) {
            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
          }
          currentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);
        } else if (object.isMesh || object.isLine || object.isPoints) {
          if (object.isSkinnedMesh) {
            if (object.skeleton.frame !== info.render.frame) {
              object.skeleton.update();
              object.skeleton.frame = info.render.frame;
            }
          }
          if (!object.frustumCulled || _frustum.intersectsObject(object)) {
            if (sortObjects) {
              _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
            }
            const geometry = objects.update(object);
            const material = object.material;
            if (Array.isArray(material)) {
              const groups = geometry.groups;
              for (let i = 0, l = groups.length; i < l; i++) {
                const group2 = groups[i];
                const groupMaterial = material[group2.materialIndex];
                if (groupMaterial && groupMaterial.visible) {
                  currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group2);
                }
              }
            } else if (material.visible) {
              currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
            }
          }
        }
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        projectObject(children[i], camera2, groupOrder, sortObjects);
      }
    }
    function renderObjects(renderList, scene2, camera2) {
      const overrideMaterial = scene2.isScene === true ? scene2.overrideMaterial : null;
      for (let i = 0, l = renderList.length; i < l; i++) {
        const renderItem = renderList[i];
        const object = renderItem.object;
        const geometry = renderItem.geometry;
        const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
        const group2 = renderItem.group;
        if (camera2.isArrayCamera) {
          _currentArrayCamera = camera2;
          const cameras = camera2.cameras;
          for (let j = 0, jl = cameras.length; j < jl; j++) {
            const camera22 = cameras[j];
            if (object.layers.test(camera22.layers)) {
              state.viewport(_currentViewport.copy(camera22.viewport));
              currentRenderState.setupLights(camera22);
              renderObject(object, scene2, camera22, geometry, material, group2);
            }
          }
        } else {
          _currentArrayCamera = null;
          renderObject(object, scene2, camera2, geometry, material, group2);
        }
      }
    }
    function renderObject(object, scene2, camera2, geometry, material, group2) {
      object.onBeforeRender(_this, scene2, camera2, geometry, material, group2);
      currentRenderState = renderStates.get(scene2, _currentArrayCamera || camera2);
      object.modelViewMatrix.multiplyMatrices(camera2.matrixWorldInverse, object.matrixWorld);
      object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
      if (object.isImmediateRenderObject) {
        const program = setProgram(camera2, scene2, material, object);
        state.setMaterial(material);
        bindingStates.reset();
        renderObjectImmediate(object, program);
      } else {
        _this.renderBufferDirect(camera2, scene2, geometry, material, object, group2);
      }
      object.onAfterRender(_this, scene2, camera2, geometry, material, group2);
      currentRenderState = renderStates.get(scene2, _currentArrayCamera || camera2);
    }
    function initMaterial(material, scene2, object) {
      if (scene2.isScene !== true)
        scene2 = _emptyScene;
      const materialProperties = properties.get(material);
      const lights = currentRenderState.state.lights;
      const shadowsArray = currentRenderState.state.shadowsArray;
      const lightsStateVersion = lights.state.version;
      const parameters2 = programCache.getParameters(material, lights.state, shadowsArray, scene2, object);
      const programCacheKey = programCache.getProgramCacheKey(parameters2);
      let program = materialProperties.program;
      let programChange = true;
      if (program === void 0) {
        material.addEventListener("dispose", onMaterialDispose);
      } else if (program.cacheKey !== programCacheKey) {
        releaseMaterialProgramReference(material);
      } else if (materialProperties.lightsStateVersion !== lightsStateVersion) {
        programChange = false;
      } else if (parameters2.shaderID !== void 0) {
        const environment = material.isMeshStandardMaterial ? scene2.environment : null;
        materialProperties.envMap = cubemaps.get(material.envMap || environment);
        return;
      } else {
        programChange = false;
      }
      if (programChange) {
        parameters2.uniforms = programCache.getUniforms(material);
        material.onBeforeCompile(parameters2, _this);
        program = programCache.acquireProgram(parameters2, programCacheKey);
        materialProperties.program = program;
        materialProperties.uniforms = parameters2.uniforms;
        materialProperties.outputEncoding = parameters2.outputEncoding;
      }
      const uniforms = materialProperties.uniforms;
      if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
        materialProperties.numClippingPlanes = clipping.numPlanes;
        materialProperties.numIntersection = clipping.numIntersection;
        uniforms.clippingPlanes = clipping.uniform;
      }
      materialProperties.environment = material.isMeshStandardMaterial ? scene2.environment : null;
      materialProperties.fog = scene2.fog;
      materialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);
      materialProperties.needsLights = materialNeedsLights(material);
      materialProperties.lightsStateVersion = lightsStateVersion;
      if (materialProperties.needsLights) {
        uniforms.ambientLightColor.value = lights.state.ambient;
        uniforms.lightProbe.value = lights.state.probe;
        uniforms.directionalLights.value = lights.state.directional;
        uniforms.directionalLightShadows.value = lights.state.directionalShadow;
        uniforms.spotLights.value = lights.state.spot;
        uniforms.spotLightShadows.value = lights.state.spotShadow;
        uniforms.rectAreaLights.value = lights.state.rectArea;
        uniforms.ltc_1.value = lights.state.rectAreaLTC1;
        uniforms.ltc_2.value = lights.state.rectAreaLTC2;
        uniforms.pointLights.value = lights.state.point;
        uniforms.pointLightShadows.value = lights.state.pointShadow;
        uniforms.hemisphereLights.value = lights.state.hemi;
        uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
        uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
        uniforms.spotShadowMap.value = lights.state.spotShadowMap;
        uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
        uniforms.pointShadowMap.value = lights.state.pointShadowMap;
        uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
      }
      const progUniforms = materialProperties.program.getUniforms();
      const uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
      materialProperties.uniformsList = uniformsList;
    }
    function setProgram(camera2, scene2, material, object) {
      if (scene2.isScene !== true)
        scene2 = _emptyScene;
      textures.resetTextureUnits();
      const fog = scene2.fog;
      const environment = material.isMeshStandardMaterial ? scene2.environment : null;
      const encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;
      const envMap = cubemaps.get(material.envMap || environment);
      const materialProperties = properties.get(material);
      const lights = currentRenderState.state.lights;
      if (_clippingEnabled === true) {
        if (_localClippingEnabled === true || camera2 !== _currentCamera) {
          const useCache = camera2 === _currentCamera && material.id === _currentMaterialId;
          clipping.setState(material, camera2, useCache);
        }
      }
      if (material.version === materialProperties.__version) {
        if (material.fog && materialProperties.fog !== fog) {
          initMaterial(material, scene2, object);
        } else if (materialProperties.environment !== environment) {
          initMaterial(material, scene2, object);
        } else if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
          initMaterial(material, scene2, object);
        } else if (materialProperties.numClippingPlanes !== void 0 && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
          initMaterial(material, scene2, object);
        } else if (materialProperties.outputEncoding !== encoding) {
          initMaterial(material, scene2, object);
        } else if (materialProperties.envMap !== envMap) {
          initMaterial(material, scene2, object);
        }
      } else {
        initMaterial(material, scene2, object);
        materialProperties.__version = material.version;
      }
      let refreshProgram = false;
      let refreshMaterial = false;
      let refreshLights = false;
      const program = materialProperties.program, p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
      if (state.useProgram(program.program)) {
        refreshProgram = true;
        refreshMaterial = true;
        refreshLights = true;
      }
      if (material.id !== _currentMaterialId) {
        _currentMaterialId = material.id;
        refreshMaterial = true;
      }
      if (refreshProgram || _currentCamera !== camera2) {
        p_uniforms.setValue(_gl, "projectionMatrix", camera2.projectionMatrix);
        if (capabilities.logarithmicDepthBuffer) {
          p_uniforms.setValue(_gl, "logDepthBufFC", 2 / (Math.log(camera2.far + 1) / Math.LN2));
        }
        if (_currentCamera !== camera2) {
          _currentCamera = camera2;
          refreshMaterial = true;
          refreshLights = true;
        }
        if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
          const uCamPos = p_uniforms.map.cameraPosition;
          if (uCamPos !== void 0) {
            uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera2.matrixWorld));
          }
        }
        if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
          p_uniforms.setValue(_gl, "isOrthographic", camera2.isOrthographicCamera === true);
        }
        if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || material.skinning) {
          p_uniforms.setValue(_gl, "viewMatrix", camera2.matrixWorldInverse);
        }
      }
      if (material.skinning) {
        p_uniforms.setOptional(_gl, object, "bindMatrix");
        p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
        const skeleton = object.skeleton;
        if (skeleton) {
          const bones = skeleton.bones;
          if (capabilities.floatVertexTextures) {
            if (skeleton.boneTexture === null) {
              let size = Math.sqrt(bones.length * 4);
              size = MathUtils.ceilPowerOfTwo(size);
              size = Math.max(size, 4);
              const boneMatrices = new Float32Array(size * size * 4);
              boneMatrices.set(skeleton.boneMatrices);
              const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
              skeleton.boneMatrices = boneMatrices;
              skeleton.boneTexture = boneTexture;
              skeleton.boneTextureSize = size;
            }
            p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
            p_uniforms.setValue(_gl, "boneTextureSize", skeleton.boneTextureSize);
          } else {
            p_uniforms.setOptional(_gl, skeleton, "boneMatrices");
          }
        }
      }
      if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
        materialProperties.receiveShadow = object.receiveShadow;
        p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
      }
      if (refreshMaterial) {
        p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
        if (materialProperties.needsLights) {
          markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
        }
        if (fog && material.fog) {
          materials.refreshFogUniforms(m_uniforms, fog);
        }
        materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height);
        WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
      }
      if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
        WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
        material.uniformsNeedUpdate = false;
      }
      if (material.isSpriteMaterial) {
        p_uniforms.setValue(_gl, "center", object.center);
      }
      p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
      p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
      p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
      return program;
    }
    function markUniformsLightsNeedsUpdate(uniforms, value) {
      uniforms.ambientLightColor.needsUpdate = value;
      uniforms.lightProbe.needsUpdate = value;
      uniforms.directionalLights.needsUpdate = value;
      uniforms.directionalLightShadows.needsUpdate = value;
      uniforms.pointLights.needsUpdate = value;
      uniforms.pointLightShadows.needsUpdate = value;
      uniforms.spotLights.needsUpdate = value;
      uniforms.spotLightShadows.needsUpdate = value;
      uniforms.rectAreaLights.needsUpdate = value;
      uniforms.hemisphereLights.needsUpdate = value;
    }
    function materialNeedsLights(material) {
      return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
    }
    this.setFramebuffer = function(value) {
      if (_framebuffer !== value && _currentRenderTarget === null)
        _gl.bindFramebuffer(36160, value);
      _framebuffer = value;
    };
    this.getActiveCubeFace = function() {
      return _currentActiveCubeFace;
    };
    this.getActiveMipmapLevel = function() {
      return _currentActiveMipmapLevel;
    };
    this.getRenderList = function() {
      return currentRenderList;
    };
    this.setRenderList = function(renderList) {
      currentRenderList = renderList;
    };
    this.getRenderState = function() {
      return currentRenderState;
    };
    this.setRenderState = function(renderState) {
      currentRenderState = renderState;
    };
    this.getRenderTarget = function() {
      return _currentRenderTarget;
    };
    this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
      _currentRenderTarget = renderTarget;
      _currentActiveCubeFace = activeCubeFace;
      _currentActiveMipmapLevel = activeMipmapLevel;
      if (renderTarget && properties.get(renderTarget).__webglFramebuffer === void 0) {
        textures.setupRenderTarget(renderTarget);
      }
      let framebuffer = _framebuffer;
      let isCube = false;
      if (renderTarget) {
        const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
        if (renderTarget.isWebGLCubeRenderTarget) {
          framebuffer = __webglFramebuffer[activeCubeFace];
          isCube = true;
        } else if (renderTarget.isWebGLMultisampleRenderTarget) {
          framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
        } else {
          framebuffer = __webglFramebuffer;
        }
        _currentViewport.copy(renderTarget.viewport);
        _currentScissor.copy(renderTarget.scissor);
        _currentScissorTest = renderTarget.scissorTest;
      } else {
        _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
        _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
        _currentScissorTest = _scissorTest;
      }
      if (_currentFramebuffer !== framebuffer) {
        _gl.bindFramebuffer(36160, framebuffer);
        _currentFramebuffer = framebuffer;
      }
      state.viewport(_currentViewport);
      state.scissor(_currentScissor);
      state.setScissorTest(_currentScissorTest);
      if (isCube) {
        const textureProperties = properties.get(renderTarget.texture);
        _gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
      }
    };
    this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
      if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let framebuffer = properties.get(renderTarget).__webglFramebuffer;
      if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
        framebuffer = framebuffer[activeCubeFaceIndex];
      }
      if (framebuffer) {
        let restore = false;
        if (framebuffer !== _currentFramebuffer) {
          _gl.bindFramebuffer(36160, framebuffer);
          restore = true;
        }
        try {
          const texture = renderTarget.texture;
          const textureFormat = texture.format;
          const textureType = texture.type;
          if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(35739)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(35738) && !(textureType === FloatType && (capabilities.isWebGL2 || extensions.get("OES_texture_float") || extensions.get("WEBGL_color_buffer_float"))) && !(textureType === HalfFloatType && (capabilities.isWebGL2 ? extensions.get("EXT_color_buffer_float") : extensions.get("EXT_color_buffer_half_float")))) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          if (_gl.checkFramebufferStatus(36160) === 36053) {
            if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
              _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
            }
          } else {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
          }
        } finally {
          if (restore) {
            _gl.bindFramebuffer(36160, _currentFramebuffer);
          }
        }
      }
    };
    this.copyFramebufferToTexture = function(position, texture, level = 0) {
      const levelScale = Math.pow(2, -level);
      const width = Math.floor(texture.image.width * levelScale);
      const height = Math.floor(texture.image.height * levelScale);
      const glFormat = utils.convert(texture.format);
      textures.setTexture2D(texture, 0);
      _gl.copyTexImage2D(3553, level, glFormat, position.x, position.y, width, height, 0);
      state.unbindTexture();
    };
    this.copyTextureToTexture = function(position, srcTexture, dstTexture, level = 0) {
      const width = srcTexture.image.width;
      const height = srcTexture.image.height;
      const glFormat = utils.convert(dstTexture.format);
      const glType = utils.convert(dstTexture.type);
      textures.setTexture2D(dstTexture, 0);
      _gl.pixelStorei(37440, dstTexture.flipY);
      _gl.pixelStorei(37441, dstTexture.premultiplyAlpha);
      _gl.pixelStorei(3317, dstTexture.unpackAlignment);
      if (srcTexture.isDataTexture) {
        _gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
      } else {
        if (srcTexture.isCompressedTexture) {
          _gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
        } else {
          _gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);
        }
      }
      if (level === 0 && dstTexture.generateMipmaps)
        _gl.generateMipmap(3553);
      state.unbindTexture();
    };
    this.initTexture = function(texture) {
      textures.setTexture2D(texture, 0);
      state.unbindTexture();
    };
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {detail: this}));
    }
  }
  function WebGL1Renderer(parameters) {
    WebGLRenderer.call(this, parameters);
  }
  WebGL1Renderer.prototype = Object.assign(Object.create(WebGLRenderer.prototype), {
    constructor: WebGL1Renderer,
    isWebGL1Renderer: true
  });
  var Scene = class extends Object3D {
    constructor() {
      super();
      Object.defineProperty(this, "isScene", {value: true});
      this.type = "Scene";
      this.background = null;
      this.environment = null;
      this.fog = null;
      this.overrideMaterial = null;
      this.autoUpdate = true;
      if (typeof __THREE_DEVTOOLS__ !== "undefined") {
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {detail: this}));
      }
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.background !== null)
        this.background = source.background.clone();
      if (source.environment !== null)
        this.environment = source.environment.clone();
      if (source.fog !== null)
        this.fog = source.fog.clone();
      if (source.overrideMaterial !== null)
        this.overrideMaterial = source.overrideMaterial.clone();
      this.autoUpdate = source.autoUpdate;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      if (this.background !== null)
        data.object.background = this.background.toJSON(meta);
      if (this.environment !== null)
        data.object.environment = this.environment.toJSON(meta);
      if (this.fog !== null)
        data.object.fog = this.fog.toJSON();
      return data;
    }
  };
  function InterleavedBuffer(array, stride) {
    this.array = array;
    this.stride = stride;
    this.count = array !== void 0 ? array.length / stride : 0;
    this.usage = StaticDrawUsage;
    this.updateRange = {offset: 0, count: -1};
    this.version = 0;
    this.uuid = MathUtils.generateUUID();
  }
  Object.defineProperty(InterleavedBuffer.prototype, "needsUpdate", {
    set: function(value) {
      if (value === true)
        this.version++;
    }
  });
  Object.assign(InterleavedBuffer.prototype, {
    isInterleavedBuffer: true,
    onUploadCallback: function() {
    },
    setUsage: function(value) {
      this.usage = value;
      return this;
    },
    copy: function(source) {
      this.array = new source.array.constructor(source.array);
      this.count = source.count;
      this.stride = source.stride;
      this.usage = source.usage;
      return this;
    },
    copyAt: function(index1, attribute, index2) {
      index1 *= this.stride;
      index2 *= attribute.stride;
      for (let i = 0, l = this.stride; i < l; i++) {
        this.array[index1 + i] = attribute.array[index2 + i];
      }
      return this;
    },
    set: function(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    },
    clone: function(data) {
      if (data.arrayBuffers === void 0) {
        data.arrayBuffers = {};
      }
      if (this.array.buffer._uuid === void 0) {
        this.array.buffer._uuid = MathUtils.generateUUID();
      }
      if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
        data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
      }
      const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
      const ib = new InterleavedBuffer(array, this.stride);
      ib.setUsage(this.usage);
      return ib;
    },
    onUpload: function(callback) {
      this.onUploadCallback = callback;
      return this;
    },
    toJSON: function(data) {
      if (data.arrayBuffers === void 0) {
        data.arrayBuffers = {};
      }
      if (this.array.buffer._uuid === void 0) {
        this.array.buffer._uuid = MathUtils.generateUUID();
      }
      if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
        data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));
      }
      return {
        uuid: this.uuid,
        buffer: this.array.buffer._uuid,
        type: this.array.constructor.name,
        stride: this.stride
      };
    }
  });
  var _vector$6 = new Vector3();
  function InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {
    this.name = "";
    this.data = interleavedBuffer;
    this.itemSize = itemSize;
    this.offset = offset;
    this.normalized = normalized === true;
  }
  Object.defineProperties(InterleavedBufferAttribute.prototype, {
    count: {
      get: function() {
        return this.data.count;
      }
    },
    array: {
      get: function() {
        return this.data.array;
      }
    },
    needsUpdate: {
      set: function(value) {
        this.data.needsUpdate = value;
      }
    }
  });
  Object.assign(InterleavedBufferAttribute.prototype, {
    isInterleavedBufferAttribute: true,
    applyMatrix4: function(m) {
      for (let i = 0, l = this.data.count; i < l; i++) {
        _vector$6.x = this.getX(i);
        _vector$6.y = this.getY(i);
        _vector$6.z = this.getZ(i);
        _vector$6.applyMatrix4(m);
        this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
      }
      return this;
    },
    setX: function(index, x) {
      this.data.array[index * this.data.stride + this.offset] = x;
      return this;
    },
    setY: function(index, y) {
      this.data.array[index * this.data.stride + this.offset + 1] = y;
      return this;
    },
    setZ: function(index, z) {
      this.data.array[index * this.data.stride + this.offset + 2] = z;
      return this;
    },
    setW: function(index, w) {
      this.data.array[index * this.data.stride + this.offset + 3] = w;
      return this;
    },
    getX: function(index) {
      return this.data.array[index * this.data.stride + this.offset];
    },
    getY: function(index) {
      return this.data.array[index * this.data.stride + this.offset + 1];
    },
    getZ: function(index) {
      return this.data.array[index * this.data.stride + this.offset + 2];
    },
    getW: function(index) {
      return this.data.array[index * this.data.stride + this.offset + 3];
    },
    setXY: function(index, x, y) {
      index = index * this.data.stride + this.offset;
      this.data.array[index + 0] = x;
      this.data.array[index + 1] = y;
      return this;
    },
    setXYZ: function(index, x, y, z) {
      index = index * this.data.stride + this.offset;
      this.data.array[index + 0] = x;
      this.data.array[index + 1] = y;
      this.data.array[index + 2] = z;
      return this;
    },
    setXYZW: function(index, x, y, z, w) {
      index = index * this.data.stride + this.offset;
      this.data.array[index + 0] = x;
      this.data.array[index + 1] = y;
      this.data.array[index + 2] = z;
      this.data.array[index + 3] = w;
      return this;
    },
    clone: function(data) {
      if (data === void 0) {
        console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");
        const array = [];
        for (let i = 0; i < this.count; i++) {
          const index = i * this.data.stride + this.offset;
          for (let j = 0; j < this.itemSize; j++) {
            array.push(this.data.array[index + j]);
          }
        }
        return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
      } else {
        if (data.interleavedBuffers === void 0) {
          data.interleavedBuffers = {};
        }
        if (data.interleavedBuffers[this.data.uuid] === void 0) {
          data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
        }
        return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
      }
    },
    toJSON: function(data) {
      if (data === void 0) {
        console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");
        const array = [];
        for (let i = 0; i < this.count; i++) {
          const index = i * this.data.stride + this.offset;
          for (let j = 0; j < this.itemSize; j++) {
            array.push(this.data.array[index + j]);
          }
        }
        return {
          itemSize: this.itemSize,
          type: this.array.constructor.name,
          array,
          normalized: this.normalized
        };
      } else {
        if (data.interleavedBuffers === void 0) {
          data.interleavedBuffers = {};
        }
        if (data.interleavedBuffers[this.data.uuid] === void 0) {
          data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
        }
        return {
          isInterleavedBufferAttribute: true,
          itemSize: this.itemSize,
          data: this.data.uuid,
          offset: this.offset,
          normalized: this.normalized
        };
      }
    }
  });
  function SpriteMaterial(parameters) {
    Material.call(this);
    this.type = "SpriteMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.alphaMap = null;
    this.rotation = 0;
    this.sizeAttenuation = true;
    this.transparent = true;
    this.setValues(parameters);
  }
  SpriteMaterial.prototype = Object.create(Material.prototype);
  SpriteMaterial.prototype.constructor = SpriteMaterial;
  SpriteMaterial.prototype.isSpriteMaterial = true;
  SpriteMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.rotation = source.rotation;
    this.sizeAttenuation = source.sizeAttenuation;
    return this;
  };
  var _geometry;
  var _intersectPoint = new Vector3();
  var _worldScale = new Vector3();
  var _mvPosition = new Vector3();
  var _alignedPosition = new Vector2();
  var _rotatedPosition = new Vector2();
  var _viewWorldMatrix = new Matrix4();
  var _vA$1 = new Vector3();
  var _vB$1 = new Vector3();
  var _vC$1 = new Vector3();
  var _uvA$1 = new Vector2();
  var _uvB$1 = new Vector2();
  var _uvC$1 = new Vector2();
  function Sprite(material) {
    Object3D.call(this);
    this.type = "Sprite";
    if (_geometry === void 0) {
      _geometry = new BufferGeometry();
      const float32Array = new Float32Array([
        -0.5,
        -0.5,
        0,
        0,
        0,
        0.5,
        -0.5,
        0,
        1,
        0,
        0.5,
        0.5,
        0,
        1,
        1,
        -0.5,
        0.5,
        0,
        0,
        1
      ]);
      const interleavedBuffer = new InterleavedBuffer(float32Array, 5);
      _geometry.setIndex([0, 1, 2, 0, 2, 3]);
      _geometry.setAttribute("position", new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));
      _geometry.setAttribute("uv", new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
    }
    this.geometry = _geometry;
    this.material = material !== void 0 ? material : new SpriteMaterial();
    this.center = new Vector2(0.5, 0.5);
  }
  Sprite.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Sprite,
    isSprite: true,
    raycast: function(raycaster, intersects2) {
      if (raycaster.camera === null) {
        console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
      }
      _worldScale.setFromMatrixScale(this.matrixWorld);
      _viewWorldMatrix.copy(raycaster.camera.matrixWorld);
      this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);
      _mvPosition.setFromMatrixPosition(this.modelViewMatrix);
      if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {
        _worldScale.multiplyScalar(-_mvPosition.z);
      }
      const rotation = this.material.rotation;
      let sin, cos;
      if (rotation !== 0) {
        cos = Math.cos(rotation);
        sin = Math.sin(rotation);
      }
      const center = this.center;
      transformVertex(_vA$1.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
      transformVertex(_vB$1.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
      transformVertex(_vC$1.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
      _uvA$1.set(0, 0);
      _uvB$1.set(1, 0);
      _uvC$1.set(1, 1);
      let intersect = raycaster.ray.intersectTriangle(_vA$1, _vB$1, _vC$1, false, _intersectPoint);
      if (intersect === null) {
        transformVertex(_vB$1.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
        _uvB$1.set(0, 1);
        intersect = raycaster.ray.intersectTriangle(_vA$1, _vC$1, _vB$1, false, _intersectPoint);
        if (intersect === null) {
          return;
        }
      }
      const distance = raycaster.ray.origin.distanceTo(_intersectPoint);
      if (distance < raycaster.near || distance > raycaster.far)
        return;
      intersects2.push({
        distance,
        point: _intersectPoint.clone(),
        uv: Triangle.getUV(_intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2()),
        face: null,
        object: this
      });
    },
    copy: function(source) {
      Object3D.prototype.copy.call(this, source);
      if (source.center !== void 0)
        this.center.copy(source.center);
      this.material = source.material;
      return this;
    }
  });
  function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
    _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);
    if (sin !== void 0) {
      _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;
      _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;
    } else {
      _rotatedPosition.copy(_alignedPosition);
    }
    vertexPosition.copy(mvPosition);
    vertexPosition.x += _rotatedPosition.x;
    vertexPosition.y += _rotatedPosition.y;
    vertexPosition.applyMatrix4(_viewWorldMatrix);
  }
  var _v1$4 = new Vector3();
  var _v2$2 = new Vector3();
  function LOD() {
    Object3D.call(this);
    this._currentLevel = 0;
    this.type = "LOD";
    Object.defineProperties(this, {
      levels: {
        enumerable: true,
        value: []
      }
    });
    this.autoUpdate = true;
  }
  LOD.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: LOD,
    isLOD: true,
    copy: function(source) {
      Object3D.prototype.copy.call(this, source, false);
      const levels = source.levels;
      for (let i = 0, l = levels.length; i < l; i++) {
        const level = levels[i];
        this.addLevel(level.object.clone(), level.distance);
      }
      this.autoUpdate = source.autoUpdate;
      return this;
    },
    addLevel: function(object, distance = 0) {
      distance = Math.abs(distance);
      const levels = this.levels;
      let l;
      for (l = 0; l < levels.length; l++) {
        if (distance < levels[l].distance) {
          break;
        }
      }
      levels.splice(l, 0, {distance, object});
      this.add(object);
      return this;
    },
    getCurrentLevel: function() {
      return this._currentLevel;
    },
    getObjectForDistance: function(distance) {
      const levels = this.levels;
      if (levels.length > 0) {
        let i, l;
        for (i = 1, l = levels.length; i < l; i++) {
          if (distance < levels[i].distance) {
            break;
          }
        }
        return levels[i - 1].object;
      }
      return null;
    },
    raycast: function(raycaster, intersects2) {
      const levels = this.levels;
      if (levels.length > 0) {
        _v1$4.setFromMatrixPosition(this.matrixWorld);
        const distance = raycaster.ray.origin.distanceTo(_v1$4);
        this.getObjectForDistance(distance).raycast(raycaster, intersects2);
      }
    },
    update: function(camera2) {
      const levels = this.levels;
      if (levels.length > 1) {
        _v1$4.setFromMatrixPosition(camera2.matrixWorld);
        _v2$2.setFromMatrixPosition(this.matrixWorld);
        const distance = _v1$4.distanceTo(_v2$2) / camera2.zoom;
        levels[0].object.visible = true;
        let i, l;
        for (i = 1, l = levels.length; i < l; i++) {
          if (distance >= levels[i].distance) {
            levels[i - 1].object.visible = false;
            levels[i].object.visible = true;
          } else {
            break;
          }
        }
        this._currentLevel = i - 1;
        for (; i < l; i++) {
          levels[i].object.visible = false;
        }
      }
    },
    toJSON: function(meta) {
      const data = Object3D.prototype.toJSON.call(this, meta);
      if (this.autoUpdate === false)
        data.object.autoUpdate = false;
      data.object.levels = [];
      const levels = this.levels;
      for (let i = 0, l = levels.length; i < l; i++) {
        const level = levels[i];
        data.object.levels.push({
          object: level.object.uuid,
          distance: level.distance
        });
      }
      return data;
    }
  });
  function SkinnedMesh(geometry, material) {
    if (geometry && geometry.isGeometry) {
      console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
    }
    Mesh.call(this, geometry, material);
    this.type = "SkinnedMesh";
    this.bindMode = "attached";
    this.bindMatrix = new Matrix4();
    this.bindMatrixInverse = new Matrix4();
  }
  SkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {
    constructor: SkinnedMesh,
    isSkinnedMesh: true,
    copy: function(source) {
      Mesh.prototype.copy.call(this, source);
      this.bindMode = source.bindMode;
      this.bindMatrix.copy(source.bindMatrix);
      this.bindMatrixInverse.copy(source.bindMatrixInverse);
      this.skeleton = source.skeleton;
      return this;
    },
    bind: function(skeleton, bindMatrix) {
      this.skeleton = skeleton;
      if (bindMatrix === void 0) {
        this.updateMatrixWorld(true);
        this.skeleton.calculateInverses();
        bindMatrix = this.matrixWorld;
      }
      this.bindMatrix.copy(bindMatrix);
      this.bindMatrixInverse.copy(bindMatrix).invert();
    },
    pose: function() {
      this.skeleton.pose();
    },
    normalizeSkinWeights: function() {
      const vector = new Vector4();
      const skinWeight = this.geometry.attributes.skinWeight;
      for (let i = 0, l = skinWeight.count; i < l; i++) {
        vector.x = skinWeight.getX(i);
        vector.y = skinWeight.getY(i);
        vector.z = skinWeight.getZ(i);
        vector.w = skinWeight.getW(i);
        const scale = 1 / vector.manhattanLength();
        if (scale !== Infinity) {
          vector.multiplyScalar(scale);
        } else {
          vector.set(1, 0, 0, 0);
        }
        skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
      }
    },
    updateMatrixWorld: function(force) {
      Mesh.prototype.updateMatrixWorld.call(this, force);
      if (this.bindMode === "attached") {
        this.bindMatrixInverse.copy(this.matrixWorld).invert();
      } else if (this.bindMode === "detached") {
        this.bindMatrixInverse.copy(this.bindMatrix).invert();
      } else {
        console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
      }
    },
    boneTransform: function() {
      const basePosition = new Vector3();
      const skinIndex = new Vector4();
      const skinWeight = new Vector4();
      const vector = new Vector3();
      const matrix = new Matrix4();
      return function(index, target) {
        const skeleton = this.skeleton;
        const geometry = this.geometry;
        skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);
        skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);
        basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);
        target.set(0, 0, 0);
        for (let i = 0; i < 4; i++) {
          const weight = skinWeight.getComponent(i);
          if (weight !== 0) {
            const boneIndex = skinIndex.getComponent(i);
            matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
            target.addScaledVector(vector.copy(basePosition).applyMatrix4(matrix), weight);
          }
        }
        return target.applyMatrix4(this.bindMatrixInverse);
      };
    }()
  });
  function Bone() {
    Object3D.call(this);
    this.type = "Bone";
  }
  Bone.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Bone,
    isBone: true
  });
  var _offsetMatrix = new Matrix4();
  var _identityMatrix = new Matrix4();
  function Skeleton(bones = [], boneInverses = []) {
    this.uuid = MathUtils.generateUUID();
    this.bones = bones.slice(0);
    this.boneInverses = boneInverses;
    this.boneMatrices = null;
    this.boneTexture = null;
    this.boneTextureSize = 0;
    this.frame = -1;
    this.init();
  }
  Object.assign(Skeleton.prototype, {
    init: function() {
      const bones = this.bones;
      const boneInverses = this.boneInverses;
      this.boneMatrices = new Float32Array(bones.length * 16);
      if (boneInverses.length === 0) {
        this.calculateInverses();
      } else {
        if (bones.length !== boneInverses.length) {
          console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");
          this.boneInverses = [];
          for (let i = 0, il = this.bones.length; i < il; i++) {
            this.boneInverses.push(new Matrix4());
          }
        }
      }
    },
    calculateInverses: function() {
      this.boneInverses.length = 0;
      for (let i = 0, il = this.bones.length; i < il; i++) {
        const inverse = new Matrix4();
        if (this.bones[i]) {
          inverse.copy(this.bones[i].matrixWorld).invert();
        }
        this.boneInverses.push(inverse);
      }
    },
    pose: function() {
      for (let i = 0, il = this.bones.length; i < il; i++) {
        const bone = this.bones[i];
        if (bone) {
          bone.matrixWorld.copy(this.boneInverses[i]).invert();
        }
      }
      for (let i = 0, il = this.bones.length; i < il; i++) {
        const bone = this.bones[i];
        if (bone) {
          if (bone.parent && bone.parent.isBone) {
            bone.matrix.copy(bone.parent.matrixWorld).invert();
            bone.matrix.multiply(bone.matrixWorld);
          } else {
            bone.matrix.copy(bone.matrixWorld);
          }
          bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
        }
      }
    },
    update: function() {
      const bones = this.bones;
      const boneInverses = this.boneInverses;
      const boneMatrices = this.boneMatrices;
      const boneTexture = this.boneTexture;
      for (let i = 0, il = bones.length; i < il; i++) {
        const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;
        _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);
        _offsetMatrix.toArray(boneMatrices, i * 16);
      }
      if (boneTexture !== null) {
        boneTexture.needsUpdate = true;
      }
    },
    clone: function() {
      return new Skeleton(this.bones, this.boneInverses);
    },
    getBoneByName: function(name) {
      for (let i = 0, il = this.bones.length; i < il; i++) {
        const bone = this.bones[i];
        if (bone.name === name) {
          return bone;
        }
      }
      return void 0;
    },
    dispose: function() {
      if (this.boneTexture !== null) {
        this.boneTexture.dispose();
        this.boneTexture = null;
      }
    },
    fromJSON: function(json, bones) {
      this.uuid = json.uuid;
      for (let i = 0, l = json.bones.length; i < l; i++) {
        const uuid = json.bones[i];
        let bone = bones[uuid];
        if (bone === void 0) {
          console.warn("THREE.Skeleton: No bone found with UUID:", uuid);
          bone = new Bone();
        }
        this.bones.push(bone);
        this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));
      }
      this.init();
      return this;
    },
    toJSON: function() {
      const data = {
        metadata: {
          version: 4.5,
          type: "Skeleton",
          generator: "Skeleton.toJSON"
        },
        bones: [],
        boneInverses: []
      };
      data.uuid = this.uuid;
      const bones = this.bones;
      const boneInverses = this.boneInverses;
      for (let i = 0, l = bones.length; i < l; i++) {
        const bone = bones[i];
        data.bones.push(bone.uuid);
        const boneInverse = boneInverses[i];
        data.boneInverses.push(boneInverse.toArray());
      }
      return data;
    }
  });
  var _instanceLocalMatrix = new Matrix4();
  var _instanceWorldMatrix = new Matrix4();
  var _instanceIntersects = [];
  var _mesh = new Mesh();
  function InstancedMesh(geometry, material, count) {
    Mesh.call(this, geometry, material);
    this.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);
    this.instanceColor = null;
    this.count = count;
    this.frustumCulled = false;
  }
  InstancedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {
    constructor: InstancedMesh,
    isInstancedMesh: true,
    copy: function(source) {
      Mesh.prototype.copy.call(this, source);
      this.instanceMatrix.copy(source.instanceMatrix);
      this.count = source.count;
      return this;
    },
    getColorAt: function(index, color) {
      color.fromArray(this.instanceColor.array, index * 3);
    },
    getMatrixAt: function(index, matrix) {
      matrix.fromArray(this.instanceMatrix.array, index * 16);
    },
    raycast: function(raycaster, intersects2) {
      const matrixWorld = this.matrixWorld;
      const raycastTimes = this.count;
      _mesh.geometry = this.geometry;
      _mesh.material = this.material;
      if (_mesh.material === void 0)
        return;
      for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {
        this.getMatrixAt(instanceId, _instanceLocalMatrix);
        _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
        _mesh.matrixWorld = _instanceWorldMatrix;
        _mesh.raycast(raycaster, _instanceIntersects);
        for (let i = 0, l = _instanceIntersects.length; i < l; i++) {
          const intersect = _instanceIntersects[i];
          intersect.instanceId = instanceId;
          intersect.object = this;
          intersects2.push(intersect);
        }
        _instanceIntersects.length = 0;
      }
    },
    setColorAt: function(index, color) {
      if (this.instanceColor === null) {
        this.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);
      }
      color.toArray(this.instanceColor.array, index * 3);
    },
    setMatrixAt: function(index, matrix) {
      matrix.toArray(this.instanceMatrix.array, index * 16);
    },
    updateMorphTargets: function() {
    }
  });
  function LineBasicMaterial(parameters) {
    Material.call(this);
    this.type = "LineBasicMaterial";
    this.color = new Color(16777215);
    this.linewidth = 1;
    this.linecap = "round";
    this.linejoin = "round";
    this.morphTargets = false;
    this.setValues(parameters);
  }
  LineBasicMaterial.prototype = Object.create(Material.prototype);
  LineBasicMaterial.prototype.constructor = LineBasicMaterial;
  LineBasicMaterial.prototype.isLineBasicMaterial = true;
  LineBasicMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.linewidth = source.linewidth;
    this.linecap = source.linecap;
    this.linejoin = source.linejoin;
    this.morphTargets = source.morphTargets;
    return this;
  };
  var _start = new Vector3();
  var _end = new Vector3();
  var _inverseMatrix$1 = new Matrix4();
  var _ray$1 = new Ray();
  var _sphere$2 = new Sphere();
  function Line(geometry, material, mode) {
    if (mode === 1) {
      console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.");
    }
    Object3D.call(this);
    this.type = "Line";
    this.geometry = geometry !== void 0 ? geometry : new BufferGeometry();
    this.material = material !== void 0 ? material : new LineBasicMaterial();
    this.updateMorphTargets();
  }
  Line.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Line,
    isLine: true,
    copy: function(source) {
      Object3D.prototype.copy.call(this, source);
      this.material = source.material;
      this.geometry = source.geometry;
      return this;
    },
    computeLineDistances: function() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        if (geometry.index === null) {
          const positionAttribute = geometry.attributes.position;
          const lineDistances = [0];
          for (let i = 1, l = positionAttribute.count; i < l; i++) {
            _start.fromBufferAttribute(positionAttribute, i - 1);
            _end.fromBufferAttribute(positionAttribute, i);
            lineDistances[i] = lineDistances[i - 1];
            lineDistances[i] += _start.distanceTo(_end);
          }
          geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
        } else {
          console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        }
      } else if (geometry.isGeometry) {
        const vertices = geometry.vertices;
        const lineDistances = geometry.lineDistances;
        lineDistances[0] = 0;
        for (let i = 1, l = vertices.length; i < l; i++) {
          lineDistances[i] = lineDistances[i - 1];
          lineDistances[i] += vertices[i - 1].distanceTo(vertices[i]);
        }
      }
      return this;
    },
    raycast: function(raycaster, intersects2) {
      const geometry = this.geometry;
      const matrixWorld = this.matrixWorld;
      const threshold = raycaster.params.Line.threshold;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere$2.copy(geometry.boundingSphere);
      _sphere$2.applyMatrix4(matrixWorld);
      _sphere$2.radius += threshold;
      if (raycaster.ray.intersectsSphere(_sphere$2) === false)
        return;
      _inverseMatrix$1.copy(matrixWorld).invert();
      _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
      const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
      const localThresholdSq = localThreshold * localThreshold;
      const vStart = new Vector3();
      const vEnd = new Vector3();
      const interSegment = new Vector3();
      const interRay = new Vector3();
      const step = this.isLineSegments ? 2 : 1;
      if (geometry.isBufferGeometry) {
        const index = geometry.index;
        const attributes = geometry.attributes;
        const positionAttribute = attributes.position;
        if (index !== null) {
          const indices = index.array;
          for (let i = 0, l = indices.length - 1; i < l; i += step) {
            const a = indices[i];
            const b = indices[i + 1];
            vStart.fromBufferAttribute(positionAttribute, a);
            vEnd.fromBufferAttribute(positionAttribute, b);
            const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
            if (distSq > localThresholdSq)
              continue;
            interRay.applyMatrix4(this.matrixWorld);
            const distance = raycaster.ray.origin.distanceTo(interRay);
            if (distance < raycaster.near || distance > raycaster.far)
              continue;
            intersects2.push({
              distance,
              point: interSegment.clone().applyMatrix4(this.matrixWorld),
              index: i,
              face: null,
              faceIndex: null,
              object: this
            });
          }
        } else {
          for (let i = 0, l = positionAttribute.count - 1; i < l; i += step) {
            vStart.fromBufferAttribute(positionAttribute, i);
            vEnd.fromBufferAttribute(positionAttribute, i + 1);
            const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
            if (distSq > localThresholdSq)
              continue;
            interRay.applyMatrix4(this.matrixWorld);
            const distance = raycaster.ray.origin.distanceTo(interRay);
            if (distance < raycaster.near || distance > raycaster.far)
              continue;
            intersects2.push({
              distance,
              point: interSegment.clone().applyMatrix4(this.matrixWorld),
              index: i,
              face: null,
              faceIndex: null,
              object: this
            });
          }
        }
      } else if (geometry.isGeometry) {
        const vertices = geometry.vertices;
        const nbVertices = vertices.length;
        for (let i = 0; i < nbVertices - 1; i += step) {
          const distSq = _ray$1.distanceSqToSegment(vertices[i], vertices[i + 1], interRay, interSegment);
          if (distSq > localThresholdSq)
            continue;
          interRay.applyMatrix4(this.matrixWorld);
          const distance = raycaster.ray.origin.distanceTo(interRay);
          if (distance < raycaster.near || distance > raycaster.far)
            continue;
          intersects2.push({
            distance,
            point: interSegment.clone().applyMatrix4(this.matrixWorld),
            index: i,
            face: null,
            faceIndex: null,
            object: this
          });
        }
      }
    },
    updateMorphTargets: function() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
          const morphAttribute = morphAttributes[keys[0]];
          if (morphAttribute !== void 0) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
              const name = morphAttribute[m].name || String(m);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m;
            }
          }
        }
      } else {
        const morphTargets = geometry.morphTargets;
        if (morphTargets !== void 0 && morphTargets.length > 0) {
          console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
      }
    }
  });
  var _start$1 = new Vector3();
  var _end$1 = new Vector3();
  function LineSegments(geometry, material) {
    Line.call(this, geometry, material);
    this.type = "LineSegments";
  }
  LineSegments.prototype = Object.assign(Object.create(Line.prototype), {
    constructor: LineSegments,
    isLineSegments: true,
    computeLineDistances: function() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        if (geometry.index === null) {
          const positionAttribute = geometry.attributes.position;
          const lineDistances = [];
          for (let i = 0, l = positionAttribute.count; i < l; i += 2) {
            _start$1.fromBufferAttribute(positionAttribute, i);
            _end$1.fromBufferAttribute(positionAttribute, i + 1);
            lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
            lineDistances[i + 1] = lineDistances[i] + _start$1.distanceTo(_end$1);
          }
          geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
        } else {
          console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        }
      } else if (geometry.isGeometry) {
        const vertices = geometry.vertices;
        const lineDistances = geometry.lineDistances;
        for (let i = 0, l = vertices.length; i < l; i += 2) {
          _start$1.copy(vertices[i]);
          _end$1.copy(vertices[i + 1]);
          lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
          lineDistances[i + 1] = lineDistances[i] + _start$1.distanceTo(_end$1);
        }
      }
      return this;
    }
  });
  function LineLoop(geometry, material) {
    Line.call(this, geometry, material);
    this.type = "LineLoop";
  }
  LineLoop.prototype = Object.assign(Object.create(Line.prototype), {
    constructor: LineLoop,
    isLineLoop: true
  });
  function PointsMaterial(parameters) {
    Material.call(this);
    this.type = "PointsMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.alphaMap = null;
    this.size = 1;
    this.sizeAttenuation = true;
    this.morphTargets = false;
    this.setValues(parameters);
  }
  PointsMaterial.prototype = Object.create(Material.prototype);
  PointsMaterial.prototype.constructor = PointsMaterial;
  PointsMaterial.prototype.isPointsMaterial = true;
  PointsMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.size = source.size;
    this.sizeAttenuation = source.sizeAttenuation;
    this.morphTargets = source.morphTargets;
    return this;
  };
  var _inverseMatrix$2 = new Matrix4();
  var _ray$2 = new Ray();
  var _sphere$3 = new Sphere();
  var _position$1 = new Vector3();
  function Points(geometry, material) {
    Object3D.call(this);
    this.type = "Points";
    this.geometry = geometry !== void 0 ? geometry : new BufferGeometry();
    this.material = material !== void 0 ? material : new PointsMaterial();
    this.updateMorphTargets();
  }
  Points.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Points,
    isPoints: true,
    copy: function(source) {
      Object3D.prototype.copy.call(this, source);
      this.material = source.material;
      this.geometry = source.geometry;
      return this;
    },
    raycast: function(raycaster, intersects2) {
      const geometry = this.geometry;
      const matrixWorld = this.matrixWorld;
      const threshold = raycaster.params.Points.threshold;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere$3.copy(geometry.boundingSphere);
      _sphere$3.applyMatrix4(matrixWorld);
      _sphere$3.radius += threshold;
      if (raycaster.ray.intersectsSphere(_sphere$3) === false)
        return;
      _inverseMatrix$2.copy(matrixWorld).invert();
      _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);
      const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
      const localThresholdSq = localThreshold * localThreshold;
      if (geometry.isBufferGeometry) {
        const index = geometry.index;
        const attributes = geometry.attributes;
        const positionAttribute = attributes.position;
        if (index !== null) {
          const indices = index.array;
          for (let i = 0, il = indices.length; i < il; i++) {
            const a = indices[i];
            _position$1.fromBufferAttribute(positionAttribute, a);
            testPoint(_position$1, a, localThresholdSq, matrixWorld, raycaster, intersects2, this);
          }
        } else {
          for (let i = 0, l = positionAttribute.count; i < l; i++) {
            _position$1.fromBufferAttribute(positionAttribute, i);
            testPoint(_position$1, i, localThresholdSq, matrixWorld, raycaster, intersects2, this);
          }
        }
      } else {
        const vertices = geometry.vertices;
        for (let i = 0, l = vertices.length; i < l; i++) {
          testPoint(vertices[i], i, localThresholdSq, matrixWorld, raycaster, intersects2, this);
        }
      }
    },
    updateMorphTargets: function() {
      const geometry = this.geometry;
      if (geometry.isBufferGeometry) {
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
          const morphAttribute = morphAttributes[keys[0]];
          if (morphAttribute !== void 0) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
              const name = morphAttribute[m].name || String(m);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m;
            }
          }
        }
      } else {
        const morphTargets = geometry.morphTargets;
        if (morphTargets !== void 0 && morphTargets.length > 0) {
          console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
      }
    }
  });
  function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects2, object) {
    const rayPointDistanceSq = _ray$2.distanceSqToPoint(point);
    if (rayPointDistanceSq < localThresholdSq) {
      const intersectPoint = new Vector3();
      _ray$2.closestPointToPoint(point, intersectPoint);
      intersectPoint.applyMatrix4(matrixWorld);
      const distance = raycaster.ray.origin.distanceTo(intersectPoint);
      if (distance < raycaster.near || distance > raycaster.far)
        return;
      intersects2.push({
        distance,
        distanceToRay: Math.sqrt(rayPointDistanceSq),
        point: intersectPoint,
        index,
        face: null,
        object
      });
    }
  }
  function VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
    Texture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
    this.format = format !== void 0 ? format : RGBFormat;
    this.minFilter = minFilter !== void 0 ? minFilter : LinearFilter;
    this.magFilter = magFilter !== void 0 ? magFilter : LinearFilter;
    this.generateMipmaps = false;
    const scope = this;
    function updateVideo() {
      scope.needsUpdate = true;
      video.requestVideoFrameCallback(updateVideo);
    }
    if ("requestVideoFrameCallback" in video) {
      video.requestVideoFrameCallback(updateVideo);
    }
  }
  VideoTexture.prototype = Object.assign(Object.create(Texture.prototype), {
    constructor: VideoTexture,
    clone: function() {
      return new this.constructor(this.image).copy(this);
    },
    isVideoTexture: true,
    update: function() {
      const video = this.image;
      const hasVideoFrameCallback = "requestVideoFrameCallback" in video;
      if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {
        this.needsUpdate = true;
      }
    }
  });
  function CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
    Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
    this.image = {width, height};
    this.mipmaps = mipmaps;
    this.flipY = false;
    this.generateMipmaps = false;
  }
  CompressedTexture.prototype = Object.create(Texture.prototype);
  CompressedTexture.prototype.constructor = CompressedTexture;
  CompressedTexture.prototype.isCompressedTexture = true;
  function CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
    Texture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
    this.needsUpdate = true;
  }
  CanvasTexture.prototype = Object.create(Texture.prototype);
  CanvasTexture.prototype.constructor = CanvasTexture;
  CanvasTexture.prototype.isCanvasTexture = true;
  function DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
    format = format !== void 0 ? format : DepthFormat;
    if (format !== DepthFormat && format !== DepthStencilFormat) {
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    }
    if (type === void 0 && format === DepthFormat)
      type = UnsignedShortType;
    if (type === void 0 && format === DepthStencilFormat)
      type = UnsignedInt248Type;
    Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
    this.image = {width, height};
    this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
    this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
    this.flipY = false;
    this.generateMipmaps = false;
  }
  DepthTexture.prototype = Object.create(Texture.prototype);
  DepthTexture.prototype.constructor = DepthTexture;
  DepthTexture.prototype.isDepthTexture = true;
  var _geometryId = 0;
  var _m1$3 = new Matrix4();
  var _obj$1 = new Object3D();
  var _offset$1 = new Vector3();
  function Geometry() {
    Object.defineProperty(this, "id", {value: _geometryId += 2});
    this.uuid = MathUtils.generateUUID();
    this.name = "";
    this.type = "Geometry";
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    this.elementsNeedUpdate = false;
    this.verticesNeedUpdate = false;
    this.uvsNeedUpdate = false;
    this.normalsNeedUpdate = false;
    this.colorsNeedUpdate = false;
    this.lineDistancesNeedUpdate = false;
    this.groupsNeedUpdate = false;
  }
  Geometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
    constructor: Geometry,
    isGeometry: true,
    applyMatrix4: function(matrix) {
      const normalMatrix = new Matrix3().getNormalMatrix(matrix);
      for (let i = 0, il = this.vertices.length; i < il; i++) {
        const vertex = this.vertices[i];
        vertex.applyMatrix4(matrix);
      }
      for (let i = 0, il = this.faces.length; i < il; i++) {
        const face = this.faces[i];
        face.normal.applyMatrix3(normalMatrix).normalize();
        for (let j = 0, jl = face.vertexNormals.length; j < jl; j++) {
          face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();
        }
      }
      if (this.boundingBox !== null) {
        this.computeBoundingBox();
      }
      if (this.boundingSphere !== null) {
        this.computeBoundingSphere();
      }
      this.verticesNeedUpdate = true;
      this.normalsNeedUpdate = true;
      return this;
    },
    rotateX: function(angle) {
      _m1$3.makeRotationX(angle);
      this.applyMatrix4(_m1$3);
      return this;
    },
    rotateY: function(angle) {
      _m1$3.makeRotationY(angle);
      this.applyMatrix4(_m1$3);
      return this;
    },
    rotateZ: function(angle) {
      _m1$3.makeRotationZ(angle);
      this.applyMatrix4(_m1$3);
      return this;
    },
    translate: function(x, y, z) {
      _m1$3.makeTranslation(x, y, z);
      this.applyMatrix4(_m1$3);
      return this;
    },
    scale: function(x, y, z) {
      _m1$3.makeScale(x, y, z);
      this.applyMatrix4(_m1$3);
      return this;
    },
    lookAt: function(vector) {
      _obj$1.lookAt(vector);
      _obj$1.updateMatrix();
      this.applyMatrix4(_obj$1.matrix);
      return this;
    },
    fromBufferGeometry: function(geometry) {
      const scope = this;
      const index = geometry.index !== null ? geometry.index : void 0;
      const attributes = geometry.attributes;
      if (attributes.position === void 0) {
        console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.");
        return this;
      }
      const position = attributes.position;
      const normal = attributes.normal;
      const color = attributes.color;
      const uv = attributes.uv;
      const uv2 = attributes.uv2;
      if (uv2 !== void 0)
        this.faceVertexUvs[1] = [];
      for (let i = 0; i < position.count; i++) {
        scope.vertices.push(new Vector3().fromBufferAttribute(position, i));
        if (color !== void 0) {
          scope.colors.push(new Color().fromBufferAttribute(color, i));
        }
      }
      function addFace(a, b, c, materialIndex) {
        const vertexColors = color === void 0 ? [] : [
          scope.colors[a].clone(),
          scope.colors[b].clone(),
          scope.colors[c].clone()
        ];
        const vertexNormals = normal === void 0 ? [] : [
          new Vector3().fromBufferAttribute(normal, a),
          new Vector3().fromBufferAttribute(normal, b),
          new Vector3().fromBufferAttribute(normal, c)
        ];
        const face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);
        scope.faces.push(face);
        if (uv !== void 0) {
          scope.faceVertexUvs[0].push([
            new Vector2().fromBufferAttribute(uv, a),
            new Vector2().fromBufferAttribute(uv, b),
            new Vector2().fromBufferAttribute(uv, c)
          ]);
        }
        if (uv2 !== void 0) {
          scope.faceVertexUvs[1].push([
            new Vector2().fromBufferAttribute(uv2, a),
            new Vector2().fromBufferAttribute(uv2, b),
            new Vector2().fromBufferAttribute(uv2, c)
          ]);
        }
      }
      const groups = geometry.groups;
      if (groups.length > 0) {
        for (let i = 0; i < groups.length; i++) {
          const group2 = groups[i];
          const start = group2.start;
          const count = group2.count;
          for (let j = start, jl = start + count; j < jl; j += 3) {
            if (index !== void 0) {
              addFace(index.getX(j), index.getX(j + 1), index.getX(j + 2), group2.materialIndex);
            } else {
              addFace(j, j + 1, j + 2, group2.materialIndex);
            }
          }
        }
      } else {
        if (index !== void 0) {
          for (let i = 0; i < index.count; i += 3) {
            addFace(index.getX(i), index.getX(i + 1), index.getX(i + 2));
          }
        } else {
          for (let i = 0; i < position.count; i += 3) {
            addFace(i, i + 1, i + 2);
          }
        }
      }
      this.computeFaceNormals();
      if (geometry.boundingBox !== null) {
        this.boundingBox = geometry.boundingBox.clone();
      }
      if (geometry.boundingSphere !== null) {
        this.boundingSphere = geometry.boundingSphere.clone();
      }
      return this;
    },
    center: function() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(_offset$1).negate();
      this.translate(_offset$1.x, _offset$1.y, _offset$1.z);
      return this;
    },
    normalize: function() {
      this.computeBoundingSphere();
      const center = this.boundingSphere.center;
      const radius = this.boundingSphere.radius;
      const s = radius === 0 ? 1 : 1 / radius;
      const matrix = new Matrix4();
      matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);
      this.applyMatrix4(matrix);
      return this;
    },
    computeFaceNormals: function() {
      const cb = new Vector3(), ab = new Vector3();
      for (let f = 0, fl = this.faces.length; f < fl; f++) {
        const face = this.faces[f];
        const vA = this.vertices[face.a];
        const vB = this.vertices[face.b];
        const vC = this.vertices[face.c];
        cb.subVectors(vC, vB);
        ab.subVectors(vA, vB);
        cb.cross(ab);
        cb.normalize();
        face.normal.copy(cb);
      }
    },
    computeVertexNormals: function(areaWeighted = true) {
      const vertices = new Array(this.vertices.length);
      for (let v = 0, vl = this.vertices.length; v < vl; v++) {
        vertices[v] = new Vector3();
      }
      if (areaWeighted) {
        const cb = new Vector3(), ab = new Vector3();
        for (let f = 0, fl = this.faces.length; f < fl; f++) {
          const face = this.faces[f];
          const vA = this.vertices[face.a];
          const vB = this.vertices[face.b];
          const vC = this.vertices[face.c];
          cb.subVectors(vC, vB);
          ab.subVectors(vA, vB);
          cb.cross(ab);
          vertices[face.a].add(cb);
          vertices[face.b].add(cb);
          vertices[face.c].add(cb);
        }
      } else {
        this.computeFaceNormals();
        for (let f = 0, fl = this.faces.length; f < fl; f++) {
          const face = this.faces[f];
          vertices[face.a].add(face.normal);
          vertices[face.b].add(face.normal);
          vertices[face.c].add(face.normal);
        }
      }
      for (let v = 0, vl = this.vertices.length; v < vl; v++) {
        vertices[v].normalize();
      }
      for (let f = 0, fl = this.faces.length; f < fl; f++) {
        const face = this.faces[f];
        const vertexNormals = face.vertexNormals;
        if (vertexNormals.length === 3) {
          vertexNormals[0].copy(vertices[face.a]);
          vertexNormals[1].copy(vertices[face.b]);
          vertexNormals[2].copy(vertices[face.c]);
        } else {
          vertexNormals[0] = vertices[face.a].clone();
          vertexNormals[1] = vertices[face.b].clone();
          vertexNormals[2] = vertices[face.c].clone();
        }
      }
      if (this.faces.length > 0) {
        this.normalsNeedUpdate = true;
      }
    },
    computeFlatVertexNormals: function() {
      this.computeFaceNormals();
      for (let f = 0, fl = this.faces.length; f < fl; f++) {
        const face = this.faces[f];
        const vertexNormals = face.vertexNormals;
        if (vertexNormals.length === 3) {
          vertexNormals[0].copy(face.normal);
          vertexNormals[1].copy(face.normal);
          vertexNormals[2].copy(face.normal);
        } else {
          vertexNormals[0] = face.normal.clone();
          vertexNormals[1] = face.normal.clone();
          vertexNormals[2] = face.normal.clone();
        }
      }
      if (this.faces.length > 0) {
        this.normalsNeedUpdate = true;
      }
    },
    computeMorphNormals: function() {
      for (let f = 0, fl = this.faces.length; f < fl; f++) {
        const face = this.faces[f];
        if (!face.__originalFaceNormal) {
          face.__originalFaceNormal = face.normal.clone();
        } else {
          face.__originalFaceNormal.copy(face.normal);
        }
        if (!face.__originalVertexNormals)
          face.__originalVertexNormals = [];
        for (let i = 0, il = face.vertexNormals.length; i < il; i++) {
          if (!face.__originalVertexNormals[i]) {
            face.__originalVertexNormals[i] = face.vertexNormals[i].clone();
          } else {
            face.__originalVertexNormals[i].copy(face.vertexNormals[i]);
          }
        }
      }
      const tmpGeo = new Geometry();
      tmpGeo.faces = this.faces;
      for (let i = 0, il = this.morphTargets.length; i < il; i++) {
        if (!this.morphNormals[i]) {
          this.morphNormals[i] = {};
          this.morphNormals[i].faceNormals = [];
          this.morphNormals[i].vertexNormals = [];
          const dstNormalsFace = this.morphNormals[i].faceNormals;
          const dstNormalsVertex = this.morphNormals[i].vertexNormals;
          for (let f = 0, fl = this.faces.length; f < fl; f++) {
            const faceNormal = new Vector3();
            const vertexNormals = {a: new Vector3(), b: new Vector3(), c: new Vector3()};
            dstNormalsFace.push(faceNormal);
            dstNormalsVertex.push(vertexNormals);
          }
        }
        const morphNormals = this.morphNormals[i];
        tmpGeo.vertices = this.morphTargets[i].vertices;
        tmpGeo.computeFaceNormals();
        tmpGeo.computeVertexNormals();
        for (let f = 0, fl = this.faces.length; f < fl; f++) {
          const face = this.faces[f];
          const faceNormal = morphNormals.faceNormals[f];
          const vertexNormals = morphNormals.vertexNormals[f];
          faceNormal.copy(face.normal);
          vertexNormals.a.copy(face.vertexNormals[0]);
          vertexNormals.b.copy(face.vertexNormals[1]);
          vertexNormals.c.copy(face.vertexNormals[2]);
        }
      }
      for (let f = 0, fl = this.faces.length; f < fl; f++) {
        const face = this.faces[f];
        face.normal = face.__originalFaceNormal;
        face.vertexNormals = face.__originalVertexNormals;
      }
    },
    computeBoundingBox: function() {
      if (this.boundingBox === null) {
        this.boundingBox = new Box3();
      }
      this.boundingBox.setFromPoints(this.vertices);
    },
    computeBoundingSphere: function() {
      if (this.boundingSphere === null) {
        this.boundingSphere = new Sphere();
      }
      this.boundingSphere.setFromPoints(this.vertices);
    },
    merge: function(geometry, matrix, materialIndexOffset = 0) {
      if (!(geometry && geometry.isGeometry)) {
        console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", geometry);
        return;
      }
      let normalMatrix;
      const vertexOffset = this.vertices.length, vertices1 = this.vertices, vertices2 = geometry.vertices, faces1 = this.faces, faces2 = geometry.faces, colors1 = this.colors, colors2 = geometry.colors;
      if (matrix !== void 0) {
        normalMatrix = new Matrix3().getNormalMatrix(matrix);
      }
      for (let i = 0, il = vertices2.length; i < il; i++) {
        const vertex = vertices2[i];
        const vertexCopy = vertex.clone();
        if (matrix !== void 0)
          vertexCopy.applyMatrix4(matrix);
        vertices1.push(vertexCopy);
      }
      for (let i = 0, il = colors2.length; i < il; i++) {
        colors1.push(colors2[i].clone());
      }
      for (let i = 0, il = faces2.length; i < il; i++) {
        const face = faces2[i];
        let normal, color;
        const faceVertexNormals = face.vertexNormals, faceVertexColors = face.vertexColors;
        const faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);
        faceCopy.normal.copy(face.normal);
        if (normalMatrix !== void 0) {
          faceCopy.normal.applyMatrix3(normalMatrix).normalize();
        }
        for (let j = 0, jl = faceVertexNormals.length; j < jl; j++) {
          normal = faceVertexNormals[j].clone();
          if (normalMatrix !== void 0) {
            normal.applyMatrix3(normalMatrix).normalize();
          }
          faceCopy.vertexNormals.push(normal);
        }
        faceCopy.color.copy(face.color);
        for (let j = 0, jl = faceVertexColors.length; j < jl; j++) {
          color = faceVertexColors[j];
          faceCopy.vertexColors.push(color.clone());
        }
        faceCopy.materialIndex = face.materialIndex + materialIndexOffset;
        faces1.push(faceCopy);
      }
      for (let i = 0, il = geometry.faceVertexUvs.length; i < il; i++) {
        const faceVertexUvs2 = geometry.faceVertexUvs[i];
        if (this.faceVertexUvs[i] === void 0)
          this.faceVertexUvs[i] = [];
        for (let j = 0, jl = faceVertexUvs2.length; j < jl; j++) {
          const uvs2 = faceVertexUvs2[j], uvsCopy = [];
          for (let k = 0, kl = uvs2.length; k < kl; k++) {
            uvsCopy.push(uvs2[k].clone());
          }
          this.faceVertexUvs[i].push(uvsCopy);
        }
      }
    },
    mergeMesh: function(mesh) {
      if (!(mesh && mesh.isMesh)) {
        console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", mesh);
        return;
      }
      if (mesh.matrixAutoUpdate)
        mesh.updateMatrix();
      this.merge(mesh.geometry, mesh.matrix);
    },
    mergeVertices: function(precisionPoints = 4) {
      const verticesMap = {};
      const unique = [], changes = [];
      const precision = Math.pow(10, precisionPoints);
      for (let i = 0, il = this.vertices.length; i < il; i++) {
        const v = this.vertices[i];
        const key = Math.round(v.x * precision) + "_" + Math.round(v.y * precision) + "_" + Math.round(v.z * precision);
        if (verticesMap[key] === void 0) {
          verticesMap[key] = i;
          unique.push(this.vertices[i]);
          changes[i] = unique.length - 1;
        } else {
          changes[i] = changes[verticesMap[key]];
        }
      }
      const faceIndicesToRemove = [];
      for (let i = 0, il = this.faces.length; i < il; i++) {
        const face = this.faces[i];
        face.a = changes[face.a];
        face.b = changes[face.b];
        face.c = changes[face.c];
        const indices = [face.a, face.b, face.c];
        for (let n = 0; n < 3; n++) {
          if (indices[n] === indices[(n + 1) % 3]) {
            faceIndicesToRemove.push(i);
            break;
          }
        }
      }
      for (let i = faceIndicesToRemove.length - 1; i >= 0; i--) {
        const idx = faceIndicesToRemove[i];
        this.faces.splice(idx, 1);
        for (let j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {
          this.faceVertexUvs[j].splice(idx, 1);
        }
      }
      const diff = this.vertices.length - unique.length;
      this.vertices = unique;
      return diff;
    },
    setFromPoints: function(points) {
      this.vertices = [];
      for (let i = 0, l = points.length; i < l; i++) {
        const point = points[i];
        this.vertices.push(new Vector3(point.x, point.y, point.z || 0));
      }
      return this;
    },
    sortFacesByMaterialIndex: function() {
      const faces = this.faces;
      const length = faces.length;
      for (let i = 0; i < length; i++) {
        faces[i]._id = i;
      }
      function materialIndexSort(a, b) {
        return a.materialIndex - b.materialIndex;
      }
      faces.sort(materialIndexSort);
      const uvs1 = this.faceVertexUvs[0];
      const uvs2 = this.faceVertexUvs[1];
      let newUvs1, newUvs2;
      if (uvs1 && uvs1.length === length)
        newUvs1 = [];
      if (uvs2 && uvs2.length === length)
        newUvs2 = [];
      for (let i = 0; i < length; i++) {
        const id = faces[i]._id;
        if (newUvs1)
          newUvs1.push(uvs1[id]);
        if (newUvs2)
          newUvs2.push(uvs2[id]);
      }
      if (newUvs1)
        this.faceVertexUvs[0] = newUvs1;
      if (newUvs2)
        this.faceVertexUvs[1] = newUvs2;
    },
    toJSON: function() {
      const data = {
        metadata: {
          version: 4.5,
          type: "Geometry",
          generator: "Geometry.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "")
        data.name = this.name;
      if (this.parameters !== void 0) {
        const parameters = this.parameters;
        for (const key in parameters) {
          if (parameters[key] !== void 0)
            data[key] = parameters[key];
        }
        return data;
      }
      const vertices = [];
      for (let i = 0; i < this.vertices.length; i++) {
        const vertex = this.vertices[i];
        vertices.push(vertex.x, vertex.y, vertex.z);
      }
      const faces = [];
      const normals = [];
      const normalsHash = {};
      const colors = [];
      const colorsHash = {};
      const uvs = [];
      const uvsHash = {};
      for (let i = 0; i < this.faces.length; i++) {
        const face = this.faces[i];
        const hasMaterial = true;
        const hasFaceUv = false;
        const hasFaceVertexUv = this.faceVertexUvs[0][i] !== void 0;
        const hasFaceNormal = face.normal.length() > 0;
        const hasFaceVertexNormal = face.vertexNormals.length > 0;
        const hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
        const hasFaceVertexColor = face.vertexColors.length > 0;
        let faceType = 0;
        faceType = setBit(faceType, 0, 0);
        faceType = setBit(faceType, 1, hasMaterial);
        faceType = setBit(faceType, 2, hasFaceUv);
        faceType = setBit(faceType, 3, hasFaceVertexUv);
        faceType = setBit(faceType, 4, hasFaceNormal);
        faceType = setBit(faceType, 5, hasFaceVertexNormal);
        faceType = setBit(faceType, 6, hasFaceColor);
        faceType = setBit(faceType, 7, hasFaceVertexColor);
        faces.push(faceType);
        faces.push(face.a, face.b, face.c);
        faces.push(face.materialIndex);
        if (hasFaceVertexUv) {
          const faceVertexUvs = this.faceVertexUvs[0][i];
          faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));
        }
        if (hasFaceNormal) {
          faces.push(getNormalIndex(face.normal));
        }
        if (hasFaceVertexNormal) {
          const vertexNormals = face.vertexNormals;
          faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));
        }
        if (hasFaceColor) {
          faces.push(getColorIndex(face.color));
        }
        if (hasFaceVertexColor) {
          const vertexColors = face.vertexColors;
          faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));
        }
      }
      function setBit(value, position, enabled) {
        return enabled ? value | 1 << position : value & ~(1 << position);
      }
      function getNormalIndex(normal) {
        const hash = normal.x.toString() + normal.y.toString() + normal.z.toString();
        if (normalsHash[hash] !== void 0) {
          return normalsHash[hash];
        }
        normalsHash[hash] = normals.length / 3;
        normals.push(normal.x, normal.y, normal.z);
        return normalsHash[hash];
      }
      function getColorIndex(color) {
        const hash = color.r.toString() + color.g.toString() + color.b.toString();
        if (colorsHash[hash] !== void 0) {
          return colorsHash[hash];
        }
        colorsHash[hash] = colors.length;
        colors.push(color.getHex());
        return colorsHash[hash];
      }
      function getUvIndex(uv) {
        const hash = uv.x.toString() + uv.y.toString();
        if (uvsHash[hash] !== void 0) {
          return uvsHash[hash];
        }
        uvsHash[hash] = uvs.length / 2;
        uvs.push(uv.x, uv.y);
        return uvsHash[hash];
      }
      data.data = {};
      data.data.vertices = vertices;
      data.data.normals = normals;
      if (colors.length > 0)
        data.data.colors = colors;
      if (uvs.length > 0)
        data.data.uvs = [uvs];
      data.data.faces = faces;
      return data;
    },
    clone: function() {
      return new Geometry().copy(this);
    },
    copy: function(source) {
      this.vertices = [];
      this.colors = [];
      this.faces = [];
      this.faceVertexUvs = [[]];
      this.morphTargets = [];
      this.morphNormals = [];
      this.skinWeights = [];
      this.skinIndices = [];
      this.lineDistances = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      this.name = source.name;
      const vertices = source.vertices;
      for (let i = 0, il = vertices.length; i < il; i++) {
        this.vertices.push(vertices[i].clone());
      }
      const colors = source.colors;
      for (let i = 0, il = colors.length; i < il; i++) {
        this.colors.push(colors[i].clone());
      }
      const faces = source.faces;
      for (let i = 0, il = faces.length; i < il; i++) {
        this.faces.push(faces[i].clone());
      }
      for (let i = 0, il = source.faceVertexUvs.length; i < il; i++) {
        const faceVertexUvs = source.faceVertexUvs[i];
        if (this.faceVertexUvs[i] === void 0) {
          this.faceVertexUvs[i] = [];
        }
        for (let j = 0, jl = faceVertexUvs.length; j < jl; j++) {
          const uvs = faceVertexUvs[j], uvsCopy = [];
          for (let k = 0, kl = uvs.length; k < kl; k++) {
            const uv = uvs[k];
            uvsCopy.push(uv.clone());
          }
          this.faceVertexUvs[i].push(uvsCopy);
        }
      }
      const morphTargets = source.morphTargets;
      for (let i = 0, il = morphTargets.length; i < il; i++) {
        const morphTarget = {};
        morphTarget.name = morphTargets[i].name;
        if (morphTargets[i].vertices !== void 0) {
          morphTarget.vertices = [];
          for (let j = 0, jl = morphTargets[i].vertices.length; j < jl; j++) {
            morphTarget.vertices.push(morphTargets[i].vertices[j].clone());
          }
        }
        if (morphTargets[i].normals !== void 0) {
          morphTarget.normals = [];
          for (let j = 0, jl = morphTargets[i].normals.length; j < jl; j++) {
            morphTarget.normals.push(morphTargets[i].normals[j].clone());
          }
        }
        this.morphTargets.push(morphTarget);
      }
      const morphNormals = source.morphNormals;
      for (let i = 0, il = morphNormals.length; i < il; i++) {
        const morphNormal = {};
        if (morphNormals[i].vertexNormals !== void 0) {
          morphNormal.vertexNormals = [];
          for (let j = 0, jl = morphNormals[i].vertexNormals.length; j < jl; j++) {
            const srcVertexNormal = morphNormals[i].vertexNormals[j];
            const destVertexNormal = {};
            destVertexNormal.a = srcVertexNormal.a.clone();
            destVertexNormal.b = srcVertexNormal.b.clone();
            destVertexNormal.c = srcVertexNormal.c.clone();
            morphNormal.vertexNormals.push(destVertexNormal);
          }
        }
        if (morphNormals[i].faceNormals !== void 0) {
          morphNormal.faceNormals = [];
          for (let j = 0, jl = morphNormals[i].faceNormals.length; j < jl; j++) {
            morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());
          }
        }
        this.morphNormals.push(morphNormal);
      }
      const skinWeights = source.skinWeights;
      for (let i = 0, il = skinWeights.length; i < il; i++) {
        this.skinWeights.push(skinWeights[i].clone());
      }
      const skinIndices = source.skinIndices;
      for (let i = 0, il = skinIndices.length; i < il; i++) {
        this.skinIndices.push(skinIndices[i].clone());
      }
      const lineDistances = source.lineDistances;
      for (let i = 0, il = lineDistances.length; i < il; i++) {
        this.lineDistances.push(lineDistances[i]);
      }
      const boundingBox = source.boundingBox;
      if (boundingBox !== null) {
        this.boundingBox = boundingBox.clone();
      }
      const boundingSphere = source.boundingSphere;
      if (boundingSphere !== null) {
        this.boundingSphere = boundingSphere.clone();
      }
      this.elementsNeedUpdate = source.elementsNeedUpdate;
      this.verticesNeedUpdate = source.verticesNeedUpdate;
      this.uvsNeedUpdate = source.uvsNeedUpdate;
      this.normalsNeedUpdate = source.normalsNeedUpdate;
      this.colorsNeedUpdate = source.colorsNeedUpdate;
      this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
      this.groupsNeedUpdate = source.groupsNeedUpdate;
      return this;
    },
    dispose: function() {
      this.dispatchEvent({type: "dispose"});
    }
  });
  var _v0$2 = new Vector3();
  var _v1$5 = new Vector3();
  var _normal$1 = new Vector3();
  var _triangle = new Triangle();
  var Earcut = {
    triangulate: function(data, holeIndices, dim) {
      dim = dim || 2;
      const hasHoles = holeIndices && holeIndices.length;
      const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
      let outerNode = linkedList(data, 0, outerLen, dim, true);
      const triangles = [];
      if (!outerNode || outerNode.next === outerNode.prev)
        return triangles;
      let minX, minY, maxX, maxY, x, y, invSize;
      if (hasHoles)
        outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
      if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];
        for (let i = dim; i < outerLen; i += dim) {
          x = data[i];
          y = data[i + 1];
          if (x < minX)
            minX = x;
          if (y < minY)
            minY = y;
          if (x > maxX)
            maxX = x;
          if (y > maxY)
            maxY = y;
        }
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 1 / invSize : 0;
      }
      earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
      return triangles;
    }
  };
  function linkedList(data, start, end, dim, clockwise) {
    let i, last;
    if (clockwise === signedArea(data, start, end, dim) > 0) {
      for (i = start; i < end; i += dim)
        last = insertNode(i, data[i], data[i + 1], last);
    } else {
      for (i = end - dim; i >= start; i -= dim)
        last = insertNode(i, data[i], data[i + 1], last);
    }
    if (last && equals(last, last.next)) {
      removeNode(last);
      last = last.next;
    }
    return last;
  }
  function filterPoints(start, end) {
    if (!start)
      return start;
    if (!end)
      end = start;
    let p = start, again;
    do {
      again = false;
      if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
        removeNode(p);
        p = end = p.prev;
        if (p === p.next)
          break;
        again = true;
      } else {
        p = p.next;
      }
    } while (again || p !== end);
    return end;
  }
  function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear)
      return;
    if (!pass && invSize)
      indexCurve(ear, minX, minY, invSize);
    let stop = ear, prev, next;
    while (ear.prev !== ear.next) {
      prev = ear.prev;
      next = ear.next;
      if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
        triangles.push(prev.i / dim);
        triangles.push(ear.i / dim);
        triangles.push(next.i / dim);
        removeNode(ear);
        ear = next.next;
        stop = next.next;
        continue;
      }
      ear = next;
      if (ear === stop) {
        if (!pass) {
          earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
        } else if (pass === 1) {
          ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
          earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
        } else if (pass === 2) {
          splitEarcut(ear, triangles, dim, minX, minY, invSize);
        }
        break;
      }
    }
  }
  function isEar(ear) {
    const a = ear.prev, b = ear, c = ear.next;
    if (area(a, b, c) >= 0)
      return false;
    let p = ear.next.next;
    while (p !== ear.prev) {
      if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)
        return false;
      p = p.next;
    }
    return true;
  }
  function isEarHashed(ear, minX, minY, invSize) {
    const a = ear.prev, b = ear, c = ear.next;
    if (area(a, b, c) >= 0)
      return false;
    const minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x, minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y, maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x, maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
    const minZ = zOrder(minTX, minTY, minX, minY, invSize), maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
    let p = ear.prevZ, n = ear.nextZ;
    while (p && p.z >= minZ && n && n.z <= maxZ) {
      if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)
        return false;
      p = p.prevZ;
      if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0)
        return false;
      n = n.nextZ;
    }
    while (p && p.z >= minZ) {
      if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)
        return false;
      p = p.prevZ;
    }
    while (n && n.z <= maxZ) {
      if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0)
        return false;
      n = n.nextZ;
    }
    return true;
  }
  function cureLocalIntersections(start, triangles, dim) {
    let p = start;
    do {
      const a = p.prev, b = p.next.next;
      if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
        triangles.push(a.i / dim);
        triangles.push(p.i / dim);
        triangles.push(b.i / dim);
        removeNode(p);
        removeNode(p.next);
        p = start = b;
      }
      p = p.next;
    } while (p !== start);
    return filterPoints(p);
  }
  function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    let a = start;
    do {
      let b = a.next.next;
      while (b !== a.prev) {
        if (a.i !== b.i && isValidDiagonal(a, b)) {
          let c = splitPolygon(a, b);
          a = filterPoints(a, a.next);
          c = filterPoints(c, c.next);
          earcutLinked(a, triangles, dim, minX, minY, invSize);
          earcutLinked(c, triangles, dim, minX, minY, invSize);
          return;
        }
        b = b.next;
      }
      a = a.next;
    } while (a !== start);
  }
  function eliminateHoles(data, holeIndices, outerNode, dim) {
    const queue = [];
    let i, len, start, end, list;
    for (i = 0, len = holeIndices.length; i < len; i++) {
      start = holeIndices[i] * dim;
      end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
      list = linkedList(data, start, end, dim, false);
      if (list === list.next)
        list.steiner = true;
      queue.push(getLeftmost(list));
    }
    queue.sort(compareX);
    for (i = 0; i < queue.length; i++) {
      eliminateHole(queue[i], outerNode);
      outerNode = filterPoints(outerNode, outerNode.next);
    }
    return outerNode;
  }
  function compareX(a, b) {
    return a.x - b.x;
  }
  function eliminateHole(hole, outerNode) {
    outerNode = findHoleBridge(hole, outerNode);
    if (outerNode) {
      const b = splitPolygon(outerNode, hole);
      filterPoints(outerNode, outerNode.next);
      filterPoints(b, b.next);
    }
  }
  function findHoleBridge(hole, outerNode) {
    let p = outerNode;
    const hx = hole.x;
    const hy = hole.y;
    let qx = -Infinity, m;
    do {
      if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
        const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
        if (x <= hx && x > qx) {
          qx = x;
          if (x === hx) {
            if (hy === p.y)
              return p;
            if (hy === p.next.y)
              return p.next;
          }
          m = p.x < p.next.x ? p : p.next;
        }
      }
      p = p.next;
    } while (p !== outerNode);
    if (!m)
      return null;
    if (hx === qx)
      return m;
    const stop = m, mx = m.x, my = m.y;
    let tanMin = Infinity, tan;
    p = m;
    do {
      if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
        tan = Math.abs(hy - p.y) / (hx - p.x);
        if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
          m = p;
          tanMin = tan;
        }
      }
      p = p.next;
    } while (p !== stop);
    return m;
  }
  function sectorContainsSector(m, p) {
    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
  }
  function indexCurve(start, minX, minY, invSize) {
    let p = start;
    do {
      if (p.z === null)
        p.z = zOrder(p.x, p.y, minX, minY, invSize);
      p.prevZ = p.prev;
      p.nextZ = p.next;
      p = p.next;
    } while (p !== start);
    p.prevZ.nextZ = null;
    p.prevZ = null;
    sortLinked(p);
  }
  function sortLinked(list) {
    let i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
    do {
      p = list;
      list = null;
      tail = null;
      numMerges = 0;
      while (p) {
        numMerges++;
        q = p;
        pSize = 0;
        for (i = 0; i < inSize; i++) {
          pSize++;
          q = q.nextZ;
          if (!q)
            break;
        }
        qSize = inSize;
        while (pSize > 0 || qSize > 0 && q) {
          if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
            e = p;
            p = p.nextZ;
            pSize--;
          } else {
            e = q;
            q = q.nextZ;
            qSize--;
          }
          if (tail)
            tail.nextZ = e;
          else
            list = e;
          e.prevZ = tail;
          tail = e;
        }
        p = q;
      }
      tail.nextZ = null;
      inSize *= 2;
    } while (numMerges > 1);
    return list;
  }
  function zOrder(x, y, minX, minY, invSize) {
    x = 32767 * (x - minX) * invSize;
    y = 32767 * (y - minY) * invSize;
    x = (x | x << 8) & 16711935;
    x = (x | x << 4) & 252645135;
    x = (x | x << 2) & 858993459;
    x = (x | x << 1) & 1431655765;
    y = (y | y << 8) & 16711935;
    y = (y | y << 4) & 252645135;
    y = (y | y << 2) & 858993459;
    y = (y | y << 1) & 1431655765;
    return x | y << 1;
  }
  function getLeftmost(start) {
    let p = start, leftmost = start;
    do {
      if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y)
        leftmost = p;
      p = p.next;
    } while (p !== start);
    return leftmost;
  }
  function pointInTriangle(ax, ay, bx, by, cx, cy, px2, py2) {
    return (cx - px2) * (ay - py2) - (ax - px2) * (cy - py2) >= 0 && (ax - px2) * (by - py2) - (bx - px2) * (ay - py2) >= 0 && (bx - px2) * (cy - py2) - (cx - px2) * (by - py2) >= 0;
  }
  function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && (area(a.prev, a, b.prev) || area(a, b.prev, b)) || equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0);
  }
  function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
  }
  function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
  }
  function intersects(p1, q1, p2, q2) {
    const o1 = sign(area(p1, q1, p2));
    const o2 = sign(area(p1, q1, q2));
    const o3 = sign(area(p2, q2, p1));
    const o4 = sign(area(p2, q2, q1));
    if (o1 !== o2 && o3 !== o4)
      return true;
    if (o1 === 0 && onSegment(p1, p2, q1))
      return true;
    if (o2 === 0 && onSegment(p1, q2, q1))
      return true;
    if (o3 === 0 && onSegment(p2, p1, q2))
      return true;
    if (o4 === 0 && onSegment(p2, q1, q2))
      return true;
    return false;
  }
  function onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
  }
  function sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
  }
  function intersectsPolygon(a, b) {
    let p = a;
    do {
      if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b))
        return true;
      p = p.next;
    } while (p !== a);
    return false;
  }
  function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
  }
  function middleInside(a, b) {
    let p = a, inside = false;
    const px2 = (a.x + b.x) / 2, py2 = (a.y + b.y) / 2;
    do {
      if (p.y > py2 !== p.next.y > py2 && p.next.y !== p.y && px2 < (p.next.x - p.x) * (py2 - p.y) / (p.next.y - p.y) + p.x)
        inside = !inside;
      p = p.next;
    } while (p !== a);
    return inside;
  }
  function splitPolygon(a, b) {
    const a2 = new Node(a.i, a.x, a.y), b2 = new Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
    a.next = b;
    b.prev = a;
    a2.next = an;
    an.prev = a2;
    b2.next = a2;
    a2.prev = b2;
    bp.next = b2;
    b2.prev = bp;
    return b2;
  }
  function insertNode(i, x, y, last) {
    const p = new Node(i, x, y);
    if (!last) {
      p.prev = p;
      p.next = p;
    } else {
      p.next = last.next;
      p.prev = last;
      last.next.prev = p;
      last.next = p;
    }
    return p;
  }
  function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;
    if (p.prevZ)
      p.prevZ.nextZ = p.nextZ;
    if (p.nextZ)
      p.nextZ.prevZ = p.prevZ;
  }
  function Node(i, x, y) {
    this.i = i;
    this.x = x;
    this.y = y;
    this.prev = null;
    this.next = null;
    this.z = null;
    this.prevZ = null;
    this.nextZ = null;
    this.steiner = false;
  }
  function signedArea(data, start, end, dim) {
    let sum = 0;
    for (let i = start, j = end - dim; i < end; i += dim) {
      sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
      j = i;
    }
    return sum;
  }
  var ShapeUtils = {
    area: function(contour) {
      const n = contour.length;
      let a = 0;
      for (let p = n - 1, q = 0; q < n; p = q++) {
        a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
      }
      return a * 0.5;
    },
    isClockWise: function(pts) {
      return ShapeUtils.area(pts) < 0;
    },
    triangulateShape: function(contour, holes) {
      const vertices = [];
      const holeIndices = [];
      const faces = [];
      removeDupEndPts(contour);
      addContour(vertices, contour);
      let holeIndex = contour.length;
      holes.forEach(removeDupEndPts);
      for (let i = 0; i < holes.length; i++) {
        holeIndices.push(holeIndex);
        holeIndex += holes[i].length;
        addContour(vertices, holes[i]);
      }
      const triangles = Earcut.triangulate(vertices, holeIndices);
      for (let i = 0; i < triangles.length; i += 3) {
        faces.push(triangles.slice(i, i + 3));
      }
      return faces;
    }
  };
  function removeDupEndPts(points) {
    const l = points.length;
    if (l > 2 && points[l - 1].equals(points[0])) {
      points.pop();
    }
  }
  function addContour(vertices, contour) {
    for (let i = 0; i < contour.length; i++) {
      vertices.push(contour[i].x);
      vertices.push(contour[i].y);
    }
  }
  var ExtrudeBufferGeometry = class extends BufferGeometry {
    constructor(shapes, options) {
      super();
      this.type = "ExtrudeBufferGeometry";
      this.parameters = {
        shapes,
        options
      };
      shapes = Array.isArray(shapes) ? shapes : [shapes];
      const scope = this;
      const verticesArray = [];
      const uvArray = [];
      for (let i = 0, l = shapes.length; i < l; i++) {
        const shape = shapes[i];
        addShape(shape);
      }
      this.setAttribute("position", new Float32BufferAttribute(verticesArray, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvArray, 2));
      this.computeVertexNormals();
      function addShape(shape) {
        const placeholder = [];
        const curveSegments = options.curveSegments !== void 0 ? options.curveSegments : 12;
        const steps = options.steps !== void 0 ? options.steps : 1;
        let depth = options.depth !== void 0 ? options.depth : 100;
        let bevelEnabled = options.bevelEnabled !== void 0 ? options.bevelEnabled : true;
        let bevelThickness = options.bevelThickness !== void 0 ? options.bevelThickness : 6;
        let bevelSize = options.bevelSize !== void 0 ? options.bevelSize : bevelThickness - 2;
        let bevelOffset = options.bevelOffset !== void 0 ? options.bevelOffset : 0;
        let bevelSegments = options.bevelSegments !== void 0 ? options.bevelSegments : 3;
        const extrudePath = options.extrudePath;
        const uvgen = options.UVGenerator !== void 0 ? options.UVGenerator : WorldUVGenerator;
        if (options.amount !== void 0) {
          console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth.");
          depth = options.amount;
        }
        let extrudePts, extrudeByPath = false;
        let splineTube, binormal, normal, position2;
        if (extrudePath) {
          extrudePts = extrudePath.getSpacedPoints(steps);
          extrudeByPath = true;
          bevelEnabled = false;
          splineTube = extrudePath.computeFrenetFrames(steps, false);
          binormal = new Vector3();
          normal = new Vector3();
          position2 = new Vector3();
        }
        if (!bevelEnabled) {
          bevelSegments = 0;
          bevelThickness = 0;
          bevelSize = 0;
          bevelOffset = 0;
        }
        const shapePoints = shape.extractPoints(curveSegments);
        let vertices = shapePoints.shape;
        const holes = shapePoints.holes;
        const reverse = !ShapeUtils.isClockWise(vertices);
        if (reverse) {
          vertices = vertices.reverse();
          for (let h = 0, hl = holes.length; h < hl; h++) {
            const ahole = holes[h];
            if (ShapeUtils.isClockWise(ahole)) {
              holes[h] = ahole.reverse();
            }
          }
        }
        const faces = ShapeUtils.triangulateShape(vertices, holes);
        const contour = vertices;
        for (let h = 0, hl = holes.length; h < hl; h++) {
          const ahole = holes[h];
          vertices = vertices.concat(ahole);
        }
        function scalePt2(pt, vec, size) {
          if (!vec)
            console.error("THREE.ExtrudeGeometry: vec does not exist");
          return vec.clone().multiplyScalar(size).add(pt);
        }
        const vlen = vertices.length, flen = faces.length;
        function getBevelVec(inPt, inPrev, inNext) {
          let v_trans_x, v_trans_y, shrink_by;
          const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
          const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
          const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
          const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
          if (Math.abs(collinear0) > Number.EPSILON) {
            const v_prev_len = Math.sqrt(v_prev_lensq);
            const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
            const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
            const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
            const ptNextShift_x = inNext.x - v_next_y / v_next_len;
            const ptNextShift_y = inNext.y + v_next_x / v_next_len;
            const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
            v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
            v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
            const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
            if (v_trans_lensq <= 2) {
              return new Vector2(v_trans_x, v_trans_y);
            } else {
              shrink_by = Math.sqrt(v_trans_lensq / 2);
            }
          } else {
            let direction_eq = false;
            if (v_prev_x > Number.EPSILON) {
              if (v_next_x > Number.EPSILON) {
                direction_eq = true;
              }
            } else {
              if (v_prev_x < -Number.EPSILON) {
                if (v_next_x < -Number.EPSILON) {
                  direction_eq = true;
                }
              } else {
                if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
                  direction_eq = true;
                }
              }
            }
            if (direction_eq) {
              v_trans_x = -v_prev_y;
              v_trans_y = v_prev_x;
              shrink_by = Math.sqrt(v_prev_lensq);
            } else {
              v_trans_x = v_prev_x;
              v_trans_y = v_prev_y;
              shrink_by = Math.sqrt(v_prev_lensq / 2);
            }
          }
          return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
        }
        const contourMovements = [];
        for (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
          if (j === il)
            j = 0;
          if (k === il)
            k = 0;
          contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);
        }
        const holesMovements = [];
        let oneHoleMovements, verticesMovements = contourMovements.concat();
        for (let h = 0, hl = holes.length; h < hl; h++) {
          const ahole = holes[h];
          oneHoleMovements = [];
          for (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
            if (j === il)
              j = 0;
            if (k === il)
              k = 0;
            oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);
          }
          holesMovements.push(oneHoleMovements);
          verticesMovements = verticesMovements.concat(oneHoleMovements);
        }
        for (let b = 0; b < bevelSegments; b++) {
          const t = b / bevelSegments;
          const z = bevelThickness * Math.cos(t * Math.PI / 2);
          const bs2 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
          for (let i = 0, il = contour.length; i < il; i++) {
            const vert = scalePt2(contour[i], contourMovements[i], bs2);
            v(vert.x, vert.y, -z);
          }
          for (let h = 0, hl = holes.length; h < hl; h++) {
            const ahole = holes[h];
            oneHoleMovements = holesMovements[h];
            for (let i = 0, il = ahole.length; i < il; i++) {
              const vert = scalePt2(ahole[i], oneHoleMovements[i], bs2);
              v(vert.x, vert.y, -z);
            }
          }
        }
        const bs = bevelSize + bevelOffset;
        for (let i = 0; i < vlen; i++) {
          const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
          if (!extrudeByPath) {
            v(vert.x, vert.y, 0);
          } else {
            normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
            binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
            position2.copy(extrudePts[0]).add(normal).add(binormal);
            v(position2.x, position2.y, position2.z);
          }
        }
        for (let s = 1; s <= steps; s++) {
          for (let i = 0; i < vlen; i++) {
            const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
            if (!extrudeByPath) {
              v(vert.x, vert.y, depth / steps * s);
            } else {
              normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
              binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
              position2.copy(extrudePts[s]).add(normal).add(binormal);
              v(position2.x, position2.y, position2.z);
            }
          }
        }
        for (let b = bevelSegments - 1; b >= 0; b--) {
          const t = b / bevelSegments;
          const z = bevelThickness * Math.cos(t * Math.PI / 2);
          const bs2 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
          for (let i = 0, il = contour.length; i < il; i++) {
            const vert = scalePt2(contour[i], contourMovements[i], bs2);
            v(vert.x, vert.y, depth + z);
          }
          for (let h = 0, hl = holes.length; h < hl; h++) {
            const ahole = holes[h];
            oneHoleMovements = holesMovements[h];
            for (let i = 0, il = ahole.length; i < il; i++) {
              const vert = scalePt2(ahole[i], oneHoleMovements[i], bs2);
              if (!extrudeByPath) {
                v(vert.x, vert.y, depth + z);
              } else {
                v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);
              }
            }
          }
        }
        buildLidFaces();
        buildSideFaces();
        function buildLidFaces() {
          const start = verticesArray.length / 3;
          if (bevelEnabled) {
            let layer = 0;
            let offset = vlen * layer;
            for (let i = 0; i < flen; i++) {
              const face = faces[i];
              f3(face[2] + offset, face[1] + offset, face[0] + offset);
            }
            layer = steps + bevelSegments * 2;
            offset = vlen * layer;
            for (let i = 0; i < flen; i++) {
              const face = faces[i];
              f3(face[0] + offset, face[1] + offset, face[2] + offset);
            }
          } else {
            for (let i = 0; i < flen; i++) {
              const face = faces[i];
              f3(face[2], face[1], face[0]);
            }
            for (let i = 0; i < flen; i++) {
              const face = faces[i];
              f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
            }
          }
          scope.addGroup(start, verticesArray.length / 3 - start, 0);
        }
        function buildSideFaces() {
          const start = verticesArray.length / 3;
          let layeroffset = 0;
          sidewalls(contour, layeroffset);
          layeroffset += contour.length;
          for (let h = 0, hl = holes.length; h < hl; h++) {
            const ahole = holes[h];
            sidewalls(ahole, layeroffset);
            layeroffset += ahole.length;
          }
          scope.addGroup(start, verticesArray.length / 3 - start, 1);
        }
        function sidewalls(contour2, layeroffset) {
          let i = contour2.length;
          while (--i >= 0) {
            const j = i;
            let k = i - 1;
            if (k < 0)
              k = contour2.length - 1;
            for (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {
              const slen1 = vlen * s;
              const slen2 = vlen * (s + 1);
              const a = layeroffset + j + slen1, b = layeroffset + k + slen1, c = layeroffset + k + slen2, d = layeroffset + j + slen2;
              f4(a, b, c, d);
            }
          }
        }
        function v(x, y, z) {
          placeholder.push(x);
          placeholder.push(y);
          placeholder.push(z);
        }
        function f3(a, b, c) {
          addVertex(a);
          addVertex(b);
          addVertex(c);
          const nextIndex = verticesArray.length / 3;
          const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
          addUV(uvs[0]);
          addUV(uvs[1]);
          addUV(uvs[2]);
        }
        function f4(a, b, c, d) {
          addVertex(a);
          addVertex(b);
          addVertex(d);
          addVertex(b);
          addVertex(c);
          addVertex(d);
          const nextIndex = verticesArray.length / 3;
          const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
          addUV(uvs[0]);
          addUV(uvs[1]);
          addUV(uvs[3]);
          addUV(uvs[1]);
          addUV(uvs[2]);
          addUV(uvs[3]);
        }
        function addVertex(index) {
          verticesArray.push(placeholder[index * 3 + 0]);
          verticesArray.push(placeholder[index * 3 + 1]);
          verticesArray.push(placeholder[index * 3 + 2]);
        }
        function addUV(vector2) {
          uvArray.push(vector2.x);
          uvArray.push(vector2.y);
        }
      }
    }
    toJSON() {
      const data = BufferGeometry.prototype.toJSON.call(this);
      const shapes = this.parameters.shapes;
      const options = this.parameters.options;
      return toJSON(shapes, options, data);
    }
  };
  var WorldUVGenerator = {
    generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
      const a_x = vertices[indexA * 3];
      const a_y = vertices[indexA * 3 + 1];
      const b_x = vertices[indexB * 3];
      const b_y = vertices[indexB * 3 + 1];
      const c_x = vertices[indexC * 3];
      const c_y = vertices[indexC * 3 + 1];
      return [
        new Vector2(a_x, a_y),
        new Vector2(b_x, b_y),
        new Vector2(c_x, c_y)
      ];
    },
    generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
      const a_x = vertices[indexA * 3];
      const a_y = vertices[indexA * 3 + 1];
      const a_z = vertices[indexA * 3 + 2];
      const b_x = vertices[indexB * 3];
      const b_y = vertices[indexB * 3 + 1];
      const b_z = vertices[indexB * 3 + 2];
      const c_x = vertices[indexC * 3];
      const c_y = vertices[indexC * 3 + 1];
      const c_z = vertices[indexC * 3 + 2];
      const d_x = vertices[indexD * 3];
      const d_y = vertices[indexD * 3 + 1];
      const d_z = vertices[indexD * 3 + 2];
      if (Math.abs(a_y - b_y) < 0.01) {
        return [
          new Vector2(a_x, 1 - a_z),
          new Vector2(b_x, 1 - b_z),
          new Vector2(c_x, 1 - c_z),
          new Vector2(d_x, 1 - d_z)
        ];
      } else {
        return [
          new Vector2(a_y, 1 - a_z),
          new Vector2(b_y, 1 - b_z),
          new Vector2(c_y, 1 - c_z),
          new Vector2(d_y, 1 - d_z)
        ];
      }
    }
  };
  function toJSON(shapes, options, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) {
      for (let i = 0, l = shapes.length; i < l; i++) {
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
      }
    } else {
      data.shapes.push(shapes.uuid);
    }
    if (options.extrudePath !== void 0)
      data.options.extrudePath = options.extrudePath.toJSON();
    return data;
  }
  var ExtrudeGeometry = class extends Geometry {
    constructor(shapes, options) {
      super();
      this.type = "ExtrudeGeometry";
      this.parameters = {
        shapes,
        options
      };
      this.fromBufferGeometry(new ExtrudeBufferGeometry(shapes, options));
      this.mergeVertices();
    }
    toJSON() {
      const data = super.toJSON();
      const shapes = this.parameters.shapes;
      const options = this.parameters.options;
      return toJSON$1(shapes, options, data);
    }
  };
  function toJSON$1(shapes, options, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) {
      for (let i = 0, l = shapes.length; i < l; i++) {
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
      }
    } else {
      data.shapes.push(shapes.uuid);
    }
    if (options.extrudePath !== void 0)
      data.options.extrudePath = options.extrudePath.toJSON();
    return data;
  }
  function ParametricBufferGeometry(func, slices, stacks) {
    BufferGeometry.call(this);
    this.type = "ParametricBufferGeometry";
    this.parameters = {
      func,
      slices,
      stacks
    };
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const EPS = 1e-5;
    const normal = new Vector3();
    const p0 = new Vector3(), p1 = new Vector3();
    const pu = new Vector3(), pv = new Vector3();
    if (func.length < 3) {
      console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
    }
    const sliceCount = slices + 1;
    for (let i = 0; i <= stacks; i++) {
      const v = i / stacks;
      for (let j = 0; j <= slices; j++) {
        const u = j / slices;
        func(u, v, p0);
        vertices.push(p0.x, p0.y, p0.z);
        if (u - EPS >= 0) {
          func(u - EPS, v, p1);
          pu.subVectors(p0, p1);
        } else {
          func(u + EPS, v, p1);
          pu.subVectors(p1, p0);
        }
        if (v - EPS >= 0) {
          func(u, v - EPS, p1);
          pv.subVectors(p0, p1);
        } else {
          func(u, v + EPS, p1);
          pv.subVectors(p1, p0);
        }
        normal.crossVectors(pu, pv).normalize();
        normals.push(normal.x, normal.y, normal.z);
        uvs.push(u, v);
      }
    }
    for (let i = 0; i < stacks; i++) {
      for (let j = 0; j < slices; j++) {
        const a = i * sliceCount + j;
        const b = i * sliceCount + j + 1;
        const c = (i + 1) * sliceCount + j + 1;
        const d = (i + 1) * sliceCount + j;
        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  ParametricBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
  ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;
  function ParametricGeometry(func, slices, stacks) {
    Geometry.call(this);
    this.type = "ParametricGeometry";
    this.parameters = {
      func,
      slices,
      stacks
    };
    this.fromBufferGeometry(new ParametricBufferGeometry(func, slices, stacks));
    this.mergeVertices();
  }
  ParametricGeometry.prototype = Object.create(Geometry.prototype);
  ParametricGeometry.prototype.constructor = ParametricGeometry;
  var ShapeBufferGeometry = class extends BufferGeometry {
    constructor(shapes, curveSegments = 12) {
      super();
      this.type = "ShapeBufferGeometry";
      this.parameters = {
        shapes,
        curveSegments
      };
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      let groupStart = 0;
      let groupCount = 0;
      if (Array.isArray(shapes) === false) {
        addShape(shapes);
      } else {
        for (let i = 0; i < shapes.length; i++) {
          addShape(shapes[i]);
          this.addGroup(groupStart, groupCount, i);
          groupStart += groupCount;
          groupCount = 0;
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      function addShape(shape) {
        const indexOffset = vertices.length / 3;
        const points = shape.extractPoints(curveSegments);
        let shapeVertices = points.shape;
        const shapeHoles = points.holes;
        if (ShapeUtils.isClockWise(shapeVertices) === false) {
          shapeVertices = shapeVertices.reverse();
        }
        for (let i = 0, l = shapeHoles.length; i < l; i++) {
          const shapeHole = shapeHoles[i];
          if (ShapeUtils.isClockWise(shapeHole) === true) {
            shapeHoles[i] = shapeHole.reverse();
          }
        }
        const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);
        for (let i = 0, l = shapeHoles.length; i < l; i++) {
          const shapeHole = shapeHoles[i];
          shapeVertices = shapeVertices.concat(shapeHole);
        }
        for (let i = 0, l = shapeVertices.length; i < l; i++) {
          const vertex = shapeVertices[i];
          vertices.push(vertex.x, vertex.y, 0);
          normals.push(0, 0, 1);
          uvs.push(vertex.x, vertex.y);
        }
        for (let i = 0, l = faces.length; i < l; i++) {
          const face = faces[i];
          const a = face[0] + indexOffset;
          const b = face[1] + indexOffset;
          const c = face[2] + indexOffset;
          indices.push(a, b, c);
          groupCount += 3;
        }
      }
    }
    toJSON() {
      const data = BufferGeometry.prototype.toJSON.call(this);
      const shapes = this.parameters.shapes;
      return toJSON$2(shapes, data);
    }
  };
  function toJSON$2(shapes, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) {
      for (let i = 0, l = shapes.length; i < l; i++) {
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
      }
    } else {
      data.shapes.push(shapes.uuid);
    }
    return data;
  }
  var ShapeGeometry = class extends Geometry {
    constructor(shapes, curveSegments) {
      super();
      this.type = "ShapeGeometry";
      if (typeof curveSegments === "object") {
        console.warn("THREE.ShapeGeometry: Options parameter has been removed.");
        curveSegments = curveSegments.curveSegments;
      }
      this.parameters = {
        shapes,
        curveSegments
      };
      this.fromBufferGeometry(new ShapeBufferGeometry(shapes, curveSegments));
      this.mergeVertices();
    }
    toJSON() {
      const data = Geometry.prototype.toJSON.call(this);
      const shapes = this.parameters.shapes;
      return toJSON$3(shapes, data);
    }
  };
  function toJSON$3(shapes, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) {
      for (let i = 0, l = shapes.length; i < l; i++) {
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
      }
    } else {
      data.shapes.push(shapes.uuid);
    }
    return data;
  }
  function ShadowMaterial(parameters) {
    Material.call(this);
    this.type = "ShadowMaterial";
    this.color = new Color(0);
    this.transparent = true;
    this.setValues(parameters);
  }
  ShadowMaterial.prototype = Object.create(Material.prototype);
  ShadowMaterial.prototype.constructor = ShadowMaterial;
  ShadowMaterial.prototype.isShadowMaterial = true;
  ShadowMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    return this;
  };
  function RawShaderMaterial(parameters) {
    ShaderMaterial.call(this, parameters);
    this.type = "RawShaderMaterial";
  }
  RawShaderMaterial.prototype = Object.create(ShaderMaterial.prototype);
  RawShaderMaterial.prototype.constructor = RawShaderMaterial;
  RawShaderMaterial.prototype.isRawShaderMaterial = true;
  function MeshStandardMaterial(parameters) {
    Material.call(this);
    this.defines = {STANDARD: ""};
    this.type = "MeshStandardMaterial";
    this.color = new Color(16777215);
    this.roughness = 1;
    this.metalness = 0;
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap;
    this.normalScale = new Vector2(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.roughnessMap = null;
    this.metalnessMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.envMapIntensity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.skinning = false;
    this.morphTargets = false;
    this.morphNormals = false;
    this.vertexTangents = false;
    this.setValues(parameters);
  }
  MeshStandardMaterial.prototype = Object.create(Material.prototype);
  MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;
  MeshStandardMaterial.prototype.isMeshStandardMaterial = true;
  MeshStandardMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.defines = {STANDARD: ""};
    this.color.copy(source.color);
    this.roughness = source.roughness;
    this.metalness = source.metalness;
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.roughnessMap = source.roughnessMap;
    this.metalnessMap = source.metalnessMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.envMapIntensity = source.envMapIntensity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.morphNormals = source.morphNormals;
    this.vertexTangents = source.vertexTangents;
    return this;
  };
  function MeshPhysicalMaterial(parameters) {
    MeshStandardMaterial.call(this);
    this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    };
    this.type = "MeshPhysicalMaterial";
    this.clearcoat = 0;
    this.clearcoatMap = null;
    this.clearcoatRoughness = 0;
    this.clearcoatRoughnessMap = null;
    this.clearcoatNormalScale = new Vector2(1, 1);
    this.clearcoatNormalMap = null;
    this.reflectivity = 0.5;
    Object.defineProperty(this, "ior", {
      get: function() {
        return (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);
      },
      set: function(ior) {
        this.reflectivity = MathUtils.clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);
      }
    });
    this.sheen = null;
    this.transmission = 0;
    this.transmissionMap = null;
    this.setValues(parameters);
  }
  MeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);
  MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;
  MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
  MeshPhysicalMaterial.prototype.copy = function(source) {
    MeshStandardMaterial.prototype.copy.call(this, source);
    this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    };
    this.clearcoat = source.clearcoat;
    this.clearcoatMap = source.clearcoatMap;
    this.clearcoatRoughness = source.clearcoatRoughness;
    this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
    this.clearcoatNormalMap = source.clearcoatNormalMap;
    this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
    this.reflectivity = source.reflectivity;
    if (source.sheen) {
      this.sheen = (this.sheen || new Color()).copy(source.sheen);
    } else {
      this.sheen = null;
    }
    this.transmission = source.transmission;
    this.transmissionMap = source.transmissionMap;
    return this;
  };
  function MeshPhongMaterial(parameters) {
    Material.call(this);
    this.type = "MeshPhongMaterial";
    this.color = new Color(16777215);
    this.specular = new Color(1118481);
    this.shininess = 30;
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap;
    this.normalScale = new Vector2(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.combine = MultiplyOperation;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.skinning = false;
    this.morphTargets = false;
    this.morphNormals = false;
    this.setValues(parameters);
  }
  MeshPhongMaterial.prototype = Object.create(Material.prototype);
  MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;
  MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
  MeshPhongMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.specular.copy(source.specular);
    this.shininess = source.shininess;
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.morphNormals = source.morphNormals;
    return this;
  };
  function MeshToonMaterial(parameters) {
    Material.call(this);
    this.defines = {TOON: ""};
    this.type = "MeshToonMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.gradientMap = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap;
    this.normalScale = new Vector2(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.alphaMap = null;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.skinning = false;
    this.morphTargets = false;
    this.morphNormals = false;
    this.setValues(parameters);
  }
  MeshToonMaterial.prototype = Object.create(Material.prototype);
  MeshToonMaterial.prototype.constructor = MeshToonMaterial;
  MeshToonMaterial.prototype.isMeshToonMaterial = true;
  MeshToonMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.map = source.map;
    this.gradientMap = source.gradientMap;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.alphaMap = source.alphaMap;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.morphNormals = source.morphNormals;
    return this;
  };
  function MeshNormalMaterial(parameters) {
    Material.call(this);
    this.type = "MeshNormalMaterial";
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap;
    this.normalScale = new Vector2(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.fog = false;
    this.skinning = false;
    this.morphTargets = false;
    this.morphNormals = false;
    this.setValues(parameters);
  }
  MeshNormalMaterial.prototype = Object.create(Material.prototype);
  MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;
  MeshNormalMaterial.prototype.isMeshNormalMaterial = true;
  MeshNormalMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.morphNormals = source.morphNormals;
    return this;
  };
  function MeshLambertMaterial(parameters) {
    Material.call(this);
    this.type = "MeshLambertMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.combine = MultiplyOperation;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.skinning = false;
    this.morphTargets = false;
    this.morphNormals = false;
    this.setValues(parameters);
  }
  MeshLambertMaterial.prototype = Object.create(Material.prototype);
  MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;
  MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
  MeshLambertMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.morphNormals = source.morphNormals;
    return this;
  };
  function MeshMatcapMaterial(parameters) {
    Material.call(this);
    this.defines = {MATCAP: ""};
    this.type = "MeshMatcapMaterial";
    this.color = new Color(16777215);
    this.matcap = null;
    this.map = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap;
    this.normalScale = new Vector2(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.alphaMap = null;
    this.skinning = false;
    this.morphTargets = false;
    this.morphNormals = false;
    this.setValues(parameters);
  }
  MeshMatcapMaterial.prototype = Object.create(Material.prototype);
  MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;
  MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;
  MeshMatcapMaterial.prototype.copy = function(source) {
    Material.prototype.copy.call(this, source);
    this.defines = {MATCAP: ""};
    this.color.copy(source.color);
    this.matcap = source.matcap;
    this.map = source.map;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.alphaMap = source.alphaMap;
    this.skinning = source.skinning;
    this.morphTargets = source.morphTargets;
    this.morphNormals = source.morphNormals;
    return this;
  };
  function LineDashedMaterial(parameters) {
    LineBasicMaterial.call(this);
    this.type = "LineDashedMaterial";
    this.scale = 1;
    this.dashSize = 3;
    this.gapSize = 1;
    this.setValues(parameters);
  }
  LineDashedMaterial.prototype = Object.create(LineBasicMaterial.prototype);
  LineDashedMaterial.prototype.constructor = LineDashedMaterial;
  LineDashedMaterial.prototype.isLineDashedMaterial = true;
  LineDashedMaterial.prototype.copy = function(source) {
    LineBasicMaterial.prototype.copy.call(this, source);
    this.scale = source.scale;
    this.dashSize = source.dashSize;
    this.gapSize = source.gapSize;
    return this;
  };
  var Materials = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    ShadowMaterial,
    SpriteMaterial,
    RawShaderMaterial,
    ShaderMaterial,
    PointsMaterial,
    MeshPhysicalMaterial,
    MeshStandardMaterial,
    MeshPhongMaterial,
    MeshToonMaterial,
    MeshNormalMaterial,
    MeshLambertMaterial,
    MeshDepthMaterial,
    MeshDistanceMaterial,
    MeshBasicMaterial,
    MeshMatcapMaterial,
    LineDashedMaterial,
    LineBasicMaterial,
    Material
  });
  var AnimationUtils = {
    arraySlice: function(array, from, to) {
      if (AnimationUtils.isTypedArray(array)) {
        return new array.constructor(array.subarray(from, to !== void 0 ? to : array.length));
      }
      return array.slice(from, to);
    },
    convertArray: function(array, type, forceClone) {
      if (!array || !forceClone && array.constructor === type)
        return array;
      if (typeof type.BYTES_PER_ELEMENT === "number") {
        return new type(array);
      }
      return Array.prototype.slice.call(array);
    },
    isTypedArray: function(object) {
      return ArrayBuffer.isView(object) && !(object instanceof DataView);
    },
    getKeyframeOrder: function(times) {
      function compareTime(i, j) {
        return times[i] - times[j];
      }
      const n = times.length;
      const result = new Array(n);
      for (let i = 0; i !== n; ++i)
        result[i] = i;
      result.sort(compareTime);
      return result;
    },
    sortedArray: function(values, stride, order) {
      const nValues = values.length;
      const result = new values.constructor(nValues);
      for (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {
        const srcOffset = order[i] * stride;
        for (let j = 0; j !== stride; ++j) {
          result[dstOffset++] = values[srcOffset + j];
        }
      }
      return result;
    },
    flattenJSON: function(jsonKeys, times, values, valuePropertyName) {
      let i = 1, key = jsonKeys[0];
      while (key !== void 0 && key[valuePropertyName] === void 0) {
        key = jsonKeys[i++];
      }
      if (key === void 0)
        return;
      let value = key[valuePropertyName];
      if (value === void 0)
        return;
      if (Array.isArray(value)) {
        do {
          value = key[valuePropertyName];
          if (value !== void 0) {
            times.push(key.time);
            values.push.apply(values, value);
          }
          key = jsonKeys[i++];
        } while (key !== void 0);
      } else if (value.toArray !== void 0) {
        do {
          value = key[valuePropertyName];
          if (value !== void 0) {
            times.push(key.time);
            value.toArray(values, values.length);
          }
          key = jsonKeys[i++];
        } while (key !== void 0);
      } else {
        do {
          value = key[valuePropertyName];
          if (value !== void 0) {
            times.push(key.time);
            values.push(value);
          }
          key = jsonKeys[i++];
        } while (key !== void 0);
      }
    },
    subclip: function(sourceClip, name, startFrame, endFrame, fps = 30) {
      const clip = sourceClip.clone();
      clip.name = name;
      const tracks = [];
      for (let i = 0; i < clip.tracks.length; ++i) {
        const track = clip.tracks[i];
        const valueSize = track.getValueSize();
        const times = [];
        const values = [];
        for (let j = 0; j < track.times.length; ++j) {
          const frame = track.times[j] * fps;
          if (frame < startFrame || frame >= endFrame)
            continue;
          times.push(track.times[j]);
          for (let k = 0; k < valueSize; ++k) {
            values.push(track.values[j * valueSize + k]);
          }
        }
        if (times.length === 0)
          continue;
        track.times = AnimationUtils.convertArray(times, track.times.constructor);
        track.values = AnimationUtils.convertArray(values, track.values.constructor);
        tracks.push(track);
      }
      clip.tracks = tracks;
      let minStartTime = Infinity;
      for (let i = 0; i < clip.tracks.length; ++i) {
        if (minStartTime > clip.tracks[i].times[0]) {
          minStartTime = clip.tracks[i].times[0];
        }
      }
      for (let i = 0; i < clip.tracks.length; ++i) {
        clip.tracks[i].shift(-1 * minStartTime);
      }
      clip.resetDuration();
      return clip;
    },
    makeClipAdditive: function(targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
      if (fps <= 0)
        fps = 30;
      const numTracks = referenceClip.tracks.length;
      const referenceTime = referenceFrame / fps;
      for (let i = 0; i < numTracks; ++i) {
        const referenceTrack = referenceClip.tracks[i];
        const referenceTrackType = referenceTrack.ValueTypeName;
        if (referenceTrackType === "bool" || referenceTrackType === "string")
          continue;
        const targetTrack = targetClip.tracks.find(function(track) {
          return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
        });
        if (targetTrack === void 0)
          continue;
        let referenceOffset = 0;
        const referenceValueSize = referenceTrack.getValueSize();
        if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
          referenceOffset = referenceValueSize / 3;
        }
        let targetOffset = 0;
        const targetValueSize = targetTrack.getValueSize();
        if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
          targetOffset = targetValueSize / 3;
        }
        const lastIndex = referenceTrack.times.length - 1;
        let referenceValue;
        if (referenceTime <= referenceTrack.times[0]) {
          const startIndex = referenceOffset;
          const endIndex = referenceValueSize - referenceOffset;
          referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
        } else if (referenceTime >= referenceTrack.times[lastIndex]) {
          const startIndex = lastIndex * referenceValueSize + referenceOffset;
          const endIndex = startIndex + referenceValueSize - referenceOffset;
          referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
        } else {
          const interpolant = referenceTrack.createInterpolant();
          const startIndex = referenceOffset;
          const endIndex = referenceValueSize - referenceOffset;
          interpolant.evaluate(referenceTime);
          referenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);
        }
        if (referenceTrackType === "quaternion") {
          const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();
          referenceQuat.toArray(referenceValue);
        }
        const numTimes = targetTrack.times.length;
        for (let j = 0; j < numTimes; ++j) {
          const valueStart = j * targetValueSize + targetOffset;
          if (referenceTrackType === "quaternion") {
            Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
          } else {
            const valueEnd = targetValueSize - targetOffset * 2;
            for (let k = 0; k < valueEnd; ++k) {
              targetTrack.values[valueStart + k] -= referenceValue[k];
            }
          }
        }
      }
      targetClip.blendMode = AdditiveAnimationBlendMode;
      return targetClip;
    }
  };
  function Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    this.parameterPositions = parameterPositions;
    this._cachedIndex = 0;
    this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
    this.sampleValues = sampleValues;
    this.valueSize = sampleSize;
  }
  Object.assign(Interpolant.prototype, {
    evaluate: function(t) {
      const pp = this.parameterPositions;
      let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
      validate_interval: {
        seek: {
          let right;
          linear_scan: {
            forward_scan:
              if (!(t < t1)) {
                for (let giveUpAt = i1 + 2; ; ) {
                  if (t1 === void 0) {
                    if (t < t0)
                      break forward_scan;
                    i1 = pp.length;
                    this._cachedIndex = i1;
                    return this.afterEnd_(i1 - 1, t, t0);
                  }
                  if (i1 === giveUpAt)
                    break;
                  t0 = t1;
                  t1 = pp[++i1];
                  if (t < t1) {
                    break seek;
                  }
                }
                right = pp.length;
                break linear_scan;
              }
            if (!(t >= t0)) {
              const t1global = pp[1];
              if (t < t1global) {
                i1 = 2;
                t0 = t1global;
              }
              for (let giveUpAt = i1 - 2; ; ) {
                if (t0 === void 0) {
                  this._cachedIndex = 0;
                  return this.beforeStart_(0, t, t1);
                }
                if (i1 === giveUpAt)
                  break;
                t1 = t0;
                t0 = pp[--i1 - 1];
                if (t >= t0) {
                  break seek;
                }
              }
              right = i1;
              i1 = 0;
              break linear_scan;
            }
            break validate_interval;
          }
          while (i1 < right) {
            const mid = i1 + right >>> 1;
            if (t < pp[mid]) {
              right = mid;
            } else {
              i1 = mid + 1;
            }
          }
          t1 = pp[i1];
          t0 = pp[i1 - 1];
          if (t0 === void 0) {
            this._cachedIndex = 0;
            return this.beforeStart_(0, t, t1);
          }
          if (t1 === void 0) {
            i1 = pp.length;
            this._cachedIndex = i1;
            return this.afterEnd_(i1 - 1, t0, t);
          }
        }
        this._cachedIndex = i1;
        this.intervalChanged_(i1, t0, t1);
      }
      return this.interpolate_(i1, t0, t, t1);
    },
    settings: null,
    DefaultSettings_: {},
    getSettings_: function() {
      return this.settings || this.DefaultSettings_;
    },
    copySampleValue_: function(index) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
      for (let i = 0; i !== stride; ++i) {
        result[i] = values[offset + i];
      }
      return result;
    },
    interpolate_: function() {
      throw new Error("call to abstract method");
    },
    intervalChanged_: function() {
    }
  });
  Object.assign(Interpolant.prototype, {
    beforeStart_: Interpolant.prototype.copySampleValue_,
    afterEnd_: Interpolant.prototype.copySampleValue_
  });
  function CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
    this._weightPrev = -0;
    this._offsetPrev = -0;
    this._weightNext = -0;
    this._offsetNext = -0;
  }
  CubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
    constructor: CubicInterpolant,
    DefaultSettings_: {
      endingStart: ZeroCurvatureEnding,
      endingEnd: ZeroCurvatureEnding
    },
    intervalChanged_: function(i1, t0, t1) {
      const pp = this.parameterPositions;
      let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
      if (tPrev === void 0) {
        switch (this.getSettings_().endingStart) {
          case ZeroSlopeEnding:
            iPrev = i1;
            tPrev = 2 * t0 - t1;
            break;
          case WrapAroundEnding:
            iPrev = pp.length - 2;
            tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
            break;
          default:
            iPrev = i1;
            tPrev = t1;
        }
      }
      if (tNext === void 0) {
        switch (this.getSettings_().endingEnd) {
          case ZeroSlopeEnding:
            iNext = i1;
            tNext = 2 * t1 - t0;
            break;
          case WrapAroundEnding:
            iNext = 1;
            tNext = t1 + pp[1] - pp[0];
            break;
          default:
            iNext = i1 - 1;
            tNext = t0;
        }
      }
      const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
      this._weightPrev = halfDt / (t0 - tPrev);
      this._weightNext = halfDt / (tNext - t1);
      this._offsetPrev = iPrev * stride;
      this._offsetNext = iNext * stride;
    },
    interpolate_: function(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t - t0) / (t1 - t0), pp = p * p, ppp = pp * p;
      const sP = -wP * ppp + 2 * wP * pp - wP * p;
      const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
      const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
      const sN = wN * ppp - wN * pp;
      for (let i = 0; i !== stride; ++i) {
        result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
      }
      return result;
    }
  });
  function LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  LinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
    constructor: LinearInterpolant,
    interpolate_: function(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;
      for (let i = 0; i !== stride; ++i) {
        result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
      }
      return result;
    }
  });
  function DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  DiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
    constructor: DiscreteInterpolant,
    interpolate_: function(i1) {
      return this.copySampleValue_(i1 - 1);
    }
  });
  function KeyframeTrack(name, times, values, interpolation) {
    if (name === void 0)
      throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (times === void 0 || times.length === 0)
      throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
    this.name = name;
    this.times = AnimationUtils.convertArray(times, this.TimeBufferType);
    this.values = AnimationUtils.convertArray(values, this.ValueBufferType);
    this.setInterpolation(interpolation || this.DefaultInterpolation);
  }
  Object.assign(KeyframeTrack, {
    toJSON: function(track) {
      const trackType = track.constructor;
      let json;
      if (trackType.toJSON !== void 0) {
        json = trackType.toJSON(track);
      } else {
        json = {
          name: track.name,
          times: AnimationUtils.convertArray(track.times, Array),
          values: AnimationUtils.convertArray(track.values, Array)
        };
        const interpolation = track.getInterpolation();
        if (interpolation !== track.DefaultInterpolation) {
          json.interpolation = interpolation;
        }
      }
      json.type = track.ValueTypeName;
      return json;
    }
  });
  Object.assign(KeyframeTrack.prototype, {
    constructor: KeyframeTrack,
    TimeBufferType: Float32Array,
    ValueBufferType: Float32Array,
    DefaultInterpolation: InterpolateLinear,
    InterpolantFactoryMethodDiscrete: function(result) {
      return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
    },
    InterpolantFactoryMethodLinear: function(result) {
      return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
    },
    InterpolantFactoryMethodSmooth: function(result) {
      return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
    },
    setInterpolation: function(interpolation) {
      let factoryMethod;
      switch (interpolation) {
        case InterpolateDiscrete:
          factoryMethod = this.InterpolantFactoryMethodDiscrete;
          break;
        case InterpolateLinear:
          factoryMethod = this.InterpolantFactoryMethodLinear;
          break;
        case InterpolateSmooth:
          factoryMethod = this.InterpolantFactoryMethodSmooth;
          break;
      }
      if (factoryMethod === void 0) {
        const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
        if (this.createInterpolant === void 0) {
          if (interpolation !== this.DefaultInterpolation) {
            this.setInterpolation(this.DefaultInterpolation);
          } else {
            throw new Error(message);
          }
        }
        console.warn("THREE.KeyframeTrack:", message);
        return this;
      }
      this.createInterpolant = factoryMethod;
      return this;
    },
    getInterpolation: function() {
      switch (this.createInterpolant) {
        case this.InterpolantFactoryMethodDiscrete:
          return InterpolateDiscrete;
        case this.InterpolantFactoryMethodLinear:
          return InterpolateLinear;
        case this.InterpolantFactoryMethodSmooth:
          return InterpolateSmooth;
      }
    },
    getValueSize: function() {
      return this.values.length / this.times.length;
    },
    shift: function(timeOffset) {
      if (timeOffset !== 0) {
        const times = this.times;
        for (let i = 0, n = times.length; i !== n; ++i) {
          times[i] += timeOffset;
        }
      }
      return this;
    },
    scale: function(timeScale) {
      if (timeScale !== 1) {
        const times = this.times;
        for (let i = 0, n = times.length; i !== n; ++i) {
          times[i] *= timeScale;
        }
      }
      return this;
    },
    trim: function(startTime, endTime) {
      const times = this.times, nKeys = times.length;
      let from = 0, to = nKeys - 1;
      while (from !== nKeys && times[from] < startTime) {
        ++from;
      }
      while (to !== -1 && times[to] > endTime) {
        --to;
      }
      ++to;
      if (from !== 0 || to !== nKeys) {
        if (from >= to) {
          to = Math.max(to, 1);
          from = to - 1;
        }
        const stride = this.getValueSize();
        this.times = AnimationUtils.arraySlice(times, from, to);
        this.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);
      }
      return this;
    },
    validate: function() {
      let valid = true;
      const valueSize = this.getValueSize();
      if (valueSize - Math.floor(valueSize) !== 0) {
        console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
        valid = false;
      }
      const times = this.times, values = this.values, nKeys = times.length;
      if (nKeys === 0) {
        console.error("THREE.KeyframeTrack: Track is empty.", this);
        valid = false;
      }
      let prevTime = null;
      for (let i = 0; i !== nKeys; i++) {
        const currTime = times[i];
        if (typeof currTime === "number" && isNaN(currTime)) {
          console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, currTime);
          valid = false;
          break;
        }
        if (prevTime !== null && prevTime > currTime) {
          console.error("THREE.KeyframeTrack: Out of order keys.", this, i, currTime, prevTime);
          valid = false;
          break;
        }
        prevTime = currTime;
      }
      if (values !== void 0) {
        if (AnimationUtils.isTypedArray(values)) {
          for (let i = 0, n = values.length; i !== n; ++i) {
            const value = values[i];
            if (isNaN(value)) {
              console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, value);
              valid = false;
              break;
            }
          }
        }
      }
      return valid;
    },
    optimize: function() {
      const times = AnimationUtils.arraySlice(this.times), values = AnimationUtils.arraySlice(this.values), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
      let writeIndex = 1;
      for (let i = 1; i < lastIndex; ++i) {
        let keep = false;
        const time = times[i];
        const timeNext = times[i + 1];
        if (time !== timeNext && (i !== 1 || time !== time[0])) {
          if (!smoothInterpolation) {
            const offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;
            for (let j = 0; j !== stride; ++j) {
              const value = values[offset + j];
              if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                keep = true;
                break;
              }
            }
          } else {
            keep = true;
          }
        }
        if (keep) {
          if (i !== writeIndex) {
            times[writeIndex] = times[i];
            const readOffset = i * stride, writeOffset = writeIndex * stride;
            for (let j = 0; j !== stride; ++j) {
              values[writeOffset + j] = values[readOffset + j];
            }
          }
          ++writeIndex;
        }
      }
      if (lastIndex > 0) {
        times[writeIndex] = times[lastIndex];
        for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
          values[writeOffset + j] = values[readOffset + j];
        }
        ++writeIndex;
      }
      if (writeIndex !== times.length) {
        this.times = AnimationUtils.arraySlice(times, 0, writeIndex);
        this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);
      } else {
        this.times = times;
        this.values = values;
      }
      return this;
    },
    clone: function() {
      const times = AnimationUtils.arraySlice(this.times, 0);
      const values = AnimationUtils.arraySlice(this.values, 0);
      const TypedKeyframeTrack = this.constructor;
      const track = new TypedKeyframeTrack(this.name, times, values);
      track.createInterpolant = this.createInterpolant;
      return track;
    }
  });
  function BooleanKeyframeTrack(name, times, values) {
    KeyframeTrack.call(this, name, times, values);
  }
  BooleanKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
    constructor: BooleanKeyframeTrack,
    ValueTypeName: "bool",
    ValueBufferType: Array,
    DefaultInterpolation: InterpolateDiscrete,
    InterpolantFactoryMethodLinear: void 0,
    InterpolantFactoryMethodSmooth: void 0
  });
  function ColorKeyframeTrack(name, times, values, interpolation) {
    KeyframeTrack.call(this, name, times, values, interpolation);
  }
  ColorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
    constructor: ColorKeyframeTrack,
    ValueTypeName: "color"
  });
  function NumberKeyframeTrack(name, times, values, interpolation) {
    KeyframeTrack.call(this, name, times, values, interpolation);
  }
  NumberKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
    constructor: NumberKeyframeTrack,
    ValueTypeName: "number"
  });
  function QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  QuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
    constructor: QuaternionLinearInterpolant,
    interpolate_: function(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0);
      let offset = i1 * stride;
      for (let end = offset + stride; offset !== end; offset += 4) {
        Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
      }
      return result;
    }
  });
  function QuaternionKeyframeTrack(name, times, values, interpolation) {
    KeyframeTrack.call(this, name, times, values, interpolation);
  }
  QuaternionKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
    constructor: QuaternionKeyframeTrack,
    ValueTypeName: "quaternion",
    DefaultInterpolation: InterpolateLinear,
    InterpolantFactoryMethodLinear: function(result) {
      return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
    },
    InterpolantFactoryMethodSmooth: void 0
  });
  function StringKeyframeTrack(name, times, values, interpolation) {
    KeyframeTrack.call(this, name, times, values, interpolation);
  }
  StringKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
    constructor: StringKeyframeTrack,
    ValueTypeName: "string",
    ValueBufferType: Array,
    DefaultInterpolation: InterpolateDiscrete,
    InterpolantFactoryMethodLinear: void 0,
    InterpolantFactoryMethodSmooth: void 0
  });
  function VectorKeyframeTrack(name, times, values, interpolation) {
    KeyframeTrack.call(this, name, times, values, interpolation);
  }
  VectorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
    constructor: VectorKeyframeTrack,
    ValueTypeName: "vector"
  });
  function AnimationClip(name, duration, tracks, blendMode) {
    this.name = name;
    this.tracks = tracks;
    this.duration = duration !== void 0 ? duration : -1;
    this.blendMode = blendMode !== void 0 ? blendMode : NormalAnimationBlendMode;
    this.uuid = MathUtils.generateUUID();
    if (this.duration < 0) {
      this.resetDuration();
    }
  }
  function getTrackTypeForValueTypeName(typeName) {
    switch (typeName.toLowerCase()) {
      case "scalar":
      case "double":
      case "float":
      case "number":
      case "integer":
        return NumberKeyframeTrack;
      case "vector":
      case "vector2":
      case "vector3":
      case "vector4":
        return VectorKeyframeTrack;
      case "color":
        return ColorKeyframeTrack;
      case "quaternion":
        return QuaternionKeyframeTrack;
      case "bool":
      case "boolean":
        return BooleanKeyframeTrack;
      case "string":
        return StringKeyframeTrack;
    }
    throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + typeName);
  }
  function parseKeyframeTrack(json) {
    if (json.type === void 0) {
      throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
    }
    const trackType = getTrackTypeForValueTypeName(json.type);
    if (json.times === void 0) {
      const times = [], values = [];
      AnimationUtils.flattenJSON(json.keys, times, values, "value");
      json.times = times;
      json.values = values;
    }
    if (trackType.parse !== void 0) {
      return trackType.parse(json);
    } else {
      return new trackType(json.name, json.times, json.values, json.interpolation);
    }
  }
  Object.assign(AnimationClip, {
    parse: function(json) {
      const tracks = [], jsonTracks = json.tracks, frameTime = 1 / (json.fps || 1);
      for (let i = 0, n = jsonTracks.length; i !== n; ++i) {
        tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
      }
      const clip = new AnimationClip(json.name, json.duration, tracks, json.blendMode);
      clip.uuid = json.uuid;
      return clip;
    },
    toJSON: function(clip) {
      const tracks = [], clipTracks = clip.tracks;
      const json = {
        name: clip.name,
        duration: clip.duration,
        tracks,
        uuid: clip.uuid,
        blendMode: clip.blendMode
      };
      for (let i = 0, n = clipTracks.length; i !== n; ++i) {
        tracks.push(KeyframeTrack.toJSON(clipTracks[i]));
      }
      return json;
    },
    CreateFromMorphTargetSequence: function(name, morphTargetSequence, fps, noLoop) {
      const numMorphTargets = morphTargetSequence.length;
      const tracks = [];
      for (let i = 0; i < numMorphTargets; i++) {
        let times = [];
        let values = [];
        times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);
        values.push(0, 1, 0);
        const order = AnimationUtils.getKeyframeOrder(times);
        times = AnimationUtils.sortedArray(times, 1, order);
        values = AnimationUtils.sortedArray(values, 1, order);
        if (!noLoop && times[0] === 0) {
          times.push(numMorphTargets);
          values.push(values[0]);
        }
        tracks.push(new NumberKeyframeTrack(".morphTargetInfluences[" + morphTargetSequence[i].name + "]", times, values).scale(1 / fps));
      }
      return new AnimationClip(name, -1, tracks);
    },
    findByName: function(objectOrClipArray, name) {
      let clipArray = objectOrClipArray;
      if (!Array.isArray(objectOrClipArray)) {
        const o = objectOrClipArray;
        clipArray = o.geometry && o.geometry.animations || o.animations;
      }
      for (let i = 0; i < clipArray.length; i++) {
        if (clipArray[i].name === name) {
          return clipArray[i];
        }
      }
      return null;
    },
    CreateClipsFromMorphTargetSequences: function(morphTargets, fps, noLoop) {
      const animationToMorphTargets = {};
      const pattern = /^([\w-]*?)([\d]+)$/;
      for (let i = 0, il = morphTargets.length; i < il; i++) {
        const morphTarget = morphTargets[i];
        const parts = morphTarget.name.match(pattern);
        if (parts && parts.length > 1) {
          const name = parts[1];
          let animationMorphTargets = animationToMorphTargets[name];
          if (!animationMorphTargets) {
            animationToMorphTargets[name] = animationMorphTargets = [];
          }
          animationMorphTargets.push(morphTarget);
        }
      }
      const clips = [];
      for (const name in animationToMorphTargets) {
        clips.push(AnimationClip.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
      }
      return clips;
    },
    parseAnimation: function(animation, bones) {
      if (!animation) {
        console.error("THREE.AnimationClip: No animation in JSONLoader data.");
        return null;
      }
      const addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
        if (animationKeys.length !== 0) {
          const times = [];
          const values = [];
          AnimationUtils.flattenJSON(animationKeys, times, values, propertyName);
          if (times.length !== 0) {
            destTracks.push(new trackType(trackName, times, values));
          }
        }
      };
      const tracks = [];
      const clipName = animation.name || "default";
      const fps = animation.fps || 30;
      const blendMode = animation.blendMode;
      let duration = animation.length || -1;
      const hierarchyTracks = animation.hierarchy || [];
      for (let h = 0; h < hierarchyTracks.length; h++) {
        const animationKeys = hierarchyTracks[h].keys;
        if (!animationKeys || animationKeys.length === 0)
          continue;
        if (animationKeys[0].morphTargets) {
          const morphTargetNames = {};
          let k;
          for (k = 0; k < animationKeys.length; k++) {
            if (animationKeys[k].morphTargets) {
              for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {
                morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
              }
            }
          }
          for (const morphTargetName in morphTargetNames) {
            const times = [];
            const values = [];
            for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {
              const animationKey = animationKeys[k];
              times.push(animationKey.time);
              values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
            }
            tracks.push(new NumberKeyframeTrack(".morphTargetInfluence[" + morphTargetName + "]", times, values));
          }
          duration = morphTargetNames.length * (fps || 1);
        } else {
          const boneName = ".bones[" + bones[h].name + "]";
          addNonemptyTrack(VectorKeyframeTrack, boneName + ".position", animationKeys, "pos", tracks);
          addNonemptyTrack(QuaternionKeyframeTrack, boneName + ".quaternion", animationKeys, "rot", tracks);
          addNonemptyTrack(VectorKeyframeTrack, boneName + ".scale", animationKeys, "scl", tracks);
        }
      }
      if (tracks.length === 0) {
        return null;
      }
      const clip = new AnimationClip(clipName, duration, tracks, blendMode);
      return clip;
    }
  });
  Object.assign(AnimationClip.prototype, {
    resetDuration: function() {
      const tracks = this.tracks;
      let duration = 0;
      for (let i = 0, n = tracks.length; i !== n; ++i) {
        const track = this.tracks[i];
        duration = Math.max(duration, track.times[track.times.length - 1]);
      }
      this.duration = duration;
      return this;
    },
    trim: function() {
      for (let i = 0; i < this.tracks.length; i++) {
        this.tracks[i].trim(0, this.duration);
      }
      return this;
    },
    validate: function() {
      let valid = true;
      for (let i = 0; i < this.tracks.length; i++) {
        valid = valid && this.tracks[i].validate();
      }
      return valid;
    },
    optimize: function() {
      for (let i = 0; i < this.tracks.length; i++) {
        this.tracks[i].optimize();
      }
      return this;
    },
    clone: function() {
      const tracks = [];
      for (let i = 0; i < this.tracks.length; i++) {
        tracks.push(this.tracks[i].clone());
      }
      return new AnimationClip(this.name, this.duration, tracks, this.blendMode);
    },
    toJSON: function() {
      return AnimationClip.toJSON(this);
    }
  });
  var Cache = {
    enabled: false,
    files: {},
    add: function(key, file) {
      if (this.enabled === false)
        return;
      this.files[key] = file;
    },
    get: function(key) {
      if (this.enabled === false)
        return;
      return this.files[key];
    },
    remove: function(key) {
      delete this.files[key];
    },
    clear: function() {
      this.files = {};
    }
  };
  function LoadingManager(onLoad, onProgress, onError) {
    const scope = this;
    let isLoading = false;
    let itemsLoaded = 0;
    let itemsTotal = 0;
    let urlModifier = void 0;
    const handlers = [];
    this.onStart = void 0;
    this.onLoad = onLoad;
    this.onProgress = onProgress;
    this.onError = onError;
    this.itemStart = function(url) {
      itemsTotal++;
      if (isLoading === false) {
        if (scope.onStart !== void 0) {
          scope.onStart(url, itemsLoaded, itemsTotal);
        }
      }
      isLoading = true;
    };
    this.itemEnd = function(url) {
      itemsLoaded++;
      if (scope.onProgress !== void 0) {
        scope.onProgress(url, itemsLoaded, itemsTotal);
      }
      if (itemsLoaded === itemsTotal) {
        isLoading = false;
        if (scope.onLoad !== void 0) {
          scope.onLoad();
        }
      }
    };
    this.itemError = function(url) {
      if (scope.onError !== void 0) {
        scope.onError(url);
      }
    };
    this.resolveURL = function(url) {
      if (urlModifier) {
        return urlModifier(url);
      }
      return url;
    };
    this.setURLModifier = function(transform) {
      urlModifier = transform;
      return this;
    };
    this.addHandler = function(regex, loader) {
      handlers.push(regex, loader);
      return this;
    };
    this.removeHandler = function(regex) {
      const index = handlers.indexOf(regex);
      if (index !== -1) {
        handlers.splice(index, 2);
      }
      return this;
    };
    this.getHandler = function(file) {
      for (let i = 0, l = handlers.length; i < l; i += 2) {
        const regex = handlers[i];
        const loader = handlers[i + 1];
        if (regex.global)
          regex.lastIndex = 0;
        if (regex.test(file)) {
          return loader;
        }
      }
      return null;
    };
  }
  var DefaultLoadingManager = new LoadingManager();
  function Loader(manager) {
    this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
    this.crossOrigin = "anonymous";
    this.withCredentials = false;
    this.path = "";
    this.resourcePath = "";
    this.requestHeader = {};
  }
  Object.assign(Loader.prototype, {
    load: function() {
    },
    loadAsync: function(url, onProgress) {
      const scope = this;
      return new Promise(function(resolve, reject) {
        scope.load(url, resolve, onProgress, reject);
      });
    },
    parse: function() {
    },
    setCrossOrigin: function(crossOrigin) {
      this.crossOrigin = crossOrigin;
      return this;
    },
    setWithCredentials: function(value) {
      this.withCredentials = value;
      return this;
    },
    setPath: function(path) {
      this.path = path;
      return this;
    },
    setResourcePath: function(resourcePath) {
      this.resourcePath = resourcePath;
      return this;
    },
    setRequestHeader: function(requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }
  });
  var loading = {};
  function FileLoader(manager) {
    Loader.call(this, manager);
  }
  FileLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: FileLoader,
    load: function(url, onLoad, onProgress, onError) {
      if (url === void 0)
        url = "";
      if (this.path !== void 0)
        url = this.path + url;
      url = this.manager.resolveURL(url);
      const scope = this;
      const cached = Cache.get(url);
      if (cached !== void 0) {
        scope.manager.itemStart(url);
        setTimeout(function() {
          if (onLoad)
            onLoad(cached);
          scope.manager.itemEnd(url);
        }, 0);
        return cached;
      }
      if (loading[url] !== void 0) {
        loading[url].push({
          onLoad,
          onProgress,
          onError
        });
        return;
      }
      const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
      const dataUriRegexResult = url.match(dataUriRegex);
      let request;
      if (dataUriRegexResult) {
        const mimeType = dataUriRegexResult[1];
        const isBase64 = !!dataUriRegexResult[2];
        let data = dataUriRegexResult[3];
        data = decodeURIComponent(data);
        if (isBase64)
          data = atob(data);
        try {
          let response;
          const responseType = (this.responseType || "").toLowerCase();
          switch (responseType) {
            case "arraybuffer":
            case "blob":
              const view = new Uint8Array(data.length);
              for (let i = 0; i < data.length; i++) {
                view[i] = data.charCodeAt(i);
              }
              if (responseType === "blob") {
                response = new Blob([view.buffer], {type: mimeType});
              } else {
                response = view.buffer;
              }
              break;
            case "document":
              const parser = new DOMParser();
              response = parser.parseFromString(data, mimeType);
              break;
            case "json":
              response = JSON.parse(data);
              break;
            default:
              response = data;
              break;
          }
          setTimeout(function() {
            if (onLoad)
              onLoad(response);
            scope.manager.itemEnd(url);
          }, 0);
        } catch (error) {
          setTimeout(function() {
            if (onError)
              onError(error);
            scope.manager.itemError(url);
            scope.manager.itemEnd(url);
          }, 0);
        }
      } else {
        loading[url] = [];
        loading[url].push({
          onLoad,
          onProgress,
          onError
        });
        request = new XMLHttpRequest();
        request.open("GET", url, true);
        request.addEventListener("load", function(event) {
          const response = this.response;
          const callbacks = loading[url];
          delete loading[url];
          if (this.status === 200 || this.status === 0) {
            if (this.status === 0)
              console.warn("THREE.FileLoader: HTTP Status 0 received.");
            Cache.add(url, response);
            for (let i = 0, il = callbacks.length; i < il; i++) {
              const callback = callbacks[i];
              if (callback.onLoad)
                callback.onLoad(response);
            }
            scope.manager.itemEnd(url);
          } else {
            for (let i = 0, il = callbacks.length; i < il; i++) {
              const callback = callbacks[i];
              if (callback.onError)
                callback.onError(event);
            }
            scope.manager.itemError(url);
            scope.manager.itemEnd(url);
          }
        }, false);
        request.addEventListener("progress", function(event) {
          const callbacks = loading[url];
          for (let i = 0, il = callbacks.length; i < il; i++) {
            const callback = callbacks[i];
            if (callback.onProgress)
              callback.onProgress(event);
          }
        }, false);
        request.addEventListener("error", function(event) {
          const callbacks = loading[url];
          delete loading[url];
          for (let i = 0, il = callbacks.length; i < il; i++) {
            const callback = callbacks[i];
            if (callback.onError)
              callback.onError(event);
          }
          scope.manager.itemError(url);
          scope.manager.itemEnd(url);
        }, false);
        request.addEventListener("abort", function(event) {
          const callbacks = loading[url];
          delete loading[url];
          for (let i = 0, il = callbacks.length; i < il; i++) {
            const callback = callbacks[i];
            if (callback.onError)
              callback.onError(event);
          }
          scope.manager.itemError(url);
          scope.manager.itemEnd(url);
        }, false);
        if (this.responseType !== void 0)
          request.responseType = this.responseType;
        if (this.withCredentials !== void 0)
          request.withCredentials = this.withCredentials;
        if (request.overrideMimeType)
          request.overrideMimeType(this.mimeType !== void 0 ? this.mimeType : "text/plain");
        for (const header in this.requestHeader) {
          request.setRequestHeader(header, this.requestHeader[header]);
        }
        request.send(null);
      }
      scope.manager.itemStart(url);
      return request;
    },
    setResponseType: function(value) {
      this.responseType = value;
      return this;
    },
    setMimeType: function(value) {
      this.mimeType = value;
      return this;
    }
  });
  function AnimationLoader(manager) {
    Loader.call(this, manager);
  }
  AnimationLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: AnimationLoader,
    load: function(url, onLoad, onProgress, onError) {
      const scope = this;
      const loader = new FileLoader(scope.manager);
      loader.setPath(scope.path);
      loader.setRequestHeader(scope.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function(text) {
        try {
          onLoad(scope.parse(JSON.parse(text)));
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }
          scope.manager.itemError(url);
        }
      }, onProgress, onError);
    },
    parse: function(json) {
      const animations = [];
      for (let i = 0; i < json.length; i++) {
        const clip = AnimationClip.parse(json[i]);
        animations.push(clip);
      }
      return animations;
    }
  });
  function CompressedTextureLoader(manager) {
    Loader.call(this, manager);
  }
  CompressedTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: CompressedTextureLoader,
    load: function(url, onLoad, onProgress, onError) {
      const scope = this;
      const images = [];
      const texture = new CompressedTexture();
      texture.image = images;
      const loader = new FileLoader(this.manager);
      loader.setPath(this.path);
      loader.setResponseType("arraybuffer");
      loader.setRequestHeader(this.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      let loaded = 0;
      function loadTexture(i) {
        loader.load(url[i], function(buffer) {
          const texDatas = scope.parse(buffer, true);
          images[i] = {
            width: texDatas.width,
            height: texDatas.height,
            format: texDatas.format,
            mipmaps: texDatas.mipmaps
          };
          loaded += 1;
          if (loaded === 6) {
            if (texDatas.mipmapCount === 1)
              texture.minFilter = LinearFilter;
            texture.format = texDatas.format;
            texture.needsUpdate = true;
            if (onLoad)
              onLoad(texture);
          }
        }, onProgress, onError);
      }
      if (Array.isArray(url)) {
        for (let i = 0, il = url.length; i < il; ++i) {
          loadTexture(i);
        }
      } else {
        loader.load(url, function(buffer) {
          const texDatas = scope.parse(buffer, true);
          if (texDatas.isCubemap) {
            const faces = texDatas.mipmaps.length / texDatas.mipmapCount;
            for (let f = 0; f < faces; f++) {
              images[f] = {mipmaps: []};
              for (let i = 0; i < texDatas.mipmapCount; i++) {
                images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
                images[f].format = texDatas.format;
                images[f].width = texDatas.width;
                images[f].height = texDatas.height;
              }
            }
          } else {
            texture.image.width = texDatas.width;
            texture.image.height = texDatas.height;
            texture.mipmaps = texDatas.mipmaps;
          }
          if (texDatas.mipmapCount === 1) {
            texture.minFilter = LinearFilter;
          }
          texture.format = texDatas.format;
          texture.needsUpdate = true;
          if (onLoad)
            onLoad(texture);
        }, onProgress, onError);
      }
      return texture;
    }
  });
  function ImageLoader(manager) {
    Loader.call(this, manager);
  }
  ImageLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: ImageLoader,
    load: function(url, onLoad, onProgress, onError) {
      if (this.path !== void 0)
        url = this.path + url;
      url = this.manager.resolveURL(url);
      const scope = this;
      const cached = Cache.get(url);
      if (cached !== void 0) {
        scope.manager.itemStart(url);
        setTimeout(function() {
          if (onLoad)
            onLoad(cached);
          scope.manager.itemEnd(url);
        }, 0);
        return cached;
      }
      const image = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
      function onImageLoad() {
        image.removeEventListener("load", onImageLoad, false);
        image.removeEventListener("error", onImageError, false);
        Cache.add(url, this);
        if (onLoad)
          onLoad(this);
        scope.manager.itemEnd(url);
      }
      function onImageError(event) {
        image.removeEventListener("load", onImageLoad, false);
        image.removeEventListener("error", onImageError, false);
        if (onError)
          onError(event);
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      }
      image.addEventListener("load", onImageLoad, false);
      image.addEventListener("error", onImageError, false);
      if (url.substr(0, 5) !== "data:") {
        if (this.crossOrigin !== void 0)
          image.crossOrigin = this.crossOrigin;
      }
      scope.manager.itemStart(url);
      image.src = url;
      return image;
    }
  });
  function CubeTextureLoader(manager) {
    Loader.call(this, manager);
  }
  CubeTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: CubeTextureLoader,
    load: function(urls, onLoad, onProgress, onError) {
      const texture = new CubeTexture();
      const loader = new ImageLoader(this.manager);
      loader.setCrossOrigin(this.crossOrigin);
      loader.setPath(this.path);
      let loaded = 0;
      function loadTexture(i) {
        loader.load(urls[i], function(image) {
          texture.images[i] = image;
          loaded++;
          if (loaded === 6) {
            texture.needsUpdate = true;
            if (onLoad)
              onLoad(texture);
          }
        }, void 0, onError);
      }
      for (let i = 0; i < urls.length; ++i) {
        loadTexture(i);
      }
      return texture;
    }
  });
  function DataTextureLoader(manager) {
    Loader.call(this, manager);
  }
  DataTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: DataTextureLoader,
    load: function(url, onLoad, onProgress, onError) {
      const scope = this;
      const texture = new DataTexture();
      const loader = new FileLoader(this.manager);
      loader.setResponseType("arraybuffer");
      loader.setRequestHeader(this.requestHeader);
      loader.setPath(this.path);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function(buffer) {
        const texData = scope.parse(buffer);
        if (!texData)
          return;
        if (texData.image !== void 0) {
          texture.image = texData.image;
        } else if (texData.data !== void 0) {
          texture.image.width = texData.width;
          texture.image.height = texData.height;
          texture.image.data = texData.data;
        }
        texture.wrapS = texData.wrapS !== void 0 ? texData.wrapS : ClampToEdgeWrapping;
        texture.wrapT = texData.wrapT !== void 0 ? texData.wrapT : ClampToEdgeWrapping;
        texture.magFilter = texData.magFilter !== void 0 ? texData.magFilter : LinearFilter;
        texture.minFilter = texData.minFilter !== void 0 ? texData.minFilter : LinearFilter;
        texture.anisotropy = texData.anisotropy !== void 0 ? texData.anisotropy : 1;
        if (texData.format !== void 0) {
          texture.format = texData.format;
        }
        if (texData.type !== void 0) {
          texture.type = texData.type;
        }
        if (texData.mipmaps !== void 0) {
          texture.mipmaps = texData.mipmaps;
          texture.minFilter = LinearMipmapLinearFilter;
        }
        if (texData.mipmapCount === 1) {
          texture.minFilter = LinearFilter;
        }
        texture.needsUpdate = true;
        if (onLoad)
          onLoad(texture, texData);
      }, onProgress, onError);
      return texture;
    }
  });
  function TextureLoader(manager) {
    Loader.call(this, manager);
  }
  TextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: TextureLoader,
    load: function(url, onLoad, onProgress, onError) {
      const texture = new Texture();
      const loader = new ImageLoader(this.manager);
      loader.setCrossOrigin(this.crossOrigin);
      loader.setPath(this.path);
      loader.load(url, function(image) {
        texture.image = image;
        const isJPEG = url.search(/\.jpe?g($|\?)/i) > 0 || url.search(/^data\:image\/jpeg/) === 0;
        texture.format = isJPEG ? RGBFormat : RGBAFormat;
        texture.needsUpdate = true;
        if (onLoad !== void 0) {
          onLoad(texture);
        }
      }, onProgress, onError);
      return texture;
    }
  });
  function Curve() {
    this.type = "Curve";
    this.arcLengthDivisions = 200;
  }
  Object.assign(Curve.prototype, {
    getPoint: function() {
      console.warn("THREE.Curve: .getPoint() not implemented.");
      return null;
    },
    getPointAt: function(u, optionalTarget) {
      const t = this.getUtoTmapping(u);
      return this.getPoint(t, optionalTarget);
    },
    getPoints: function(divisions = 5) {
      const points = [];
      for (let d = 0; d <= divisions; d++) {
        points.push(this.getPoint(d / divisions));
      }
      return points;
    },
    getSpacedPoints: function(divisions = 5) {
      const points = [];
      for (let d = 0; d <= divisions; d++) {
        points.push(this.getPointAt(d / divisions));
      }
      return points;
    },
    getLength: function() {
      const lengths = this.getLengths();
      return lengths[lengths.length - 1];
    },
    getLengths: function(divisions) {
      if (divisions === void 0)
        divisions = this.arcLengthDivisions;
      if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
        return this.cacheArcLengths;
      }
      this.needsUpdate = false;
      const cache = [];
      let current, last = this.getPoint(0);
      let sum = 0;
      cache.push(0);
      for (let p = 1; p <= divisions; p++) {
        current = this.getPoint(p / divisions);
        sum += current.distanceTo(last);
        cache.push(sum);
        last = current;
      }
      this.cacheArcLengths = cache;
      return cache;
    },
    updateArcLengths: function() {
      this.needsUpdate = true;
      this.getLengths();
    },
    getUtoTmapping: function(u, distance) {
      const arcLengths = this.getLengths();
      let i = 0;
      const il = arcLengths.length;
      let targetArcLength;
      if (distance) {
        targetArcLength = distance;
      } else {
        targetArcLength = u * arcLengths[il - 1];
      }
      let low = 0, high = il - 1, comparison;
      while (low <= high) {
        i = Math.floor(low + (high - low) / 2);
        comparison = arcLengths[i] - targetArcLength;
        if (comparison < 0) {
          low = i + 1;
        } else if (comparison > 0) {
          high = i - 1;
        } else {
          high = i;
          break;
        }
      }
      i = high;
      if (arcLengths[i] === targetArcLength) {
        return i / (il - 1);
      }
      const lengthBefore = arcLengths[i];
      const lengthAfter = arcLengths[i + 1];
      const segmentLength = lengthAfter - lengthBefore;
      const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
      const t = (i + segmentFraction) / (il - 1);
      return t;
    },
    getTangent: function(t, optionalTarget) {
      const delta = 1e-4;
      let t1 = t - delta;
      let t2 = t + delta;
      if (t1 < 0)
        t1 = 0;
      if (t2 > 1)
        t2 = 1;
      const pt1 = this.getPoint(t1);
      const pt2 = this.getPoint(t2);
      const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());
      tangent.copy(pt2).sub(pt1).normalize();
      return tangent;
    },
    getTangentAt: function(u, optionalTarget) {
      const t = this.getUtoTmapping(u);
      return this.getTangent(t, optionalTarget);
    },
    computeFrenetFrames: function(segments, closed) {
      const normal = new Vector3();
      const tangents = [];
      const normals = [];
      const binormals = [];
      const vec = new Vector3();
      const mat = new Matrix4();
      for (let i = 0; i <= segments; i++) {
        const u = i / segments;
        tangents[i] = this.getTangentAt(u, new Vector3());
        tangents[i].normalize();
      }
      normals[0] = new Vector3();
      binormals[0] = new Vector3();
      let min = Number.MAX_VALUE;
      const tx = Math.abs(tangents[0].x);
      const ty = Math.abs(tangents[0].y);
      const tz = Math.abs(tangents[0].z);
      if (tx <= min) {
        min = tx;
        normal.set(1, 0, 0);
      }
      if (ty <= min) {
        min = ty;
        normal.set(0, 1, 0);
      }
      if (tz <= min) {
        normal.set(0, 0, 1);
      }
      vec.crossVectors(tangents[0], normal).normalize();
      normals[0].crossVectors(tangents[0], vec);
      binormals[0].crossVectors(tangents[0], normals[0]);
      for (let i = 1; i <= segments; i++) {
        normals[i] = normals[i - 1].clone();
        binormals[i] = binormals[i - 1].clone();
        vec.crossVectors(tangents[i - 1], tangents[i]);
        if (vec.length() > Number.EPSILON) {
          vec.normalize();
          const theta = Math.acos(MathUtils.clamp(tangents[i - 1].dot(tangents[i]), -1, 1));
          normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));
        }
        binormals[i].crossVectors(tangents[i], normals[i]);
      }
      if (closed === true) {
        let theta = Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]), -1, 1));
        theta /= segments;
        if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
          theta = -theta;
        }
        for (let i = 1; i <= segments; i++) {
          normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
          binormals[i].crossVectors(tangents[i], normals[i]);
        }
      }
      return {
        tangents,
        normals,
        binormals
      };
    },
    clone: function() {
      return new this.constructor().copy(this);
    },
    copy: function(source) {
      this.arcLengthDivisions = source.arcLengthDivisions;
      return this;
    },
    toJSON: function() {
      const data = {
        metadata: {
          version: 4.5,
          type: "Curve",
          generator: "Curve.toJSON"
        }
      };
      data.arcLengthDivisions = this.arcLengthDivisions;
      data.type = this.type;
      return data;
    },
    fromJSON: function(json) {
      this.arcLengthDivisions = json.arcLengthDivisions;
      return this;
    }
  });
  function EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
    Curve.call(this);
    this.type = "EllipseCurve";
    this.aX = aX || 0;
    this.aY = aY || 0;
    this.xRadius = xRadius || 1;
    this.yRadius = yRadius || 1;
    this.aStartAngle = aStartAngle || 0;
    this.aEndAngle = aEndAngle || 2 * Math.PI;
    this.aClockwise = aClockwise || false;
    this.aRotation = aRotation || 0;
  }
  EllipseCurve.prototype = Object.create(Curve.prototype);
  EllipseCurve.prototype.constructor = EllipseCurve;
  EllipseCurve.prototype.isEllipseCurve = true;
  EllipseCurve.prototype.getPoint = function(t, optionalTarget) {
    const point = optionalTarget || new Vector2();
    const twoPi = Math.PI * 2;
    let deltaAngle = this.aEndAngle - this.aStartAngle;
    const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
    while (deltaAngle < 0)
      deltaAngle += twoPi;
    while (deltaAngle > twoPi)
      deltaAngle -= twoPi;
    if (deltaAngle < Number.EPSILON) {
      if (samePoints) {
        deltaAngle = 0;
      } else {
        deltaAngle = twoPi;
      }
    }
    if (this.aClockwise === true && !samePoints) {
      if (deltaAngle === twoPi) {
        deltaAngle = -twoPi;
      } else {
        deltaAngle = deltaAngle - twoPi;
      }
    }
    const angle = this.aStartAngle + t * deltaAngle;
    let x = this.aX + this.xRadius * Math.cos(angle);
    let y = this.aY + this.yRadius * Math.sin(angle);
    if (this.aRotation !== 0) {
      const cos = Math.cos(this.aRotation);
      const sin = Math.sin(this.aRotation);
      const tx = x - this.aX;
      const ty = y - this.aY;
      x = tx * cos - ty * sin + this.aX;
      y = tx * sin + ty * cos + this.aY;
    }
    return point.set(x, y);
  };
  EllipseCurve.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.aX = source.aX;
    this.aY = source.aY;
    this.xRadius = source.xRadius;
    this.yRadius = source.yRadius;
    this.aStartAngle = source.aStartAngle;
    this.aEndAngle = source.aEndAngle;
    this.aClockwise = source.aClockwise;
    this.aRotation = source.aRotation;
    return this;
  };
  EllipseCurve.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.aX = this.aX;
    data.aY = this.aY;
    data.xRadius = this.xRadius;
    data.yRadius = this.yRadius;
    data.aStartAngle = this.aStartAngle;
    data.aEndAngle = this.aEndAngle;
    data.aClockwise = this.aClockwise;
    data.aRotation = this.aRotation;
    return data;
  };
  EllipseCurve.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.aX = json.aX;
    this.aY = json.aY;
    this.xRadius = json.xRadius;
    this.yRadius = json.yRadius;
    this.aStartAngle = json.aStartAngle;
    this.aEndAngle = json.aEndAngle;
    this.aClockwise = json.aClockwise;
    this.aRotation = json.aRotation;
    return this;
  };
  function ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    EllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
    this.type = "ArcCurve";
  }
  ArcCurve.prototype = Object.create(EllipseCurve.prototype);
  ArcCurve.prototype.constructor = ArcCurve;
  ArcCurve.prototype.isArcCurve = true;
  function CubicPoly() {
    let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
    function init(x0, x1, t0, t1) {
      c0 = x0;
      c1 = t0;
      c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
      c3 = 2 * x0 - 2 * x1 + t0 + t1;
    }
    return {
      initCatmullRom: function(x0, x1, x2, x3, tension) {
        init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
      },
      initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
        let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
        let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
        t1 *= dt1;
        t2 *= dt1;
        init(x1, x2, t1, t2);
      },
      calc: function(t) {
        const t2 = t * t;
        const t3 = t2 * t;
        return c0 + c1 * t + c2 * t2 + c3 * t3;
      }
    };
  }
  var tmp = new Vector3();
  var px = new CubicPoly();
  var py = new CubicPoly();
  var pz = new CubicPoly();
  function CatmullRomCurve3(points = [], closed = false, curveType = "centripetal", tension = 0.5) {
    Curve.call(this);
    this.type = "CatmullRomCurve3";
    this.points = points;
    this.closed = closed;
    this.curveType = curveType;
    this.tension = tension;
  }
  CatmullRomCurve3.prototype = Object.create(Curve.prototype);
  CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;
  CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;
  CatmullRomCurve3.prototype.getPoint = function(t, optionalTarget = new Vector3()) {
    const point = optionalTarget;
    const points = this.points;
    const l = points.length;
    const p = (l - (this.closed ? 0 : 1)) * t;
    let intPoint = Math.floor(p);
    let weight = p - intPoint;
    if (this.closed) {
      intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
    } else if (weight === 0 && intPoint === l - 1) {
      intPoint = l - 2;
      weight = 1;
    }
    let p0, p3;
    if (this.closed || intPoint > 0) {
      p0 = points[(intPoint - 1) % l];
    } else {
      tmp.subVectors(points[0], points[1]).add(points[0]);
      p0 = tmp;
    }
    const p1 = points[intPoint % l];
    const p2 = points[(intPoint + 1) % l];
    if (this.closed || intPoint + 2 < l) {
      p3 = points[(intPoint + 2) % l];
    } else {
      tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
      p3 = tmp;
    }
    if (this.curveType === "centripetal" || this.curveType === "chordal") {
      const pow = this.curveType === "chordal" ? 0.5 : 0.25;
      let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
      let dt1 = Math.pow(p1.distanceToSquared(p2), pow);
      let dt2 = Math.pow(p2.distanceToSquared(p3), pow);
      if (dt1 < 1e-4)
        dt1 = 1;
      if (dt0 < 1e-4)
        dt0 = dt1;
      if (dt2 < 1e-4)
        dt2 = dt1;
      px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
      py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
      pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
    } else if (this.curveType === "catmullrom") {
      px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
      py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
      pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
    }
    point.set(px.calc(weight), py.calc(weight), pz.calc(weight));
    return point;
  };
  CatmullRomCurve3.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.points = [];
    for (let i = 0, l = source.points.length; i < l; i++) {
      const point = source.points[i];
      this.points.push(point.clone());
    }
    this.closed = source.closed;
    this.curveType = source.curveType;
    this.tension = source.tension;
    return this;
  };
  CatmullRomCurve3.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.points = [];
    for (let i = 0, l = this.points.length; i < l; i++) {
      const point = this.points[i];
      data.points.push(point.toArray());
    }
    data.closed = this.closed;
    data.curveType = this.curveType;
    data.tension = this.tension;
    return data;
  };
  CatmullRomCurve3.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.points = [];
    for (let i = 0, l = json.points.length; i < l; i++) {
      const point = json.points[i];
      this.points.push(new Vector3().fromArray(point));
    }
    this.closed = json.closed;
    this.curveType = json.curveType;
    this.tension = json.tension;
    return this;
  };
  function CatmullRom(t, p0, p1, p2, p3) {
    const v0 = (p2 - p0) * 0.5;
    const v1 = (p3 - p1) * 0.5;
    const t2 = t * t;
    const t3 = t * t2;
    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
  }
  function QuadraticBezierP0(t, p) {
    const k = 1 - t;
    return k * k * p;
  }
  function QuadraticBezierP1(t, p) {
    return 2 * (1 - t) * t * p;
  }
  function QuadraticBezierP2(t, p) {
    return t * t * p;
  }
  function QuadraticBezier(t, p0, p1, p2) {
    return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
  }
  function CubicBezierP0(t, p) {
    const k = 1 - t;
    return k * k * k * p;
  }
  function CubicBezierP1(t, p) {
    const k = 1 - t;
    return 3 * k * k * t * p;
  }
  function CubicBezierP2(t, p) {
    return 3 * (1 - t) * t * t * p;
  }
  function CubicBezierP3(t, p) {
    return t * t * t * p;
  }
  function CubicBezier(t, p0, p1, p2, p3) {
    return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
  }
  function CubicBezierCurve(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {
    Curve.call(this);
    this.type = "CubicBezierCurve";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v2;
    this.v3 = v3;
  }
  CubicBezierCurve.prototype = Object.create(Curve.prototype);
  CubicBezierCurve.prototype.constructor = CubicBezierCurve;
  CubicBezierCurve.prototype.isCubicBezierCurve = true;
  CubicBezierCurve.prototype.getPoint = function(t, optionalTarget = new Vector2()) {
    const point = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
    point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));
    return point;
  };
  CubicBezierCurve.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    this.v3.copy(source.v3);
    return this;
  };
  CubicBezierCurve.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    data.v3 = this.v3.toArray();
    return data;
  };
  CubicBezierCurve.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    this.v3.fromArray(json.v3);
    return this;
  };
  function CubicBezierCurve3(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {
    Curve.call(this);
    this.type = "CubicBezierCurve3";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v2;
    this.v3 = v3;
  }
  CubicBezierCurve3.prototype = Object.create(Curve.prototype);
  CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;
  CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;
  CubicBezierCurve3.prototype.getPoint = function(t, optionalTarget = new Vector3()) {
    const point = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
    point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));
    return point;
  };
  CubicBezierCurve3.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    this.v3.copy(source.v3);
    return this;
  };
  CubicBezierCurve3.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    data.v3 = this.v3.toArray();
    return data;
  };
  CubicBezierCurve3.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    this.v3.fromArray(json.v3);
    return this;
  };
  function LineCurve(v1 = new Vector2(), v2 = new Vector2()) {
    Curve.call(this);
    this.type = "LineCurve";
    this.v1 = v1;
    this.v2 = v2;
  }
  LineCurve.prototype = Object.create(Curve.prototype);
  LineCurve.prototype.constructor = LineCurve;
  LineCurve.prototype.isLineCurve = true;
  LineCurve.prototype.getPoint = function(t, optionalTarget = new Vector2()) {
    const point = optionalTarget;
    if (t === 1) {
      point.copy(this.v2);
    } else {
      point.copy(this.v2).sub(this.v1);
      point.multiplyScalar(t).add(this.v1);
    }
    return point;
  };
  LineCurve.prototype.getPointAt = function(u, optionalTarget) {
    return this.getPoint(u, optionalTarget);
  };
  LineCurve.prototype.getTangent = function(t, optionalTarget) {
    const tangent = optionalTarget || new Vector2();
    tangent.copy(this.v2).sub(this.v1).normalize();
    return tangent;
  };
  LineCurve.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  };
  LineCurve.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  };
  LineCurve.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  };
  function LineCurve3(v1 = new Vector3(), v2 = new Vector3()) {
    Curve.call(this);
    this.type = "LineCurve3";
    this.v1 = v1;
    this.v2 = v2;
  }
  LineCurve3.prototype = Object.create(Curve.prototype);
  LineCurve3.prototype.constructor = LineCurve3;
  LineCurve3.prototype.isLineCurve3 = true;
  LineCurve3.prototype.getPoint = function(t, optionalTarget = new Vector3()) {
    const point = optionalTarget;
    if (t === 1) {
      point.copy(this.v2);
    } else {
      point.copy(this.v2).sub(this.v1);
      point.multiplyScalar(t).add(this.v1);
    }
    return point;
  };
  LineCurve3.prototype.getPointAt = function(u, optionalTarget) {
    return this.getPoint(u, optionalTarget);
  };
  LineCurve3.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  };
  LineCurve3.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  };
  LineCurve3.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  };
  function QuadraticBezierCurve(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {
    Curve.call(this);
    this.type = "QuadraticBezierCurve";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v2;
  }
  QuadraticBezierCurve.prototype = Object.create(Curve.prototype);
  QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;
  QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;
  QuadraticBezierCurve.prototype.getPoint = function(t, optionalTarget = new Vector2()) {
    const point = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v2 = this.v2;
    point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));
    return point;
  };
  QuadraticBezierCurve.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  };
  QuadraticBezierCurve.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  };
  QuadraticBezierCurve.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  };
  function QuadraticBezierCurve3(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {
    Curve.call(this);
    this.type = "QuadraticBezierCurve3";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v2;
  }
  QuadraticBezierCurve3.prototype = Object.create(Curve.prototype);
  QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;
  QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;
  QuadraticBezierCurve3.prototype.getPoint = function(t, optionalTarget = new Vector3()) {
    const point = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v2 = this.v2;
    point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));
    return point;
  };
  QuadraticBezierCurve3.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  };
  QuadraticBezierCurve3.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  };
  QuadraticBezierCurve3.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  };
  function SplineCurve(points = []) {
    Curve.call(this);
    this.type = "SplineCurve";
    this.points = points;
  }
  SplineCurve.prototype = Object.create(Curve.prototype);
  SplineCurve.prototype.constructor = SplineCurve;
  SplineCurve.prototype.isSplineCurve = true;
  SplineCurve.prototype.getPoint = function(t, optionalTarget = new Vector2()) {
    const point = optionalTarget;
    const points = this.points;
    const p = (points.length - 1) * t;
    const intPoint = Math.floor(p);
    const weight = p - intPoint;
    const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
    const p1 = points[intPoint];
    const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
    const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
    point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
    return point;
  };
  SplineCurve.prototype.copy = function(source) {
    Curve.prototype.copy.call(this, source);
    this.points = [];
    for (let i = 0, l = source.points.length; i < l; i++) {
      const point = source.points[i];
      this.points.push(point.clone());
    }
    return this;
  };
  SplineCurve.prototype.toJSON = function() {
    const data = Curve.prototype.toJSON.call(this);
    data.points = [];
    for (let i = 0, l = this.points.length; i < l; i++) {
      const point = this.points[i];
      data.points.push(point.toArray());
    }
    return data;
  };
  SplineCurve.prototype.fromJSON = function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.points = [];
    for (let i = 0, l = json.points.length; i < l; i++) {
      const point = json.points[i];
      this.points.push(new Vector2().fromArray(point));
    }
    return this;
  };
  var Curves = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    ArcCurve,
    CatmullRomCurve3,
    CubicBezierCurve,
    CubicBezierCurve3,
    EllipseCurve,
    LineCurve,
    LineCurve3,
    QuadraticBezierCurve,
    QuadraticBezierCurve3,
    SplineCurve
  });
  function CurvePath() {
    Curve.call(this);
    this.type = "CurvePath";
    this.curves = [];
    this.autoClose = false;
  }
  CurvePath.prototype = Object.assign(Object.create(Curve.prototype), {
    constructor: CurvePath,
    add: function(curve) {
      this.curves.push(curve);
    },
    closePath: function() {
      const startPoint = this.curves[0].getPoint(0);
      const endPoint = this.curves[this.curves.length - 1].getPoint(1);
      if (!startPoint.equals(endPoint)) {
        this.curves.push(new LineCurve(endPoint, startPoint));
      }
    },
    getPoint: function(t) {
      const d = t * this.getLength();
      const curveLengths = this.getCurveLengths();
      let i = 0;
      while (i < curveLengths.length) {
        if (curveLengths[i] >= d) {
          const diff = curveLengths[i] - d;
          const curve = this.curves[i];
          const segmentLength = curve.getLength();
          const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
          return curve.getPointAt(u);
        }
        i++;
      }
      return null;
    },
    getLength: function() {
      const lens = this.getCurveLengths();
      return lens[lens.length - 1];
    },
    updateArcLengths: function() {
      this.needsUpdate = true;
      this.cacheLengths = null;
      this.getCurveLengths();
    },
    getCurveLengths: function() {
      if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
        return this.cacheLengths;
      }
      const lengths = [];
      let sums = 0;
      for (let i = 0, l = this.curves.length; i < l; i++) {
        sums += this.curves[i].getLength();
        lengths.push(sums);
      }
      this.cacheLengths = lengths;
      return lengths;
    },
    getSpacedPoints: function(divisions = 40) {
      const points = [];
      for (let i = 0; i <= divisions; i++) {
        points.push(this.getPoint(i / divisions));
      }
      if (this.autoClose) {
        points.push(points[0]);
      }
      return points;
    },
    getPoints: function(divisions = 12) {
      const points = [];
      let last;
      for (let i = 0, curves = this.curves; i < curves.length; i++) {
        const curve = curves[i];
        const resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;
        const pts = curve.getPoints(resolution);
        for (let j = 0; j < pts.length; j++) {
          const point = pts[j];
          if (last && last.equals(point))
            continue;
          points.push(point);
          last = point;
        }
      }
      if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
        points.push(points[0]);
      }
      return points;
    },
    copy: function(source) {
      Curve.prototype.copy.call(this, source);
      this.curves = [];
      for (let i = 0, l = source.curves.length; i < l; i++) {
        const curve = source.curves[i];
        this.curves.push(curve.clone());
      }
      this.autoClose = source.autoClose;
      return this;
    },
    toJSON: function() {
      const data = Curve.prototype.toJSON.call(this);
      data.autoClose = this.autoClose;
      data.curves = [];
      for (let i = 0, l = this.curves.length; i < l; i++) {
        const curve = this.curves[i];
        data.curves.push(curve.toJSON());
      }
      return data;
    },
    fromJSON: function(json) {
      Curve.prototype.fromJSON.call(this, json);
      this.autoClose = json.autoClose;
      this.curves = [];
      for (let i = 0, l = json.curves.length; i < l; i++) {
        const curve = json.curves[i];
        this.curves.push(new Curves[curve.type]().fromJSON(curve));
      }
      return this;
    }
  });
  function Path(points) {
    CurvePath.call(this);
    this.type = "Path";
    this.currentPoint = new Vector2();
    if (points) {
      this.setFromPoints(points);
    }
  }
  Path.prototype = Object.assign(Object.create(CurvePath.prototype), {
    constructor: Path,
    setFromPoints: function(points) {
      this.moveTo(points[0].x, points[0].y);
      for (let i = 1, l = points.length; i < l; i++) {
        this.lineTo(points[i].x, points[i].y);
      }
      return this;
    },
    moveTo: function(x, y) {
      this.currentPoint.set(x, y);
      return this;
    },
    lineTo: function(x, y) {
      const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
      this.curves.push(curve);
      this.currentPoint.set(x, y);
      return this;
    },
    quadraticCurveTo: function(aCPx, aCPy, aX, aY) {
      const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));
      this.curves.push(curve);
      this.currentPoint.set(aX, aY);
      return this;
    },
    bezierCurveTo: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
      const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));
      this.curves.push(curve);
      this.currentPoint.set(aX, aY);
      return this;
    },
    splineThru: function(pts) {
      const npts = [this.currentPoint.clone()].concat(pts);
      const curve = new SplineCurve(npts);
      this.curves.push(curve);
      this.currentPoint.copy(pts[pts.length - 1]);
      return this;
    },
    arc: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
      const x0 = this.currentPoint.x;
      const y0 = this.currentPoint.y;
      this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
      return this;
    },
    absarc: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
      this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
      return this;
    },
    ellipse: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
      const x0 = this.currentPoint.x;
      const y0 = this.currentPoint.y;
      this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
      return this;
    },
    absellipse: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
      const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
      if (this.curves.length > 0) {
        const firstPoint = curve.getPoint(0);
        if (!firstPoint.equals(this.currentPoint)) {
          this.lineTo(firstPoint.x, firstPoint.y);
        }
      }
      this.curves.push(curve);
      const lastPoint = curve.getPoint(1);
      this.currentPoint.copy(lastPoint);
      return this;
    },
    copy: function(source) {
      CurvePath.prototype.copy.call(this, source);
      this.currentPoint.copy(source.currentPoint);
      return this;
    },
    toJSON: function() {
      const data = CurvePath.prototype.toJSON.call(this);
      data.currentPoint = this.currentPoint.toArray();
      return data;
    },
    fromJSON: function(json) {
      CurvePath.prototype.fromJSON.call(this, json);
      this.currentPoint.fromArray(json.currentPoint);
      return this;
    }
  });
  function Shape(points) {
    Path.call(this, points);
    this.uuid = MathUtils.generateUUID();
    this.type = "Shape";
    this.holes = [];
  }
  Shape.prototype = Object.assign(Object.create(Path.prototype), {
    constructor: Shape,
    getPointsHoles: function(divisions) {
      const holesPts = [];
      for (let i = 0, l = this.holes.length; i < l; i++) {
        holesPts[i] = this.holes[i].getPoints(divisions);
      }
      return holesPts;
    },
    extractPoints: function(divisions) {
      return {
        shape: this.getPoints(divisions),
        holes: this.getPointsHoles(divisions)
      };
    },
    copy: function(source) {
      Path.prototype.copy.call(this, source);
      this.holes = [];
      for (let i = 0, l = source.holes.length; i < l; i++) {
        const hole = source.holes[i];
        this.holes.push(hole.clone());
      }
      return this;
    },
    toJSON: function() {
      const data = Path.prototype.toJSON.call(this);
      data.uuid = this.uuid;
      data.holes = [];
      for (let i = 0, l = this.holes.length; i < l; i++) {
        const hole = this.holes[i];
        data.holes.push(hole.toJSON());
      }
      return data;
    },
    fromJSON: function(json) {
      Path.prototype.fromJSON.call(this, json);
      this.uuid = json.uuid;
      this.holes = [];
      for (let i = 0, l = json.holes.length; i < l; i++) {
        const hole = json.holes[i];
        this.holes.push(new Path().fromJSON(hole));
      }
      return this;
    }
  });
  function Light(color, intensity = 1) {
    Object3D.call(this);
    this.type = "Light";
    this.color = new Color(color);
    this.intensity = intensity;
  }
  Light.prototype = Object.assign(Object.create(Object3D.prototype), {
    constructor: Light,
    isLight: true,
    copy: function(source) {
      Object3D.prototype.copy.call(this, source);
      this.color.copy(source.color);
      this.intensity = source.intensity;
      return this;
    },
    toJSON: function(meta) {
      const data = Object3D.prototype.toJSON.call(this, meta);
      data.object.color = this.color.getHex();
      data.object.intensity = this.intensity;
      if (this.groundColor !== void 0)
        data.object.groundColor = this.groundColor.getHex();
      if (this.distance !== void 0)
        data.object.distance = this.distance;
      if (this.angle !== void 0)
        data.object.angle = this.angle;
      if (this.decay !== void 0)
        data.object.decay = this.decay;
      if (this.penumbra !== void 0)
        data.object.penumbra = this.penumbra;
      if (this.shadow !== void 0)
        data.object.shadow = this.shadow.toJSON();
      return data;
    }
  });
  function HemisphereLight(skyColor, groundColor, intensity) {
    Light.call(this, skyColor, intensity);
    this.type = "HemisphereLight";
    this.position.copy(Object3D.DefaultUp);
    this.updateMatrix();
    this.groundColor = new Color(groundColor);
  }
  HemisphereLight.prototype = Object.assign(Object.create(Light.prototype), {
    constructor: HemisphereLight,
    isHemisphereLight: true,
    copy: function(source) {
      Light.prototype.copy.call(this, source);
      this.groundColor.copy(source.groundColor);
      return this;
    }
  });
  function LightShadow(camera2) {
    this.camera = camera2;
    this.bias = 0;
    this.normalBias = 0;
    this.radius = 1;
    this.mapSize = new Vector2(512, 512);
    this.map = null;
    this.mapPass = null;
    this.matrix = new Matrix4();
    this.autoUpdate = true;
    this.needsUpdate = false;
    this._frustum = new Frustum();
    this._frameExtents = new Vector2(1, 1);
    this._viewportCount = 1;
    this._viewports = [
      new Vector4(0, 0, 1, 1)
    ];
  }
  Object.assign(LightShadow.prototype, {
    _projScreenMatrix: new Matrix4(),
    _lightPositionWorld: new Vector3(),
    _lookTarget: new Vector3(),
    getViewportCount: function() {
      return this._viewportCount;
    },
    getFrustum: function() {
      return this._frustum;
    },
    updateMatrices: function(light) {
      const shadowCamera = this.camera, shadowMatrix = this.matrix, projScreenMatrix = this._projScreenMatrix, lookTarget = this._lookTarget, lightPositionWorld = this._lightPositionWorld;
      lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
      shadowCamera.position.copy(lightPositionWorld);
      lookTarget.setFromMatrixPosition(light.target.matrixWorld);
      shadowCamera.lookAt(lookTarget);
      shadowCamera.updateMatrixWorld();
      projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
      this._frustum.setFromProjectionMatrix(projScreenMatrix);
      shadowMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
      shadowMatrix.multiply(shadowCamera.projectionMatrix);
      shadowMatrix.multiply(shadowCamera.matrixWorldInverse);
    },
    getViewport: function(viewportIndex) {
      return this._viewports[viewportIndex];
    },
    getFrameExtents: function() {
      return this._frameExtents;
    },
    copy: function(source) {
      this.camera = source.camera.clone();
      this.bias = source.bias;
      this.radius = source.radius;
      this.mapSize.copy(source.mapSize);
      return this;
    },
    clone: function() {
      return new this.constructor().copy(this);
    },
    toJSON: function() {
      const object = {};
      if (this.bias !== 0)
        object.bias = this.bias;
      if (this.normalBias !== 0)
        object.normalBias = this.normalBias;
      if (this.radius !== 1)
        object.radius = this.radius;
      if (this.mapSize.x !== 512 || this.mapSize.y !== 512)
        object.mapSize = this.mapSize.toArray();
      object.camera = this.camera.toJSON(false).object;
      delete object.camera.matrix;
      return object;
    }
  });
  function SpotLightShadow() {
    LightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500));
    this.focus = 1;
  }
  SpotLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
    constructor: SpotLightShadow,
    isSpotLightShadow: true,
    updateMatrices: function(light) {
      const camera2 = this.camera;
      const fov2 = MathUtils.RAD2DEG * 2 * light.angle * this.focus;
      const aspect2 = this.mapSize.width / this.mapSize.height;
      const far = light.distance || camera2.far;
      if (fov2 !== camera2.fov || aspect2 !== camera2.aspect || far !== camera2.far) {
        camera2.fov = fov2;
        camera2.aspect = aspect2;
        camera2.far = far;
        camera2.updateProjectionMatrix();
      }
      LightShadow.prototype.updateMatrices.call(this, light);
    }
  });
  function SpotLight(color, intensity, distance, angle, penumbra, decay) {
    Light.call(this, color, intensity);
    this.type = "SpotLight";
    this.position.copy(Object3D.DefaultUp);
    this.updateMatrix();
    this.target = new Object3D();
    Object.defineProperty(this, "power", {
      get: function() {
        return this.intensity * Math.PI;
      },
      set: function(power) {
        this.intensity = power / Math.PI;
      }
    });
    this.distance = distance !== void 0 ? distance : 0;
    this.angle = angle !== void 0 ? angle : Math.PI / 3;
    this.penumbra = penumbra !== void 0 ? penumbra : 0;
    this.decay = decay !== void 0 ? decay : 1;
    this.shadow = new SpotLightShadow();
  }
  SpotLight.prototype = Object.assign(Object.create(Light.prototype), {
    constructor: SpotLight,
    isSpotLight: true,
    copy: function(source) {
      Light.prototype.copy.call(this, source);
      this.distance = source.distance;
      this.angle = source.angle;
      this.penumbra = source.penumbra;
      this.decay = source.decay;
      this.target = source.target.clone();
      this.shadow = source.shadow.clone();
      return this;
    }
  });
  function PointLightShadow() {
    LightShadow.call(this, new PerspectiveCamera(90, 1, 0.5, 500));
    this._frameExtents = new Vector2(4, 2);
    this._viewportCount = 6;
    this._viewports = [
      new Vector4(2, 1, 1, 1),
      new Vector4(0, 1, 1, 1),
      new Vector4(3, 1, 1, 1),
      new Vector4(1, 1, 1, 1),
      new Vector4(3, 0, 1, 1),
      new Vector4(1, 0, 1, 1)
    ];
    this._cubeDirections = [
      new Vector3(1, 0, 0),
      new Vector3(-1, 0, 0),
      new Vector3(0, 0, 1),
      new Vector3(0, 0, -1),
      new Vector3(0, 1, 0),
      new Vector3(0, -1, 0)
    ];
    this._cubeUps = [
      new Vector3(0, 1, 0),
      new Vector3(0, 1, 0),
      new Vector3(0, 1, 0),
      new Vector3(0, 1, 0),
      new Vector3(0, 0, 1),
      new Vector3(0, 0, -1)
    ];
  }
  PointLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
    constructor: PointLightShadow,
    isPointLightShadow: true,
    updateMatrices: function(light, viewportIndex = 0) {
      const camera2 = this.camera, shadowMatrix = this.matrix, lightPositionWorld = this._lightPositionWorld, lookTarget = this._lookTarget, projScreenMatrix = this._projScreenMatrix;
      lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
      camera2.position.copy(lightPositionWorld);
      lookTarget.copy(camera2.position);
      lookTarget.add(this._cubeDirections[viewportIndex]);
      camera2.up.copy(this._cubeUps[viewportIndex]);
      camera2.lookAt(lookTarget);
      camera2.updateMatrixWorld();
      shadowMatrix.makeTranslation(-lightPositionWorld.x, -lightPositionWorld.y, -lightPositionWorld.z);
      projScreenMatrix.multiplyMatrices(camera2.projectionMatrix, camera2.matrixWorldInverse);
      this._frustum.setFromProjectionMatrix(projScreenMatrix);
    }
  });
  function PointLight(color, intensity, distance, decay) {
    Light.call(this, color, intensity);
    this.type = "PointLight";
    Object.defineProperty(this, "power", {
      get: function() {
        return this.intensity * 4 * Math.PI;
      },
      set: function(power) {
        this.intensity = power / (4 * Math.PI);
      }
    });
    this.distance = distance !== void 0 ? distance : 0;
    this.decay = decay !== void 0 ? decay : 1;
    this.shadow = new PointLightShadow();
  }
  PointLight.prototype = Object.assign(Object.create(Light.prototype), {
    constructor: PointLight,
    isPointLight: true,
    copy: function(source) {
      Light.prototype.copy.call(this, source);
      this.distance = source.distance;
      this.decay = source.decay;
      this.shadow = source.shadow.clone();
      return this;
    }
  });
  function OrthographicCamera(left, right, top, bottom, near, far) {
    Camera.call(this);
    this.type = "OrthographicCamera";
    this.zoom = 1;
    this.view = null;
    this.left = left !== void 0 ? left : -1;
    this.right = right !== void 0 ? right : 1;
    this.top = top !== void 0 ? top : 1;
    this.bottom = bottom !== void 0 ? bottom : -1;
    this.near = near !== void 0 ? near : 0.1;
    this.far = far !== void 0 ? far : 2e3;
    this.updateProjectionMatrix();
  }
  OrthographicCamera.prototype = Object.assign(Object.create(Camera.prototype), {
    constructor: OrthographicCamera,
    isOrthographicCamera: true,
    copy: function(source, recursive) {
      Camera.prototype.copy.call(this, source, recursive);
      this.left = source.left;
      this.right = source.right;
      this.top = source.top;
      this.bottom = source.bottom;
      this.near = source.near;
      this.far = source.far;
      this.zoom = source.zoom;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      return this;
    },
    setViewOffset: function(fullWidth, fullHeight, x, y, width, height) {
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }
      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x;
      this.view.offsetY = y;
      this.view.width = width;
      this.view.height = height;
      this.updateProjectionMatrix();
    },
    clearViewOffset: function() {
      if (this.view !== null) {
        this.view.enabled = false;
      }
      this.updateProjectionMatrix();
    },
    updateProjectionMatrix: function() {
      const dx = (this.right - this.left) / (2 * this.zoom);
      const dy = (this.top - this.bottom) / (2 * this.zoom);
      const cx = (this.right + this.left) / 2;
      const cy = (this.top + this.bottom) / 2;
      let left = cx - dx;
      let right = cx + dx;
      let top = cy + dy;
      let bottom = cy - dy;
      if (this.view !== null && this.view.enabled) {
        const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
        const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
        left += scaleW * this.view.offsetX;
        right = left + scaleW * this.view.width;
        top -= scaleH * this.view.offsetY;
        bottom = top - scaleH * this.view.height;
      }
      this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    },
    toJSON: function(meta) {
      const data = Object3D.prototype.toJSON.call(this, meta);
      data.object.zoom = this.zoom;
      data.object.left = this.left;
      data.object.right = this.right;
      data.object.top = this.top;
      data.object.bottom = this.bottom;
      data.object.near = this.near;
      data.object.far = this.far;
      if (this.view !== null)
        data.object.view = Object.assign({}, this.view);
      return data;
    }
  });
  function DirectionalLightShadow() {
    LightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
  }
  DirectionalLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
    constructor: DirectionalLightShadow,
    isDirectionalLightShadow: true,
    updateMatrices: function(light) {
      LightShadow.prototype.updateMatrices.call(this, light);
    }
  });
  function DirectionalLight(color, intensity) {
    Light.call(this, color, intensity);
    this.type = "DirectionalLight";
    this.position.copy(Object3D.DefaultUp);
    this.updateMatrix();
    this.target = new Object3D();
    this.shadow = new DirectionalLightShadow();
  }
  DirectionalLight.prototype = Object.assign(Object.create(Light.prototype), {
    constructor: DirectionalLight,
    isDirectionalLight: true,
    copy: function(source) {
      Light.prototype.copy.call(this, source);
      this.target = source.target.clone();
      this.shadow = source.shadow.clone();
      return this;
    }
  });
  function AmbientLight(color, intensity) {
    Light.call(this, color, intensity);
    this.type = "AmbientLight";
  }
  AmbientLight.prototype = Object.assign(Object.create(Light.prototype), {
    constructor: AmbientLight,
    isAmbientLight: true
  });
  function RectAreaLight(color, intensity, width, height) {
    Light.call(this, color, intensity);
    this.type = "RectAreaLight";
    this.width = width !== void 0 ? width : 10;
    this.height = height !== void 0 ? height : 10;
  }
  RectAreaLight.prototype = Object.assign(Object.create(Light.prototype), {
    constructor: RectAreaLight,
    isRectAreaLight: true,
    copy: function(source) {
      Light.prototype.copy.call(this, source);
      this.width = source.width;
      this.height = source.height;
      return this;
    },
    toJSON: function(meta) {
      const data = Light.prototype.toJSON.call(this, meta);
      data.object.width = this.width;
      data.object.height = this.height;
      return data;
    }
  });
  var SphericalHarmonics3 = class {
    constructor() {
      Object.defineProperty(this, "isSphericalHarmonics3", {value: true});
      this.coefficients = [];
      for (let i = 0; i < 9; i++) {
        this.coefficients.push(new Vector3());
      }
    }
    set(coefficients) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].copy(coefficients[i]);
      }
      return this;
    }
    zero() {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].set(0, 0, 0);
      }
      return this;
    }
    getAt(normal, target) {
      const x = normal.x, y = normal.y, z = normal.z;
      const coeff = this.coefficients;
      target.copy(coeff[0]).multiplyScalar(0.282095);
      target.addScaledVector(coeff[1], 0.488603 * y);
      target.addScaledVector(coeff[2], 0.488603 * z);
      target.addScaledVector(coeff[3], 0.488603 * x);
      target.addScaledVector(coeff[4], 1.092548 * (x * y));
      target.addScaledVector(coeff[5], 1.092548 * (y * z));
      target.addScaledVector(coeff[6], 0.315392 * (3 * z * z - 1));
      target.addScaledVector(coeff[7], 1.092548 * (x * z));
      target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
      return target;
    }
    getIrradianceAt(normal, target) {
      const x = normal.x, y = normal.y, z = normal.z;
      const coeff = this.coefficients;
      target.copy(coeff[0]).multiplyScalar(0.886227);
      target.addScaledVector(coeff[1], 2 * 0.511664 * y);
      target.addScaledVector(coeff[2], 2 * 0.511664 * z);
      target.addScaledVector(coeff[3], 2 * 0.511664 * x);
      target.addScaledVector(coeff[4], 2 * 0.429043 * x * y);
      target.addScaledVector(coeff[5], 2 * 0.429043 * y * z);
      target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708);
      target.addScaledVector(coeff[7], 2 * 0.429043 * x * z);
      target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y));
      return target;
    }
    add(sh) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].add(sh.coefficients[i]);
      }
      return this;
    }
    addScaledSH(sh, s) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].addScaledVector(sh.coefficients[i], s);
      }
      return this;
    }
    scale(s) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].multiplyScalar(s);
      }
      return this;
    }
    lerp(sh, alpha) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].lerp(sh.coefficients[i], alpha);
      }
      return this;
    }
    equals(sh) {
      for (let i = 0; i < 9; i++) {
        if (!this.coefficients[i].equals(sh.coefficients[i])) {
          return false;
        }
      }
      return true;
    }
    copy(sh) {
      return this.set(sh.coefficients);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    fromArray(array, offset = 0) {
      const coefficients = this.coefficients;
      for (let i = 0; i < 9; i++) {
        coefficients[i].fromArray(array, offset + i * 3);
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const coefficients = this.coefficients;
      for (let i = 0; i < 9; i++) {
        coefficients[i].toArray(array, offset + i * 3);
      }
      return array;
    }
    static getBasisAt(normal, shBasis) {
      const x = normal.x, y = normal.y, z = normal.z;
      shBasis[0] = 0.282095;
      shBasis[1] = 0.488603 * y;
      shBasis[2] = 0.488603 * z;
      shBasis[3] = 0.488603 * x;
      shBasis[4] = 1.092548 * x * y;
      shBasis[5] = 1.092548 * y * z;
      shBasis[6] = 0.315392 * (3 * z * z - 1);
      shBasis[7] = 1.092548 * x * z;
      shBasis[8] = 0.546274 * (x * x - y * y);
    }
  };
  function LightProbe(sh, intensity) {
    Light.call(this, void 0, intensity);
    this.type = "LightProbe";
    this.sh = sh !== void 0 ? sh : new SphericalHarmonics3();
  }
  LightProbe.prototype = Object.assign(Object.create(Light.prototype), {
    constructor: LightProbe,
    isLightProbe: true,
    copy: function(source) {
      Light.prototype.copy.call(this, source);
      this.sh.copy(source.sh);
      return this;
    },
    fromJSON: function(json) {
      this.intensity = json.intensity;
      this.sh.fromArray(json.sh);
      return this;
    },
    toJSON: function(meta) {
      const data = Light.prototype.toJSON.call(this, meta);
      data.object.sh = this.sh.toArray();
      return data;
    }
  });
  function MaterialLoader(manager) {
    Loader.call(this, manager);
    this.textures = {};
  }
  MaterialLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: MaterialLoader,
    load: function(url, onLoad, onProgress, onError) {
      const scope = this;
      const loader = new FileLoader(scope.manager);
      loader.setPath(scope.path);
      loader.setRequestHeader(scope.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function(text) {
        try {
          onLoad(scope.parse(JSON.parse(text)));
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }
          scope.manager.itemError(url);
        }
      }, onProgress, onError);
    },
    parse: function(json) {
      const textures = this.textures;
      function getTexture(name) {
        if (textures[name] === void 0) {
          console.warn("THREE.MaterialLoader: Undefined texture", name);
        }
        return textures[name];
      }
      const material = new Materials[json.type]();
      if (json.uuid !== void 0)
        material.uuid = json.uuid;
      if (json.name !== void 0)
        material.name = json.name;
      if (json.color !== void 0 && material.color !== void 0)
        material.color.setHex(json.color);
      if (json.roughness !== void 0)
        material.roughness = json.roughness;
      if (json.metalness !== void 0)
        material.metalness = json.metalness;
      if (json.sheen !== void 0)
        material.sheen = new Color().setHex(json.sheen);
      if (json.emissive !== void 0 && material.emissive !== void 0)
        material.emissive.setHex(json.emissive);
      if (json.specular !== void 0 && material.specular !== void 0)
        material.specular.setHex(json.specular);
      if (json.shininess !== void 0)
        material.shininess = json.shininess;
      if (json.clearcoat !== void 0)
        material.clearcoat = json.clearcoat;
      if (json.clearcoatRoughness !== void 0)
        material.clearcoatRoughness = json.clearcoatRoughness;
      if (json.fog !== void 0)
        material.fog = json.fog;
      if (json.flatShading !== void 0)
        material.flatShading = json.flatShading;
      if (json.blending !== void 0)
        material.blending = json.blending;
      if (json.combine !== void 0)
        material.combine = json.combine;
      if (json.side !== void 0)
        material.side = json.side;
      if (json.opacity !== void 0)
        material.opacity = json.opacity;
      if (json.transparent !== void 0)
        material.transparent = json.transparent;
      if (json.alphaTest !== void 0)
        material.alphaTest = json.alphaTest;
      if (json.depthTest !== void 0)
        material.depthTest = json.depthTest;
      if (json.depthWrite !== void 0)
        material.depthWrite = json.depthWrite;
      if (json.colorWrite !== void 0)
        material.colorWrite = json.colorWrite;
      if (json.stencilWrite !== void 0)
        material.stencilWrite = json.stencilWrite;
      if (json.stencilWriteMask !== void 0)
        material.stencilWriteMask = json.stencilWriteMask;
      if (json.stencilFunc !== void 0)
        material.stencilFunc = json.stencilFunc;
      if (json.stencilRef !== void 0)
        material.stencilRef = json.stencilRef;
      if (json.stencilFuncMask !== void 0)
        material.stencilFuncMask = json.stencilFuncMask;
      if (json.stencilFail !== void 0)
        material.stencilFail = json.stencilFail;
      if (json.stencilZFail !== void 0)
        material.stencilZFail = json.stencilZFail;
      if (json.stencilZPass !== void 0)
        material.stencilZPass = json.stencilZPass;
      if (json.wireframe !== void 0)
        material.wireframe = json.wireframe;
      if (json.wireframeLinewidth !== void 0)
        material.wireframeLinewidth = json.wireframeLinewidth;
      if (json.wireframeLinecap !== void 0)
        material.wireframeLinecap = json.wireframeLinecap;
      if (json.wireframeLinejoin !== void 0)
        material.wireframeLinejoin = json.wireframeLinejoin;
      if (json.rotation !== void 0)
        material.rotation = json.rotation;
      if (json.linewidth !== 1)
        material.linewidth = json.linewidth;
      if (json.dashSize !== void 0)
        material.dashSize = json.dashSize;
      if (json.gapSize !== void 0)
        material.gapSize = json.gapSize;
      if (json.scale !== void 0)
        material.scale = json.scale;
      if (json.polygonOffset !== void 0)
        material.polygonOffset = json.polygonOffset;
      if (json.polygonOffsetFactor !== void 0)
        material.polygonOffsetFactor = json.polygonOffsetFactor;
      if (json.polygonOffsetUnits !== void 0)
        material.polygonOffsetUnits = json.polygonOffsetUnits;
      if (json.skinning !== void 0)
        material.skinning = json.skinning;
      if (json.morphTargets !== void 0)
        material.morphTargets = json.morphTargets;
      if (json.morphNormals !== void 0)
        material.morphNormals = json.morphNormals;
      if (json.dithering !== void 0)
        material.dithering = json.dithering;
      if (json.vertexTangents !== void 0)
        material.vertexTangents = json.vertexTangents;
      if (json.visible !== void 0)
        material.visible = json.visible;
      if (json.toneMapped !== void 0)
        material.toneMapped = json.toneMapped;
      if (json.userData !== void 0)
        material.userData = json.userData;
      if (json.vertexColors !== void 0) {
        if (typeof json.vertexColors === "number") {
          material.vertexColors = json.vertexColors > 0 ? true : false;
        } else {
          material.vertexColors = json.vertexColors;
        }
      }
      if (json.uniforms !== void 0) {
        for (const name in json.uniforms) {
          const uniform = json.uniforms[name];
          material.uniforms[name] = {};
          switch (uniform.type) {
            case "t":
              material.uniforms[name].value = getTexture(uniform.value);
              break;
            case "c":
              material.uniforms[name].value = new Color().setHex(uniform.value);
              break;
            case "v2":
              material.uniforms[name].value = new Vector2().fromArray(uniform.value);
              break;
            case "v3":
              material.uniforms[name].value = new Vector3().fromArray(uniform.value);
              break;
            case "v4":
              material.uniforms[name].value = new Vector4().fromArray(uniform.value);
              break;
            case "m3":
              material.uniforms[name].value = new Matrix3().fromArray(uniform.value);
              break;
            case "m4":
              material.uniforms[name].value = new Matrix4().fromArray(uniform.value);
              break;
            default:
              material.uniforms[name].value = uniform.value;
          }
        }
      }
      if (json.defines !== void 0)
        material.defines = json.defines;
      if (json.vertexShader !== void 0)
        material.vertexShader = json.vertexShader;
      if (json.fragmentShader !== void 0)
        material.fragmentShader = json.fragmentShader;
      if (json.extensions !== void 0) {
        for (const key in json.extensions) {
          material.extensions[key] = json.extensions[key];
        }
      }
      if (json.shading !== void 0)
        material.flatShading = json.shading === 1;
      if (json.size !== void 0)
        material.size = json.size;
      if (json.sizeAttenuation !== void 0)
        material.sizeAttenuation = json.sizeAttenuation;
      if (json.map !== void 0)
        material.map = getTexture(json.map);
      if (json.matcap !== void 0)
        material.matcap = getTexture(json.matcap);
      if (json.alphaMap !== void 0)
        material.alphaMap = getTexture(json.alphaMap);
      if (json.bumpMap !== void 0)
        material.bumpMap = getTexture(json.bumpMap);
      if (json.bumpScale !== void 0)
        material.bumpScale = json.bumpScale;
      if (json.normalMap !== void 0)
        material.normalMap = getTexture(json.normalMap);
      if (json.normalMapType !== void 0)
        material.normalMapType = json.normalMapType;
      if (json.normalScale !== void 0) {
        let normalScale = json.normalScale;
        if (Array.isArray(normalScale) === false) {
          normalScale = [normalScale, normalScale];
        }
        material.normalScale = new Vector2().fromArray(normalScale);
      }
      if (json.displacementMap !== void 0)
        material.displacementMap = getTexture(json.displacementMap);
      if (json.displacementScale !== void 0)
        material.displacementScale = json.displacementScale;
      if (json.displacementBias !== void 0)
        material.displacementBias = json.displacementBias;
      if (json.roughnessMap !== void 0)
        material.roughnessMap = getTexture(json.roughnessMap);
      if (json.metalnessMap !== void 0)
        material.metalnessMap = getTexture(json.metalnessMap);
      if (json.emissiveMap !== void 0)
        material.emissiveMap = getTexture(json.emissiveMap);
      if (json.emissiveIntensity !== void 0)
        material.emissiveIntensity = json.emissiveIntensity;
      if (json.specularMap !== void 0)
        material.specularMap = getTexture(json.specularMap);
      if (json.envMap !== void 0)
        material.envMap = getTexture(json.envMap);
      if (json.envMapIntensity !== void 0)
        material.envMapIntensity = json.envMapIntensity;
      if (json.reflectivity !== void 0)
        material.reflectivity = json.reflectivity;
      if (json.refractionRatio !== void 0)
        material.refractionRatio = json.refractionRatio;
      if (json.lightMap !== void 0)
        material.lightMap = getTexture(json.lightMap);
      if (json.lightMapIntensity !== void 0)
        material.lightMapIntensity = json.lightMapIntensity;
      if (json.aoMap !== void 0)
        material.aoMap = getTexture(json.aoMap);
      if (json.aoMapIntensity !== void 0)
        material.aoMapIntensity = json.aoMapIntensity;
      if (json.gradientMap !== void 0)
        material.gradientMap = getTexture(json.gradientMap);
      if (json.clearcoatMap !== void 0)
        material.clearcoatMap = getTexture(json.clearcoatMap);
      if (json.clearcoatRoughnessMap !== void 0)
        material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);
      if (json.clearcoatNormalMap !== void 0)
        material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);
      if (json.clearcoatNormalScale !== void 0)
        material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);
      if (json.transmission !== void 0)
        material.transmission = json.transmission;
      if (json.transmissionMap !== void 0)
        material.transmissionMap = getTexture(json.transmissionMap);
      return material;
    },
    setTextures: function(value) {
      this.textures = value;
      return this;
    }
  });
  var LoaderUtils = {
    decodeText: function(array) {
      if (typeof TextDecoder !== "undefined") {
        return new TextDecoder().decode(array);
      }
      let s = "";
      for (let i = 0, il = array.length; i < il; i++) {
        s += String.fromCharCode(array[i]);
      }
      try {
        return decodeURIComponent(escape(s));
      } catch (e) {
        return s;
      }
    },
    extractUrlBase: function(url) {
      const index = url.lastIndexOf("/");
      if (index === -1)
        return "./";
      return url.substr(0, index + 1);
    }
  };
  function InstancedBufferGeometry() {
    BufferGeometry.call(this);
    this.type = "InstancedBufferGeometry";
    this.instanceCount = Infinity;
  }
  InstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {
    constructor: InstancedBufferGeometry,
    isInstancedBufferGeometry: true,
    copy: function(source) {
      BufferGeometry.prototype.copy.call(this, source);
      this.instanceCount = source.instanceCount;
      return this;
    },
    clone: function() {
      return new this.constructor().copy(this);
    },
    toJSON: function() {
      const data = BufferGeometry.prototype.toJSON.call(this);
      data.instanceCount = this.instanceCount;
      data.isInstancedBufferGeometry = true;
      return data;
    }
  });
  function InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute) {
    if (typeof normalized === "number") {
      meshPerAttribute = normalized;
      normalized = false;
      console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.");
    }
    BufferAttribute.call(this, array, itemSize, normalized);
    this.meshPerAttribute = meshPerAttribute || 1;
  }
  InstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {
    constructor: InstancedBufferAttribute,
    isInstancedBufferAttribute: true,
    copy: function(source) {
      BufferAttribute.prototype.copy.call(this, source);
      this.meshPerAttribute = source.meshPerAttribute;
      return this;
    },
    toJSON: function() {
      const data = BufferAttribute.prototype.toJSON.call(this);
      data.meshPerAttribute = this.meshPerAttribute;
      data.isInstancedBufferAttribute = true;
      return data;
    }
  });
  function BufferGeometryLoader(manager) {
    Loader.call(this, manager);
  }
  BufferGeometryLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: BufferGeometryLoader,
    load: function(url, onLoad, onProgress, onError) {
      const scope = this;
      const loader = new FileLoader(scope.manager);
      loader.setPath(scope.path);
      loader.setRequestHeader(scope.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function(text) {
        try {
          onLoad(scope.parse(JSON.parse(text)));
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }
          scope.manager.itemError(url);
        }
      }, onProgress, onError);
    },
    parse: function(json) {
      const interleavedBufferMap = {};
      const arrayBufferMap = {};
      function getInterleavedBuffer(json2, uuid) {
        if (interleavedBufferMap[uuid] !== void 0)
          return interleavedBufferMap[uuid];
        const interleavedBuffers = json2.interleavedBuffers;
        const interleavedBuffer = interleavedBuffers[uuid];
        const buffer = getArrayBuffer(json2, interleavedBuffer.buffer);
        const array = getTypedArray(interleavedBuffer.type, buffer);
        const ib = new InterleavedBuffer(array, interleavedBuffer.stride);
        ib.uuid = interleavedBuffer.uuid;
        interleavedBufferMap[uuid] = ib;
        return ib;
      }
      function getArrayBuffer(json2, uuid) {
        if (arrayBufferMap[uuid] !== void 0)
          return arrayBufferMap[uuid];
        const arrayBuffers = json2.arrayBuffers;
        const arrayBuffer = arrayBuffers[uuid];
        const ab = new Uint32Array(arrayBuffer).buffer;
        arrayBufferMap[uuid] = ab;
        return ab;
      }
      const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
      const index = json.data.index;
      if (index !== void 0) {
        const typedArray = getTypedArray(index.type, index.array);
        geometry.setIndex(new BufferAttribute(typedArray, 1));
      }
      const attributes = json.data.attributes;
      for (const key in attributes) {
        const attribute = attributes[key];
        let bufferAttribute;
        if (attribute.isInterleavedBufferAttribute) {
          const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
          bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
        } else {
          const typedArray = getTypedArray(attribute.type, attribute.array);
          const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
          bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);
        }
        if (attribute.name !== void 0)
          bufferAttribute.name = attribute.name;
        geometry.setAttribute(key, bufferAttribute);
      }
      const morphAttributes = json.data.morphAttributes;
      if (morphAttributes) {
        for (const key in morphAttributes) {
          const attributeArray = morphAttributes[key];
          const array = [];
          for (let i = 0, il = attributeArray.length; i < il; i++) {
            const attribute = attributeArray[i];
            let bufferAttribute;
            if (attribute.isInterleavedBufferAttribute) {
              const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
              bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
            } else {
              const typedArray = getTypedArray(attribute.type, attribute.array);
              bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);
            }
            if (attribute.name !== void 0)
              bufferAttribute.name = attribute.name;
            array.push(bufferAttribute);
          }
          geometry.morphAttributes[key] = array;
        }
      }
      const morphTargetsRelative = json.data.morphTargetsRelative;
      if (morphTargetsRelative) {
        geometry.morphTargetsRelative = true;
      }
      const groups = json.data.groups || json.data.drawcalls || json.data.offsets;
      if (groups !== void 0) {
        for (let i = 0, n = groups.length; i !== n; ++i) {
          const group2 = groups[i];
          geometry.addGroup(group2.start, group2.count, group2.materialIndex);
        }
      }
      const boundingSphere = json.data.boundingSphere;
      if (boundingSphere !== void 0) {
        const center = new Vector3();
        if (boundingSphere.center !== void 0) {
          center.fromArray(boundingSphere.center);
        }
        geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
      }
      if (json.name)
        geometry.name = json.name;
      if (json.userData)
        geometry.userData = json.userData;
      return geometry;
    }
  });
  function ImageBitmapLoader(manager) {
    if (typeof createImageBitmap === "undefined") {
      console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
    }
    if (typeof fetch === "undefined") {
      console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
    }
    Loader.call(this, manager);
    this.options = {premultiplyAlpha: "none"};
  }
  ImageBitmapLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: ImageBitmapLoader,
    isImageBitmapLoader: true,
    setOptions: function setOptions(options) {
      this.options = options;
      return this;
    },
    load: function(url, onLoad, onProgress, onError) {
      if (url === void 0)
        url = "";
      if (this.path !== void 0)
        url = this.path + url;
      url = this.manager.resolveURL(url);
      const scope = this;
      const cached = Cache.get(url);
      if (cached !== void 0) {
        scope.manager.itemStart(url);
        setTimeout(function() {
          if (onLoad)
            onLoad(cached);
          scope.manager.itemEnd(url);
        }, 0);
        return cached;
      }
      const fetchOptions = {};
      fetchOptions.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include";
      fetch(url, fetchOptions).then(function(res) {
        return res.blob();
      }).then(function(blob) {
        return createImageBitmap(blob, scope.options);
      }).then(function(imageBitmap) {
        Cache.add(url, imageBitmap);
        if (onLoad)
          onLoad(imageBitmap);
        scope.manager.itemEnd(url);
      }).catch(function(e) {
        if (onError)
          onError(e);
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      });
      scope.manager.itemStart(url);
    }
  });
  function ShapePath() {
    this.type = "ShapePath";
    this.color = new Color();
    this.subPaths = [];
    this.currentPath = null;
  }
  Object.assign(ShapePath.prototype, {
    moveTo: function(x, y) {
      this.currentPath = new Path();
      this.subPaths.push(this.currentPath);
      this.currentPath.moveTo(x, y);
      return this;
    },
    lineTo: function(x, y) {
      this.currentPath.lineTo(x, y);
      return this;
    },
    quadraticCurveTo: function(aCPx, aCPy, aX, aY) {
      this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
      return this;
    },
    bezierCurveTo: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
      this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
      return this;
    },
    splineThru: function(pts) {
      this.currentPath.splineThru(pts);
      return this;
    },
    toShapes: function(isCCW, noHoles) {
      function toShapesNoHoles(inSubpaths) {
        const shapes2 = [];
        for (let i = 0, l = inSubpaths.length; i < l; i++) {
          const tmpPath2 = inSubpaths[i];
          const tmpShape2 = new Shape();
          tmpShape2.curves = tmpPath2.curves;
          shapes2.push(tmpShape2);
        }
        return shapes2;
      }
      function isPointInsidePolygon(inPt, inPolygon) {
        const polyLen = inPolygon.length;
        let inside = false;
        for (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {
          let edgeLowPt = inPolygon[p];
          let edgeHighPt = inPolygon[q];
          let edgeDx = edgeHighPt.x - edgeLowPt.x;
          let edgeDy = edgeHighPt.y - edgeLowPt.y;
          if (Math.abs(edgeDy) > Number.EPSILON) {
            if (edgeDy < 0) {
              edgeLowPt = inPolygon[q];
              edgeDx = -edgeDx;
              edgeHighPt = inPolygon[p];
              edgeDy = -edgeDy;
            }
            if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y)
              continue;
            if (inPt.y === edgeLowPt.y) {
              if (inPt.x === edgeLowPt.x)
                return true;
            } else {
              const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
              if (perpEdge === 0)
                return true;
              if (perpEdge < 0)
                continue;
              inside = !inside;
            }
          } else {
            if (inPt.y !== edgeLowPt.y)
              continue;
            if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x)
              return true;
          }
        }
        return inside;
      }
      const isClockWise = ShapeUtils.isClockWise;
      const subPaths = this.subPaths;
      if (subPaths.length === 0)
        return [];
      if (noHoles === true)
        return toShapesNoHoles(subPaths);
      let solid, tmpPath, tmpShape;
      const shapes = [];
      if (subPaths.length === 1) {
        tmpPath = subPaths[0];
        tmpShape = new Shape();
        tmpShape.curves = tmpPath.curves;
        shapes.push(tmpShape);
        return shapes;
      }
      let holesFirst = !isClockWise(subPaths[0].getPoints());
      holesFirst = isCCW ? !holesFirst : holesFirst;
      const betterShapeHoles = [];
      const newShapes = [];
      let newShapeHoles = [];
      let mainIdx = 0;
      let tmpPoints;
      newShapes[mainIdx] = void 0;
      newShapeHoles[mainIdx] = [];
      for (let i = 0, l = subPaths.length; i < l; i++) {
        tmpPath = subPaths[i];
        tmpPoints = tmpPath.getPoints();
        solid = isClockWise(tmpPoints);
        solid = isCCW ? !solid : solid;
        if (solid) {
          if (!holesFirst && newShapes[mainIdx])
            mainIdx++;
          newShapes[mainIdx] = {s: new Shape(), p: tmpPoints};
          newShapes[mainIdx].s.curves = tmpPath.curves;
          if (holesFirst)
            mainIdx++;
          newShapeHoles[mainIdx] = [];
        } else {
          newShapeHoles[mainIdx].push({h: tmpPath, p: tmpPoints[0]});
        }
      }
      if (!newShapes[0])
        return toShapesNoHoles(subPaths);
      if (newShapes.length > 1) {
        let ambiguous = false;
        const toChange = [];
        for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
          betterShapeHoles[sIdx] = [];
        }
        for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
          const sho = newShapeHoles[sIdx];
          for (let hIdx = 0; hIdx < sho.length; hIdx++) {
            const ho = sho[hIdx];
            let hole_unassigned = true;
            for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
              if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
                if (sIdx !== s2Idx)
                  toChange.push({froms: sIdx, tos: s2Idx, hole: hIdx});
                if (hole_unassigned) {
                  hole_unassigned = false;
                  betterShapeHoles[s2Idx].push(ho);
                } else {
                  ambiguous = true;
                }
              }
            }
            if (hole_unassigned) {
              betterShapeHoles[sIdx].push(ho);
            }
          }
        }
        if (toChange.length > 0) {
          if (!ambiguous)
            newShapeHoles = betterShapeHoles;
        }
      }
      let tmpHoles;
      for (let i = 0, il = newShapes.length; i < il; i++) {
        tmpShape = newShapes[i].s;
        shapes.push(tmpShape);
        tmpHoles = newShapeHoles[i];
        for (let j = 0, jl = tmpHoles.length; j < jl; j++) {
          tmpShape.holes.push(tmpHoles[j].h);
        }
      }
      return shapes;
    }
  });
  function Font(data) {
    this.type = "Font";
    this.data = data;
  }
  Object.assign(Font.prototype, {
    isFont: true,
    generateShapes: function(text, size = 100) {
      const shapes = [];
      const paths2 = createPaths(text, size, this.data);
      for (let p = 0, pl = paths2.length; p < pl; p++) {
        Array.prototype.push.apply(shapes, paths2[p].toShapes());
      }
      return shapes;
    }
  });
  function createPaths(text, size, data) {
    const chars = Array.from ? Array.from(text) : String(text).split("");
    const scale = size / data.resolution;
    const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;
    const paths2 = [];
    let offsetX = 0, offsetY = 0;
    for (let i = 0; i < chars.length; i++) {
      const char = chars[i];
      if (char === "\n") {
        offsetX = 0;
        offsetY -= line_height;
      } else {
        const ret = createPath(char, scale, offsetX, offsetY, data);
        offsetX += ret.offsetX;
        paths2.push(ret.path);
      }
    }
    return paths2;
  }
  function createPath(char, scale, offsetX, offsetY, data) {
    const glyph = data.glyphs[char] || data.glyphs["?"];
    if (!glyph) {
      console.error('THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + ".");
      return;
    }
    const path = new ShapePath();
    let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;
    if (glyph.o) {
      const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(" "));
      for (let i = 0, l = outline.length; i < l; ) {
        const action = outline[i++];
        switch (action) {
          case "m":
            x = outline[i++] * scale + offsetX;
            y = outline[i++] * scale + offsetY;
            path.moveTo(x, y);
            break;
          case "l":
            x = outline[i++] * scale + offsetX;
            y = outline[i++] * scale + offsetY;
            path.lineTo(x, y);
            break;
          case "q":
            cpx = outline[i++] * scale + offsetX;
            cpy = outline[i++] * scale + offsetY;
            cpx1 = outline[i++] * scale + offsetX;
            cpy1 = outline[i++] * scale + offsetY;
            path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);
            break;
          case "b":
            cpx = outline[i++] * scale + offsetX;
            cpy = outline[i++] * scale + offsetY;
            cpx1 = outline[i++] * scale + offsetX;
            cpy1 = outline[i++] * scale + offsetY;
            cpx2 = outline[i++] * scale + offsetX;
            cpy2 = outline[i++] * scale + offsetY;
            path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);
            break;
        }
      }
    }
    return {offsetX: glyph.ha * scale, path};
  }
  function FontLoader(manager) {
    Loader.call(this, manager);
  }
  FontLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: FontLoader,
    load: function(url, onLoad, onProgress, onError) {
      const scope = this;
      const loader = new FileLoader(this.manager);
      loader.setPath(this.path);
      loader.setRequestHeader(this.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function(text) {
        let json;
        try {
          json = JSON.parse(text);
        } catch (e) {
          console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.");
          json = JSON.parse(text.substring(65, text.length - 2));
        }
        const font = scope.parse(json);
        if (onLoad)
          onLoad(font);
      }, onProgress, onError);
    },
    parse: function(json) {
      return new Font(json);
    }
  });
  var _context;
  var AudioContext = {
    getContext: function() {
      if (_context === void 0) {
        _context = new (window.AudioContext || window.webkitAudioContext)();
      }
      return _context;
    },
    setContext: function(value) {
      _context = value;
    }
  };
  function AudioLoader(manager) {
    Loader.call(this, manager);
  }
  AudioLoader.prototype = Object.assign(Object.create(Loader.prototype), {
    constructor: AudioLoader,
    load: function(url, onLoad, onProgress, onError) {
      const scope = this;
      const loader = new FileLoader(scope.manager);
      loader.setResponseType("arraybuffer");
      loader.setPath(scope.path);
      loader.setRequestHeader(scope.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function(buffer) {
        try {
          const bufferCopy = buffer.slice(0);
          const context = AudioContext.getContext();
          context.decodeAudioData(bufferCopy, function(audioBuffer) {
            onLoad(audioBuffer);
          });
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }
          scope.manager.itemError(url);
        }
      }, onProgress, onError);
    }
  });
  function HemisphereLightProbe(skyColor, groundColor, intensity) {
    LightProbe.call(this, void 0, intensity);
    const color1 = new Color().set(skyColor);
    const color2 = new Color().set(groundColor);
    const sky = new Vector3(color1.r, color1.g, color1.b);
    const ground = new Vector3(color2.r, color2.g, color2.b);
    const c0 = Math.sqrt(Math.PI);
    const c1 = c0 * Math.sqrt(0.75);
    this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
    this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
  }
  HemisphereLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {
    constructor: HemisphereLightProbe,
    isHemisphereLightProbe: true,
    copy: function(source) {
      LightProbe.prototype.copy.call(this, source);
      return this;
    },
    toJSON: function(meta) {
      const data = LightProbe.prototype.toJSON.call(this, meta);
      return data;
    }
  });
  function AmbientLightProbe(color, intensity) {
    LightProbe.call(this, void 0, intensity);
    const color1 = new Color().set(color);
    this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
  }
  AmbientLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {
    constructor: AmbientLightProbe,
    isAmbientLightProbe: true,
    copy: function(source) {
      LightProbe.prototype.copy.call(this, source);
      return this;
    },
    toJSON: function(meta) {
      const data = LightProbe.prototype.toJSON.call(this, meta);
      return data;
    }
  });
  var _eyeRight = new Matrix4();
  var _eyeLeft = new Matrix4();
  function StereoCamera() {
    this.type = "StereoCamera";
    this.aspect = 1;
    this.eyeSep = 0.064;
    this.cameraL = new PerspectiveCamera();
    this.cameraL.layers.enable(1);
    this.cameraL.matrixAutoUpdate = false;
    this.cameraR = new PerspectiveCamera();
    this.cameraR.layers.enable(2);
    this.cameraR.matrixAutoUpdate = false;
    this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }
  Object.assign(StereoCamera.prototype, {
    update: function(camera2) {
      const cache = this._cache;
      const needsUpdate = cache.focus !== camera2.focus || cache.fov !== camera2.fov || cache.aspect !== camera2.aspect * this.aspect || cache.near !== camera2.near || cache.far !== camera2.far || cache.zoom !== camera2.zoom || cache.eyeSep !== this.eyeSep;
      if (needsUpdate) {
        cache.focus = camera2.focus;
        cache.fov = camera2.fov;
        cache.aspect = camera2.aspect * this.aspect;
        cache.near = camera2.near;
        cache.far = camera2.far;
        cache.zoom = camera2.zoom;
        cache.eyeSep = this.eyeSep;
        const projectionMatrix = camera2.projectionMatrix.clone();
        const eyeSepHalf = cache.eyeSep / 2;
        const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
        const ymax = cache.near * Math.tan(MathUtils.DEG2RAD * cache.fov * 0.5) / cache.zoom;
        let xmin, xmax;
        _eyeLeft.elements[12] = -eyeSepHalf;
        _eyeRight.elements[12] = eyeSepHalf;
        xmin = -ymax * cache.aspect + eyeSepOnProjection;
        xmax = ymax * cache.aspect + eyeSepOnProjection;
        projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
        this.cameraL.projectionMatrix.copy(projectionMatrix);
        xmin = -ymax * cache.aspect - eyeSepOnProjection;
        xmax = ymax * cache.aspect - eyeSepOnProjection;
        projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
        this.cameraR.projectionMatrix.copy(projectionMatrix);
      }
      this.cameraL.matrixWorld.copy(camera2.matrixWorld).multiply(_eyeLeft);
      this.cameraR.matrixWorld.copy(camera2.matrixWorld).multiply(_eyeRight);
    }
  });
  var Clock = class {
    constructor(autoStart) {
      this.autoStart = autoStart !== void 0 ? autoStart : true;
      this.startTime = 0;
      this.oldTime = 0;
      this.elapsedTime = 0;
      this.running = false;
    }
    start() {
      this.startTime = now();
      this.oldTime = this.startTime;
      this.elapsedTime = 0;
      this.running = true;
    }
    stop() {
      this.getElapsedTime();
      this.running = false;
      this.autoStart = false;
    }
    getElapsedTime() {
      this.getDelta();
      return this.elapsedTime;
    }
    getDelta() {
      let diff = 0;
      if (this.autoStart && !this.running) {
        this.start();
        return 0;
      }
      if (this.running) {
        const newTime = now();
        diff = (newTime - this.oldTime) / 1e3;
        this.oldTime = newTime;
        this.elapsedTime += diff;
      }
      return diff;
    }
  };
  function now() {
    return (typeof performance === "undefined" ? Date : performance).now();
  }
  var Audio = class extends Object3D {
    constructor(listener) {
      super();
      this.type = "Audio";
      this.listener = listener;
      this.context = listener.context;
      this.gain = this.context.createGain();
      this.gain.connect(listener.getInput());
      this.autoplay = false;
      this.buffer = null;
      this.detune = 0;
      this.loop = false;
      this.loopStart = 0;
      this.loopEnd = 0;
      this.offset = 0;
      this.duration = void 0;
      this.playbackRate = 1;
      this.isPlaying = false;
      this.hasPlaybackControl = true;
      this.source = null;
      this.sourceType = "empty";
      this._startedAt = 0;
      this._progress = 0;
      this._connected = false;
      this.filters = [];
    }
    getOutput() {
      return this.gain;
    }
    setNodeSource(audioNode) {
      this.hasPlaybackControl = false;
      this.sourceType = "audioNode";
      this.source = audioNode;
      this.connect();
      return this;
    }
    setMediaElementSource(mediaElement) {
      this.hasPlaybackControl = false;
      this.sourceType = "mediaNode";
      this.source = this.context.createMediaElementSource(mediaElement);
      this.connect();
      return this;
    }
    setMediaStreamSource(mediaStream) {
      this.hasPlaybackControl = false;
      this.sourceType = "mediaStreamNode";
      this.source = this.context.createMediaStreamSource(mediaStream);
      this.connect();
      return this;
    }
    setBuffer(audioBuffer) {
      this.buffer = audioBuffer;
      this.sourceType = "buffer";
      if (this.autoplay)
        this.play();
      return this;
    }
    play(delay = 0) {
      if (this.isPlaying === true) {
        console.warn("THREE.Audio: Audio is already playing.");
        return;
      }
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      this._startedAt = this.context.currentTime + delay;
      const source = this.context.createBufferSource();
      source.buffer = this.buffer;
      source.loop = this.loop;
      source.loopStart = this.loopStart;
      source.loopEnd = this.loopEnd;
      source.onended = this.onEnded.bind(this);
      source.start(this._startedAt, this._progress + this.offset, this.duration);
      this.isPlaying = true;
      this.source = source;
      this.setDetune(this.detune);
      this.setPlaybackRate(this.playbackRate);
      return this.connect();
    }
    pause() {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      if (this.isPlaying === true) {
        this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
        if (this.loop === true) {
          this._progress = this._progress % (this.duration || this.buffer.duration);
        }
        this.source.stop();
        this.source.onended = null;
        this.isPlaying = false;
      }
      return this;
    }
    stop() {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      this._progress = 0;
      this.source.stop();
      this.source.onended = null;
      this.isPlaying = false;
      return this;
    }
    connect() {
      if (this.filters.length > 0) {
        this.source.connect(this.filters[0]);
        for (let i = 1, l = this.filters.length; i < l; i++) {
          this.filters[i - 1].connect(this.filters[i]);
        }
        this.filters[this.filters.length - 1].connect(this.getOutput());
      } else {
        this.source.connect(this.getOutput());
      }
      this._connected = true;
      return this;
    }
    disconnect() {
      if (this.filters.length > 0) {
        this.source.disconnect(this.filters[0]);
        for (let i = 1, l = this.filters.length; i < l; i++) {
          this.filters[i - 1].disconnect(this.filters[i]);
        }
        this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else {
        this.source.disconnect(this.getOutput());
      }
      this._connected = false;
      return this;
    }
    getFilters() {
      return this.filters;
    }
    setFilters(value) {
      if (!value)
        value = [];
      if (this._connected === true) {
        this.disconnect();
        this.filters = value.slice();
        this.connect();
      } else {
        this.filters = value.slice();
      }
      return this;
    }
    setDetune(value) {
      this.detune = value;
      if (this.source.detune === void 0)
        return;
      if (this.isPlaying === true) {
        this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
      }
      return this;
    }
    getDetune() {
      return this.detune;
    }
    getFilter() {
      return this.getFilters()[0];
    }
    setFilter(filter) {
      return this.setFilters(filter ? [filter] : []);
    }
    setPlaybackRate(value) {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      this.playbackRate = value;
      if (this.isPlaying === true) {
        this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
      }
      return this;
    }
    getPlaybackRate() {
      return this.playbackRate;
    }
    onEnded() {
      this.isPlaying = false;
    }
    getLoop() {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return false;
      }
      return this.loop;
    }
    setLoop(value) {
      if (this.hasPlaybackControl === false) {
        console.warn("THREE.Audio: this Audio has no playback control.");
        return;
      }
      this.loop = value;
      if (this.isPlaying === true) {
        this.source.loop = this.loop;
      }
      return this;
    }
    setLoopStart(value) {
      this.loopStart = value;
      return this;
    }
    setLoopEnd(value) {
      this.loopEnd = value;
      return this;
    }
    getVolume() {
      return this.gain.gain.value;
    }
    setVolume(value) {
      this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
      return this;
    }
  };
  var AudioAnalyser = class {
    constructor(audio, fftSize = 2048) {
      this.analyser = audio.context.createAnalyser();
      this.analyser.fftSize = fftSize;
      this.data = new Uint8Array(this.analyser.frequencyBinCount);
      audio.getOutput().connect(this.analyser);
    }
    getFrequencyData() {
      this.analyser.getByteFrequencyData(this.data);
      return this.data;
    }
    getAverageFrequency() {
      let value = 0;
      const data = this.getFrequencyData();
      for (let i = 0; i < data.length; i++) {
        value += data[i];
      }
      return value / data.length;
    }
  };
  function PropertyMixer(binding, typeName, valueSize) {
    this.binding = binding;
    this.valueSize = valueSize;
    let mixFunction, mixFunctionAdditive, setIdentity;
    switch (typeName) {
      case "quaternion":
        mixFunction = this._slerp;
        mixFunctionAdditive = this._slerpAdditive;
        setIdentity = this._setAdditiveIdentityQuaternion;
        this.buffer = new Float64Array(valueSize * 6);
        this._workIndex = 5;
        break;
      case "string":
      case "bool":
        mixFunction = this._select;
        mixFunctionAdditive = this._select;
        setIdentity = this._setAdditiveIdentityOther;
        this.buffer = new Array(valueSize * 5);
        break;
      default:
        mixFunction = this._lerp;
        mixFunctionAdditive = this._lerpAdditive;
        setIdentity = this._setAdditiveIdentityNumeric;
        this.buffer = new Float64Array(valueSize * 5);
    }
    this._mixBufferRegion = mixFunction;
    this._mixBufferRegionAdditive = mixFunctionAdditive;
    this._setIdentity = setIdentity;
    this._origIndex = 3;
    this._addIndex = 4;
    this.cumulativeWeight = 0;
    this.cumulativeWeightAdditive = 0;
    this.useCount = 0;
    this.referenceCount = 0;
  }
  Object.assign(PropertyMixer.prototype, {
    accumulate: function(accuIndex, weight) {
      const buffer = this.buffer, stride = this.valueSize, offset = accuIndex * stride + stride;
      let currentWeight = this.cumulativeWeight;
      if (currentWeight === 0) {
        for (let i = 0; i !== stride; ++i) {
          buffer[offset + i] = buffer[i];
        }
        currentWeight = weight;
      } else {
        currentWeight += weight;
        const mix = weight / currentWeight;
        this._mixBufferRegion(buffer, offset, 0, mix, stride);
      }
      this.cumulativeWeight = currentWeight;
    },
    accumulateAdditive: function(weight) {
      const buffer = this.buffer, stride = this.valueSize, offset = stride * this._addIndex;
      if (this.cumulativeWeightAdditive === 0) {
        this._setIdentity();
      }
      this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);
      this.cumulativeWeightAdditive += weight;
    },
    apply: function(accuIndex) {
      const stride = this.valueSize, buffer = this.buffer, offset = accuIndex * stride + stride, weight = this.cumulativeWeight, weightAdditive = this.cumulativeWeightAdditive, binding = this.binding;
      this.cumulativeWeight = 0;
      this.cumulativeWeightAdditive = 0;
      if (weight < 1) {
        const originalValueOffset = stride * this._origIndex;
        this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
      }
      if (weightAdditive > 0) {
        this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
      }
      for (let i = stride, e = stride + stride; i !== e; ++i) {
        if (buffer[i] !== buffer[i + stride]) {
          binding.setValue(buffer, offset);
          break;
        }
      }
    },
    saveOriginalState: function() {
      const binding = this.binding;
      const buffer = this.buffer, stride = this.valueSize, originalValueOffset = stride * this._origIndex;
      binding.getValue(buffer, originalValueOffset);
      for (let i = stride, e = originalValueOffset; i !== e; ++i) {
        buffer[i] = buffer[originalValueOffset + i % stride];
      }
      this._setIdentity();
      this.cumulativeWeight = 0;
      this.cumulativeWeightAdditive = 0;
    },
    restoreOriginalState: function() {
      const originalValueOffset = this.valueSize * 3;
      this.binding.setValue(this.buffer, originalValueOffset);
    },
    _setAdditiveIdentityNumeric: function() {
      const startIndex = this._addIndex * this.valueSize;
      const endIndex = startIndex + this.valueSize;
      for (let i = startIndex; i < endIndex; i++) {
        this.buffer[i] = 0;
      }
    },
    _setAdditiveIdentityQuaternion: function() {
      this._setAdditiveIdentityNumeric();
      this.buffer[this._addIndex * this.valueSize + 3] = 1;
    },
    _setAdditiveIdentityOther: function() {
      const startIndex = this._origIndex * this.valueSize;
      const targetIndex = this._addIndex * this.valueSize;
      for (let i = 0; i < this.valueSize; i++) {
        this.buffer[targetIndex + i] = this.buffer[startIndex + i];
      }
    },
    _select: function(buffer, dstOffset, srcOffset, t, stride) {
      if (t >= 0.5) {
        for (let i = 0; i !== stride; ++i) {
          buffer[dstOffset + i] = buffer[srcOffset + i];
        }
      }
    },
    _slerp: function(buffer, dstOffset, srcOffset, t) {
      Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
    },
    _slerpAdditive: function(buffer, dstOffset, srcOffset, t, stride) {
      const workOffset = this._workIndex * stride;
      Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);
      Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
    },
    _lerp: function(buffer, dstOffset, srcOffset, t, stride) {
      const s = 1 - t;
      for (let i = 0; i !== stride; ++i) {
        const j = dstOffset + i;
        buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;
      }
    },
    _lerpAdditive: function(buffer, dstOffset, srcOffset, t, stride) {
      for (let i = 0; i !== stride; ++i) {
        const j = dstOffset + i;
        buffer[j] = buffer[j] + buffer[srcOffset + i] * t;
      }
    }
  });
  var _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
  var _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
  var _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
  var _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
  var _directoryRe = /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
  var _nodeRe = /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
  var _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
  var _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
  var _trackRe = new RegExp("^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$");
  var _supportedObjectNames = ["material", "materials", "bones"];
  function Composite(targetGroup, path, optionalParsedPath) {
    const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
    this._targetGroup = targetGroup;
    this._bindings = targetGroup.subscribe_(path, parsedPath);
  }
  Object.assign(Composite.prototype, {
    getValue: function(array, offset) {
      this.bind();
      const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
      if (binding !== void 0)
        binding.getValue(array, offset);
    },
    setValue: function(array, offset) {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].setValue(array, offset);
      }
    },
    bind: function() {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].bind();
      }
    },
    unbind: function() {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].unbind();
      }
    }
  });
  function PropertyBinding(rootNode, path, parsedPath) {
    this.path = path;
    this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
    this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
    this.rootNode = rootNode;
  }
  Object.assign(PropertyBinding, {
    Composite,
    create: function(root, path, parsedPath) {
      if (!(root && root.isAnimationObjectGroup)) {
        return new PropertyBinding(root, path, parsedPath);
      } else {
        return new PropertyBinding.Composite(root, path, parsedPath);
      }
    },
    sanitizeNodeName: function(name) {
      return name.replace(/\s/g, "_").replace(_reservedRe, "");
    },
    parseTrackName: function(trackName) {
      const matches = _trackRe.exec(trackName);
      if (!matches) {
        throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
      }
      const results = {
        nodeName: matches[2],
        objectName: matches[3],
        objectIndex: matches[4],
        propertyName: matches[5],
        propertyIndex: matches[6]
      };
      const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
      if (lastDot !== void 0 && lastDot !== -1) {
        const objectName = results.nodeName.substring(lastDot + 1);
        if (_supportedObjectNames.indexOf(objectName) !== -1) {
          results.nodeName = results.nodeName.substring(0, lastDot);
          results.objectName = objectName;
        }
      }
      if (results.propertyName === null || results.propertyName.length === 0) {
        throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
      }
      return results;
    },
    findNode: function(root, nodeName) {
      if (!nodeName || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
        return root;
      }
      if (root.skeleton) {
        const bone = root.skeleton.getBoneByName(nodeName);
        if (bone !== void 0) {
          return bone;
        }
      }
      if (root.children) {
        const searchNodeSubtree = function(children) {
          for (let i = 0; i < children.length; i++) {
            const childNode = children[i];
            if (childNode.name === nodeName || childNode.uuid === nodeName) {
              return childNode;
            }
            const result = searchNodeSubtree(childNode.children);
            if (result)
              return result;
          }
          return null;
        };
        const subTreeNode = searchNodeSubtree(root.children);
        if (subTreeNode) {
          return subTreeNode;
        }
      }
      return null;
    }
  });
  Object.assign(PropertyBinding.prototype, {
    _getValue_unavailable: function() {
    },
    _setValue_unavailable: function() {
    },
    BindingType: {
      Direct: 0,
      EntireArray: 1,
      ArrayElement: 2,
      HasFromToArray: 3
    },
    Versioning: {
      None: 0,
      NeedsUpdate: 1,
      MatrixWorldNeedsUpdate: 2
    },
    GetterByBindingType: [
      function getValue_direct(buffer, offset) {
        buffer[offset] = this.node[this.propertyName];
      },
      function getValue_array(buffer, offset) {
        const source = this.resolvedProperty;
        for (let i = 0, n = source.length; i !== n; ++i) {
          buffer[offset++] = source[i];
        }
      },
      function getValue_arrayElement(buffer, offset) {
        buffer[offset] = this.resolvedProperty[this.propertyIndex];
      },
      function getValue_toArray(buffer, offset) {
        this.resolvedProperty.toArray(buffer, offset);
      }
    ],
    SetterByBindingTypeAndVersioning: [
      [
        function setValue_direct(buffer, offset) {
          this.targetObject[this.propertyName] = buffer[offset];
        },
        function setValue_direct_setNeedsUpdate(buffer, offset) {
          this.targetObject[this.propertyName] = buffer[offset];
          this.targetObject.needsUpdate = true;
        },
        function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
          this.targetObject[this.propertyName] = buffer[offset];
          this.targetObject.matrixWorldNeedsUpdate = true;
        }
      ],
      [
        function setValue_array(buffer, offset) {
          const dest = this.resolvedProperty;
          for (let i = 0, n = dest.length; i !== n; ++i) {
            dest[i] = buffer[offset++];
          }
        },
        function setValue_array_setNeedsUpdate(buffer, offset) {
          const dest = this.resolvedProperty;
          for (let i = 0, n = dest.length; i !== n; ++i) {
            dest[i] = buffer[offset++];
          }
          this.targetObject.needsUpdate = true;
        },
        function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
          const dest = this.resolvedProperty;
          for (let i = 0, n = dest.length; i !== n; ++i) {
            dest[i] = buffer[offset++];
          }
          this.targetObject.matrixWorldNeedsUpdate = true;
        }
      ],
      [
        function setValue_arrayElement(buffer, offset) {
          this.resolvedProperty[this.propertyIndex] = buffer[offset];
        },
        function setValue_arrayElement_setNeedsUpdate(buffer, offset) {
          this.resolvedProperty[this.propertyIndex] = buffer[offset];
          this.targetObject.needsUpdate = true;
        },
        function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
          this.resolvedProperty[this.propertyIndex] = buffer[offset];
          this.targetObject.matrixWorldNeedsUpdate = true;
        }
      ],
      [
        function setValue_fromArray(buffer, offset) {
          this.resolvedProperty.fromArray(buffer, offset);
        },
        function setValue_fromArray_setNeedsUpdate(buffer, offset) {
          this.resolvedProperty.fromArray(buffer, offset);
          this.targetObject.needsUpdate = true;
        },
        function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
          this.resolvedProperty.fromArray(buffer, offset);
          this.targetObject.matrixWorldNeedsUpdate = true;
        }
      ]
    ],
    getValue: function getValue_unbound(targetArray, offset) {
      this.bind();
      this.getValue(targetArray, offset);
    },
    setValue: function getValue_unbound2(sourceArray, offset) {
      this.bind();
      this.setValue(sourceArray, offset);
    },
    bind: function() {
      let targetObject = this.node;
      const parsedPath = this.parsedPath;
      const objectName = parsedPath.objectName;
      const propertyName = parsedPath.propertyName;
      let propertyIndex = parsedPath.propertyIndex;
      if (!targetObject) {
        targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
        this.node = targetObject;
      }
      this.getValue = this._getValue_unavailable;
      this.setValue = this._setValue_unavailable;
      if (!targetObject) {
        console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
        return;
      }
      if (objectName) {
        let objectIndex = parsedPath.objectIndex;
        switch (objectName) {
          case "materials":
            if (!targetObject.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!targetObject.material.materials) {
              console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
              return;
            }
            targetObject = targetObject.material.materials;
            break;
          case "bones":
            if (!targetObject.skeleton) {
              console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
              return;
            }
            targetObject = targetObject.skeleton.bones;
            for (let i = 0; i < targetObject.length; i++) {
              if (targetObject[i].name === objectIndex) {
                objectIndex = i;
                break;
              }
            }
            break;
          default:
            if (targetObject[objectName] === void 0) {
              console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
              return;
            }
            targetObject = targetObject[objectName];
        }
        if (objectIndex !== void 0) {
          if (targetObject[objectIndex] === void 0) {
            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
            return;
          }
          targetObject = targetObject[objectIndex];
        }
      }
      const nodeProperty = targetObject[propertyName];
      if (nodeProperty === void 0) {
        const nodeName = parsedPath.nodeName;
        console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
        return;
      }
      let versioning = this.Versioning.None;
      this.targetObject = targetObject;
      if (targetObject.needsUpdate !== void 0) {
        versioning = this.Versioning.NeedsUpdate;
      } else if (targetObject.matrixWorldNeedsUpdate !== void 0) {
        versioning = this.Versioning.MatrixWorldNeedsUpdate;
      }
      let bindingType = this.BindingType.Direct;
      if (propertyIndex !== void 0) {
        if (propertyName === "morphTargetInfluences") {
          if (!targetObject.geometry) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
            return;
          }
          if (targetObject.geometry.isBufferGeometry) {
            if (!targetObject.geometry.morphAttributes) {
              console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
              return;
            }
            if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
              propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
            }
          } else {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.", this);
            return;
          }
        }
        bindingType = this.BindingType.ArrayElement;
        this.resolvedProperty = nodeProperty;
        this.propertyIndex = propertyIndex;
      } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
        bindingType = this.BindingType.HasFromToArray;
        this.resolvedProperty = nodeProperty;
      } else if (Array.isArray(nodeProperty)) {
        bindingType = this.BindingType.EntireArray;
        this.resolvedProperty = nodeProperty;
      } else {
        this.propertyName = propertyName;
      }
      this.getValue = this.GetterByBindingType[bindingType];
      this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
    },
    unbind: function() {
      this.node = null;
      this.getValue = this._getValue_unbound;
      this.setValue = this._setValue_unbound;
    }
  });
  Object.assign(PropertyBinding.prototype, {
    _getValue_unbound: PropertyBinding.prototype.getValue,
    _setValue_unbound: PropertyBinding.prototype.setValue
  });
  function AnimationObjectGroup() {
    this.uuid = MathUtils.generateUUID();
    this._objects = Array.prototype.slice.call(arguments);
    this.nCachedObjects_ = 0;
    const indices = {};
    this._indicesByUUID = indices;
    for (let i = 0, n = arguments.length; i !== n; ++i) {
      indices[arguments[i].uuid] = i;
    }
    this._paths = [];
    this._parsedPaths = [];
    this._bindings = [];
    this._bindingsIndicesByPath = {};
    const scope = this;
    this.stats = {
      objects: {
        get total() {
          return scope._objects.length;
        },
        get inUse() {
          return this.total - scope.nCachedObjects_;
        }
      },
      get bindingsPerObject() {
        return scope._bindings.length;
      }
    };
  }
  Object.assign(AnimationObjectGroup.prototype, {
    isAnimationObjectGroup: true,
    add: function() {
      const objects = this._objects, indicesByUUID = this._indicesByUUID, paths2 = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, nBindings = bindings.length;
      let knownObject = void 0, nObjects = objects.length, nCachedObjects = this.nCachedObjects_;
      for (let i = 0, n = arguments.length; i !== n; ++i) {
        const object = arguments[i], uuid = object.uuid;
        let index = indicesByUUID[uuid];
        if (index === void 0) {
          index = nObjects++;
          indicesByUUID[uuid] = index;
          objects.push(object);
          for (let j = 0, m = nBindings; j !== m; ++j) {
            bindings[j].push(new PropertyBinding(object, paths2[j], parsedPaths[j]));
          }
        } else if (index < nCachedObjects) {
          knownObject = objects[index];
          const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex];
          indicesByUUID[lastCachedObject.uuid] = index;
          objects[index] = lastCachedObject;
          indicesByUUID[uuid] = firstActiveIndex;
          objects[firstActiveIndex] = object;
          for (let j = 0, m = nBindings; j !== m; ++j) {
            const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex];
            let binding = bindingsForPath[index];
            bindingsForPath[index] = lastCached;
            if (binding === void 0) {
              binding = new PropertyBinding(object, paths2[j], parsedPaths[j]);
            }
            bindingsForPath[firstActiveIndex] = binding;
          }
        } else if (objects[index] !== knownObject) {
          console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
        }
      }
      this.nCachedObjects_ = nCachedObjects;
    },
    remove: function() {
      const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
      let nCachedObjects = this.nCachedObjects_;
      for (let i = 0, n = arguments.length; i !== n; ++i) {
        const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
        if (index !== void 0 && index >= nCachedObjects) {
          const lastCachedIndex = nCachedObjects++, firstActiveObject = objects[lastCachedIndex];
          indicesByUUID[firstActiveObject.uuid] = index;
          objects[index] = firstActiveObject;
          indicesByUUID[uuid] = lastCachedIndex;
          objects[lastCachedIndex] = object;
          for (let j = 0, m = nBindings; j !== m; ++j) {
            const bindingsForPath = bindings[j], firstActive = bindingsForPath[lastCachedIndex], binding = bindingsForPath[index];
            bindingsForPath[index] = firstActive;
            bindingsForPath[lastCachedIndex] = binding;
          }
        }
      }
      this.nCachedObjects_ = nCachedObjects;
    },
    uncache: function() {
      const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
      let nCachedObjects = this.nCachedObjects_, nObjects = objects.length;
      for (let i = 0, n = arguments.length; i !== n; ++i) {
        const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
        if (index !== void 0) {
          delete indicesByUUID[uuid];
          if (index < nCachedObjects) {
            const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex], lastIndex = --nObjects, lastObject = objects[lastIndex];
            indicesByUUID[lastCachedObject.uuid] = index;
            objects[index] = lastCachedObject;
            indicesByUUID[lastObject.uuid] = firstActiveIndex;
            objects[firstActiveIndex] = lastObject;
            objects.pop();
            for (let j = 0, m = nBindings; j !== m; ++j) {
              const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex], last = bindingsForPath[lastIndex];
              bindingsForPath[index] = lastCached;
              bindingsForPath[firstActiveIndex] = last;
              bindingsForPath.pop();
            }
          } else {
            const lastIndex = --nObjects, lastObject = objects[lastIndex];
            if (lastIndex > 0) {
              indicesByUUID[lastObject.uuid] = index;
            }
            objects[index] = lastObject;
            objects.pop();
            for (let j = 0, m = nBindings; j !== m; ++j) {
              const bindingsForPath = bindings[j];
              bindingsForPath[index] = bindingsForPath[lastIndex];
              bindingsForPath.pop();
            }
          }
        }
      }
      this.nCachedObjects_ = nCachedObjects;
    },
    subscribe_: function(path, parsedPath) {
      const indicesByPath = this._bindingsIndicesByPath;
      let index = indicesByPath[path];
      const bindings = this._bindings;
      if (index !== void 0)
        return bindings[index];
      const paths2 = this._paths, parsedPaths = this._parsedPaths, objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, bindingsForPath = new Array(nObjects);
      index = bindings.length;
      indicesByPath[path] = index;
      paths2.push(path);
      parsedPaths.push(parsedPath);
      bindings.push(bindingsForPath);
      for (let i = nCachedObjects, n = objects.length; i !== n; ++i) {
        const object = objects[i];
        bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);
      }
      return bindingsForPath;
    },
    unsubscribe_: function(path) {
      const indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path];
      if (index !== void 0) {
        const paths2 = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, lastBindingsIndex = bindings.length - 1, lastBindings = bindings[lastBindingsIndex], lastBindingsPath = path[lastBindingsIndex];
        indicesByPath[lastBindingsPath] = index;
        bindings[index] = lastBindings;
        bindings.pop();
        parsedPaths[index] = parsedPaths[lastBindingsIndex];
        parsedPaths.pop();
        paths2[index] = paths2[lastBindingsIndex];
        paths2.pop();
      }
    }
  });
  var AnimationAction = class {
    constructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {
      this._mixer = mixer;
      this._clip = clip;
      this._localRoot = localRoot;
      this.blendMode = blendMode;
      const tracks = clip.tracks, nTracks = tracks.length, interpolants = new Array(nTracks);
      const interpolantSettings = {
        endingStart: ZeroCurvatureEnding,
        endingEnd: ZeroCurvatureEnding
      };
      for (let i = 0; i !== nTracks; ++i) {
        const interpolant = tracks[i].createInterpolant(null);
        interpolants[i] = interpolant;
        interpolant.settings = interpolantSettings;
      }
      this._interpolantSettings = interpolantSettings;
      this._interpolants = interpolants;
      this._propertyBindings = new Array(nTracks);
      this._cacheIndex = null;
      this._byClipCacheIndex = null;
      this._timeScaleInterpolant = null;
      this._weightInterpolant = null;
      this.loop = LoopRepeat;
      this._loopCount = -1;
      this._startTime = null;
      this.time = 0;
      this.timeScale = 1;
      this._effectiveTimeScale = 1;
      this.weight = 1;
      this._effectiveWeight = 1;
      this.repetitions = Infinity;
      this.paused = false;
      this.enabled = true;
      this.clampWhenFinished = false;
      this.zeroSlopeAtStart = true;
      this.zeroSlopeAtEnd = true;
    }
    play() {
      this._mixer._activateAction(this);
      return this;
    }
    stop() {
      this._mixer._deactivateAction(this);
      return this.reset();
    }
    reset() {
      this.paused = false;
      this.enabled = true;
      this.time = 0;
      this._loopCount = -1;
      this._startTime = null;
      return this.stopFading().stopWarping();
    }
    isRunning() {
      return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
    }
    isScheduled() {
      return this._mixer._isActiveAction(this);
    }
    startAt(time) {
      this._startTime = time;
      return this;
    }
    setLoop(mode, repetitions) {
      this.loop = mode;
      this.repetitions = repetitions;
      return this;
    }
    setEffectiveWeight(weight) {
      this.weight = weight;
      this._effectiveWeight = this.enabled ? weight : 0;
      return this.stopFading();
    }
    getEffectiveWeight() {
      return this._effectiveWeight;
    }
    fadeIn(duration) {
      return this._scheduleFading(duration, 0, 1);
    }
    fadeOut(duration) {
      return this._scheduleFading(duration, 1, 0);
    }
    crossFadeFrom(fadeOutAction, duration, warp) {
      fadeOutAction.fadeOut(duration);
      this.fadeIn(duration);
      if (warp) {
        const fadeInDuration = this._clip.duration, fadeOutDuration = fadeOutAction._clip.duration, startEndRatio = fadeOutDuration / fadeInDuration, endStartRatio = fadeInDuration / fadeOutDuration;
        fadeOutAction.warp(1, startEndRatio, duration);
        this.warp(endStartRatio, 1, duration);
      }
      return this;
    }
    crossFadeTo(fadeInAction, duration, warp) {
      return fadeInAction.crossFadeFrom(this, duration, warp);
    }
    stopFading() {
      const weightInterpolant = this._weightInterpolant;
      if (weightInterpolant !== null) {
        this._weightInterpolant = null;
        this._mixer._takeBackControlInterpolant(weightInterpolant);
      }
      return this;
    }
    setEffectiveTimeScale(timeScale) {
      this.timeScale = timeScale;
      this._effectiveTimeScale = this.paused ? 0 : timeScale;
      return this.stopWarping();
    }
    getEffectiveTimeScale() {
      return this._effectiveTimeScale;
    }
    setDuration(duration) {
      this.timeScale = this._clip.duration / duration;
      return this.stopWarping();
    }
    syncWith(action) {
      this.time = action.time;
      this.timeScale = action.timeScale;
      return this.stopWarping();
    }
    halt(duration) {
      return this.warp(this._effectiveTimeScale, 0, duration);
    }
    warp(startTimeScale, endTimeScale, duration) {
      const mixer = this._mixer, now2 = mixer.time, timeScale = this.timeScale;
      let interpolant = this._timeScaleInterpolant;
      if (interpolant === null) {
        interpolant = mixer._lendControlInterpolant();
        this._timeScaleInterpolant = interpolant;
      }
      const times = interpolant.parameterPositions, values = interpolant.sampleValues;
      times[0] = now2;
      times[1] = now2 + duration;
      values[0] = startTimeScale / timeScale;
      values[1] = endTimeScale / timeScale;
      return this;
    }
    stopWarping() {
      const timeScaleInterpolant = this._timeScaleInterpolant;
      if (timeScaleInterpolant !== null) {
        this._timeScaleInterpolant = null;
        this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
      }
      return this;
    }
    getMixer() {
      return this._mixer;
    }
    getClip() {
      return this._clip;
    }
    getRoot() {
      return this._localRoot || this._mixer._root;
    }
    _update(time, deltaTime, timeDirection, accuIndex) {
      if (!this.enabled) {
        this._updateWeight(time);
        return;
      }
      const startTime = this._startTime;
      if (startTime !== null) {
        const timeRunning = (time - startTime) * timeDirection;
        if (timeRunning < 0 || timeDirection === 0) {
          return;
        }
        this._startTime = null;
        deltaTime = timeDirection * timeRunning;
      }
      deltaTime *= this._updateTimeScale(time);
      const clipTime = this._updateTime(deltaTime);
      const weight = this._updateWeight(time);
      if (weight > 0) {
        const interpolants = this._interpolants;
        const propertyMixers = this._propertyBindings;
        switch (this.blendMode) {
          case AdditiveAnimationBlendMode:
            for (let j = 0, m = interpolants.length; j !== m; ++j) {
              interpolants[j].evaluate(clipTime);
              propertyMixers[j].accumulateAdditive(weight);
            }
            break;
          case NormalAnimationBlendMode:
          default:
            for (let j = 0, m = interpolants.length; j !== m; ++j) {
              interpolants[j].evaluate(clipTime);
              propertyMixers[j].accumulate(accuIndex, weight);
            }
        }
      }
    }
    _updateWeight(time) {
      let weight = 0;
      if (this.enabled) {
        weight = this.weight;
        const interpolant = this._weightInterpolant;
        if (interpolant !== null) {
          const interpolantValue = interpolant.evaluate(time)[0];
          weight *= interpolantValue;
          if (time > interpolant.parameterPositions[1]) {
            this.stopFading();
            if (interpolantValue === 0) {
              this.enabled = false;
            }
          }
        }
      }
      this._effectiveWeight = weight;
      return weight;
    }
    _updateTimeScale(time) {
      let timeScale = 0;
      if (!this.paused) {
        timeScale = this.timeScale;
        const interpolant = this._timeScaleInterpolant;
        if (interpolant !== null) {
          const interpolantValue = interpolant.evaluate(time)[0];
          timeScale *= interpolantValue;
          if (time > interpolant.parameterPositions[1]) {
            this.stopWarping();
            if (timeScale === 0) {
              this.paused = true;
            } else {
              this.timeScale = timeScale;
            }
          }
        }
      }
      this._effectiveTimeScale = timeScale;
      return timeScale;
    }
    _updateTime(deltaTime) {
      const duration = this._clip.duration;
      const loop = this.loop;
      let time = this.time + deltaTime;
      let loopCount = this._loopCount;
      const pingPong = loop === LoopPingPong;
      if (deltaTime === 0) {
        if (loopCount === -1)
          return time;
        return pingPong && (loopCount & 1) === 1 ? duration - time : time;
      }
      if (loop === LoopOnce) {
        if (loopCount === -1) {
          this._loopCount = 0;
          this._setEndings(true, true, false);
        }
        handle_stop: {
          if (time >= duration) {
            time = duration;
          } else if (time < 0) {
            time = 0;
          } else {
            this.time = time;
            break handle_stop;
          }
          if (this.clampWhenFinished)
            this.paused = true;
          else
            this.enabled = false;
          this.time = time;
          this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: deltaTime < 0 ? -1 : 1
          });
        }
      } else {
        if (loopCount === -1) {
          if (deltaTime >= 0) {
            loopCount = 0;
            this._setEndings(true, this.repetitions === 0, pingPong);
          } else {
            this._setEndings(this.repetitions === 0, true, pingPong);
          }
        }
        if (time >= duration || time < 0) {
          const loopDelta = Math.floor(time / duration);
          time -= duration * loopDelta;
          loopCount += Math.abs(loopDelta);
          const pending = this.repetitions - loopCount;
          if (pending <= 0) {
            if (this.clampWhenFinished)
              this.paused = true;
            else
              this.enabled = false;
            time = deltaTime > 0 ? duration : 0;
            this.time = time;
            this._mixer.dispatchEvent({
              type: "finished",
              action: this,
              direction: deltaTime > 0 ? 1 : -1
            });
          } else {
            if (pending === 1) {
              const atStart = deltaTime < 0;
              this._setEndings(atStart, !atStart, pingPong);
            } else {
              this._setEndings(false, false, pingPong);
            }
            this._loopCount = loopCount;
            this.time = time;
            this._mixer.dispatchEvent({
              type: "loop",
              action: this,
              loopDelta
            });
          }
        } else {
          this.time = time;
        }
        if (pingPong && (loopCount & 1) === 1) {
          return duration - time;
        }
      }
      return time;
    }
    _setEndings(atStart, atEnd, pingPong) {
      const settings4 = this._interpolantSettings;
      if (pingPong) {
        settings4.endingStart = ZeroSlopeEnding;
        settings4.endingEnd = ZeroSlopeEnding;
      } else {
        if (atStart) {
          settings4.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
        } else {
          settings4.endingStart = WrapAroundEnding;
        }
        if (atEnd) {
          settings4.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
        } else {
          settings4.endingEnd = WrapAroundEnding;
        }
      }
    }
    _scheduleFading(duration, weightNow, weightThen) {
      const mixer = this._mixer, now2 = mixer.time;
      let interpolant = this._weightInterpolant;
      if (interpolant === null) {
        interpolant = mixer._lendControlInterpolant();
        this._weightInterpolant = interpolant;
      }
      const times = interpolant.parameterPositions, values = interpolant.sampleValues;
      times[0] = now2;
      values[0] = weightNow;
      times[1] = now2 + duration;
      values[1] = weightThen;
      return this;
    }
  };
  function AnimationMixer(root) {
    this._root = root;
    this._initMemoryManager();
    this._accuIndex = 0;
    this.time = 0;
    this.timeScale = 1;
  }
  AnimationMixer.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
    constructor: AnimationMixer,
    _bindAction: function(action, prototypeAction) {
      const root = action._localRoot || this._root, tracks = action._clip.tracks, nTracks = tracks.length, bindings = action._propertyBindings, interpolants = action._interpolants, rootUuid = root.uuid, bindingsByRoot = this._bindingsByRootAndName;
      let bindingsByName = bindingsByRoot[rootUuid];
      if (bindingsByName === void 0) {
        bindingsByName = {};
        bindingsByRoot[rootUuid] = bindingsByName;
      }
      for (let i = 0; i !== nTracks; ++i) {
        const track = tracks[i], trackName = track.name;
        let binding = bindingsByName[trackName];
        if (binding !== void 0) {
          bindings[i] = binding;
        } else {
          binding = bindings[i];
          if (binding !== void 0) {
            if (binding._cacheIndex === null) {
              ++binding.referenceCount;
              this._addInactiveBinding(binding, rootUuid, trackName);
            }
            continue;
          }
          const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
          binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
          ++binding.referenceCount;
          this._addInactiveBinding(binding, rootUuid, trackName);
          bindings[i] = binding;
        }
        interpolants[i].resultBuffer = binding.buffer;
      }
    },
    _activateAction: function(action) {
      if (!this._isActiveAction(action)) {
        if (action._cacheIndex === null) {
          const rootUuid = (action._localRoot || this._root).uuid, clipUuid = action._clip.uuid, actionsForClip = this._actionsByClip[clipUuid];
          this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);
          this._addInactiveAction(action, clipUuid, rootUuid);
        }
        const bindings = action._propertyBindings;
        for (let i = 0, n = bindings.length; i !== n; ++i) {
          const binding = bindings[i];
          if (binding.useCount++ === 0) {
            this._lendBinding(binding);
            binding.saveOriginalState();
          }
        }
        this._lendAction(action);
      }
    },
    _deactivateAction: function(action) {
      if (this._isActiveAction(action)) {
        const bindings = action._propertyBindings;
        for (let i = 0, n = bindings.length; i !== n; ++i) {
          const binding = bindings[i];
          if (--binding.useCount === 0) {
            binding.restoreOriginalState();
            this._takeBackBinding(binding);
          }
        }
        this._takeBackAction(action);
      }
    },
    _initMemoryManager: function() {
      this._actions = [];
      this._nActiveActions = 0;
      this._actionsByClip = {};
      this._bindings = [];
      this._nActiveBindings = 0;
      this._bindingsByRootAndName = {};
      this._controlInterpolants = [];
      this._nActiveControlInterpolants = 0;
      const scope = this;
      this.stats = {
        actions: {
          get total() {
            return scope._actions.length;
          },
          get inUse() {
            return scope._nActiveActions;
          }
        },
        bindings: {
          get total() {
            return scope._bindings.length;
          },
          get inUse() {
            return scope._nActiveBindings;
          }
        },
        controlInterpolants: {
          get total() {
            return scope._controlInterpolants.length;
          },
          get inUse() {
            return scope._nActiveControlInterpolants;
          }
        }
      };
    },
    _isActiveAction: function(action) {
      const index = action._cacheIndex;
      return index !== null && index < this._nActiveActions;
    },
    _addInactiveAction: function(action, clipUuid, rootUuid) {
      const actions = this._actions, actionsByClip = this._actionsByClip;
      let actionsForClip = actionsByClip[clipUuid];
      if (actionsForClip === void 0) {
        actionsForClip = {
          knownActions: [action],
          actionByRoot: {}
        };
        action._byClipCacheIndex = 0;
        actionsByClip[clipUuid] = actionsForClip;
      } else {
        const knownActions = actionsForClip.knownActions;
        action._byClipCacheIndex = knownActions.length;
        knownActions.push(action);
      }
      action._cacheIndex = actions.length;
      actions.push(action);
      actionsForClip.actionByRoot[rootUuid] = action;
    },
    _removeInactiveAction: function(action) {
      const actions = this._actions, lastInactiveAction = actions[actions.length - 1], cacheIndex = action._cacheIndex;
      lastInactiveAction._cacheIndex = cacheIndex;
      actions[cacheIndex] = lastInactiveAction;
      actions.pop();
      action._cacheIndex = null;
      const clipUuid = action._clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid], knownActionsForClip = actionsForClip.knownActions, lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1], byClipCacheIndex = action._byClipCacheIndex;
      lastKnownAction._byClipCacheIndex = byClipCacheIndex;
      knownActionsForClip[byClipCacheIndex] = lastKnownAction;
      knownActionsForClip.pop();
      action._byClipCacheIndex = null;
      const actionByRoot = actionsForClip.actionByRoot, rootUuid = (action._localRoot || this._root).uuid;
      delete actionByRoot[rootUuid];
      if (knownActionsForClip.length === 0) {
        delete actionsByClip[clipUuid];
      }
      this._removeInactiveBindingsForAction(action);
    },
    _removeInactiveBindingsForAction: function(action) {
      const bindings = action._propertyBindings;
      for (let i = 0, n = bindings.length; i !== n; ++i) {
        const binding = bindings[i];
        if (--binding.referenceCount === 0) {
          this._removeInactiveBinding(binding);
        }
      }
    },
    _lendAction: function(action) {
      const actions = this._actions, prevIndex = action._cacheIndex, lastActiveIndex = this._nActiveActions++, firstInactiveAction = actions[lastActiveIndex];
      action._cacheIndex = lastActiveIndex;
      actions[lastActiveIndex] = action;
      firstInactiveAction._cacheIndex = prevIndex;
      actions[prevIndex] = firstInactiveAction;
    },
    _takeBackAction: function(action) {
      const actions = this._actions, prevIndex = action._cacheIndex, firstInactiveIndex = --this._nActiveActions, lastActiveAction = actions[firstInactiveIndex];
      action._cacheIndex = firstInactiveIndex;
      actions[firstInactiveIndex] = action;
      lastActiveAction._cacheIndex = prevIndex;
      actions[prevIndex] = lastActiveAction;
    },
    _addInactiveBinding: function(binding, rootUuid, trackName) {
      const bindingsByRoot = this._bindingsByRootAndName, bindings = this._bindings;
      let bindingByName = bindingsByRoot[rootUuid];
      if (bindingByName === void 0) {
        bindingByName = {};
        bindingsByRoot[rootUuid] = bindingByName;
      }
      bindingByName[trackName] = binding;
      binding._cacheIndex = bindings.length;
      bindings.push(binding);
    },
    _removeInactiveBinding: function(binding) {
      const bindings = this._bindings, propBinding = binding.binding, rootUuid = propBinding.rootNode.uuid, trackName = propBinding.path, bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], lastInactiveBinding = bindings[bindings.length - 1], cacheIndex = binding._cacheIndex;
      lastInactiveBinding._cacheIndex = cacheIndex;
      bindings[cacheIndex] = lastInactiveBinding;
      bindings.pop();
      delete bindingByName[trackName];
      if (Object.keys(bindingByName).length === 0) {
        delete bindingsByRoot[rootUuid];
      }
    },
    _lendBinding: function(binding) {
      const bindings = this._bindings, prevIndex = binding._cacheIndex, lastActiveIndex = this._nActiveBindings++, firstInactiveBinding = bindings[lastActiveIndex];
      binding._cacheIndex = lastActiveIndex;
      bindings[lastActiveIndex] = binding;
      firstInactiveBinding._cacheIndex = prevIndex;
      bindings[prevIndex] = firstInactiveBinding;
    },
    _takeBackBinding: function(binding) {
      const bindings = this._bindings, prevIndex = binding._cacheIndex, firstInactiveIndex = --this._nActiveBindings, lastActiveBinding = bindings[firstInactiveIndex];
      binding._cacheIndex = firstInactiveIndex;
      bindings[firstInactiveIndex] = binding;
      lastActiveBinding._cacheIndex = prevIndex;
      bindings[prevIndex] = lastActiveBinding;
    },
    _lendControlInterpolant: function() {
      const interpolants = this._controlInterpolants, lastActiveIndex = this._nActiveControlInterpolants++;
      let interpolant = interpolants[lastActiveIndex];
      if (interpolant === void 0) {
        interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
        interpolant.__cacheIndex = lastActiveIndex;
        interpolants[lastActiveIndex] = interpolant;
      }
      return interpolant;
    },
    _takeBackControlInterpolant: function(interpolant) {
      const interpolants = this._controlInterpolants, prevIndex = interpolant.__cacheIndex, firstInactiveIndex = --this._nActiveControlInterpolants, lastActiveInterpolant = interpolants[firstInactiveIndex];
      interpolant.__cacheIndex = firstInactiveIndex;
      interpolants[firstInactiveIndex] = interpolant;
      lastActiveInterpolant.__cacheIndex = prevIndex;
      interpolants[prevIndex] = lastActiveInterpolant;
    },
    _controlInterpolantsResultBuffer: new Float32Array(1),
    clipAction: function(clip, optionalRoot, blendMode) {
      const root = optionalRoot || this._root, rootUuid = root.uuid;
      let clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip;
      const clipUuid = clipObject !== null ? clipObject.uuid : clip;
      const actionsForClip = this._actionsByClip[clipUuid];
      let prototypeAction = null;
      if (blendMode === void 0) {
        if (clipObject !== null) {
          blendMode = clipObject.blendMode;
        } else {
          blendMode = NormalAnimationBlendMode;
        }
      }
      if (actionsForClip !== void 0) {
        const existingAction = actionsForClip.actionByRoot[rootUuid];
        if (existingAction !== void 0 && existingAction.blendMode === blendMode) {
          return existingAction;
        }
        prototypeAction = actionsForClip.knownActions[0];
        if (clipObject === null)
          clipObject = prototypeAction._clip;
      }
      if (clipObject === null)
        return null;
      const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);
      this._bindAction(newAction, prototypeAction);
      this._addInactiveAction(newAction, clipUuid, rootUuid);
      return newAction;
    },
    existingAction: function(clip, optionalRoot) {
      const root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip, clipUuid = clipObject ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid];
      if (actionsForClip !== void 0) {
        return actionsForClip.actionByRoot[rootUuid] || null;
      }
      return null;
    },
    stopAllAction: function() {
      const actions = this._actions, nActions = this._nActiveActions;
      for (let i = nActions - 1; i >= 0; --i) {
        actions[i].stop();
      }
      return this;
    },
    update: function(deltaTime) {
      deltaTime *= this.timeScale;
      const actions = this._actions, nActions = this._nActiveActions, time = this.time += deltaTime, timeDirection = Math.sign(deltaTime), accuIndex = this._accuIndex ^= 1;
      for (let i = 0; i !== nActions; ++i) {
        const action = actions[i];
        action._update(time, deltaTime, timeDirection, accuIndex);
      }
      const bindings = this._bindings, nBindings = this._nActiveBindings;
      for (let i = 0; i !== nBindings; ++i) {
        bindings[i].apply(accuIndex);
      }
      return this;
    },
    setTime: function(timeInSeconds) {
      this.time = 0;
      for (let i = 0; i < this._actions.length; i++) {
        this._actions[i].time = 0;
      }
      return this.update(timeInSeconds);
    },
    getRoot: function() {
      return this._root;
    },
    uncacheClip: function(clip) {
      const actions = this._actions, clipUuid = clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];
      if (actionsForClip !== void 0) {
        const actionsToRemove = actionsForClip.knownActions;
        for (let i = 0, n = actionsToRemove.length; i !== n; ++i) {
          const action = actionsToRemove[i];
          this._deactivateAction(action);
          const cacheIndex = action._cacheIndex, lastInactiveAction = actions[actions.length - 1];
          action._cacheIndex = null;
          action._byClipCacheIndex = null;
          lastInactiveAction._cacheIndex = cacheIndex;
          actions[cacheIndex] = lastInactiveAction;
          actions.pop();
          this._removeInactiveBindingsForAction(action);
        }
        delete actionsByClip[clipUuid];
      }
    },
    uncacheRoot: function(root) {
      const rootUuid = root.uuid, actionsByClip = this._actionsByClip;
      for (const clipUuid in actionsByClip) {
        const actionByRoot = actionsByClip[clipUuid].actionByRoot, action = actionByRoot[rootUuid];
        if (action !== void 0) {
          this._deactivateAction(action);
          this._removeInactiveAction(action);
        }
      }
      const bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid];
      if (bindingByName !== void 0) {
        for (const trackName in bindingByName) {
          const binding = bindingByName[trackName];
          binding.restoreOriginalState();
          this._removeInactiveBinding(binding);
        }
      }
    },
    uncacheAction: function(clip, optionalRoot) {
      const action = this.existingAction(clip, optionalRoot);
      if (action !== null) {
        this._deactivateAction(action);
        this._removeInactiveAction(action);
      }
    }
  });
  var Uniform = class {
    constructor(value) {
      if (typeof value === "string") {
        console.warn("THREE.Uniform: Type parameter is no longer needed.");
        value = arguments[1];
      }
      this.value = value;
    }
    clone() {
      return new Uniform(this.value.clone === void 0 ? this.value : this.value.clone());
    }
  };
  function InstancedInterleavedBuffer(array, stride, meshPerAttribute) {
    InterleavedBuffer.call(this, array, stride);
    this.meshPerAttribute = meshPerAttribute || 1;
  }
  InstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {
    constructor: InstancedInterleavedBuffer,
    isInstancedInterleavedBuffer: true,
    copy: function(source) {
      InterleavedBuffer.prototype.copy.call(this, source);
      this.meshPerAttribute = source.meshPerAttribute;
      return this;
    },
    clone: function(data) {
      const ib = InterleavedBuffer.prototype.clone.call(this, data);
      ib.meshPerAttribute = this.meshPerAttribute;
      return ib;
    },
    toJSON: function(data) {
      const json = InterleavedBuffer.prototype.toJSON.call(this, data);
      json.isInstancedInterleavedBuffer = true;
      json.meshPerAttribute = this.meshPerAttribute;
      return json;
    }
  });
  function GLBufferAttribute(buffer, type, itemSize, elementSize, count) {
    this.buffer = buffer;
    this.type = type;
    this.itemSize = itemSize;
    this.elementSize = elementSize;
    this.count = count;
    this.version = 0;
  }
  Object.defineProperty(GLBufferAttribute.prototype, "needsUpdate", {
    set: function(value) {
      if (value === true)
        this.version++;
    }
  });
  Object.assign(GLBufferAttribute.prototype, {
    isGLBufferAttribute: true,
    setBuffer: function(buffer) {
      this.buffer = buffer;
      return this;
    },
    setType: function(type, elementSize) {
      this.type = type;
      this.elementSize = elementSize;
      return this;
    },
    setItemSize: function(itemSize) {
      this.itemSize = itemSize;
      return this;
    },
    setCount: function(count) {
      this.count = count;
      return this;
    }
  });
  function Raycaster(origin, direction, near, far) {
    this.ray = new Ray(origin, direction);
    this.near = near || 0;
    this.far = far || Infinity;
    this.camera = null;
    this.layers = new Layers();
    this.params = {
      Mesh: {},
      Line: {threshold: 1},
      LOD: {},
      Points: {threshold: 1},
      Sprite: {}
    };
    Object.defineProperties(this.params, {
      PointCloud: {
        get: function() {
          console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");
          return this.Points;
        }
      }
    });
  }
  function ascSort(a, b) {
    return a.distance - b.distance;
  }
  function intersectObject(object, raycaster, intersects2, recursive) {
    if (object.layers.test(raycaster.layers)) {
      object.raycast(raycaster, intersects2);
    }
    if (recursive === true) {
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        intersectObject(children[i], raycaster, intersects2, true);
      }
    }
  }
  Object.assign(Raycaster.prototype, {
    set: function(origin, direction) {
      this.ray.set(origin, direction);
    },
    setFromCamera: function(coords, camera2) {
      if (camera2 && camera2.isPerspectiveCamera) {
        this.ray.origin.setFromMatrixPosition(camera2.matrixWorld);
        this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera2).sub(this.ray.origin).normalize();
        this.camera = camera2;
      } else if (camera2 && camera2.isOrthographicCamera) {
        this.ray.origin.set(coords.x, coords.y, (camera2.near + camera2.far) / (camera2.near - camera2.far)).unproject(camera2);
        this.ray.direction.set(0, 0, -1).transformDirection(camera2.matrixWorld);
        this.camera = camera2;
      } else {
        console.error("THREE.Raycaster: Unsupported camera type.");
      }
    },
    intersectObject: function(object, recursive, optionalTarget) {
      const intersects2 = optionalTarget || [];
      intersectObject(object, this, intersects2, recursive);
      intersects2.sort(ascSort);
      return intersects2;
    },
    intersectObjects: function(objects, recursive, optionalTarget) {
      const intersects2 = optionalTarget || [];
      if (Array.isArray(objects) === false) {
        console.warn("THREE.Raycaster.intersectObjects: objects is not an Array.");
        return intersects2;
      }
      for (let i = 0, l = objects.length; i < l; i++) {
        intersectObject(objects[i], this, intersects2, recursive);
      }
      intersects2.sort(ascSort);
      return intersects2;
    }
  });
  var Spherical = class {
    constructor(radius = 1, phi = 0, theta = 0) {
      this.radius = radius;
      this.phi = phi;
      this.theta = theta;
      return this;
    }
    set(radius, phi, theta) {
      this.radius = radius;
      this.phi = phi;
      this.theta = theta;
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(other) {
      this.radius = other.radius;
      this.phi = other.phi;
      this.theta = other.theta;
      return this;
    }
    makeSafe() {
      const EPS = 1e-6;
      this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
      return this;
    }
    setFromVector3(v) {
      return this.setFromCartesianCoords(v.x, v.y, v.z);
    }
    setFromCartesianCoords(x, y, z) {
      this.radius = Math.sqrt(x * x + y * y + z * z);
      if (this.radius === 0) {
        this.theta = 0;
        this.phi = 0;
      } else {
        this.theta = Math.atan2(x, z);
        this.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1));
      }
      return this;
    }
  };
  var _vector$7 = /* @__PURE__ */ new Vector2();
  var Box2 = class {
    constructor(min, max) {
      Object.defineProperty(this, "isBox2", {value: true});
      this.min = min !== void 0 ? min : new Vector2(Infinity, Infinity);
      this.max = max !== void 0 ? max : new Vector2(-Infinity, -Infinity);
    }
    set(min, max) {
      this.min.copy(min);
      this.max.copy(max);
      return this;
    }
    setFromPoints(points) {
      this.makeEmpty();
      for (let i = 0, il = points.length; i < il; i++) {
        this.expandByPoint(points[i]);
      }
      return this;
    }
    setFromCenterAndSize(center, size) {
      const halfSize = _vector$7.copy(size).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
    makeEmpty() {
      this.min.x = this.min.y = Infinity;
      this.max.x = this.max.y = -Infinity;
      return this;
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y;
    }
    getCenter(target) {
      if (target === void 0) {
        console.warn("THREE.Box2: .getCenter() target is now required");
        target = new Vector2();
      }
      return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
      if (target === void 0) {
        console.warn("THREE.Box2: .getSize() target is now required");
        target = new Vector2();
      }
      return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
    expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
    expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
    containsPoint(point) {
      return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
    }
    containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
    }
    getParameter(point, target) {
      if (target === void 0) {
        console.warn("THREE.Box2: .getParameter() target is now required");
        target = new Vector2();
      }
      return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
    }
    intersectsBox(box) {
      return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
    }
    clampPoint(point, target) {
      if (target === void 0) {
        console.warn("THREE.Box2: .clampPoint() target is now required");
        target = new Vector2();
      }
      return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
      const clampedPoint = _vector$7.copy(point).clamp(this.min, this.max);
      return clampedPoint.sub(point).length();
    }
    intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max);
      return this;
    }
    union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
    translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
    equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  };
  var _startP = /* @__PURE__ */ new Vector3();
  var _startEnd = /* @__PURE__ */ new Vector3();
  var Line3 = class {
    constructor(start, end) {
      this.start = start !== void 0 ? start : new Vector3();
      this.end = end !== void 0 ? end : new Vector3();
    }
    set(start, end) {
      this.start.copy(start);
      this.end.copy(end);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(line) {
      this.start.copy(line.start);
      this.end.copy(line.end);
      return this;
    }
    getCenter(target) {
      if (target === void 0) {
        console.warn("THREE.Line3: .getCenter() target is now required");
        target = new Vector3();
      }
      return target.addVectors(this.start, this.end).multiplyScalar(0.5);
    }
    delta(target) {
      if (target === void 0) {
        console.warn("THREE.Line3: .delta() target is now required");
        target = new Vector3();
      }
      return target.subVectors(this.end, this.start);
    }
    distanceSq() {
      return this.start.distanceToSquared(this.end);
    }
    distance() {
      return this.start.distanceTo(this.end);
    }
    at(t, target) {
      if (target === void 0) {
        console.warn("THREE.Line3: .at() target is now required");
        target = new Vector3();
      }
      return this.delta(target).multiplyScalar(t).add(this.start);
    }
    closestPointToPointParameter(point, clampToLine) {
      _startP.subVectors(point, this.start);
      _startEnd.subVectors(this.end, this.start);
      const startEnd2 = _startEnd.dot(_startEnd);
      const startEnd_startP = _startEnd.dot(_startP);
      let t = startEnd_startP / startEnd2;
      if (clampToLine) {
        t = MathUtils.clamp(t, 0, 1);
      }
      return t;
    }
    closestPointToPoint(point, clampToLine, target) {
      const t = this.closestPointToPointParameter(point, clampToLine);
      if (target === void 0) {
        console.warn("THREE.Line3: .closestPointToPoint() target is now required");
        target = new Vector3();
      }
      return this.delta(target).multiplyScalar(t).add(this.start);
    }
    applyMatrix4(matrix) {
      this.start.applyMatrix4(matrix);
      this.end.applyMatrix4(matrix);
      return this;
    }
    equals(line) {
      return line.start.equals(this.start) && line.end.equals(this.end);
    }
  };
  function ImmediateRenderObject(material) {
    Object3D.call(this);
    this.material = material;
    this.render = function() {
    };
    this.hasPositions = false;
    this.hasNormals = false;
    this.hasColors = false;
    this.hasUvs = false;
    this.positionArray = null;
    this.normalArray = null;
    this.colorArray = null;
    this.uvArray = null;
    this.count = 0;
  }
  ImmediateRenderObject.prototype = Object.create(Object3D.prototype);
  ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;
  ImmediateRenderObject.prototype.isImmediateRenderObject = true;
  var _vector$9 = /* @__PURE__ */ new Vector3();
  var _boneMatrix = /* @__PURE__ */ new Matrix4();
  var _matrixWorldInv = /* @__PURE__ */ new Matrix4();
  var SkeletonHelper = class extends LineSegments {
    constructor(object) {
      const bones = getBoneList(object);
      const geometry = new BufferGeometry();
      const vertices = [];
      const colors = [];
      const color1 = new Color(0, 0, 1);
      const color2 = new Color(0, 1, 0);
      for (let i = 0; i < bones.length; i++) {
        const bone = bones[i];
        if (bone.parent && bone.parent.isBone) {
          vertices.push(0, 0, 0);
          vertices.push(0, 0, 0);
          colors.push(color1.r, color1.g, color1.b);
          colors.push(color2.r, color2.g, color2.b);
        }
      }
      geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
      const material = new LineBasicMaterial({vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true});
      super(geometry, material);
      this.type = "SkeletonHelper";
      this.isSkeletonHelper = true;
      this.root = object;
      this.bones = bones;
      this.matrix = object.matrixWorld;
      this.matrixAutoUpdate = false;
    }
    updateMatrixWorld(force) {
      const bones = this.bones;
      const geometry = this.geometry;
      const position = geometry.getAttribute("position");
      _matrixWorldInv.copy(this.root.matrixWorld).invert();
      for (let i = 0, j = 0; i < bones.length; i++) {
        const bone = bones[i];
        if (bone.parent && bone.parent.isBone) {
          _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);
          _vector$9.setFromMatrixPosition(_boneMatrix);
          position.setXYZ(j, _vector$9.x, _vector$9.y, _vector$9.z);
          _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);
          _vector$9.setFromMatrixPosition(_boneMatrix);
          position.setXYZ(j + 1, _vector$9.x, _vector$9.y, _vector$9.z);
          j += 2;
        }
      }
      geometry.getAttribute("position").needsUpdate = true;
      super.updateMatrixWorld(force);
    }
  };
  function getBoneList(object) {
    const boneList = [];
    if (object && object.isBone) {
      boneList.push(object);
    }
    for (let i = 0; i < object.children.length; i++) {
      boneList.push.apply(boneList, getBoneList(object.children[i]));
    }
    return boneList;
  }
  var GridHelper = class extends LineSegments {
    constructor(size = 10, divisions = 10, color1 = 4473924, color2 = 8947848) {
      color1 = new Color(color1);
      color2 = new Color(color2);
      const center = divisions / 2;
      const step = size / divisions;
      const halfSize = size / 2;
      const vertices = [], colors = [];
      for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {
        vertices.push(-halfSize, 0, k, halfSize, 0, k);
        vertices.push(k, 0, -halfSize, k, 0, halfSize);
        const color = i === center ? color1 : color2;
        color.toArray(colors, j);
        j += 3;
        color.toArray(colors, j);
        j += 3;
        color.toArray(colors, j);
        j += 3;
        color.toArray(colors, j);
        j += 3;
      }
      const geometry = new BufferGeometry();
      geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
      const material = new LineBasicMaterial({vertexColors: true, toneMapped: false});
      super(geometry, material);
      this.type = "GridHelper";
    }
  };
  var _floatView = new Float32Array(1);
  var _int32View = new Int32Array(_floatView.buffer);
  var LOD_MIN = 4;
  var LOD_MAX = 8;
  var SIZE_MAX = Math.pow(2, LOD_MAX);
  var EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
  var TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
  var ENCODINGS = {
    [LinearEncoding]: 0,
    [sRGBEncoding]: 1,
    [RGBEEncoding]: 2,
    [RGBM7Encoding]: 3,
    [RGBM16Encoding]: 4,
    [RGBDEncoding]: 5,
    [GammaEncoding]: 6
  };
  var PHI = (1 + Math.sqrt(5)) / 2;
  var INV_PHI = 1 / PHI;
  var _axisDirections = [
    /* @__PURE__ */ new Vector3(1, 1, 1),
    /* @__PURE__ */ new Vector3(-1, 1, 1),
    /* @__PURE__ */ new Vector3(1, 1, -1),
    /* @__PURE__ */ new Vector3(-1, 1, -1),
    /* @__PURE__ */ new Vector3(0, PHI, INV_PHI),
    /* @__PURE__ */ new Vector3(0, PHI, -INV_PHI),
    /* @__PURE__ */ new Vector3(INV_PHI, 0, PHI),
    /* @__PURE__ */ new Vector3(-INV_PHI, 0, PHI),
    /* @__PURE__ */ new Vector3(PHI, INV_PHI, 0),
    /* @__PURE__ */ new Vector3(-PHI, INV_PHI, 0)
  ];
  Curve.create = function(construct, getPoint) {
    console.log("THREE.Curve.create() has been deprecated");
    construct.prototype = Object.create(Curve.prototype);
    construct.prototype.constructor = construct;
    construct.prototype.getPoint = getPoint;
    return construct;
  };
  Object.assign(CurvePath.prototype, {
    createPointsGeometry: function(divisions) {
      console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
      const pts = this.getPoints(divisions);
      return this.createGeometry(pts);
    },
    createSpacedPointsGeometry: function(divisions) {
      console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
      const pts = this.getSpacedPoints(divisions);
      return this.createGeometry(pts);
    },
    createGeometry: function(points) {
      console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
      const geometry = new Geometry();
      for (let i = 0, l = points.length; i < l; i++) {
        const point = points[i];
        geometry.vertices.push(new Vector3(point.x, point.y, point.z || 0));
      }
      return geometry;
    }
  });
  Object.assign(Path.prototype, {
    fromPoints: function(points) {
      console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");
      return this.setFromPoints(points);
    }
  });
  function ClosedSplineCurve3(points) {
    console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
    CatmullRomCurve3.call(this, points);
    this.type = "catmullrom";
    this.closed = true;
  }
  ClosedSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);
  function SplineCurve3(points) {
    console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
    CatmullRomCurve3.call(this, points);
    this.type = "catmullrom";
  }
  SplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);
  function Spline(points) {
    console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");
    CatmullRomCurve3.call(this, points);
    this.type = "catmullrom";
  }
  Spline.prototype = Object.create(CatmullRomCurve3.prototype);
  Object.assign(Spline.prototype, {
    initFromArray: function() {
      console.error("THREE.Spline: .initFromArray() has been removed.");
    },
    getControlPointsArray: function() {
      console.error("THREE.Spline: .getControlPointsArray() has been removed.");
    },
    reparametrizeByArcLength: function() {
      console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
    }
  });
  GridHelper.prototype.setColors = function() {
    console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
  };
  SkeletonHelper.prototype.update = function() {
    console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
  };
  Object.assign(Loader.prototype, {
    extractUrlBase: function(url) {
      console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
      return LoaderUtils.extractUrlBase(url);
    }
  });
  Loader.Handlers = {
    add: function() {
      console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.");
    },
    get: function() {
      console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.");
    }
  };
  Object.assign(Box2.prototype, {
    center: function(optionalTarget) {
      console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
      return this.getCenter(optionalTarget);
    },
    empty: function() {
      console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");
      return this.isEmpty();
    },
    isIntersectionBox: function(box) {
      console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
      return this.intersectsBox(box);
    },
    size: function(optionalTarget) {
      console.warn("THREE.Box2: .size() has been renamed to .getSize().");
      return this.getSize(optionalTarget);
    }
  });
  Object.assign(Box3.prototype, {
    center: function(optionalTarget) {
      console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
      return this.getCenter(optionalTarget);
    },
    empty: function() {
      console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");
      return this.isEmpty();
    },
    isIntersectionBox: function(box) {
      console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
      return this.intersectsBox(box);
    },
    isIntersectionSphere: function(sphere) {
      console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
      return this.intersectsSphere(sphere);
    },
    size: function(optionalTarget) {
      console.warn("THREE.Box3: .size() has been renamed to .getSize().");
      return this.getSize(optionalTarget);
    }
  });
  Object.assign(Sphere.prototype, {
    empty: function() {
      console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty().");
      return this.isEmpty();
    }
  });
  Frustum.prototype.setFromMatrix = function(m) {
    console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().");
    return this.setFromProjectionMatrix(m);
  };
  Line3.prototype.center = function(optionalTarget) {
    console.warn("THREE.Line3: .center() has been renamed to .getCenter().");
    return this.getCenter(optionalTarget);
  };
  Object.assign(MathUtils, {
    random16: function() {
      console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");
      return Math.random();
    },
    nearestPowerOfTwo: function(value) {
      console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");
      return MathUtils.floorPowerOfTwo(value);
    },
    nextPowerOfTwo: function(value) {
      console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");
      return MathUtils.ceilPowerOfTwo(value);
    }
  });
  Object.assign(Matrix3.prototype, {
    flattenToArrayOffset: function(array, offset) {
      console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
      return this.toArray(array, offset);
    },
    multiplyVector3: function(vector) {
      console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
      return vector.applyMatrix3(this);
    },
    multiplyVector3Array: function() {
      console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
    },
    applyToBufferAttribute: function(attribute) {
      console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.");
      return attribute.applyMatrix3(this);
    },
    applyToVector3Array: function() {
      console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
    },
    getInverse: function(matrix) {
      console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");
      return this.copy(matrix).invert();
    }
  });
  Object.assign(Matrix4.prototype, {
    extractPosition: function(m) {
      console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
      return this.copyPosition(m);
    },
    flattenToArrayOffset: function(array, offset) {
      console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
      return this.toArray(array, offset);
    },
    getPosition: function() {
      console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
      return new Vector3().setFromMatrixColumn(this, 3);
    },
    setRotationFromQuaternion: function(q) {
      console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
      return this.makeRotationFromQuaternion(q);
    },
    multiplyToArray: function() {
      console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
    },
    multiplyVector3: function(vector) {
      console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");
      return vector.applyMatrix4(this);
    },
    multiplyVector4: function(vector) {
      console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
      return vector.applyMatrix4(this);
    },
    multiplyVector3Array: function() {
      console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
    },
    rotateAxis: function(v) {
      console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
      v.transformDirection(this);
    },
    crossVector: function(vector) {
      console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
      return vector.applyMatrix4(this);
    },
    translate: function() {
      console.error("THREE.Matrix4: .translate() has been removed.");
    },
    rotateX: function() {
      console.error("THREE.Matrix4: .rotateX() has been removed.");
    },
    rotateY: function() {
      console.error("THREE.Matrix4: .rotateY() has been removed.");
    },
    rotateZ: function() {
      console.error("THREE.Matrix4: .rotateZ() has been removed.");
    },
    rotateByAxis: function() {
      console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
    },
    applyToBufferAttribute: function(attribute) {
      console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.");
      return attribute.applyMatrix4(this);
    },
    applyToVector3Array: function() {
      console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
    },
    makeFrustum: function(left, right, bottom, top, near, far) {
      console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
      return this.makePerspective(left, right, top, bottom, near, far);
    },
    getInverse: function(matrix) {
      console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");
      return this.copy(matrix).invert();
    }
  });
  Plane.prototype.isIntersectionLine = function(line) {
    console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");
    return this.intersectsLine(line);
  };
  Object.assign(Quaternion.prototype, {
    multiplyVector3: function(vector) {
      console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
      return vector.applyQuaternion(this);
    },
    inverse: function() {
      console.warn("THREE.Quaternion: .inverse() has been renamed to invert().");
      return this.invert();
    }
  });
  Object.assign(Ray.prototype, {
    isIntersectionBox: function(box) {
      console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
      return this.intersectsBox(box);
    },
    isIntersectionPlane: function(plane) {
      console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");
      return this.intersectsPlane(plane);
    },
    isIntersectionSphere: function(sphere) {
      console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
      return this.intersectsSphere(sphere);
    }
  });
  Object.assign(Triangle.prototype, {
    area: function() {
      console.warn("THREE.Triangle: .area() has been renamed to .getArea().");
      return this.getArea();
    },
    barycoordFromPoint: function(point, target) {
      console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
      return this.getBarycoord(point, target);
    },
    midpoint: function(target) {
      console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");
      return this.getMidpoint(target);
    },
    normal: function(target) {
      console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
      return this.getNormal(target);
    },
    plane: function(target) {
      console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");
      return this.getPlane(target);
    }
  });
  Object.assign(Triangle, {
    barycoordFromPoint: function(point, a, b, c, target) {
      console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
      return Triangle.getBarycoord(point, a, b, c, target);
    },
    normal: function(a, b, c, target) {
      console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
      return Triangle.getNormal(a, b, c, target);
    }
  });
  Object.assign(Shape.prototype, {
    extractAllPoints: function(divisions) {
      console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");
      return this.extractPoints(divisions);
    },
    extrude: function(options) {
      console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
      return new ExtrudeGeometry(this, options);
    },
    makeGeometry: function(options) {
      console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");
      return new ShapeGeometry(this, options);
    }
  });
  Object.assign(Vector2.prototype, {
    fromAttribute: function(attribute, index, offset) {
      console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");
      return this.fromBufferAttribute(attribute, index, offset);
    },
    distanceToManhattan: function(v) {
      console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
      return this.manhattanDistanceTo(v);
    },
    lengthManhattan: function() {
      console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");
      return this.manhattanLength();
    }
  });
  Object.assign(Vector3.prototype, {
    setEulerFromRotationMatrix: function() {
      console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
    },
    setEulerFromQuaternion: function() {
      console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
    },
    getPositionFromMatrix: function(m) {
      console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
      return this.setFromMatrixPosition(m);
    },
    getScaleFromMatrix: function(m) {
      console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
      return this.setFromMatrixScale(m);
    },
    getColumnFromMatrix: function(index, matrix) {
      console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
      return this.setFromMatrixColumn(matrix, index);
    },
    applyProjection: function(m) {
      console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");
      return this.applyMatrix4(m);
    },
    fromAttribute: function(attribute, index, offset) {
      console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");
      return this.fromBufferAttribute(attribute, index, offset);
    },
    distanceToManhattan: function(v) {
      console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
      return this.manhattanDistanceTo(v);
    },
    lengthManhattan: function() {
      console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
      return this.manhattanLength();
    }
  });
  Object.assign(Vector4.prototype, {
    fromAttribute: function(attribute, index, offset) {
      console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");
      return this.fromBufferAttribute(attribute, index, offset);
    },
    lengthManhattan: function() {
      console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");
      return this.manhattanLength();
    }
  });
  Object.assign(Geometry.prototype, {
    computeTangents: function() {
      console.error("THREE.Geometry: .computeTangents() has been removed.");
    },
    computeLineDistances: function() {
      console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.");
    },
    applyMatrix: function(matrix) {
      console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().");
      return this.applyMatrix4(matrix);
    }
  });
  Object.assign(Object3D.prototype, {
    getChildByName: function(name) {
      console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
      return this.getObjectByName(name);
    },
    renderDepth: function() {
      console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
    },
    translate: function(distance, axis) {
      console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
      return this.translateOnAxis(axis, distance);
    },
    getWorldRotation: function() {
      console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
    },
    applyMatrix: function(matrix) {
      console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().");
      return this.applyMatrix4(matrix);
    }
  });
  Object.defineProperties(Object3D.prototype, {
    eulerOrder: {
      get: function() {
        console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
        return this.rotation.order;
      },
      set: function(value) {
        console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
        this.rotation.order = value;
      }
    },
    useQuaternion: {
      get: function() {
        console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
      },
      set: function() {
        console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
      }
    }
  });
  Object.assign(Mesh.prototype, {
    setDrawMode: function() {
      console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
    }
  });
  Object.defineProperties(Mesh.prototype, {
    drawMode: {
      get: function() {
        console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.");
        return TrianglesDrawMode;
      },
      set: function() {
        console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
      }
    }
  });
  Object.defineProperties(LOD.prototype, {
    objects: {
      get: function() {
        console.warn("THREE.LOD: .objects has been renamed to .levels.");
        return this.levels;
      }
    }
  });
  Object.defineProperty(Skeleton.prototype, "useVertexTexture", {
    get: function() {
      console.warn("THREE.Skeleton: useVertexTexture has been removed.");
    },
    set: function() {
      console.warn("THREE.Skeleton: useVertexTexture has been removed.");
    }
  });
  SkinnedMesh.prototype.initBones = function() {
    console.error("THREE.SkinnedMesh: initBones() has been removed.");
  };
  Object.defineProperty(Curve.prototype, "__arcLengthDivisions", {
    get: function() {
      console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
      return this.arcLengthDivisions;
    },
    set: function(value) {
      console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
      this.arcLengthDivisions = value;
    }
  });
  PerspectiveCamera.prototype.setLens = function(focalLength, filmGauge) {
    console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
    if (filmGauge !== void 0)
      this.filmGauge = filmGauge;
    this.setFocalLength(focalLength);
  };
  Object.defineProperties(Light.prototype, {
    onlyShadow: {
      set: function() {
        console.warn("THREE.Light: .onlyShadow has been removed.");
      }
    },
    shadowCameraFov: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
        this.shadow.camera.fov = value;
      }
    },
    shadowCameraLeft: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");
        this.shadow.camera.left = value;
      }
    },
    shadowCameraRight: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");
        this.shadow.camera.right = value;
      }
    },
    shadowCameraTop: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
        this.shadow.camera.top = value;
      }
    },
    shadowCameraBottom: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
        this.shadow.camera.bottom = value;
      }
    },
    shadowCameraNear: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");
        this.shadow.camera.near = value;
      }
    },
    shadowCameraFar: {
      set: function(value) {
        console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");
        this.shadow.camera.far = value;
      }
    },
    shadowCameraVisible: {
      set: function() {
        console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
      }
    },
    shadowBias: {
      set: function(value) {
        console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
        this.shadow.bias = value;
      }
    },
    shadowDarkness: {
      set: function() {
        console.warn("THREE.Light: .shadowDarkness has been removed.");
      }
    },
    shadowMapWidth: {
      set: function(value) {
        console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");
        this.shadow.mapSize.width = value;
      }
    },
    shadowMapHeight: {
      set: function(value) {
        console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");
        this.shadow.mapSize.height = value;
      }
    }
  });
  Object.defineProperties(BufferAttribute.prototype, {
    length: {
      get: function() {
        console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
        return this.array.length;
      }
    },
    dynamic: {
      get: function() {
        console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
        return this.usage === DynamicDrawUsage;
      },
      set: function() {
        console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
        this.setUsage(DynamicDrawUsage);
      }
    }
  });
  Object.assign(BufferAttribute.prototype, {
    setDynamic: function(value) {
      console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.");
      this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
      return this;
    },
    copyIndicesArray: function() {
      console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
    },
    setArray: function() {
      console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
    }
  });
  Object.assign(BufferGeometry.prototype, {
    addIndex: function(index) {
      console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");
      this.setIndex(index);
    },
    addAttribute: function(name, attribute) {
      console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().");
      if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {
        console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).");
        return this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));
      }
      if (name === "index") {
        console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.");
        this.setIndex(attribute);
        return this;
      }
      return this.setAttribute(name, attribute);
    },
    addDrawCall: function(start, count, indexOffset) {
      if (indexOffset !== void 0) {
        console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");
      }
      console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
      this.addGroup(start, count);
    },
    clearDrawCalls: function() {
      console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
      this.clearGroups();
    },
    computeTangents: function() {
      console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
    },
    computeOffsets: function() {
      console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
    },
    removeAttribute: function(name) {
      console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().");
      return this.deleteAttribute(name);
    },
    applyMatrix: function(matrix) {
      console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().");
      return this.applyMatrix4(matrix);
    }
  });
  Object.defineProperties(BufferGeometry.prototype, {
    drawcalls: {
      get: function() {
        console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
        return this.groups;
      }
    },
    offsets: {
      get: function() {
        console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
        return this.groups;
      }
    }
  });
  Object.defineProperties(InstancedBufferGeometry.prototype, {
    maxInstancedCount: {
      get: function() {
        console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.");
        return this.instanceCount;
      },
      set: function(value) {
        console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.");
        this.instanceCount = value;
      }
    }
  });
  Object.defineProperties(Raycaster.prototype, {
    linePrecision: {
      get: function() {
        console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.");
        return this.params.Line.threshold;
      },
      set: function(value) {
        console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.");
        this.params.Line.threshold = value;
      }
    }
  });
  Object.defineProperties(InterleavedBuffer.prototype, {
    dynamic: {
      get: function() {
        console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");
        return this.usage === DynamicDrawUsage;
      },
      set: function(value) {
        console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");
        this.setUsage(value);
      }
    }
  });
  Object.assign(InterleavedBuffer.prototype, {
    setDynamic: function(value) {
      console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.");
      this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
      return this;
    },
    setArray: function() {
      console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
    }
  });
  Object.assign(ExtrudeBufferGeometry.prototype, {
    getArrays: function() {
      console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.");
    },
    addShapeList: function() {
      console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.");
    },
    addShape: function() {
      console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.");
    }
  });
  Object.assign(Scene.prototype, {
    dispose: function() {
      console.error("THREE.Scene: .dispose() has been removed.");
    }
  });
  Object.defineProperties(Uniform.prototype, {
    dynamic: {
      set: function() {
        console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
      }
    },
    onUpdate: {
      value: function() {
        console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");
        return this;
      }
    }
  });
  Object.defineProperties(Material.prototype, {
    wrapAround: {
      get: function() {
        console.warn("THREE.Material: .wrapAround has been removed.");
      },
      set: function() {
        console.warn("THREE.Material: .wrapAround has been removed.");
      }
    },
    overdraw: {
      get: function() {
        console.warn("THREE.Material: .overdraw has been removed.");
      },
      set: function() {
        console.warn("THREE.Material: .overdraw has been removed.");
      }
    },
    wrapRGB: {
      get: function() {
        console.warn("THREE.Material: .wrapRGB has been removed.");
        return new Color();
      }
    },
    shading: {
      get: function() {
        console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
      },
      set: function(value) {
        console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
        this.flatShading = value === FlatShading;
      }
    },
    stencilMask: {
      get: function() {
        console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
        return this.stencilFuncMask;
      },
      set: function(value) {
        console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
        this.stencilFuncMask = value;
      }
    }
  });
  Object.defineProperties(MeshPhongMaterial.prototype, {
    metal: {
      get: function() {
        console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
        return false;
      },
      set: function() {
        console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
      }
    }
  });
  Object.defineProperties(MeshPhysicalMaterial.prototype, {
    transparency: {
      get: function() {
        console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.");
        return this.transmission;
      },
      set: function(value) {
        console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.");
        this.transmission = value;
      }
    }
  });
  Object.defineProperties(ShaderMaterial.prototype, {
    derivatives: {
      get: function() {
        console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
        return this.extensions.derivatives;
      },
      set: function(value) {
        console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
        this.extensions.derivatives = value;
      }
    }
  });
  Object.assign(WebGLRenderer.prototype, {
    clearTarget: function(renderTarget, color, depth, stencil) {
      console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");
      this.setRenderTarget(renderTarget);
      this.clear(color, depth, stencil);
    },
    animate: function(callback) {
      console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");
      this.setAnimationLoop(callback);
    },
    getCurrentRenderTarget: function() {
      console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
      return this.getRenderTarget();
    },
    getMaxAnisotropy: function() {
      console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");
      return this.capabilities.getMaxAnisotropy();
    },
    getPrecision: function() {
      console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");
      return this.capabilities.precision;
    },
    resetGLState: function() {
      console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
      return this.state.reset();
    },
    supportsFloatTextures: function() {
      console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
      return this.extensions.get("OES_texture_float");
    },
    supportsHalfFloatTextures: function() {
      console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");
      return this.extensions.get("OES_texture_half_float");
    },
    supportsStandardDerivatives: function() {
      console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
      return this.extensions.get("OES_standard_derivatives");
    },
    supportsCompressedTextureS3TC: function() {
      console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
      return this.extensions.get("WEBGL_compressed_texture_s3tc");
    },
    supportsCompressedTexturePVRTC: function() {
      console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");
      return this.extensions.get("WEBGL_compressed_texture_pvrtc");
    },
    supportsBlendMinMax: function() {
      console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");
      return this.extensions.get("EXT_blend_minmax");
    },
    supportsVertexTextures: function() {
      console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
      return this.capabilities.vertexTextures;
    },
    supportsInstancedArrays: function() {
      console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
      return this.extensions.get("ANGLE_instanced_arrays");
    },
    enableScissorTest: function(boolean) {
      console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");
      this.setScissorTest(boolean);
    },
    initMaterial: function() {
      console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
    },
    addPrePlugin: function() {
      console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
    },
    addPostPlugin: function() {
      console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
    },
    updateShadowMap: function() {
      console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
    },
    setFaceCulling: function() {
      console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
    },
    allocTextureUnit: function() {
      console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
    },
    setTexture: function() {
      console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
    },
    setTexture2D: function() {
      console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
    },
    setTextureCube: function() {
      console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
    },
    getActiveMipMapLevel: function() {
      console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().");
      return this.getActiveMipmapLevel();
    }
  });
  Object.defineProperties(WebGLRenderer.prototype, {
    shadowMapEnabled: {
      get: function() {
        return this.shadowMap.enabled;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
        this.shadowMap.enabled = value;
      }
    },
    shadowMapType: {
      get: function() {
        return this.shadowMap.type;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
        this.shadowMap.type = value;
      }
    },
    shadowMapCullFace: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
        return void 0;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
      }
    },
    context: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.");
        return this.getContext();
      }
    },
    vr: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr");
        return this.xr;
      }
    },
    gammaInput: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
        return false;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
      }
    },
    gammaOutput: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
        return false;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
        this.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;
      }
    },
    toneMappingWhitePoint: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
        return 1;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
      }
    }
  });
  Object.defineProperties(WebGLShadowMap.prototype, {
    cullFace: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
        return void 0;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
      }
    },
    renderReverseSided: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
        return void 0;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
      }
    },
    renderSingleSided: {
      get: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
        return void 0;
      },
      set: function() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
      }
    }
  });
  Object.defineProperties(WebGLRenderTarget.prototype, {
    wrapS: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
        return this.texture.wrapS;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
        this.texture.wrapS = value;
      }
    },
    wrapT: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
        return this.texture.wrapT;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
        this.texture.wrapT = value;
      }
    },
    magFilter: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
        return this.texture.magFilter;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
        this.texture.magFilter = value;
      }
    },
    minFilter: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
        return this.texture.minFilter;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
        this.texture.minFilter = value;
      }
    },
    anisotropy: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
        return this.texture.anisotropy;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
        this.texture.anisotropy = value;
      }
    },
    offset: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
        return this.texture.offset;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
        this.texture.offset = value;
      }
    },
    repeat: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
        return this.texture.repeat;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
        this.texture.repeat = value;
      }
    },
    format: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
        return this.texture.format;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
        this.texture.format = value;
      }
    },
    type: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
        return this.texture.type;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
        this.texture.type = value;
      }
    },
    generateMipmaps: {
      get: function() {
        console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
        return this.texture.generateMipmaps;
      },
      set: function(value) {
        console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
        this.texture.generateMipmaps = value;
      }
    }
  });
  Object.defineProperties(Audio.prototype, {
    load: {
      value: function(file) {
        console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
        const scope = this;
        const audioLoader = new AudioLoader();
        audioLoader.load(file, function(buffer) {
          scope.setBuffer(buffer);
        });
        return this;
      }
    },
    startTime: {
      set: function() {
        console.warn("THREE.Audio: .startTime is now .play( delay ).");
      }
    }
  });
  AudioAnalyser.prototype.getData = function() {
    console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
    return this.getFrequencyData();
  };
  CubeCamera.prototype.updateCubeMap = function(renderer3, scene2) {
    console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");
    return this.update(renderer3, scene2);
  };
  CubeCamera.prototype.clear = function(renderer3, color, depth, stencil) {
    console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear().");
    return this.renderTarget.clear(renderer3, color, depth, stencil);
  };
  ImageUtils.crossOrigin = void 0;
  ImageUtils.loadTexture = function(url, mapping, onLoad, onError) {
    console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
    const loader = new TextureLoader();
    loader.setCrossOrigin(this.crossOrigin);
    const texture = loader.load(url, onLoad, void 0, onError);
    if (mapping)
      texture.mapping = mapping;
    return texture;
  };
  ImageUtils.loadTextureCube = function(urls, mapping, onLoad, onError) {
    console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
    const loader = new CubeTextureLoader();
    loader.setCrossOrigin(this.crossOrigin);
    const texture = loader.load(urls, onLoad, void 0, onError);
    if (mapping)
      texture.mapping = mapping;
    return texture;
  };
  ImageUtils.loadCompressedTexture = function() {
    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
  };
  ImageUtils.loadCompressedTextureCube = function() {
    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
  };
  if (typeof __THREE_DEVTOOLS__ !== "undefined") {
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {detail: {
      revision: REVISION
    }}));
  }

  // node_modules/three/examples/jsm/controls/OrbitControls.js
  var OrbitControls = function(object, domElement) {
    if (domElement === void 0)
      console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.');
    if (domElement === document)
      console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.');
    this.object = object;
    this.domElement = domElement;
    this.enabled = true;
    this.target = new Vector3();
    this.minDistance = 0;
    this.maxDistance = Infinity;
    this.minZoom = 0;
    this.maxZoom = Infinity;
    this.minPolarAngle = 0;
    this.maxPolarAngle = Math.PI;
    this.minAzimuthAngle = -Infinity;
    this.maxAzimuthAngle = Infinity;
    this.enableDamping = false;
    this.dampingFactor = 0.05;
    this.enableZoom = true;
    this.zoomSpeed = 1;
    this.enableRotate = true;
    this.rotateSpeed = 1;
    this.enablePan = true;
    this.panSpeed = 1;
    this.screenSpacePanning = true;
    this.keyPanSpeed = 7;
    this.autoRotate = false;
    this.autoRotateSpeed = 2;
    this.enableKeys = true;
    this.keys = {LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40};
    this.mouseButtons = {LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN};
    this.touches = {ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN};
    this.target0 = this.target.clone();
    this.position0 = this.object.position.clone();
    this.zoom0 = this.object.zoom;
    this.getPolarAngle = function() {
      return spherical.phi;
    };
    this.getAzimuthalAngle = function() {
      return spherical.theta;
    };
    this.saveState = function() {
      scope.target0.copy(scope.target);
      scope.position0.copy(scope.object.position);
      scope.zoom0 = scope.object.zoom;
    };
    this.reset = function() {
      scope.target.copy(scope.target0);
      scope.object.position.copy(scope.position0);
      scope.object.zoom = scope.zoom0;
      scope.object.updateProjectionMatrix();
      scope.dispatchEvent(changeEvent);
      scope.update();
      state = STATE.NONE;
    };
    this.update = function() {
      var offset = new Vector3();
      var quat = new Quaternion().setFromUnitVectors(object.up, new Vector3(0, 1, 0));
      var quatInverse = quat.clone().invert();
      var lastPosition = new Vector3();
      var lastQuaternion = new Quaternion();
      var twoPI = 2 * Math.PI;
      return function update2() {
        var position = scope.object.position;
        offset.copy(position).sub(scope.target);
        offset.applyQuaternion(quat);
        spherical.setFromVector3(offset);
        if (scope.autoRotate && state === STATE.NONE) {
          rotateLeft(getAutoRotationAngle());
        }
        if (scope.enableDamping) {
          spherical.theta += sphericalDelta.theta * scope.dampingFactor;
          spherical.phi += sphericalDelta.phi * scope.dampingFactor;
        } else {
          spherical.theta += sphericalDelta.theta;
          spherical.phi += sphericalDelta.phi;
        }
        var min = scope.minAzimuthAngle;
        var max = scope.maxAzimuthAngle;
        if (isFinite(min) && isFinite(max)) {
          if (min < -Math.PI)
            min += twoPI;
          else if (min > Math.PI)
            min -= twoPI;
          if (max < -Math.PI)
            max += twoPI;
          else if (max > Math.PI)
            max -= twoPI;
          if (min <= max) {
            spherical.theta = Math.max(min, Math.min(max, spherical.theta));
          } else {
            spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);
          }
        }
        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
        spherical.makeSafe();
        spherical.radius *= scale;
        spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius));
        if (scope.enableDamping === true) {
          scope.target.addScaledVector(panOffset, scope.dampingFactor);
        } else {
          scope.target.add(panOffset);
        }
        offset.setFromSpherical(spherical);
        offset.applyQuaternion(quatInverse);
        position.copy(scope.target).add(offset);
        scope.object.lookAt(scope.target);
        if (scope.enableDamping === true) {
          sphericalDelta.theta *= 1 - scope.dampingFactor;
          sphericalDelta.phi *= 1 - scope.dampingFactor;
          panOffset.multiplyScalar(1 - scope.dampingFactor);
        } else {
          sphericalDelta.set(0, 0, 0);
          panOffset.set(0, 0, 0);
        }
        scale = 1;
        if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {
          scope.dispatchEvent(changeEvent);
          lastPosition.copy(scope.object.position);
          lastQuaternion.copy(scope.object.quaternion);
          zoomChanged = false;
          return true;
        }
        return false;
      };
    }();
    this.dispose = function() {
      scope.domElement.removeEventListener("contextmenu", onContextMenu, false);
      scope.domElement.removeEventListener("pointerdown", onPointerDown, false);
      scope.domElement.removeEventListener("wheel", onMouseWheel, false);
      scope.domElement.removeEventListener("touchstart", onTouchStart, false);
      scope.domElement.removeEventListener("touchend", onTouchEnd, false);
      scope.domElement.removeEventListener("touchmove", onTouchMove, false);
      scope.domElement.ownerDocument.removeEventListener("pointermove", onPointerMove, false);
      scope.domElement.ownerDocument.removeEventListener("pointerup", onPointerUp, false);
      scope.domElement.removeEventListener("keydown", onKeyDown, false);
    };
    var scope = this;
    var changeEvent = {type: "change"};
    var startEvent = {type: "start"};
    var endEvent = {type: "end"};
    var STATE = {
      NONE: -1,
      ROTATE: 0,
      DOLLY: 1,
      PAN: 2,
      TOUCH_ROTATE: 3,
      TOUCH_PAN: 4,
      TOUCH_DOLLY_PAN: 5,
      TOUCH_DOLLY_ROTATE: 6
    };
    var state = STATE.NONE;
    var EPS = 1e-6;
    var spherical = new Spherical();
    var sphericalDelta = new Spherical();
    var scale = 1;
    var panOffset = new Vector3();
    var zoomChanged = false;
    var rotateStart = new Vector2();
    var rotateEnd = new Vector2();
    var rotateDelta = new Vector2();
    var panStart = new Vector2();
    var panEnd = new Vector2();
    var panDelta = new Vector2();
    var dollyStart = new Vector2();
    var dollyEnd = new Vector2();
    var dollyDelta = new Vector2();
    function getAutoRotationAngle() {
      return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
    }
    function getZoomScale() {
      return Math.pow(0.95, scope.zoomSpeed);
    }
    function rotateLeft(angle) {
      sphericalDelta.theta -= angle;
    }
    function rotateUp(angle) {
      sphericalDelta.phi -= angle;
    }
    var panLeft = function() {
      var v = new Vector3();
      return function panLeft2(distance, objectMatrix) {
        v.setFromMatrixColumn(objectMatrix, 0);
        v.multiplyScalar(-distance);
        panOffset.add(v);
      };
    }();
    var panUp = function() {
      var v = new Vector3();
      return function panUp2(distance, objectMatrix) {
        if (scope.screenSpacePanning === true) {
          v.setFromMatrixColumn(objectMatrix, 1);
        } else {
          v.setFromMatrixColumn(objectMatrix, 0);
          v.crossVectors(scope.object.up, v);
        }
        v.multiplyScalar(distance);
        panOffset.add(v);
      };
    }();
    var pan = function() {
      var offset = new Vector3();
      return function pan2(deltaX, deltaY) {
        var element = scope.domElement;
        if (scope.object.isPerspectiveCamera) {
          var position = scope.object.position;
          offset.copy(position).sub(scope.target);
          var targetDistance = offset.length();
          targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180);
          panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
          panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);
        } else if (scope.object.isOrthographicCamera) {
          panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
          panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);
        } else {
          console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");
          scope.enablePan = false;
        }
      };
    }();
    function dollyOut(dollyScale) {
      if (scope.object.isPerspectiveCamera) {
        scale /= dollyScale;
      } else if (scope.object.isOrthographicCamera) {
        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));
        scope.object.updateProjectionMatrix();
        zoomChanged = true;
      } else {
        console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
        scope.enableZoom = false;
      }
    }
    function dollyIn(dollyScale) {
      if (scope.object.isPerspectiveCamera) {
        scale *= dollyScale;
      } else if (scope.object.isOrthographicCamera) {
        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));
        scope.object.updateProjectionMatrix();
        zoomChanged = true;
      } else {
        console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
        scope.enableZoom = false;
      }
    }
    function handleMouseDownRotate(event) {
      rotateStart.set(event.clientX, event.clientY);
    }
    function handleMouseDownDolly(event) {
      dollyStart.set(event.clientX, event.clientY);
    }
    function handleMouseDownPan(event) {
      panStart.set(event.clientX, event.clientY);
    }
    function handleMouseMoveRotate(event) {
      rotateEnd.set(event.clientX, event.clientY);
      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
      var element = scope.domElement;
      rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);
      rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
      rotateStart.copy(rotateEnd);
      scope.update();
    }
    function handleMouseMoveDolly(event) {
      dollyEnd.set(event.clientX, event.clientY);
      dollyDelta.subVectors(dollyEnd, dollyStart);
      if (dollyDelta.y > 0) {
        dollyOut(getZoomScale());
      } else if (dollyDelta.y < 0) {
        dollyIn(getZoomScale());
      }
      dollyStart.copy(dollyEnd);
      scope.update();
    }
    function handleMouseMovePan(event) {
      panEnd.set(event.clientX, event.clientY);
      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
      pan(panDelta.x, panDelta.y);
      panStart.copy(panEnd);
      scope.update();
    }
    function handleMouseUp() {
    }
    function handleMouseWheel(event) {
      if (event.deltaY < 0) {
        dollyIn(getZoomScale());
      } else if (event.deltaY > 0) {
        dollyOut(getZoomScale());
      }
      scope.update();
    }
    function handleKeyDown(event) {
      var needsUpdate = false;
      switch (event.keyCode) {
        case scope.keys.UP:
          pan(0, scope.keyPanSpeed);
          needsUpdate = true;
          break;
        case scope.keys.BOTTOM:
          pan(0, -scope.keyPanSpeed);
          needsUpdate = true;
          break;
        case scope.keys.LEFT:
          pan(scope.keyPanSpeed, 0);
          needsUpdate = true;
          break;
        case scope.keys.RIGHT:
          pan(-scope.keyPanSpeed, 0);
          needsUpdate = true;
          break;
      }
      if (needsUpdate) {
        event.preventDefault();
        scope.update();
      }
    }
    function handleTouchStartRotate(event) {
      if (event.touches.length == 1) {
        rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);
      } else {
        var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);
        var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);
        rotateStart.set(x, y);
      }
    }
    function handleTouchStartPan(event) {
      if (event.touches.length == 1) {
        panStart.set(event.touches[0].pageX, event.touches[0].pageY);
      } else {
        var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);
        var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);
        panStart.set(x, y);
      }
    }
    function handleTouchStartDolly(event) {
      var dx = event.touches[0].pageX - event.touches[1].pageX;
      var dy = event.touches[0].pageY - event.touches[1].pageY;
      var distance = Math.sqrt(dx * dx + dy * dy);
      dollyStart.set(0, distance);
    }
    function handleTouchStartDollyPan(event) {
      if (scope.enableZoom)
        handleTouchStartDolly(event);
      if (scope.enablePan)
        handleTouchStartPan(event);
    }
    function handleTouchStartDollyRotate(event) {
      if (scope.enableZoom)
        handleTouchStartDolly(event);
      if (scope.enableRotate)
        handleTouchStartRotate(event);
    }
    function handleTouchMoveRotate(event) {
      if (event.touches.length == 1) {
        rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);
      } else {
        var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);
        var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);
        rotateEnd.set(x, y);
      }
      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
      var element = scope.domElement;
      rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);
      rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
      rotateStart.copy(rotateEnd);
    }
    function handleTouchMovePan(event) {
      if (event.touches.length == 1) {
        panEnd.set(event.touches[0].pageX, event.touches[0].pageY);
      } else {
        var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);
        var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);
        panEnd.set(x, y);
      }
      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
      pan(panDelta.x, panDelta.y);
      panStart.copy(panEnd);
    }
    function handleTouchMoveDolly(event) {
      var dx = event.touches[0].pageX - event.touches[1].pageX;
      var dy = event.touches[0].pageY - event.touches[1].pageY;
      var distance = Math.sqrt(dx * dx + dy * dy);
      dollyEnd.set(0, distance);
      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));
      dollyOut(dollyDelta.y);
      dollyStart.copy(dollyEnd);
    }
    function handleTouchMoveDollyPan(event) {
      if (scope.enableZoom)
        handleTouchMoveDolly(event);
      if (scope.enablePan)
        handleTouchMovePan(event);
    }
    function handleTouchMoveDollyRotate(event) {
      if (scope.enableZoom)
        handleTouchMoveDolly(event);
      if (scope.enableRotate)
        handleTouchMoveRotate(event);
    }
    function handleTouchEnd() {
    }
    function onPointerDown(event) {
      if (scope.enabled === false)
        return;
      switch (event.pointerType) {
        case "mouse":
        case "pen":
          onMouseDown(event);
          break;
      }
    }
    function onPointerMove(event) {
      if (scope.enabled === false)
        return;
      switch (event.pointerType) {
        case "mouse":
        case "pen":
          onMouseMove(event);
          break;
      }
    }
    function onPointerUp(event) {
      switch (event.pointerType) {
        case "mouse":
        case "pen":
          onMouseUp(event);
          break;
      }
    }
    function onMouseDown(event) {
      event.preventDefault();
      scope.domElement.focus ? scope.domElement.focus() : window.focus();
      var mouseAction;
      switch (event.button) {
        case 0:
          mouseAction = scope.mouseButtons.LEFT;
          break;
        case 1:
          mouseAction = scope.mouseButtons.MIDDLE;
          break;
        case 2:
          mouseAction = scope.mouseButtons.RIGHT;
          break;
        default:
          mouseAction = -1;
      }
      switch (mouseAction) {
        case MOUSE.DOLLY:
          if (scope.enableZoom === false)
            return;
          handleMouseDownDolly(event);
          state = STATE.DOLLY;
          break;
        case MOUSE.ROTATE:
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            if (scope.enablePan === false)
              return;
            handleMouseDownPan(event);
            state = STATE.PAN;
          } else {
            if (scope.enableRotate === false)
              return;
            handleMouseDownRotate(event);
            state = STATE.ROTATE;
          }
          break;
        case MOUSE.PAN:
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            if (scope.enableRotate === false)
              return;
            handleMouseDownRotate(event);
            state = STATE.ROTATE;
          } else {
            if (scope.enablePan === false)
              return;
            handleMouseDownPan(event);
            state = STATE.PAN;
          }
          break;
        default:
          state = STATE.NONE;
      }
      if (state !== STATE.NONE) {
        scope.domElement.ownerDocument.addEventListener("pointermove", onPointerMove, false);
        scope.domElement.ownerDocument.addEventListener("pointerup", onPointerUp, false);
        scope.dispatchEvent(startEvent);
      }
    }
    function onMouseMove(event) {
      if (scope.enabled === false)
        return;
      event.preventDefault();
      switch (state) {
        case STATE.ROTATE:
          if (scope.enableRotate === false)
            return;
          handleMouseMoveRotate(event);
          break;
        case STATE.DOLLY:
          if (scope.enableZoom === false)
            return;
          handleMouseMoveDolly(event);
          break;
        case STATE.PAN:
          if (scope.enablePan === false)
            return;
          handleMouseMovePan(event);
          break;
      }
    }
    function onMouseUp(event) {
      scope.domElement.ownerDocument.removeEventListener("pointermove", onPointerMove, false);
      scope.domElement.ownerDocument.removeEventListener("pointerup", onPointerUp, false);
      if (scope.enabled === false)
        return;
      handleMouseUp(event);
      scope.dispatchEvent(endEvent);
      state = STATE.NONE;
    }
    function onMouseWheel(event) {
      if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE)
        return;
      event.preventDefault();
      event.stopPropagation();
      scope.dispatchEvent(startEvent);
      handleMouseWheel(event);
      scope.dispatchEvent(endEvent);
    }
    function onKeyDown(event) {
      if (scope.enabled === false || scope.enableKeys === false || scope.enablePan === false)
        return;
      handleKeyDown(event);
    }
    function onTouchStart(event) {
      if (scope.enabled === false)
        return;
      event.preventDefault();
      switch (event.touches.length) {
        case 1:
          switch (scope.touches.ONE) {
            case TOUCH.ROTATE:
              if (scope.enableRotate === false)
                return;
              handleTouchStartRotate(event);
              state = STATE.TOUCH_ROTATE;
              break;
            case TOUCH.PAN:
              if (scope.enablePan === false)
                return;
              handleTouchStartPan(event);
              state = STATE.TOUCH_PAN;
              break;
            default:
              state = STATE.NONE;
          }
          break;
        case 2:
          switch (scope.touches.TWO) {
            case TOUCH.DOLLY_PAN:
              if (scope.enableZoom === false && scope.enablePan === false)
                return;
              handleTouchStartDollyPan(event);
              state = STATE.TOUCH_DOLLY_PAN;
              break;
            case TOUCH.DOLLY_ROTATE:
              if (scope.enableZoom === false && scope.enableRotate === false)
                return;
              handleTouchStartDollyRotate(event);
              state = STATE.TOUCH_DOLLY_ROTATE;
              break;
            default:
              state = STATE.NONE;
          }
          break;
        default:
          state = STATE.NONE;
      }
      if (state !== STATE.NONE) {
        scope.dispatchEvent(startEvent);
      }
    }
    function onTouchMove(event) {
      if (scope.enabled === false)
        return;
      event.preventDefault();
      event.stopPropagation();
      switch (state) {
        case STATE.TOUCH_ROTATE:
          if (scope.enableRotate === false)
            return;
          handleTouchMoveRotate(event);
          scope.update();
          break;
        case STATE.TOUCH_PAN:
          if (scope.enablePan === false)
            return;
          handleTouchMovePan(event);
          scope.update();
          break;
        case STATE.TOUCH_DOLLY_PAN:
          if (scope.enableZoom === false && scope.enablePan === false)
            return;
          handleTouchMoveDollyPan(event);
          scope.update();
          break;
        case STATE.TOUCH_DOLLY_ROTATE:
          if (scope.enableZoom === false && scope.enableRotate === false)
            return;
          handleTouchMoveDollyRotate(event);
          scope.update();
          break;
        default:
          state = STATE.NONE;
      }
    }
    function onTouchEnd(event) {
      if (scope.enabled === false)
        return;
      handleTouchEnd(event);
      scope.dispatchEvent(endEvent);
      state = STATE.NONE;
    }
    function onContextMenu(event) {
      if (scope.enabled === false)
        return;
      event.preventDefault();
    }
    scope.domElement.addEventListener("contextmenu", onContextMenu, false);
    scope.domElement.addEventListener("pointerdown", onPointerDown, false);
    scope.domElement.addEventListener("wheel", onMouseWheel, false);
    scope.domElement.addEventListener("touchstart", onTouchStart, false);
    scope.domElement.addEventListener("touchend", onTouchEnd, false);
    scope.domElement.addEventListener("touchmove", onTouchMove, false);
    scope.domElement.addEventListener("keydown", onKeyDown, false);
    this.update();
  };
  OrbitControls.prototype = Object.create(EventDispatcher.prototype);
  OrbitControls.prototype.constructor = OrbitControls;
  var MapControls = function(object, domElement) {
    OrbitControls.call(this, object, domElement);
    this.screenSpacePanning = false;
    this.mouseButtons.LEFT = MOUSE.PAN;
    this.mouseButtons.RIGHT = MOUSE.ROTATE;
    this.touches.ONE = TOUCH.PAN;
    this.touches.TWO = TOUCH.DOLLY_ROTATE;
  };
  MapControls.prototype = Object.create(EventDispatcher.prototype);
  MapControls.prototype.constructor = MapControls;

  // index.banner.js
  var es6_tween2 = __toModule(require_Tween_min());

  // lib/anim/Eraser.js
  var es6_tween = __toModule(require_Tween_min());
  var ERASER_OPACITY_HIGH = 0.1;
  var ERASER_OPACITY_LOW = 1e-3;
  var ERASER_COLOR = settings.background_color;
  var Eraser = class {
    constructor() {
      this.o = 1;
      this.to = 1;
      this.material = new SpriteMaterial({color: ERASER_COLOR, transparent: true, opacity: 1});
      this.el = new Sprite(this.material);
      this.el.position.set(0, 0, -100);
      const s = Math.max(window.innerWidth, window.innerHeight);
      this.el.scale.set(s, s, 1);
    }
    setTargetOpacity(opacity, time = 300) {
      this.to = opacity;
    }
    blendUp(target = ERASER_OPACITY_HIGH) {
      this.to = target;
    }
    blendDown(target = ERASER_OPACITY_LOW) {
      this.to = target || ERASER_OPACITY_LOW;
      console.log("# Eraser blendDown", this.to);
      if (window.renderer) {
        window.renderer.autoClearColor = false;
      }
      this.material.transparent = true;
    }
    upDown(delay = 1e3) {
      this.blendUp();
      setTimeout(() => {
        this.blendDown();
      }, delay);
    }
    clearScreen() {
      if (window.renderer) {
        renderer.autoClearColor = "#000000";
      }
      this.o = 1;
      this.to = 1;
      this.material.opacity = 1;
      setTimeout(() => {
        this.material.transparent = true;
      }, 100);
    }
    update() {
      this.o = this.to - (this.to - this.o) * 0.9;
      this.material.opacity = this.o;
    }
  };

  // lib/anim/GenerateTexture.js
  var GenerateTexture = (stroke = "#eee", fill = "#fff", lineWidth = 10) => {
    const canvas = document.createElement("canvas");
    const size = 512;
    canvas.width = size;
    canvas.height = size;
    const c = canvas.getContext("2d");
    c.lineWidth = lineWidth;
    c.strokeStyle = stroke;
    c.fillStyle = fill;
    const s = size / 2;
    c.beginPath();
    c.arc(s, s, s - c.lineWidth, 0, Math.PI * 2, false);
    c.fill();
    c.stroke();
    c.closePath();
    const map = new Texture(canvas);
    map.needsUpdate = true;
    return map;
  };

  // app/data/circletextures-b64.js
  var CIRCLEIMAGESB64 = {
    "16723": "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",
    "16728": "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",
    "16737": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC91BMVEVHcEzH1LGjtKeltKantqejtKSfqKigs7Car5i9xJ2isKmltaeltamjs6ijs6iktKektaaltKaktaecrJ2ntqmnt6mmtaehs6aktKiisqWcrZ6ktqWktKeuvqqktKerv6XBy8K/ybmjs6aYqZm3xLWDnoe3x67H1ryltKebtZSyvp1ynG+er6GmtqlygZWer6OouauWorfb4NuMmKyKr4GltaiktKejs6amtqmisqWktKiltaf///+lt6mjtqaks6epuqmpuKqouaujs6imt6ypua2hsqSnt6itu7ChsaamuKqfsKKks6muvq6ptqyxwbChtKWfrqmis6qmtaqSnpWou6z5+fmltKunt6aru6qhraCdrqCsua6ktqOdraSYq5qgsKWrvK6kr6Sks6yrvbGdq6CywLa2ubWltKm3wrmisamruqWmt66xv56vvrKOr4jEy8atsa2prKnJzMqht6Cds56XqJinuqTK1M2rvqWKmKivwKuRpZSXtY/u7u7Q09CRmpO1w6GZrJ2zxKubtJesvambqJ2msaeUo5K5vLnBxMH9/f3e396duZais6GToaihvJqstq6mtK2XoJiaq5OhsJ2BiIKMkIyIlayqupesvqCnwZqjqKSyuLKNnIy9v7zH0ciLl5D19fXZ2tmFk6SpwZ6Yppqaq6OUrJR+jKeyyaOyvLSdrpuqt6GCkm6KmZ6anZqHjYido52ZqoyFkqyMma6ru56jtJ27ybSdvJGispSes6K2xLW3wpiXmZegqp+xwKzI2a9udXDE0rh1eXeLnYOEkn+RlJHw8fFnbmm+zaqPnaatwaS7yaWkup96iaGfpp23yK6IrYCvvpCYnJOAjqGAhIG8yL2hpKHk5eTHx8aVpJiIkouaqKecq6mfq5WjwpK0vpJ7g32VpIuyz5zV19Xo6enQ2szO0cqSm5mgra6er5GVo4GCmYTQ379kj2fAzrmUpKGOnHt6iWSXpqmmuJmYprBumm95f3dWXVl5oXODqHpufllz21LmAAAANXRSTlMADZpLPRoFDQ0MJrdocKfb61h7N1+SwTD4h0Xy4OXOrpNmx+vmjKCox93eTvHEctPjrp/ls2jxAgUAAAtXSURBVHjapVd3VJTHFreAGsVeoonp7fU+M1/Z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",
    "16754": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAACcFBMVEVHcEz////////////////////+/v7////+/v7////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9/f3v7++VlZX////Ly8vX19e3t7fc3Nz////////////////f39/i4uL4+Pj////n5+fS0tL////////////////m5ub////////////////f39/////Y2Njq6ura2tr////9/f339/f+/v74+Pj5+fn7+/v6+vrx8fH19fX29vb09PT8/Pzz8/Pr6+vy8vLt7e3k5OTv7+/p6eng4ODb29vd3d3n5+fX19fq6uro6Ojw8PDi4uLu7u7m5ubj4+Ps7OzV1dXl5eXa2trU1NTf39/e3t7Y2NjZ2dnc3NzT09PW1tbh4eHKysrR0dHHx8empqaTk5LPz8+3t7fOzs7BwcHT09LExMTAwMDQ0NDJycm4uLjDw8Ozs7O2traBgYHMzMyvr6+pqanLy8uWlpbX19aqqqkYGBW6urpPT0709PUtLSqcnJvNzc3b29qzs7J4eHekpKSUlJPFxcWdnZ2hoaGIiIitra2xsbGioqK8vLyKioqRkZEnEdbAAAAAc3RSTlMAR2nfAgY/DRzrcKojwQ66nVqUo6h4Tz3v3jvyTTLHnCbhSXHP99pW2zh65fj9KWVrCewTGrGmfYdBrpo1zpc6XBa+S/aSL/OJXuafGfyyZpkDmIfHLrdAOpbnYtYHf4M16tO1nAtY7cTjH25fjVizaXFxxcpfqgAABadJREFUeNqll4WX20YQhx04SJo0nDTYQJOmgUIYmjJTmjIzc7taL4klM+P5uHehS8NYZuZ/qbIlxba0vlxef+9ZT1rtfJ6dnV3NBjoCo6htY2fnxrbRenS0BFw9fvobqzesW79+5YZVU3deM+XiAPMemgA8Wj3zqrEC2iZPAFytGr9nLIAVd/osg0Hn5rLdFwSMmwQAD6DLtRuwbN7ogC2AJ8uBHs19eHAUwNJ7QAv1/1FU3fv5na0At4JW6vpz5NzRXtF9bOcDbmppL8YoINBkam6wVGuYywPM4NoKSvUiCUAJgu7f9h9O2M2L/IBxgKvSsHVBx/4+HhHB8O/hGBXs9hu9gCkr+YB03roc+eevf491lU+cKudMJyUm3ewB7AKthQ6czB/uz5aHekPpuJtTU5sB21qb0wI7OJwdzgAig1TYcAFgTiNggTfzXIFgOi6CI8eMYRMMHwJnD2MBuLqjATC10VqoC9Ass/7y3JnKaRNEh8CvZwQCXD1QB1wJWgF6equDyOfUoqFTmeZNRan3XH4esKQJoNjDrAH0VMSoNXaZOeouLFfTXMAiz8rBpbg6aCjVCEAA8/lqCu/Px0TgVbsDuMQDCPXHQsWIXn2QrJhpCRMkDyQSug8w3QZsWueZA4MpAmUhUB7JWASU1xJ95Z/3HQE+vX5pDbDbO/GGAaksyujLkyNyumwkcpXI6R9PjQT9hNcs8+sCsz0OEJCrsCIGwXBaMyJHtTQzu+PHRyIcwOWBV61ALvPtX+EY6yKgaoALKY2RUoYiiXIALwUmBgKbgAcggHgf66K1eYRY1kKmKSMiqxwA6LDXsQ8QZf24BkBIZKiSRBBBUeAAqt+Kt3kAvd/1AOpEVHURIoXnwTsW4F0OoJcdxA4Ap0KKlJYkCCkHsNUCzPIDkt26EwOkqFFDkRiSxG7GAcy0ADv8gFSMFYntgSIzgiCDWDQIBzDLArzvBSjVWXBjoEg6JSgNEcSAo9kWYLPfg1yUHXJiIEhpLMAsRKrMm4UtFmC2H1AaYEMOgEhMVpGOkYx5s7DTAsz0A0Kl0AB1AAhrP6hYD0OB58E2C7DGD4gdTSWIAxDJ9/sEZhiI8Dy41t7PvIBfzpoJ6sRADeeGkhWRIMzzYFy1GPIDysPJohsDyqAiihhBbgxqH+qFPgBLprvcGMACErCEEKIcD9Za5s8GpvkA4Uw9kXA2zOKhIJJkTiLtsLaTjsBz/kyMsENuIhGkF7IYU24irahtaYt97amYOmDv/5BgRBDGEiKY+gFL7V15ibfdKBU+EW0ARYhIEEKKzZOmt980Z1uf7H1R0Mo/2UUVIhhSWN0N8Imv9nr7Pe0ALvWWdkkturfgDEHAEEMJCeDbb7yACXscQGCr5028Tz8o2R4ojFGMEQyCfV986uk2OWAD/C4UBsWYPWlYjCdlFUKRfv3x558195q/p/55H+8JYkaOUtsDiOSQLskQi740mNFYodzS9ErLq1G7P1SwKEMEIYWyx35zU4kz5f7Gd+GImnAAFENRsn4Wo3ktLLyvuci6u8mDipygNgBTKomoCkDNgLneOvEuUFc2JztBhIRiCRMoSSJssl/jr1RnNcWg7KYy1LGkShDKUqP9DbxauV5npLrVohsDJKbNrKRChISGrzK/Wr/3fBBjatGJgQAIYxTKkJB6eXV7q/PCnHoMuu3uSBYVKFGMUCgUbNwI+YBA+232WhhUe+wh0HCfThCBQihiQufcdP1oR562WiC0iNpjDwFr0UxY05IpM9ObtQuriRc4tS14xvIgI/e6HkT7M6lcJDK4fwBbz1csHsO5cfkuLcMSDqDQ21PKF6LR0kBXceCR7WM8ub7wyosJbAOylVhfT6Tnu+7YU08+ejFn58cffmytBSDJvko0lXnz5eefGPXszNdb22eM//CjD95r7xz99P6/1PEfugd0VJljy/gAAAAASUVORK5CYII=",
    "16758": "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",
    "16760": "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",
    "16762": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAADAFBMVEVHcEz////+/v7///+Wlpbd3d28vLz////r6+vY2Nj////////////r6+vv7+/09PT29vbt7e339/f9/f3l5eX///////////////+kpKTu7u7X19fZ2dn09PTu7u74+Pj8/Pz///+Wlpb///////+/v7+lpaX///////+0tLSrq67Q0ND///+lpaX+/v7////////////o6Oji4uLDw8Pv7+/////l5eX////MzMzu7u7W1tbY2Njq6urGxsa4uLjx8fH////x8fGenp7r6+uxsrLv7+/S0tKzs7Ompqbp6end3d3////Z2dm4uLj29vbn5+ff39/////////CwsLPz8/j4+PExMSOjo7l5eVOTk7IyMj////7//vKysr////T09XLy8uNjY2bm5vU1NXc3Nzc3Nz////X19f////////Z2dmfn5////+4uLi/v7////+pqan29vaTk5OcnJz9/f3////////s7Ozh4eF3d3fW1taampr////l5eXh4eHe3t6/v7/k5OTm5ubFxcXi4uLY2Njo6OjIyMjAwMDs7Oz09PTHx8ff39/Dw8O8vLyrq6vu7u7ExMTc3NzGxsbw8PDZ2dnj4+PNzc2+vr7Pz8/d3d3n5+fKysrg4ODq6uq5ubnJycnX19fT09P7+/vp6en+/v7r6+vBwcGwsLDQ0NC7u7va2tq3t7e9vb3W1tbMzMy4uLjt7e3x8fHOzs7b29vS0tLCwsLv7+/Ly8uurq6np6eys7PU1NSoqKitra3y8vP19fa6urvR0dGlpqb29vbz8/PDxMSsrKy1tbWxsbGpqamqqqq0tLS2trbV1dXIysn9/f3ExMWfn6CampuioqOkpKT6+vqXl5ednZ2WlpatrrD4+Pi/v7+QkJGVlZWOjo6SkpJzdHO0trWur7GhoaGKi4vAwL+3uLp9fn6/wMCsrK7O0NDa29vBw8KWlpfj5OSGhoZ6e3t3d3fAwcDNzs68vb6fnp5/gYC+vr2/wMLX2NlkZmVra2xub29sbGxwp90OAAAAfXRSTlMAcDhADQYNDQ0NApsd35ixGj5HJheHlWm1JnlMW3pOYC4KN+RmnXtI2jNWK6Op96iwPfPq5qXvcOFb8t7funDHweqb6+u7kuV98UZs29Np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",
    "16764": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC/VBMVEVHcExTWUhgaVRcZVRTWkk8QzWChnd0emZBSTvDyrp3e2x7g2wrMic9QjlTWk2fo5RsdGBfZlehpZO1uLGRmYJ5gGt+gnhwd2h3emFXXk1CTDy5vqtFR0N5fHTZ29WxtKgYGBZhZlmZnpyfopkrMiXO0rc8QDNCQUQmKhuPk4Lc38i0uaTu69/o7N0uLjQoKDArLjC+wb1SWElATzbGxsvO0dn///82NztJT0AmKyHj4uAzNy5ye2dARzo+P0Dn5uRncVs7Oz4vNidUWlGAgXhRXEjq6uZud2ReaFTm5OGHj3l6gWvZ19dkbFkvMDd5gXNqdl4qLSWNl3lYWFh0dmmEjXJfYGYrLDKKknZucGfc3Np1gWYuMCxLUEU6QDRpcF+Mkn9QVUpDQkQcHCJbZlJ+hXFDTTyVmaFHSEs9QzY8QTursJU3Oy7FybFcYU/y8fBCQz5FSUJRWUNNV0atsJ9aYVgzNTVDRUZeYluXnod3fG7c38tkaV+Umo5lcFRRU1THycx7eHLt7OuDiX6Wl5i3u6NiaVuUl4aKjXyip5qBiHbf3t59iW5ZXlO0t5+Pl3/6+/2Zn5RnaWh3fWZpb2SNkZyeoo1iZW+Lj4o2QC+8v7+TnH5VYUxdYlWXn4ImJisfJBtye2Gho6QoKC+9wKtRUE+AgoF8hWfV09MhISqepoi7wKP39/atrq5ZY0qztLfu7+mio6s6PDWUkottcHFKVjynq5JvdF+2uKyxtatpbHWysKZOS0uHiXaPkJPZ3MOxt5mLioLP0r+bn6xLTk95fXtyeHBaXGLJzL/V2MGEhoa4ubqBho6lqq1tbGCcn5vDxcXf4Oh2e4bLz7V2cGpZW0ujqJJvdYCmqpzm6fClnpKOhn1qYlqfl5FwaWeloJtrclhjaVOiqIubn4h8go7n6NkUGgxtd1exsLPPz82OlnHDxqnDxLVBSTOFiWsPDxesqKTi5dSrr7eGjYTO0drw9PqDiJWTlZO6vrS0uMO7trNjYlTx9N3o6suIfG5GQLgKAAAANnRSTlMABkmWGzwsDQ0NoG11X63+6+k5RLCCzbtZbpKa5uhcaSbJ1JbYdOtO3NOb36nB7Z2usuq736OBNZBfAAAMrUlEQVR42qWXZXgb55aAncQpBJumzHBxGcWShZYsWcwsWWDJlmVJZpCZmZmZHTMzs50Yw3aYOU2Tts/KbrZp0tve7rNn/s3MeefAfAes3rT6DdllbW39+q7feuMNq9d/5ckXn3/95VefGuDasU/ee2/PwS/+b4C9X/+Xpr8CHQ1Y0ErkxjDHbxuhf/lo7+8F7Prwr3RqECepCh0KSOLQ6c2jDo5ZIJAO+ocDu34P4ICuoWVI2xtYXz/e0t/vDRahRc1OWrhWIioS/eng3wUc/Q+t3td3dV5keGZkpoEv61Xx9MBRNJguyYfToXLjJ6848vorgENjID3b7H8r1R+MA0H1OrruNo/uBKfD4XoQWCeBQqFOe15SePOlNL72JxFILlnpYqF1noVQbT5LrE/GtkkMBp0OLi4yeGQX0UUS9F+sfw2wm6SGNq+clwT7grTPoHSdTi4L7ZqsEDfToXSo1rdfjAaDUdngy5K3/7YLB+XYVjCIjwFfpvdPdjTT9ZJbyUFhYw/j0XQomA4yVxiK0DpFka6I7v/nFxa8ABzU8EOXNF5N9410sAce6p1Pik4OAiw5fmv0n3NMGY9K6xKIwToEhl7EmTD8+ZeAoxpu6tBS//3Zja776SK0Dk5uv7mxNBP7qLE8CPBoySbEz69LbqRzZsZGR2a5wL0/Ad54Hr+gQEr0YuzYtxWbqqSHXKNJN+5z/d5D/xxATvm1aw9zJrsyiukmE320otVxLRBIOfLGK4CvBEDKBkDAX6De0jUC7keg5yejOqaSkx8ELdKpYUGhcJAWqmeYPDUVORtjzajSrn9+HsTnWfjI3VZE2ahbwGSEk53mAIAnaPltUGi7KRk0/W1gcv3iOB0MFUt08jREWlZSuhFR2Pnd/p9n4e2uqRulwI1jskD5M60oBwB4FKhBXqYO3w6IguSM2vqF6uh0Ncy7yI0smn746NE3pRRMfeNrP3Ph/cRr5kLUBiDSEHEe/yB50s913CtadXixLWAS0IJwjx67jH1SUHNBqtIzl+aCAFcVFO8eyL+/AHyWivTlA4GxAHdMwuBgGSH0EWBe7MLSmzPc0i41NrPNTeZLw2weIys6khOW7w5oUlQn1w7WHf0pjV92FGf4cCkltnX8GLZ53ZyedWK+fCAKhDQXXS4L0pjXXfyebOnj57Ax0QhQcc3AUCmlo1jd9f7/WrAbqVy/6VMKzIdNYlORWVeDHOeOZTG/c47sBMNDAVVOgqSC1fCM1qyF1a4ZFChjdZBEoeR3pN0c2/v8OB/CRt8biKxGdOiQ2AWqW1Ys8gFkPPA7H3KiR8Q3gE569L17nWXhYd+Eb0WXePlHb/H4QC7mwo2t3n/9EWB9+AmRVxtaKCKOR2C8Zz3Uqsp2v9RR3nw0g5iaRXYr77SfcalfSJh0KUjO0kSm+h6OAZb6w/pIDv9iUbdcnwmSkW1Kj1KEPn7cS5xTf97UNeksnVjMwqZET64HlwDqRta6bnQOuxTIzKkO8s2+hHlKaQpWbgRSPtux4J3VPDhI2lrtBVP6BrZOuvBglnOk4QCivUsWgx66AmzSL649vjkYXSvDqjq8jFpsVwpXUXFiEw5EfbyTxCMdIHQeLK0a8SAigplV5k5sQxNtF8Pqry65xtrbAGIvPk5pPj5SbHImxptWUB2mMXsspXQ0l4EHUr6ysoi1FEZE0lTeCgQteSkwzX0hRjYTa18VUuca4uoKACymX+wVOZWnz24KpdqiCk4adYyFQ3GBqc5mIMpj24DdMJiUhvTxvWMwVwGm5R0xORtLOVcFAIskAQBzxx3PikQGAzN9FiclzyUF5iTNxBhQXAQsMhQBxGyf6g9l62SiNMZXgchKXm/1z4AA7OvvVlm0k5IAdY6Z6WdPn0Z4IgyckVac7EkWorUkDOaNKtV0iMlMrnq7zH9tlsJkeJh/NZBMfeBxFwC49jS2zqLrapGmbseNcyvLpx1QDobjI04S9WbK9FyF3MmBi9iU6PmU5gMWwH+bY7DeBKR/NQKfOBMECaovqQLY2tnZ2sZCBI6OlijUn172NiAcDGsX5SBqSskDuFZsAYDcSrIKoR9ZAO/EyKhkKtFiQZS5ZGamf/qpjWtVFcQ2BGIHGXFcCGvMwS4vl6NQKE06lTDuBdZFgLQOXC+MeryVC9q33UuU8DwCXoap9iSFNjqW9IdV2Ryzt7fbATjOTQe3DJ1pORM8GtjLuRgjlHpy6v3jxQgK0CiGM4Eee7YtkKIJZLeYNAXCPbnxalNYf4+9648AG0j6/YWWu2funjvT0t3K5FyMl4hRKZBGb6MXBRiPUfOBo4csgH1Kgq9vRAxfAYw0X51pLJm+a+9aZW9xIdbOAujBnutZPn0uLChMw5mV0+UOzSefYjFArheRmjYEdNqOwZ48KcGDCosv9JQdnrvaONPfI7BYALGxAGIdHftbnj49e/pu1vRZzcTxcywp0CjLcI5CcTXUyNBQxE6jPECOkXrj4+SFlMM9JfUzi9/0QOoE9rF2IXZ2gqaLKS1hQ8yKu1lMZuDE8aEoNqL3mbiyT0NBYNLMZxxEH1oAH8z/sDzknhCvAPYlN5XkVNUv2guuCSA7gJHZipPnTol6mSkpKRYANpLkiSHpxXoNF8j3x57TeO7ebiknT/3Qt+6OUaCkvk1hObaxgmtB9jYQG1sbm9iRiuDTwT3Nd8o5Y2HTrWthJ0me5VGkFaMDBXGWrx1iOu006reCz7BMyPLSQmXoSHqjrZ2gysZ1B2ArmOvuZU6EZVJ6lzmZE5nHWe2MQiMRO1/uBUTlLzOHOJ9sT0RW/7lyagiN8y7l6qkV3U2QY3b2kJAfAbFNrZzHs2uPZ0cdmBMTnHT++UQnT188kqWhcBsY4y1n/82i/obVuz845+ax/atRanCA9+PYOhuBxXobWwsAMtLdffH48bU1jULD4Ux0Y7IJuHiVUpk66lnIcnY7FXxgp6QdLahxxieyFAgWqNLd0e+SQCDws60LsbEJsRtZy8zM7O7uzgzM5DAzvSRoOIxEluCIDkCuNxEeHPzFj2X9r8U1CQPYO6ibl+6dmKp1sbMd9rMNinW1DbFbmA7M7LaoZo56w7ONTkVoNcjNh+8bjqBUYwrcew49byyfr1bm1ubfcXAZHhg+4eI3deKE8+11O1vXOnv3BH66R7YE7oRGa6FQOFgiyb6c6zdc5sW9wxoYHv78eXd+/a288wGGakpiQeJ6uMvNsoRaF6LzgMtw1bWpGzyiukgNB7llt8GNcCjOgxoV/v334ajSO9Qpv3/c7s47ZfVdnjDASeGpJqRGrctUhzvdyzJIKjYpMrz2OhuWTcjL3sS5gaAR0jyfDNXUgPC6i5dC4R+X8MfngG0T2HGi6maRGEdKVOLUZL48n6YkKZEEdp8sY7WdpRLSkPHlLS4nvitjzRMrGS4GRXV521tWPwGs9pP0noUKMVKehiSr4TBhRFolPgKHw+FjsKSaGhpNiKSRTvqdGGyvmTzTc89vyqFQ0cs++PMh632WFCPC4PNAeQQ+Pi5RqD6vwsgjCHiYmFSsVKrdqELVqTMXUk0r2J5rN8NzgUCF8Z2XpjTrVB7Zn6/ECxvQeXgCgYwJuF7emw9HxrETWRFxNHUHPj/ewWACNaNBwedOyjDM+CPWLw+aH7Bh1Jg4GlIYSbsF1oqlq9cDHHppNc4M/lmYNxTEwpLBEiEJWqS9BWUGExk0wu5XJ9U9sD6Vf75p8EJDA07GDoijBWzyGc4+UasFwnkUPlFVrCbEba54isnKCGEuLHu7nr8I4o7sK0voO+k83Jeb6C1zqfXBZbe1XRjkVbKJ7FRW7lYiQcnGyYt9IpH4OB4PtufFrPxi2P6nqUuX/Fxqb1BVq52dN9obbrHDa67k4ZQ4HO9KQAE7DkamkRIHLzC2GIx/eLFw/Hxa/3jApzj8+0E2wzmhvcFU5gc4tnVFKYZDaTUNJl4Nm0aQxhF9GFeuVH5s9bcBVn8soPESqHFRURm1uabIezd5t1M3z+tXCFHhbCG7GM8PlqmE502m/Va/BrA6ymtrwAnZ0uBTFxi8CzyeJSzPUrd4iXHFV/I2YTKfqGAY7q23f2tn2nXILftWABLJWoYFNDhPlbmfxJ4dyigO4F2/slogPeWjIu37e1vb3j/gIvIILL4vvi2XcbvMPSE844L7oHN7Qu11wunI9177HXvj7i/xfBYyz80t2xTX7hNem7s1cCO3oP3UbfJ7R3+5N1quX8pr+44Q3HB5ZEv7imEwhIzagoBK30/3vfz1V3+kVz15951PVT40DyKSEEALOPL+uzuh+/2AHbHe/cH+/R/u/2Cv9cv3X108/1/y5v8A9rDKpj9SMhEAAAAASUVORK5CYII=",
    "16765": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC/VBMVEWgnpNHcEyRmJHZ2NDRzMWYl42ZlIqXkorDv7jFx8HJyMDw7/Lj4t/ExLzR0snX2NLs7uzt8PPf393PzMTRy8SbmI6FiIaJi4aQko+dopywtqnJzMPZ08vb3dfNzsbo5eGGiIWDhISVlo6rqp68v7XTzce6vLDEzL27urCbn5i1u7HGx7/Bwri4tqzWz8jRy8SfnpefopatsaarsKG1tKjTzsbNxr7Qyb+el4yQkYmdn5KmrKGnqJzMx8HJw73OycOAf22am5CZnpSvq6DAvrbAureqoJSjoZiiq6Chppu3sKXEvbXKwbW7vKq9tKq3rp6inZSWmZOzq6DAuanIv629taPLxLizs5/Cxa/IwLiVkoelppi1r5+xr6GsppmurpjTzMatp5mloJOnnI+bkoiNjoaalo2hmozCu7DNya/WzseXjX+Xj4awp5t0dHK8s6hJTE97fXpFREU9PkC+sqiinJCqoZSro5mcl4iWlIaMjX50YlolJSVtbWaNhnp+amEyMzixpZabloSflouVj4erpJBcU01DQTuTm4iem4GSlICTjYCPg3W0qphTXGhbWFZJSUZ3b2aJkoKDfnKFhnCGhnabjX58iHmRiX2kloiOfnOikoKXi3tqZWB9eXNma19veGh2dmmiqIiEjXiIhHt9gWd2dmaxopGlnIlxc2Vya19qYll/e2yZkoF2emWLjXSAgm2JjHuvqpJbWU9ST1FmYFVlWFF2fmpyd2J7gnCTlIGunI5fZ1l7dml/cGWKf26DdGhqdV5mb1t+g2qTpIKHlXZRS0p/kHVyfW96fGRycGGXg3WAinWRlXdiXFNtcFtlalZxdV5kZVqQgHZVUEqJeGttaV13dWJaYVJrbl+NnHyAjG9+iGxVVk5XV0+ed2txWVZrZldgYlVremFVV1BZXlF1dF1vZVughHaDlnhTXUVvfWNQS0VZV0x7iXBbWlB/emd5hGlaV02Bb2FygmZOUkiPinV3fGh2hmxQUUmKk3pFRERYU01OSUNRS0WTAimqAAAA/3RSTlMNAAUZDSFsmr/e7f3////+2sKXbTVD3///////////29//////3/P////////////o/////////6r///////+ZDP/////dVf//////Uf/////////////////3/83////Biv/////////Asr7///+p/////+3////////////////////j/////////9H/////////////////////////////////Pf////////////9d//////////99//////////+d//////////+m////////rf////////////+Y//////+AbP8j+P/////e/7GF/w3H///r6f9UvvTvNstDIybkAAAL30lEQVR4AYyOQwIDQRBFxyyM1Yht3f9q6X34doUPy7K/4LgG59uH99HAD8IoTlJA4iwvyuqjgfduXYdN23b9gIQopFKaYVRU/zZwgvFk0k27fiaAhRCkeE4gFS9K5x+Dcrlab7rNdrc/oGAlSWhFyADH0ykpfxrU50s30Op62+4O97mJF7e9oMeTj7Jsk9QG4Hjdod5hGVaT52nwBgnHTJIWSNG1rDBLOb9b3/3+b8vV9SB5mb/8Is4k8KlHEv/Dr14v8GCmpYulFVALWhZUFKRApH66Ydu2ur6u+oRx/v0/BH74K/nvMhDmOIA61a2gKApkM6EiZ31DzNWNDdXwuKKIH9/+vwRluKSgwuYS1k1QRy1wbRtajkjUT+FcdTaYHXPOWMe/+k+Bt3bbYg/uHxxWldRkXkO91h09D6BQ7I2pBLTnLPa9xPMZ3/2vCuXB0fHJ6Um/RzMpNc006x1Z12u6GwXIjpkihO3Hsc8JY5zt/jvB1+nO6vT4+GwvXODFmim1mWw0rdGddl+IDdVxoGB8Mh844ZyTr/4p8O5P6Xi2ByOcY7kWBObOK4U1icRccQPHngtHESy2ue8N3B+Y8dHb/xB4eHJQPArB4ye4ljMzaLR0e3sma9dFwrWg4yKFKQ5nCvO4b/i+QZ7+XeDZ4vj5i5cpfrJHR72Rpmnm0hwL1wWuDpANI4EchQvRcS+OPWMgMfn1UL7xq8DX5xeX5+fpeUZDmoW5tiMDC109KtwIgNEVCDoCKQMX7lTBSLwJxvR99ZcE18fP0/PZeVZhGubhox25tFARtHsRpe0q2kNwWk2IIrqExUlPksQnhnHzp8Du6qo/307THUzxuFqGeqMtg0fto3YScBEFjoMSIkgnBBkGn/C4S5Le93b/eA9u784busjoiJssPMO57jSgOD0uwIgXSzdy7ws4DOjqauimc0jIEE+zi+MPfhf4+iJL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",
    "16766": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC7lBMVEVHcEz////r5OTm4uLX19f19fX////////r6+vXxMT////////////////////////////////////z8/Pf09Pazs7h2tvq4+P8/Pv9/f3o3d3l5eXy8vL5+fn08vLk3d318vLd0ND////////7+/v////////////////////7+/vz7u7////////9/f3MwcH8/Pz4+Pjl4eHNxMT39vbk3tz39PTs4+P29PPf2Nfu6ent6ujOw8H9/f3////////////8/Pv5+vm7qKjd0tL////h1dbKv7/u6Of39/fd0tLUx8f69vbt5eXYxsb19fX5+Pjw6urQxMTa0dHh3NvXzc3q5OT////z7u3Br6ze09Pd1tbw6urg0dPm3d3YzMzx7+3////49vb9/fzz8fD08fL+/f739fX6+fjw7Ovm3t7v6+rx7u7s5+br5OTz7+/7+vr8+/r49/bu6uno4uLi2tnm4eDy7u729fTp5OP18/Ly7+728/P7/Pzs6Ojd09P5+Pj18vLt6enj29vw7e3p4+Pv6+vl39/x7ezr5+fn39/08PDu6ejTxcXv7Ovc0tLr5ubb0dD59/bg1tXr5uTh19fZy8v5+Pfl3N3f19f29fXp4uHe1dTo4eDaz8/f1tb08vH6+vn+///j3Nzh2djk3t3h2Njp5OXq4+Lk3Nzd1NT18vHZzc3WyMjWysry8O/t6OnSw8P7+/vf1NPs6ejd0dHn4eL39fTx7+7w6en39PPo3+Du6uvZzs7j29rl3tzk2tr7+/ru6Ofy8PDc0dHt5ube1tbXysni2NjNvbz9/v7z8vLQwcHWycns5+Xy7e3j2dnWx8fw7O3azs/j2tvx7Ozu5+jcz8708/HPwL/r5OPh2tn59/jt5eXn4uH39/fg1NTWy8vLubrJt7b//v729fLx8PD18/TTx8fVxcTp5OLx7e739/XPvLvx6+v9+/vi1tbFsLHl4N3k29338/Pv7u3z8e/s6er5+vjn4uMScgJRAAAAYXRSTlMABqZIDRwCDQ0NaJ02Meo7cMaVK1hq7SXcmhcKP1h7YmqlvX5BtvLPJF3fmhE+h7Z5TT1O+KPCceyzqZOZg+friePhW9rv3nDlR+Wu1vI7uebfwPbHzdP32kf4ceCNrrGGt2EIuwAACsZJREFUeNql12WUJNUZBuCBZVkkuBMIRJCEhBjE3d3d3/Kqdnd39x53d3f3mXV3X9wl+i/dvQ0MLNkDJ0//6arT9daVPvd+t2RLyUVccufmzR+95GK/2PI/A2666uobbv/cIxPEbz/3u8/ccdWD7y7guoc+cooE10vLWcWA41QpA8vtN77nnQZccv1HSnkVpcDjpyiBNpoU9RQT4hWgvnXL5W8TcOVbb11/P7idKqNMAT2pl/C75ESDqbQ+Wq+oOSa59ZYLAy57843vX2tWYEJshrIUSnsvaRxrsNNuBsqkVEuBHvzGxy4ecGmQt/Y91muSw8+Cq5M1KBUHnGMkAIWgBIMyM+64SMBtP6s4kwIdl+rMKkHK7RKXyol6c/gwcpIZaqdG6ZcAt29+U8AVb1xsqrENSDVeMEkOneqjy5MhcENaXaeMIhUkt5oJG1iU8c+W4a63n4UPaxMC1UAesVGyxx9f1kbHF8o8/3aLj1YfHhMtL4x2xTm+rm9kiD+YfPHTrz90xRsBN8/VJunEoizrC3jBeTVtSZ3VSik51C3wTrpttX3udEuPZqgiLH5Gtf/TF7ZgU+Q/y+1mwjfjmmeNgFkHVlKqXKjHPFm3RjXs3t68PRbLzjylntUeNp8Of+qtLbjtEWuX5h8yMqo6xCqVUIhpmShMqXQK03PcOB1aXqsmYGufabK1RAMw7zlx650lBVfmPgW/Lms/ZJVH9fK9qwzrgF2QykIsXz0qSdUdDNUfDmZ8I4wkgwaPRiMgNfyi9zMlBZcVp/Hh9NLToQF5KOPIpsCayM5KEWGo9FtpQjQoRb3fsdITkYs0QKAlkxo8YoJI/b6N0/iTVUuo2yNtPBRrHDTUNRjTIp3eXjHuEcsrzDoVoYwOjckyA6lmmN0cOnuaSo2+aOVNG8bgFwegcA5phX1llUseXVKhVOmBrXZ9CHaHUnY0uk22awLW8gWfB6AotLZ4JYr05wtdKATcvCaGtk/iB2z7g7MiOSfxEPP0AT9d2ZeUG8X6+V4zoaaUvpYORt7MA0lfe2WDWtj0+jT+6qjck404yVZPbJWrj9eJ0ny4jfdC6dKMiReoedovgrirrKcJe30J+1SkTT14kGkV/fS1Lnyy0uh2abTtNStVz8+ySlF4GbxOJ7IoS0OvNkYVpbzMEVLwvvIdYe54IP1kIjuYlkwafQQ+lpvGfMAXXG7tyDZx5GxTeTWGbSLpcbQ5HBneJDObAiTqekO8nnbGG20suB5PV+22Ke9ET5NQp3z0fBc2/6GxtLYmEDm7p/tcC1GeMCVh0NFlxHOSyUmjHYzp8VHJP7lUNshDubKvOt5OWJxC2fBacPjWywpduOecSr1+ZL37peX+7TEGVHre2IrOBZhUMoq2AATD5R4dzroIqHfMDZxMuKgKIdUWVBtiN+cC3lvyhUri5XPr289lW2wWgJT1Va806/UL4VKAZIAGJQgHKHXNCNiewZVIAkC4eWhRqNKTd+QeLyn5U/zsy9mw7chs6oyDiUX6NWGpy5VqQpGcgILSk40dRlR2N9dUmbFXFJ0q79ijEWp/U5JbZjc3WyNHWHGT1ULZRZqgHwxAGvvLt5HI2+rQhVTieXnZDj9TJjQm4uX9Ow00I9h1RsPkcv5/vMmKiVpDbUwza4FcgaK95bHmejAv1g1RtLSyknBqTe7aRMBJQdSVlnBcJcDqIM/vFbdEYEvwrFrqtGCDgSeq1AO9Ere42iDTtRmOPeGqcWn7Bhvw9z3eMHgpQBPYf08u4M8n/5lxNZxM2/EWrFbi97slITHNqjR88ClXhghmGLBrASsMvYxiYK/0zPvyK3nGJ+0RVLhQvIvvVRMw8ebw7pH+lsS0xKlr65zLntjGxBneYHTGI1/MBfzl7I6AlkPBY49hA+FZh0rsD6sOyJ7r6E/YXDXt1fTptef759qw1Klv9xi12ffnAj7/zEoUBeQLOrcRb3AZwevqwOgq7N3dTbOaEeXq+K74dr7lUEWqZjefro2k8gF/HWJxHpXKcqJFgMR5fTOQ9RpDo6VEcPjMiKlajkm31iHWS2ekwxEJNVf70lA+4FELito76zoscTthKI6nqcsBsYyzeCUjta1jMT0jNdIjtbNjYuV49qV49PQLa8Ev5QJuRJFdXQWJBGoR/ez5a9tsJ56kGcuKNrdfNfZUBwRIDGTTer+Zq6mtEhKTgutvuYBPoGjvItWhaIDuIFTII51WEvkmdFQLQdLQGNQDciOg2q5Zbk8sqcuytdp7cwF3o4gJkE4R8qbcyKtM8IDSoHMJh0WnV09E/4HzxB3rntRg8+7BfdO/zxdDeM18nwIFikD+S/LstFUJUPMwV9UMP31oa/n5eHPItNRYHprdI2t5qrBR34/z7PboK2TxHTqQEPefEPZvBeGUHbOa9arydLAwXbSBgeb5oEXIdrb9IF8RlXygGBBQIxxCQdLEaiplkoRh2kUa0lUiqKzG8vK0EgDRSgInXlYznvJM4w9z68GWkg8WA0i/R8QgT0972EMRlaxMenj7uuAmwyOAwxZvNgNMaz7Fu89Tq91f88xnC2viNSh6bNGw4gYGhigF9680AUCtCqR1airprYdfD+kBgDYhRzojXnd11ahuO7+s34DX6TvirJqwMNCn5ACm5zg9xtwmcm9Fp2Wxqg2gJ5Aj8dqWvN3Mx4sby/V4g7w15qCPATA5c29NRPkW9Mkply8SmKrJSgGRQp6kvZXstOxgP31PcWPZ8lVsYPR1T+STRmwSMbzqHeNPoHq1Qu6JNnuiql67vcIZecoG7ejczM8vL7YgN4wb7Q8ir8lHOuCwdcV7d84mgWRVJzPh6aDVFd5XI7sQE1uT380XGIWAj16LDSZo5BCJ8oFWhs0Izc/Y2ehxCM1m57CgPqmxBWRHWevMvtHvXF4MyLkKr7OwMkFCECd9nFYKMuYqW7UZMaBTN6NFq3l6MtU2vN7ErFTxM45vbqyRPoAifezpPUHrYtWZCkDqbbcFgl3DKgv0hgpVGVyG9ox/2mbBkR5b48ffVKU9yKBAUuOfXMslRP0UsXNJ0wp+rr61vCdQKhojLCrflCYSidmhjWm7fnznm8u8DyNPdC5ltiC8XiUW7Vx0io5NQS2AGK/VkvVOdkrLUezavnFp9Zg36/vkWwvNrxFPGqlIhlMAOF41bQgIgD6Q1r4AyP9eFsBWQaPxid1st2ipu0+yu1BiFQex6NIWwtvvAC3jve6qakljK02igRKLJwS3brKp8ZTkgCymHSV2GLZuX9r9peJDxRqpmECVBh00G1PvalU5YNI2GWQKEPt2N027EzbrcbfP2gfO+UQHwaUfKrkgIO9qkctIWTxO+dQUBcCdcsWl3TvGt/m28aVKCUsSwEKHnKaQ304u7EJ+eVS7g1vjByFjYWa2qnTVvp4ZziSRmgAQVjmpV5VK24CrSoqKg7jBXb+UWgzhUZPTIMVonXjHdAxPtnhYCjl2kZeWg637dn5HvrAFRZdcqifr3ZpMWAGLtat7TgxisGLbK37kMCRyrs79gS9owUbX/cgMsdO0U8RJffvHAUUIDUMCih645h2cGzc9AHLUXGE1Ldp0KJDHUXDDh97hyfU9V18LOPxGjwYFjAXAV2685t2cnT/08H3fCyX9SukpbheNr9/35evezdm5aPNdd9/7x8/ee/enNl/89P5/2fJf8iP9b6jI534AAAAASUVORK5CYII=",
    "16768": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC9FBMVEVbse1HcExjgrNInNxAr/pCpetEp/I7qfk/qvg8p/tOsPVDqvdDqvpGrfhJsPdMs/dOt/NStfhRtflSufZGqu5UuvNYu/ZZu/JevPJqv/F7wuyWyOe83OuczOiKyu5zvuprvO1txPKozeV8u+Su1OqPw+Z2uuZwuunV5u57vehxt+WAv+eGwOZ6ueGOx+iyrK2gzOiGvuNjruRktOZcqOFNoOFKmNhjsuhbr+dXq+dNo+tEks9CjMg8hMBEh71Agrc/grpTi7c/e7BBe6Y8iMNCgbBLiLRJg69LfaJBdJ5CdZVWhaVMhapjkLlgiqtKco08cI9DbIhUeIxVfI1KeJNhdYtyiJ5rgIiDj5qjpKKBlqp1kr1fmN1SnepKmuqTmJufq7eSn66Dn7uIobJlgZ11kqpUdpa3pJuSo8SjrMunjry1mr68mbbSgolcd3lYb3u8vcGyrq/IrqxAZnVseHp1f3yHhHejin+wlovVqo7Vj4rcnZvppazRoZZScoEwXpJ3h4SNjYOlnZGRk43ZupnHlZ3ChpHEi5WmjpWWl42deniPaWpqamejcHu7gYrIiIfMi43FgoS7eoKyZXCmYG24cXe7aHK/a3y1dIereHlrdng6VltTZ2aXVl+hW2GrbHGtXmTBhoqydHmxc22qZWSwX13Ml4y9eniQSVD4y7ftw7jqzc++i3qeT1mXUFbJgn3PiYjOhoLDiIjEmoLEd3HDb2i7YFekUE20ZWOoWVvWk5LTiqOSSj62ZF2qWVSqTkSgRj26a2ewYl3HfJ/NgaTQhXu+aWKYRkWOQj2aT0yfVFOyaWW0a2nPf5fHaW+7cm3FfXfdqJDMfHWrYFvCeKPKfJzDXlerSD7GgbKtWVKzXFOYTFKrVUujT0bZiIDCc2zFrZK0TD6zVUrDaVvXenq1SDerSDudPjLXc2Pgd2u1Vk2rPy7MeG3geGu/STe3RDDLb2PngXKMMyy2WU7id2rfoIDQknOYR0e4XlCuYlrHRSy3SDV/yBAcAAAA/HRSTlMNAAcWIWybw+P8Qv/////////d/2D//////////////+vN///////Eh/////95Si/Asv+y////////////////7f///0qi////////4P///////9P/////////////////////////////////Vo3//////////////////4yp/////////////6v///////////////////+frf////////////+v////lf/////+////dP///////////Vn//////////////////////x7///////+0DXL/Lf/H////////////6f///9+I///+///////Jsf//nj/k/6r085RBAAAI8ElEQVR4AZSNBQKDMBTFcP7qpX7/i+79uUuqGyR0Xf+BYZymcfj0Rvc2MM3LSrQDROsyT/8FxEI7yUNKpaTinRbxa2CYSbHH6w6afwrMRxnzIYB/aP4aEHT7ZX3YThhMQ+JzYNGn93EaycoVC5y1y4fARBDYedC8P+2e2aZ3AXF83fDgy60FQjhuwYvXgXiRMIEDOJIP8NItWbwKxKOAFdh4cEop2FzIR8RzQEAIvFJOvBcM3vh1yK7WWlJrLjtXgHgM7Mkaz4QIYhAK2/7bWwgTDQlrgO33v5swY/elUt7HRVjCGVpMobD5df+UHPF4BRnTNJWUysv5H8Dr49Ws+/vwPDzNgMXt1zPmKU1YqebWam3YefUb8JZzS+V5aq1lhCExJJXynMrThKl0UERoFdCsY0OoYOufgE2GYLfAI0BfZGYVADC+7M5O/hHr0Mn8bH8Adq0pY6vRC93U3MF+Y3gi8pBEyMiMhPz15P4bsDEhPYgOb2Jice8QdY4pi0dKwx+moYOJ/OOJobr5AqxEJIrCEmL2IGLmMoY/LqL5o+rc+XL28ROwKf8lvLyOcKkrhThGFTm88zBXBwjEMABAcftmkZNG6vtPRYx79UbWfd0TfKLBhkiKifTGcrJvdooVEdddpJQgwd/DG1yTyLbZ7uBQisxSa2utmh7GPFmDb6lF6KZ5uvUqWvO00X88kAVCwDAMRXG7Edp5stXL3O5/DH6wV288OTZVKNmKosSSU6jg4OqyVm9vStQaaohEhUBBeQNNUkUpcPtHJxs+ylJzfXmFFhjKrXNO/8CIoJ3Lc3wxs1gIXrbwTRR88j7Fz8tLtKBn/rHUhFCIX3ZtL3R97zF+8bBNaRhHXRBCWps3TX4BB9W7Iu7/A7Qd3PsuxB4n+N5SSj5N87Ju+74fx/HycgJcnuDgttF9QEp9GtdxXL84HIvEBmIABv4lP+mpzDUEzVQK45Ih+Ou6K52lGUK6lFHGKRRCsp5UCkr9/C9NTLdvnbPWfX5+frX5/skHv+M3gJBUPTZhbDozBGLCrKWUuc6EWi6enjiEb+P5eDFeLlfrzXq93e2Ksk2VD+r5HOGeEJRhDCEAsmlemyuoHOQdx6CU4A0svQ+x2yXEj31KwcQQY9xsNqY9QGTKH/u5N1JqrV+lzDdAwh4G4zHyyC99jGa2Lw6H4+mQBc7nM04hpODDJR9cookEIzQfjxcpzqb4j+Rx0HEoiMLwWy7Chg1rN6h1PWcuimFtuw+3c7NfNDjnx3cmm4mrS0i119N0w7RsBwFgcD3X9wEgaCGjE412zL4SGMSHipFiqOeymZGe+40WlE9PI5S5ANxDIS4SpokkgO8CxpQYcjzhfBoKZOu1WjWf03VdCWUKheJs7oLnAccSOU7bRGar3W7+U25KzKQQhoEYWRAaJliuVut1KhmJRJL1am8zx3i74wrw9ofjfo6CwDTNVkuoHs22KZGwbeS6mDK2scRJCZzOhc5vIpFIzZzL9XbfbqnafvDnEx6cY8xQuyWs1+tlO3MkmfWyGCHb7fjcbL7f71Dgo1dz+dlfKeXB3CYSxfHZT5Qvdn2qYW5a2tS4pF8hOYtYnhtJQIQA4VB2bRUkYhRwGgdCxZF0Bllyt9Mf9vVefuplf7z3f7Ob1XTDhNX5MgACjDFhri0uzs/PCyqtLixmry/O8/zsIpNn2DxTnJlbXQM+BMG5XKWq12r1mmUVloHGmaRpX5+fn6N4nqIE9tqdzLxKU9chPTt7N5+doR8+XHkIrIMAFWpWHqpimHwhDxe3b9iA05qHpbTKz85nm8w8rVLqIsOwrG3LbPHRytraygrcVxCC8+BeninfVZrwIAoWXRdnsi1KPeU6m4VJXKFplabZr6/Z2GMyuRl6Y2M1ZW31MZwHT9DTBuCVG2UFK4qGdfayI1A8xWXZQjk7C/l9A0GozvJVhW3arHPhs2cpa+nTffQEBM8LDAu/NQnRCKkS/eKCSwtE1lkmQ6k8Lwhwp/jCNUJsxyF+8bONU1ahjPVTAfquoUhVTfM1TQuC8MqlaluTScRDagLHCRUegqTtgu3hKFI8P9dZ3TgDOjgTPO0asrUMfZSbWuhdvN6TG7PQNi/A2GZnWxw3p3LWHUfBpaja72U6/OYp7c0PfxA8eTGoLVtWQ5ebSi+7UB5aKr3E83OC0G5DC9ysIJS/XnBwSXSknp+7MLM5OuV79IMAbXXjOK4XFC9bHVy6EQetSuImSSXtv1IRIAGxzkZEiaKSounOzEx7NB6Nx6P7PwqghO3JZFCrWfIAXxnEHJUk02mScAI/t0SBQXXqzSqO3Ejzu1K1WEzG4/HOGAo4EwBPt4GuEe7WORz3xGm6vi/1XYGnhHQKloU1DabsG0apVOy405QPfyFAe6lhMtz1OCOWKiNYX3HdCger4UE5NSfSCSE60TAhxc7SJhSwj34peL7d3Z50w7ivNodxr5+40ySND5id5fimh7EWOQ7Gthh5uQtL7Z2d8fqvBOiBdOPWxrOb2323pQ13B/3RqE2BoAVD5LMe9nTStDFuOjabKR4cPNoZQwO/EqAtmbl27Zo5GUzblGjuDiWx1WqlI+Bp28IYO4qCnQi22Wzx4JD1nqLfCtBRKIf13Z4TVRMqazvmkFGpdE/RKnTgiGJLjESHbRImN/PIPkK/F6B7urdrkiiJWN39lo5DkapwnCtyuG55hGgK8Ro1OQjquQsXbqM/EqCj3V0x6ZckH5eo/tCS4ZAJrTCQQznoBT3D6AW+5AdmpvM5+mMBejpyq6KnVTXdJIqXopuB7xFMSpsQI8EYfszm7qM/E6Dj0PAD3Q/j7rSfbtDGcBLHw6FcjyK5YUFNha/lk3PozwUQBCQ1leJuoumWZdUnLydxN9B1x/Ml3TACUob4/lKAjk9a7uDlbj2smWE4fPkyjo2GDG1oxPd9ae85+jsBKPYmL4emYRqhGb/cNrpBw0+RNG3vGKF/IADFqxeDgWmak5cvJ4akeX51KvknW3D1fyhIHVuvXkxA0A0DzQ5O7m2lF/83gpT14wdPgQfH6wj4c8H/4sl70xK3SSwsuHYAAAAASUVORK5CYII=",
    "16769": "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",
    "16772": "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",
    "16773": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC+lBMVEXo6uxHcEzU2+Hm5vLk5evs7fTi5urp7PDv8PLq7fHo7O/t7vHm6e7h5enf5evg5Orb4efl6Oza3uXp7PDu8fTv8PTt7/Lt7vLr7/Pq7vDo6/Dk6O3j5+zh5urd4ujZ3uXW2+Hh5ert7/Pv8vbt8vXv8fTs8fPr7vLo7PDo6u/j5uvg5Ond5Ovh5uzx8fPw8vTw8/bq7fDk6Ov////o6+7v8PXy8vXy8vTx8vbw8fXh5uzm6Orr7O7u7/Pw8PXy8/bu7/Pu8fPu7/H09PXz9ffy8/fy8/Xy8vfx8vTz8/Tv8PPx8fPv8PHv8fPx8fTw8ffz8/Pu7/L09PTx8vfx8fDy8vLu7/Dn6+7q6urr6+vv7+/T09Ht7e329vb39/f09ff29vfo6Ojk5OXs7PDm5+re3+T5+frs7fHn5+vl5uXp6+7j5Oji4uLe3t7q6+/n6ezk5eng4eXd3+Dp6u3f4ubd4OTY2NjY2dvT1Njf4OLa3eLV1tXR0tTKzM/P0NLDxsvHycu+wcj29/nj5eno6ezd4eXY3OHP09fa2tnc3Ny9v8XX3OLb3uPg4+f09fnW2+HU2d/U2N3X2uDT2eK8vb7j4+fW2t7Z3ODR19/P1t7z8/PS2N/N1Nzg4OD7/PzR19zExMTCwsLAwsCusriysrG4ubqsray5vcaipa6np6aYmZiam5uhoaDj5OeysrGcnZ6NjIunqq+nq7S1uL62usK5vcOXmJ+xr66goqKepK6Umqicoq+hp7KgprCtsbqHjpaWm6WjpqiRlp6OlKCIjpLM0df///+5rLK1qaNvd3zqybXVuqp+gYaHipLYv7Gqrrfk6e6CgX9eb3S+xc7GzdXQ1NrDytPr18mlq7assLmvs7yxtb6jqbOaoK2XnqmcoqyYnquVnKiSmKWorrmWnauepLGus7+inaGUmqWRl6KQlqSOlKOLkaCDiZmRmKa0uMG8wMaHjZx+hZWzt7+zt8C0uMG9wcausrqPk6OxtL2aoa6XnamhprOzucFTAZaiAAAA/nRSTlMNAAUUGyVom8Hd7Pf///7v27adPd///////////////5Q1cv/////////////c//////8NS+r//////+Gp5v////9a///////////N/4f///////////+5////DP///////////1v//////9P///////9H/////////////////////////4Ko////////////////////////sf//qP//lf96WP////8s//3//+W7/////////w2F/////////y/K/2z/////Dev/ff8N7b7///xe/////////////////////////3mt////////mP+e//9CsTjWzkHo5YMebZu0dtoAAAqASURBVHgBlNDVfuwgEIDxdSX17Akh5AgEW3emum7v/0CHpFf1dq7h//tmcrn8J1MolkrFwmcvch8C5Uq1Vm80kXd2fnF5VSn/DLiu3vitX0GAw5BENI7j3/HFn7/fBQr/bhhPmJBSqlBp47XbcdxpU9qtFL4D/Gv2+gOWcC5bEuOhHlGPtjs0iqjXPq+8fj1+DUyms/mMWQuct6QbrDSJDL2l9DYy3q25u/4cuOeQzAcpwJgvhGsYhlojTQyNiA6RVqr6CVB+4Bweoc8A4Mn6DPzFQg7VcKg0IoToIcYYRd3SR8CEC8Hd+ssBgH16sq7j0U8BpdwiBDlAqohSc/3+EVdCCOCDQXpDa9eb7XYLrgHjDEA6CwiJRymdvAespBTcrQ693YDtn9abzWbrGhYBdqNcBk5vOkTGpMJbYBIEgQDgAAdrZ7Mn9z9rWEg3OP0qZeCLwPUgRKLr10C5uVgsUoAdZgc7O2bAxhUI+TytxcJPIEkA4CQxahRfAf+pJgvmtoEgCpeZW43cwZJp4MpXB0+p7JuTu00l1ZYZpDC4HPr3fXvhZxDt+2ZJX/LkOXU8Nq/RQbSQCbYJ1l4oOPO4jyeseS9XvHEe8FUIwszy+UWhp75VkHuVxQCXATnPmbKj0bXKFMspvDgLeByKBapH0ZRhyRoI7FcKoZ7j5J7mHAuoKQU/p4I1fX4GcCMOKSIiYwQAWgHA4l2w4XVvyvq+H9pxA6/Jw1PA50aj2XTdREBGV5VW7EY4Yo8y5lOQIAY4ALwtfTgB3GhQo0FRYv1Ka1WtyYoKKojVGj8zdUI6PsOKl1vHgA9EAAiXqL5glIoBUEJKwTPRLGMChXJOyuAciljPx0eA2XYH6gpCBoH2fQXljbYFMUFqvqWVkpU8CpySFQC8t+U71xnQu3jldr/f73Ta3QFrOIyV8m0rDRMgWEfj8XhURS4AmdGI++G8vXP/ggVc6wDQbaYZ+30AfLayjc1IQR0BYNb8VTqPoshdWl6xgNm0DQRl6WoM++ogHGD8QijIt/EMGI7gZ0IAPAkoidbWH13soQUzaZp2Ov20E2yk/jhshjEAUgca2wwbG/3xyIcbGb1WvhaUkIjctc31LTTh4hX4kUO73e1uZ2F/0h0GWuenpJA8QV9VLQF+k5dY1vwnIkp+rK1t/lz/9fsCAH82smxjI9tIm6txvDpoDFCFDuSiyHtuHalKpaUdLHletFROKEkSb+lO+e+7u/92ngNwbXd3d2+bGft7k4PtdrvT7QrUqkNa+09kWbgn7p8BfNx8I/OQU35nSMIZmcFOyLPBhCknPNd7unE0GUl5IIGR0BJcsitHUqTo6Mq60Z67u7vr37Mvpy8u+Xxff18acemAK7fAlm26PyAIaeSoCEtG/AiLQxQDCeLfAWB5PBEIxEZHR2PJVGI8lc4ks2M5oCbhctEsQMAuJ0ITMELTNArx4TxGhZgCbtJK+ZAg/hMA9sQTAwUmioExMRYYSSTTe/2ePwxOJxAWRVlObSb9BY7jIrhWEEslURZ4XuIV6QtJLi0fAJKpVDxaDAZHMplkYnwslZYn3ev+QCNA/DiOYxh4QNAyTCqVJLFcqVZqoixLvFAul6d+AADfH/KO7BwN7BweytSB/qlkw0G63WYWVUfAuSEID1FYPp+H+GZFlGutWq1WrQFplSrtTmcPAPzrLzt27Nj+h+Ht3uhIIDAUTJCknyVZlMM5imIUGWqEKIZSeLHZrDbBleClC66tdqaBDAD/Hhkd8Q7tGhoOtHx//dVMsGlj/RE/SRYiLEcxeV5RFAgSSnKtCrRvVqvVbrvX60z3egPAwAf/mc0AKe4YHskkWkF5PGwl2cgQyxYKHFXwMwwFKYJYa9aABoJc6XWAVHrdSq9XKXe7gyj8d3Z2tl6vT2z37k2PjY8nEwiJ0myBYwaLAQSFQpLQalYqFWB7K1buAO3b3QpANJuiKH8NAP7Xn+v3+/Ozu7z7kiAaGTHnJFzgZAYLKfzAAF5857QmMKHZbQPPTXWnur2KJDTL4j8AYP+B+QNAZodjmVQiPpHEcr9d52ZRivMzjXCoIUmSAAitVrVSLle6HeC79lSnU1JwhhfkrwCA6uChw4cPH+x7i7ODjEjjPrfLTZIkQg4xPN9ohMMKXwIEURa/AIB2u9sFGpQ4kvZTR0A1LlAdnT947ODxeW/xxMlTp8+cPpOktiAk7XSTLKUIoQLVaOSlVq0Fck/6otuZmvqiVNZ+IfjX/Yz2bwL94KzqXH/+PACMFi9cvHTh8pWrVZKJuAepz4VjFEsjJBOiwqJsymN5vtxul7SmJWqTiNrWOZGVqi8BwLVD8wfOH+wHiqdOnTmzN1vwMeECgSAkG1IglgaNg2VCjUaDYV0uFpe++ALXbSCMpjwMw9avvgOorh86duN8PxgdVyhQ/DozyakJ2qkjORQGfcVJsEo4poRIy26Pw+JkzTawQGmMasS65Ruq94Cbt27fPjQXKN75goEdsEGD0It0W0DbhQfN0AYbWEUQpAbpmZy0260b7vqsDotx2WIL7PraB8C9+8cfHKsHi3e0fgSmYQRnYctgMjs8NvvkbzgTDmGYCbc6wHd22nzXt81uUys0DH9zwQeA6uGj4zfq0YkWi+Q0uNMcIay23ZN2m8f+G4tFt9SEmTDUbAUD20o4aHImBxOGJShQEwz4D4DHT46dmItGY1ZzjlVwjgDNOGe35zwErdEgBg2H59VOhx3sSzSCOu/qUA+MGgjiRws+AoAXbpyYi8fHl2C/NZhMDJz7m21mPQs2RRxXI/AWM45D7M+seoJGjUuNd5Ff5GbWIxrdL1WfAaqnB57FJ1rKMp8H41H9BgvsI0xmJIfJWtxpJTGtbFqCgi3rucaI3dVLG2bMy7jvf9hQHr97vfbiUDTYfG4GPsCN+g0O2KdbutA+o1+z5rl+4Xe0a8Ar+nzxwud23bL1Jsg+Y9R+9ysfNtUBAMjLA6Pe9KvXyfSdN3fu3Om9qVV7b970Xr9++/b121dA3t6Zfv160Aamo3e+KAwrX/zk/6WQRbbcOhCGj9663k6yk7CnWUbIGau5DWEGhSO0wHaDpG5d5ntOFGb+RKP/q1LF0KcvRAavjqV5jhGhBBaQMUr5SFRSKD2OGJ1lKsN11rRQiLymk/ex2+87iEzPJ7RkDBFUFCi+Ugpd6aqazW00CG0a1Y6vO+P8wjdL8J7+JwH4/wRL0i4rCYIlDaXUM2OMjrc1USCarG2b6zG+cHYJPgn64CMrIekGylFIQ1mi6vrczOd+Zq7Hoq7BedFmjVtdrK2uxvwnwRHwiUlgBCLWTdMu4dX161pba+xYG7/qWhwbsM7Z1bVr4EcCsE4JS58lZ3qh5FLOV72deW99THmVicZZ7VcfXgY/FoD/NnpJcupUl1IIYT5bNWJsnFOtuj5vW20bs/jU/nvBbfAlm1u9ELoligKcG42LgsO65u46r7OxuPKp/Kchfs36NguIcAjVbF7lqKQEKzkWuFBXdgD4tSCyubKLUInkTI5GnOKZVULne8tLAPymILI+2NhlJcI153LV7033N8F3eRCH+EMO1s8dRs7tHIDIjwX/RP81LAPF3mS77G4AAAAASUVORK5CYII=",
    "16777": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC+lBMVEX///9HcEz4+Pj////////////8/Pz9/f39/f38/Pz8/Pz8/Pz9/f38/Pz8/Pz9/f36+vr6+vr7+/v4+Pj29vb7+/v+/v79/f37+/v////6+vr7+/v6+vr5+fn////4+Pj8/Pz6+vr5+fn4+Pj39/f8/Pz////4+Pj8/Pz7+/v7+/v9/f3////4+Pj////8/Pz7+/v8/Pz8/Pz9/f36+vr////9/f3////////8/Pz09PT19fX9/f3j4+Pi4uLr6+vu7u7s7Ozt7e3q6urm5ubh4eHT09Pd3d3V1dXS0tLe3t7k5OTg4ODR0dHw8PDy8vLY2NjX19fl5eXo6Ojb29vU1NT9/f3a2trZ2dnW1tbMzMzPz8/AwMC6urq7u7vHx8fExMTJycnCwsLOzs7Nzc3c3NzQ0NCxsbG5ubn////n5+fp6en29vbf39/Ly8uysrLz8/PGxsbIyMj////x8fH///+9vb24uLi1tbW3t7e0tLTv7++vr6/9/f38/Pz9/f39/f36+vr19fX29vbv7+/09PSrq6uoqKilpaXs7Oz39/ehoaGLi4uQkJCJiYmNjY2RkZGVlZXp6emfn5+Hh4ejo6O8vLySkpKMjIzz8/Pw8PCgoKB7e3uEhITn5+fz8/N4eHh8fHyCgoLp6enw8PB+fn6BgYGcnJzw8PDu7u6enp5gYGDm5ub19fV1dXVxcXHh4eHs7OykpKSGhobW1tbW1tbp6emnp6fW1tbz8/Pq6uqWlpatra3z8/Pf39+ZmZmurq7Hx8fm5OXY19jo6OjS0tKzs7Ph4OHV1NSYmJjX19e9vb3a2trZ2NlJSUlNTU3x8fFtbW339/doaGhSUlJcXFxvb2/7+/tnZ2daWlqUlJTl5eXj4+NhYWHLy8t0dHSkpKSZmZl6enqqqqrMzMzFxcWZmZm9vb23t7d/f3+5ubmdnZ2MjIyysrKgoKCgoKDX19eSkpLm5ubm5ube3t7n5+fk5OTq6uro6Ojr6+vp6end3d3m5ubn5+cK8FFrAAAA/nRSTlMNAAYUHCdoncPb7Pj999qaZiM7mN////+UOHDf//8C8+9G6v//4Tyk/+ZKP1xQWk33zcGHeS+yV//H//+5/////////////////////////////////6n///////////////////////8a////////////Dv8K/////////9NfjX6worOosf///6Wo/////////5r///////+Gev///2pW////Ryz///8a8f//5bv//64N//9yDTT/Jse6//9g6///ff//6t4F////Ww2+/////P/y/////4n///+Zqf+f/5J4bD/27zWqnQI71s8ySc7HQpznlkCHt7WDOh5ZcXA5pFcAAAmSSURBVHgBlJMFomoxDERxd+gM7tLPf67Y/tf1bghcw6feJqceiUSvKBZPJOKxaxaRi4BkKp3J5vKFQjFXypQr1ccAtXrDgARAUhKRbbbuBcTanW63JwCfBFdK9e8BtAe9Xq+r/roKLx+mbgJG48m0Z4w3MbQEVbP5dcDCmdvqfDgAAAWA2lW+Akj+o8pq1Jorq52dxCXA0jqiFZFSodbcXGXw/zzgiWIWmM4poE0ptEPS8znAy2HcA9hgm9YbeT0FjOjJ27DHDOJZCwOqb/TsgtWzHbl4CPDuHpqmw4wiak3XriNO8REEfPKmwKC+/IA53ccSNvdeIoI0fPsAH8TRCOcAcOHw/sePB/iVNlarFYCVRMKTDkESsdojtJdLF7DeQ8102utttiuQK4VBsxWM6fWmG7OixUraEojdEfDHZll4R27ccTybMqNWAam0eq8qP+486YkZdoRbae31nXd9cq6S9qxzFceJymA7x8wYZmYsN8xMf0vHUO480OBnfvPVd+AHq6EBhuMFQZRkRdV0w7Rsx+XtLg8l0eN9PwiVSBFD3vLjnq1yIe96CPGdDcCP0JSerPluYqV9a8Lqm5OWOZgabOpv1qeHo836cMYcbbGsiS1pNotKlw22drWUAvjH1gE//hQCiHkB5XRyVh91WaZkO2C8dSYJiXBy25wJqo402TW3z1csS1CkMDXo2ZVcAvyTP1kDfJ5GABhBJrKKpD9hsbUs5ow7MLmU8p1gEHhQ9rl8y7YuFGSp9uwtQ60vKQwS9IcIcDlaAQIUmpKPR8nMwmih3zN1XZ+5Ym6zbk6MFqcm9J45nO1dOT3oBTPdvq8Prpp0ar4Gq4fL5UiCS5E7gcwrohiY9mZDlUUoNWI+MWiqnBcXJpmm8YSxtVVTGjGTYEX0f5pjzWoE9M9aX0ESrHobiFEj5UUnGipg/adTXAxAp2mnEKyl8SaOBqRCo6w8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",
    "16778": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAADAFBMVEVHcExBdZTMzMf///+doJre3tG3urZMXF65u7P///319fL///68vrg4Wmowb5P39/b///+9vbi5taxNUE/X19RjZGL///////+7u7j////NzciSjYZJU1VFbYOwtbSBgHw6Q0QxdJyoqKErLCexs6z////b29n////Dw764uLP///9cYlwsNDr9/fz7+/p2cW3///9obWe1tatmgI79/f3h4Nv+/vj///////////////8ucpkucpnX2NLb2tOSkon7+/q7vbaNi4YcZYoxNzNQgp0xb5ZiZl05cJDm5+EvaYtvcGtbhJlljKHh5OHm5djO0Mzs7+jz8+38+/j///+/wLrBwrzZ2dPh4dycnZe9vrixsqynqaO4ubOlpZ/T1M7Ly8XV1tCvsau0ta/W19L8+/nIysTHyMK5u7Xf4NrR082mp6GOjoi/v7jExsDQ0MrGxsC8vLa1t7HMzcf///7DxL6ztK6eoJqanJX08+8mKCiqrKbj5N729fHOz8nt7eisrafy8exXWVWipZ6JiII0NTL+/vvl5uD6+faho51NUEuKjIYwLywsLzLc3tjd3NWjo52urqhFRkL39/Tv7+tiYVvo6eN/f3keHhzm5+Ho5uKSk46PkYuFhYEKDRGqqqMpLCyXmpWZmJKWlI7a29U6ODXr6uWWl5GrpJtCQj1cX1uhoZvGxb5xb2kUFhYfJCfP0c0YGhs5Pj5nZ2JAYnMjKzKUlpEpc595enckIyBrbWliZmNxc3C1rqFKSUa6vbfr6+gyb5M1cphSUlNWVE8+PDkaICNQVVBtaGK4tq8rMzosbZXn49ska5e9sqbGw7gSGB4vKiQwc5pSTkZ5dnBDSUqBgnyan50wa442OTrX08uhnpY1XXbRy8Ckqqt1d3OepqeViYLMyb0teKYtXnkAAgI4Y3qqrq/u7OXAu7KJgHmfmY4+botMQD7Iv66alIaMlJi2s6h6a2a7wMA8Q0RoVkfUzsU1aIVWdomxub6NdGCns7upnI9eiqR2j5tAXGlXzbVvAAAAVHRSTlMAPwZCDQx9DA0NJvdsG3JVbLj46Bk3qhtbWzOcVVk/9KXMnHOl31nC60vrljyKl+7btPkqoJeypebNx7Xjx7vB4N7f5d2353LW25bTnOqk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",
    "16779": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC+lBMVEVidYlHcEyLnKJgcoRidYRidoRjdoVhdIRhdIRidYNbcIBvgY9uf4xjdoVidoRhdINidYRYbX3AwsO/x8lccH9kd4ZjdoVleIdjdIVhc4NVanp4h5LJzc7T3eF4iJVhdINfc4JecYGLl6JhdIRjdoVidoRSZ3dhdINjdoZhdYNjdoZYa3lzgo+Fk52Pm6WXo6uUoapkdYGTnqemrbSzu8C5wcm8w8q8xMy5wsa5w8q0vcOpsbh9jJhhc4Olrraut8CqsrmvuMKzvMawucCyu8SstLy+xs2nsLlkd4dhdIOiqbC1wMestr6qsruor7alq7BjdoWttb2vucOip62doaWgpqphd4egpKmyvsmstsCqs7zAyM+cp7BhdIOdpq2bn6Owt7ysuMO2w8+vu8WJgn+Oh4SdpKmqtsCrs7uDe3a8vr/CxsmSj4+dmpqlp6eztbOnqqyutLWhoaN7cGt0ZmC4u765ubiwvceUlJVvbGq5v8G6ydSqpqSUjopXR0C1wMmLioprYV6cl5OShYDF0Ni0ubzj5OWKkJQkJCQVFRUICAgZGRk6Ozt/hInBzNTL0tbHyctGRkcAAAAFBAQcHBwQEBA+P0G9xccqKioMDQ1UVVYgICAtMDE1NTXIwL1NTk+1vsW6z92ktL6arrqWqraSpK6brrigs72it8Kbsb2Zq7ahtcCusK+ousZscHNcXFy5xs6jt8GhtL6erbagsLmvws6htL6pt8GmtsCgrrZ1f4Wmt8K2wcequcPI1uC6xci4wseuu8Ovu8KvucKzv8S7xsu5wsO3wcbAxMS7xce0v8Sxtre1vcBaPjC8xcq8xci3wcS2wMGzubm7xcm4w8W+x8q8xMa/x8u7zMy6xci8xce0vL66w8W7w8XDzM/Bysy6w8a+x8i+xsi+x8m/ycvBys3Fz9K/yMq9xsjAx8rByMu9x8rCy83BycrAyMq/yMnBycu/yMrAysy/yMnAycvCy8u+yMrAyMvBysu9xsjAx8rBxcrAx8rCy8yonnTxAAAA/nRSTlMMAAUYJWeZwt/s+P3/2T7///////////85cP//////9v/////vSv+m5lr/////////////////////////yv//////////////iv///////3v//////y////////+z////////////////////////////////////////////////////////////////////////////////////////////q/////////////////+Y/////4Zy/////0///0Eg8f/lu///rAx7/////zLD//////9s/14P6////////9//////////6v//3v//////svOJnDvWz8fm4zpZcR+jpuMAAAnuSURBVHgBlJEFesNgDEPLnFgFq9wGytz7X26z/zFPYXp6/lIoFH9IqfyY0k9vFL4FVKq1eqPZandazaheq1b+B4hrDYGIdDu9fmeg5FCj2uivgNK4IU+ZTGfzxURJUlWjaukvgPFSoBAqJEmRZUlOpa/KVfVXwLopIEgQMIfNRtT7hS7SiH8GbAkhvROSJABcH7ZjYNR+AFR2TMQCNQH49wCDg09hEuXvAGt7GUmSiH2rEP+GoR7K52j8NWBvtarMfXoQxjkcEPr9y6GGodZfAfY5OKTQYgAZTDaTwfHYnUy6ycEUnGJPhOvPgDWVodS6kW42g9P5cr3dbpfz4n6cJFT6C27H0UdAZeljJ/77NH3goiz828bhKD5mnq8wRvezK93Vs9PWnSUlVnznKg5fwwwaMzMvMHK54//0JGUcM33z9H7vJ1naN6IcVzXP6OiY5hnXhycOyIcFoGvbAa5y/crfACeYMl6BLm79rv4JQ9UARMgLfCZA2OfXrMH+Xf9wBFfJjmt/BfzLqEIbQxyUN9nqJCEIgIATDELoIwghVbMH2Di6xBi4jtDPgB4ujbnE8F2SPKiqTjhConYsGhdLVAFepKvaoV1S91ZhA0/Jfz8B1oq/5sX6o3/XsN8kGMbjU4qDgTeRTEElGEsSgMx0pr+fj6JLaM3+ABzjtoisdm3vz/mTxFTytsUwGCn5AiyWSuVK1Soj5K/1b//65tc0dAAntvGQcLIkD6cLZj1mOxEYpjRl5k+eOn2mEk2cPXf+QhlBT0aWhM9cbvYb4OjX1DNx8qA/BU5drJGIgxkAGBZxzEuXr0QS5R2FOADEf0gWHogPtnwF9HXywzZ5k2rSknLyaiqF2Y8Wx69Z1Lie0GkYwrOxfBggbUAWpeTbmg5g5X6eDx6QA/05lZRu3Dx77ZYTwHrkdv7OVYNCCghjBe9G7+XvE9XuP8heFmVfv0wAVncy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",
    "16780": "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",
    "16781": "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",
    "16782": "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",
    "16783": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAADAFBMVEVHcEx8d3BZTEeWpq9raGh6goKZpq5NRkeYgnatuLm3urZQRkJ7bmaaqrKWp6+frLaWp7FoZ2WzgWOpkYFaW1uQoq2cpay5ubdydHOKfXxcV1bNwbZoYmGWp7OVi4OVprBYT0hZRzp2b2NcUU9RSEPMwLWKdGzg08bPxriQf3iBfnePoq5ZUU53d3dTWFzBt63Z0sahh3Wmn5eCeXTZyr9xenq4r6V1Y16Od3Lc0sfX0MSwdlqIiY2frLWir7ibqLGisLOUp66wqaNbXF3ay8HWycCls7ZeXV+grrfj1s3l2M69vr3n2dCAfnfUx73czsWdqbNVVVXDurHYy77Hu62jsbqIgXro29KDg3ySioLFvrOWkIphYWGwuLyYqbCUjYeIhX3bz8BkY2RnaGl7dXCupZtaWlrh0sRYV1ieq7S0rKWNhoCZqrdQTUrr3tS2satsbW9RVl1FRkaNe2+tp6KknJe/t7Dv4dSdlY5pdYfJwbSGmqpWXGNGQDvb0MTDuaurpqGpsrbh1MrNw7bQxrxqZWJxcXJwaGafm5WOi4XXzsWYl5aMn6+RkpOOmqNTUVJdSj51cGpqWExeXFeAi5aSoqqJlaBcYmmooZtEPDZOSER1ZF2BgXm5s62ptryxqJ6urKt8enWPjo6Bg4OPhXp0dXeVfHamqKullo5hYF1ZUkxpUELSxrmapq/e0chkcIJ8fX2glYmRlpuFk553cnGCcWxeVlZmW1OMenh8cWiPgXLfz8Kbrbq+s6iIh4OTiX6voJZza2FramWGiItGTldue4i0tLZzf5FOT1GZfnmniIGeiYKbkIWqj4Nubmt4eHnWyblgV06JcGZoYV56g42mpaPEwr+ahXuCal16amjy5NmBeXTMxcCVqLVOQzuRgX2Fem9PYm6lclc7NzE+Ni6Wdmurra+yvcNoXlikhn1EU16mrLK+rJ1zXlSefW9caHN9X1F9V0bn18eYb12LYEuuqaWgo6hrc33769tkb3dAMSege2GFZVOfrbi4l441KiTaEFQGAAAAPXRSTlMAPmqbDARrDQ0MJjhb4TxT7Bv8lKHbG0Lkf7GifxROw/OX1CtKtZ5xY6jE+M+25op87LH8zYfg9urHu7nTa+V9RgAACppJREFUeNqllgdYU9cewFGLfbXuVmvtbt/reB2vX98eaOUmjYkZJtFAhiQhIYnEsAOIiWAIhA0JYaOI7CGC7L1k76EgyBAX4q7a3ffe/wTyKVT72u/97sm55+a753f/53/vOfdaPGfxM1i+tnnza5Y/d8ZzTxWsWrnijU3rPwwL+3D9pjdWrFz16wRrV6zZYSZmRwxi04q1v1RguXLN9t12dnY7TsLP7jHNppWWv0Swcr+V1f79+3cDdnbbt4PkEetXLj37N0sFL623AoHVzp2o7N6OsHs8kjVLBvLMEsEKq51WZkwtiAMcCIjmJGLFog7PLhKsWrNt27ad81d/JNlvlgCosWbz0wTrtu3du22BeYN5OJAS6HnSrFn7xCFYzvc3K5aEggKBUFAMwLonCdbV/FhTU3Og5sAiwIPiAOZluwEIZd1PBS/tWso5VEyRPIoDyUy3eO3S27iKKRQKq4VMYXW1FIq0WiiUSqVfhuz8cX44wKLMrn9tSRL/hAOoWiqTicchqplUHBNXrd0LeXkcs2bbG4sFf9jj67tnzx70M8NAhz7zgs8XOUzZOPbyvAAGASxLtoWtjptsayuwNZMsCPY+e+wLE58vwurz/ddi5t4xCSCNwO8plNTUVEFwKgWRnIxq27pgLjsICZ7gOHbkztxWUxJRBJavs+QCCkvO5sJeLhDI5QIW25vLZ7NBYDYstlwbPnPnzG8XBBAAKzmVImAJ+CxbFhSBrZzP5bNYJsGRBb74AtVguIH6R8xdnIv6p1nwOjtZTLFlJdexKXWsZAormB8sH2fx5XIk2LtvEcdQde1G3NxF9czGZQuCD+qCgwUwaEHlEIjg4nCQ1Dgu4PPZ3kdbY2IjImJjI2KBYrQVF8dGfD130e3Bxo0vzAs2vDmrl0Mv28qkqAGxnM1PptRV5hnKG8fZfO9an/BTLW0HTx1EnDoFBapvXS+eydv4/cxG6A73YXnUZNSAjhU83jgYZTDkDugocpYhLyoqz5DUyHJkPGwBwUGo2pAALG0tqrk59czM/dszq0HwjMUrRe7p6el8b36DQ3f9NKu+ns1vqK+Hv+rZLL6jY+uOQ2GHoMQWww4R8/XFi/R7Dx7cnwp+13QP/uJ49Kizs2N8ra+jszM0PUOVvtBwdkZHjtatxyZqaiYmDoQZd9RMHJiYqCluGS5WzuTdy8ur/JcFLLObPaytrR3j42trPaAFzaBwX2gs4Oj48GpW1smIiIiTRmNrVgw0jMaW8H3dMO4f7hmeQfMYnebn4FvrsdDjhGPt44Lj+/ZtPxQWFhYTMRwxcSgsJnx42Gg0Zt2+a7h7P+p5tIz7+XmExvtaxz/08PDz87NuDvKNRw0PKIir164dCwND8SFjC+QiYvhgS2xsm7Fh5ruoB/eWo4no6cl4yPDxNMFgMPw8ObAzw2FwYG1pvXr1yNWrrWez9mWFhp/O8mw98pXzzarrPT0vgOAVvJYqpeFpeCoeB+Cr4YenFdBwNADHLDjsoIyPV4aGnggPb1Yq5X2Fguyi7Gx+nV+8UhmEBL+jarX4R1DhQAsqqr8WD1Yts2BX666sG7uLC9va7pwIDbwTd74jM7OjVBVekdnR8S4S5OfnU/OpTCqeyaRC1U+l5uNwTKq/P5UpzNdSabA03rhx7qtmo7EtPPiOS1Pm9eudXZ3joV2dnV0fgOAzB4jQocEBiE9JgcrBIQX2qIpXMvD5Bed2nWttvbCredjY1pwRJ9JNdfb0ZHdNhWb39JgEr9TWMkIdfXx9PWtrOT57OKHWaG3zZXD8/f2aGTR8gSYE0JxLMw5/nZbhWlIy0nm9s6ezIqjnek+nKYlavPQ440saDY8nkjUaErSJRBqOqNEQOac5NGoIBx5Jz6PNGcMH45q/5WWKO0dKKjquVyj/nSmuQAvjp1qt5vjRahpOSyXbFNDIWb5SMgmPtyHjaCBgaqn8qe6uKZdAlziVqllECLA/r1OpeEMByqkcFQE9B+9rqaTjR6UaDR5HJoPgLIdEJtMKnJxomnMgoPVXlE5V6Hj29irXOK6YjmF0STQBa48McmmXydCqtgofAoIvSaQCGskk8PEikUlEJ6cC0oXTnAJpfwmBgGFYNBZHiAtNlfFyMAKBx6PLgnSRMvoGC8AkIJGIRA2JrCmACEBgQ7ZxItpcOM2QSvvF9iIeASRxEkKoGMMk0RghhxdJD9IpJJ+YPnL+AQJPGyIAAg35rL8XiWTjZONE8oIIaNX9JRiPIJHQJSqZ6oSenhNdJpHl5iqig3TtkVtNL9dPQ4jHPZ0gACKRTNSYhoAMTjZIcJjGpEACXUQlIhmdcELXPlSuABIny4JmEyOXmwQvHTYJwIAKEpDBQCaTQcBg0oRpfYUZdYVpvfRZHbeibDagqdK9qnIgOkg/kPTO/Nv576Sznl4ggG4QxFc+YygFNmTy2IViDjzUqS6UwIzADF7kaBK/NDGnqdE7u1LPa+dyk7YufB+853Xc2ckGgiZD6ryyGN+MjY15eY2NfRNymiGkUr2LsuvS5PzUkq6qIvFQd7qe2x3dlKpXOlSsNi3rUPG9UxoalFwuN7uhwZub4s31VgZ5A9xgBpPKbOAGs7Mbsm3F46ndIyM3uysFlMbpbnG899uW5lfbqxU3u87bE3Sl7pliQqB1akBAgEgEjw6hzwcEYvtx95GRacwtwY01eLdKr7AXN06n07n65Quvd9D87aZA1lSaOVKht8dcUgpVMroM48XZ23f742j54tKOTPekIUK74Rb7iiFAFM0qqkoXY9wtlo9e78sd5LrMzGmIgqCKc8hwNaFS2Wf744X99ZkdYp4rhqkGR+sr3US9A+mCRDqvPRgyYI4AVpWu86U6gkxCILjGpQSecT2DaJexfQ4LmV2lQwr6+XIFvTKpqlztPl2ub1LIctw+s3hcsOqPkRJJGSaRSSIJEAEGAchkMkk6CPrdcxXlSfcN6vbc9vrRez2NagmmkES/ueGRALEaI2AS2ECgrDsdHn4CCE0d8RdK85uiS90HRwfUbm5l/O9/mB5Q03MUdAmah+YcICxfJWAwzXIIrvbKunAQNCNBlc9haX7p4O0rtxLV6oS8pO7RhNzoxJxoNf1li8UC4EUM42EEHp2XXZiWllYIVXNglU8ILr/jymB5YsJkQsLdW/LZ/0Tz6H05ircsfiqwfBFD874dK+orLBQHZvQVprm4+4fg+zuSchPLR6MuqQ25rNnvcnMiA0phKTQLYAPMMUDi3CKLSjL6ept6XTL6Atx9DtP6KxW5SYNX8i5duuyWbrh86XJUHlz/CQLgVbpM4qYo0sP8FQWAIAcJ/HWzV24P3kpMuJzgVmW4NJl3a7nFkwXA838tgwh6Rb29vSJRYCAPBEJ/9yu3RwcgiZfVCkp51N03n7d4mgCw3OpGL9KJ9OImmAqigCoOPAcdg0mJasUkRKAQjOa9ZWmBWJzERUF8VKTvFesDQOAy5M6BHLiXl+VOqhPVlybL2G/D5X9eALz+tr6kxBTBEBpCvk5GKIt0AwwfwYfh/xYAy97d0itycQlsggepOr9EJIpTBQx98iJ8Xf9CAXL8+eMtaYEQgRQJtnz8Mor91wgQG5atfv+9995fvWzD089Bd+H/4tn/AoPBlrLresHOAAAAAElFTkSuQmCC",
    "16784": "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",
    "16785": "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",
    "16786": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC91BMVEX///9HcEz09PT////////++/r+/f3///////////////////////79/fz////+/v7////q5+Tg3tzQzcuzsrGpqKampKOgnp2amZenpqWvrqzU1tjz8O78+/v+/v3////R0dHAv76DgoB0cnFqaWhfXlxjYV9lZGJYV1V2dXR5eHeSkJG+vbzj4+P////h396HhYRvbmyJh4aQjo2PjYuXlZSZl5eTkpB8enmAfn2BgH6dm5zX19TLxcCMiol+fXuhoJ6WlJOenZtta2mbmppFRkdOTUtnZmNET1SUlJS6uLjX09Gko6Cdm5lxcG5cW1msrKyxr65gX2BhW16HjZGRkI6LiYeYlpWFhINoZmWEg4Gsq6nFxMPMzMvJx8azs7N0cnSempqJh4mUk5GoqanX0M5sbGmNjIqBf4CCgX+ioZ/IyMhTUlC9u7q4trViZWfX0c9JSEZzcnEdHBlgX2D///9AQUHDwb+0sa5raWk8Ozu6u7q2tLKtqqfJxMH9/fxAPz7///////////+rtLWIl56Bg4eZrrOrt7issLGfq6yvubqjsLK0vr6LpK3//fyXq7GrvL+yw8WpwMSiub6VqrT///+WqK+csbees7mgtruguLylvMGmvsOqw8isxcqvyMypwcaowMWbsLWju8COqLH9/f2Tpq37+/uJoameoKKjn5z///////////9DREP///+ipaaFl56MnaSNn6aQpKqVqa59kJmJmqGHnKWPoahxfICFlJp7ipFzf4V5ho1ygoqAjpSCkZd2g4htfYN7iI5+i5Fndn14hIrk4uBueX1sdnrw7erc2dXe2Nfd2tju6uhcZ25qc3h8iYhpcnXY1NFXYmlkbXBfZ2plb3Nha29UWl1iam1cZGZdZmhaYmRLVFVTWFtYXmBYYGJfamtVXl5WW15PVFb///9HTE5MUFJFSktRV1lKTk9CR0dAREY3PkJISkxGSEk2NjYwMzU1OTwtLy/b2tg3NzZqfol3jJvTzsvOx8E6FzTiAAAA/HRSTlMNAAYTGidnnMTb7Pf/Q5Xf//////////////////84cf/////////////////iAvL//////////////+9n5v///////////+FCpf//////////mR3e///////////////dTf///ztc/////1P///8zH/3N/8GH////ef////+1V/9Mu6n//////////////+7///////+l////////////////////0/9u////XYt8/7H/////////////////////////////////////5rv///////+u////////////////////////6///////////////////ms/Ox4XSHjF2AAAKGklEQVR4AaXXBXQbV77H8d//woBmBLZSy6ygGcJQTrPMu4XHzMzMzMzMXG6XN1B0w+w4HFmJEzuW12IN3fvq0yQOPvwc0qHvBdH8CYR7IyJorXFvWuAeBL0D+h0h7u7uAZduAGlGb5uVqTzu4i5HoK75JmrYRCAQQIpHWhLNpelk31HcRt8Z6E7NZMqJCvGFhGZ53a141aWrKYOKKXrj9gC/LeBuTBWWIX3Wb0nb/py6z6z3XG4oCDLzc12zLcbKlWdxC4ZbvK+nMtvtnHGc+1rdkrRW5fLkMh5F8yWjc9QtSufquY/f+w6GVxFRzoFydw9mZjKHreaWfRg42TsOFsVNLD/ZR/SpDxKVn8UNmmHRuqSYmc7qcbZ7E7nFy0nzwl5GE3pCu71GYmbAcvwpk17Tqv6Nd9/BN73caiyf6ElirpHvU/miRjsA5/jgccPv9LXpraaxoK3naf3AGx/627tc4rcXu+d1cP784PNOZzGZ16Zn2S3O+NKOY6yj4+zSuaKfuxAZ0eV3jfe3lt6z9/ZLHHaLaerh9baPPb3Fjq3/Qno0GqL67qTcWw1jU2dMN9463PpAYVk1fSFD3Qf/47txzfUdfFl2YlkluioLs5mmzH6rO3+1PFPPli6smrmaaC6TnlYjx/mleZ46tqU2mUuJVe0nbg3c75b3XpwTQ6vo2OQsmy2ipctd0uVwEW8fXLLvwWMf2J3ItF2VvP/ECWdDKa1F99gtgR+sWQ0/pNiZya5stp6sJy5k8OZ7n8/kT0xfzHqrsGKHN/3ov3dMGrOlD2eOVQsbj8x96es3BbrGmluPGI5cM2/HTwXNErRVvz44FZx5sj/V/5lt5eyz4cZN/zpQ7qiGQ+ec1BeN4pqznRt3L17iDE6iO+/p8eL8FawS1cpEossaP77Gm7Ljb7bmXv2nrw93pzdPTFYLAzFxBgQf83ZycQc/vR/u6tfNqufUElVxYMrs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",
    "16787": "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",
    "16788": "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",
    "16789": "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",
    "16790": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC7lBMVEXX19dHcEytra3MzMyIiIihoaHJycl/f3/ExMSvr6+urq66urq4uLizs7O5ubmgoKB+fn6/v7+4uLixsbGxsbGsrKyurq67u7u8vLy1tbW1tbWxsbG0tLSysrLAwMCqqqpzc3OgoKDCwsK6urq9vb23t7e+vr67u7uysrK2tra1tbW2tra5ubm4uLi1tbWBgYGenp6urq68vLywsLCtra26urrAwMCwsLC4uLi0tLSvr6+Hh4eSkpK1tbWzs7Ourq6zs7OdnZ18fHypqamrq6u2trazs7OJiYmoqKimpqarq6uoqKjCwsK0tLSPj4+Tk5PDw8Otra2/v7/FxcXExMS+vr6np6fHx8eysrK1tbXBwcGampqlpaXJycnExMTCwsKcnJykpKTMzMzIyMjT09NOTk7GxsbT09O+vr6wsLCVlZXKysrNzc3FxcW5ubm6urqsrKyjo6PLy8vS0tLQ0NDMzMyzs7POzs7Dw8PV1dXPz8+4uLi3t7fCwsK6urqioqLOzs60tLTFxcWvr6+fn5+3t7e2trbR0dGhoaHHx8fAwMC1tbXX19ecnJzLy8vIyMjZ2dmRkZGbm5vHx8e8vLyysrLU1NTMzMy5ubmoqKjNzc2Xl5eqqqqtra2pqamxsbG6urqzs7OQkJC1tbWoqKiwsLCQkJCysrKoqKiysrKvr6+1tbWxsbGWlpa3t7etra20tLSEhISsrKyqqqp/f3+NjY2ysrKgoKCMjIy1tbWZmZm6urq8vLyLi4u7u7tQUFBkZGSysrLHx8dsbGxWVlZtbW12dnaqqqq+vr57e3u1tbXJycmqqqq6urqurq7GxsbLy8uysrLDw8PAwMDFxcWpqanQ0NDBwcG3t7fOzs6srKzMzMzKysq/v7+srKyoqKh/f3+xsbG5ubm3t7e1tbW1tbWjo6O8vLytra2/v7+2tra3t7exsbGjo6O8vLy2traurq6pqamtra2tra2np6e0tLSsrKy4uLiysrKoqKjX4HQcAAAA+nRSTlMNAAYUHBwTDQ0paZ3D2+z4/v337NuaZSM9md//////////////////lThw////////////2mcDDXHz////70bq/////+E8pf////+YJub////////dS///P1v//////1AN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",
    "16791": "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",
    "16793": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC/VBMVEX//v5HcEz27eTv8vX7+/v7+/v7+/v9/P37+/v7+/v7+/v5+fv6+vr7+/v8+/v6+vv8/P39/f39/f39/f38/Pz6+vv9/f37+/z////8/PzLsJPw9Pf//v76+v2vu8Wrv8+7zdzI1N7V3OP19viIgGyetMWTrcGWsciHp8Pk6OufjXiRqrpBRTKForqJorSZrrp0hY9reYW0wsunsLbCztdufIZib3uAjZZ7f39kbWttdnxaZ2lPVVxKUlxTXGJlb3VWZXFVYGR5kaKRoKq4xc6Qm6JERDlFRTZcYlFfYV9cXmFHTVFDSFBVWVpTWF5YXGBgZWlLUFhNWGKQioZQWU5XYVlxd2t8hGhpcmJGTFVOVFhmaGRqbm5bZGJUU0VTV0lPUk9fa19na1U4P0w9RlI/Q01KUD83Ni6EdVpPWFNDQzwuMiY0NChNTUGag1t8f1IbGhZNT0VBRzVCOi07MykzMS8yN0kzOUJVW1RtaEZnYkZXUzswLygjIx5LSzg9Py9mY1RodVBeaUxxc0tLRzNhY0FpbkdCTEQfHhpSW0dHRjRPTDpcYUc7RStCTTFzdltbWkJSTzYmJx5SVz9EQC5GTTlFUzNNUjlicFEyNys9QTRLVzYqKSA3NSk3LiZXX0E1OjBNVT9cUzxRXT1bZkUyMyg4Pi4qLCQ9MyhXV0BfXEs7Oi43OyldWTxJPzAvMCw1MyZAQC8vJyAYEhEkJBt4aksnHxpKXzhjWz9LXTcKBQ5UZTtibEBabD03PipWRDk2NCQRDQmfimqhh3DDpYWyk3SUfmeLeF59alNsWEj01LT52rr21rbrzbDhwKDuzazmyKrWtZfNro/du524m3jWs5jTsJDVspXMq4jZt5jhwqXw0bP41K/93bz+27brx6TkwJvnwZ/tyqjPp4DjvJnAn3y/nn7dvaLfuZbpxKD/477lxKTjwaDfvZ3asY24l3TQqonXsIrUrIXeuJHDp3q8nH/Zs4u9n3+qkGavjmWiiGKkiGS2nmqbhl+2mXH43UtbAAAA/3RSTlMNAAUYJ2yXxdvt9/873////0Sl/+ZMWf//tg3///+j//////8M//////9s/wyo/////////+D/////////////////////zR3///////////////83/////////////1r//////////4T///99n////////5+s/////////////7L/////////////////////////////////////////////////////ev//a////eK4//8O///l////////7v9UviD/////////Zf////////////+B/////////////////////6D///+XqZee/0Hz////NNbLzv//5///tl5uDcRtAAAI3ElEQVR4AZTShaKbUAyAYdwJ6bIWbl2R1eX9n2254dT9b3H4UE3TX2SYnKG/SHsKWLbjen4QhoHvuY5tfQdETgyqROU50aeAYcdwDo9QmHi28QlgByjBrZIA+PZboOEj4FVwVRy9Bv4QESJxd8RRcl4A1l960O31xOYzoEnPuzKix0CLXoWXNR8BLfocgOY90CDucyO6BayA3ofHMaJv3gDuJU94HSGpjttScK8BB1JABARANUjIc5fK2YTUvgQiSAAgTWW4CoV5EGXWBeAmIL/f4EZ4UP00fs5AK5GgFoR6cH55fjJRT7J5AlwggotTy7XwIPM1AQ+e7Y8Abf6EO1k347qUZQQpH9xLrmNHyJsbayigPxgOh6PxuEPhhETijeyEScjxiBOnnnBQ/x1dnzJgzvK8KPKyGAyKYjAcVx1kgx1CkneaptBTh6nTq6mvCfBvPp/ns1k+y4uS+0W4cTVh5FSXAFKob4WYJ56lbktfaFN9uVrN12u+jPlsNl/lq1W+2W5WrK53+91hNB5VYadziWWTCY8wq/Z9BnT9PwNkceUwEETBt+cNwMzMFnUPj5hZ+edifagAygEDwfh+0TCQUMYZCqk0Y8z1XMP3/bcfnDZhGNr2frdfLG57C6PI2v9PbyQeLf4laZZnRVlVdV1led40zci26USTK6/RwAhXBPHrav0FQDTABdftXWsx3Q/HHwdUoV0nDIa3vdGOkvJDXSBGOA03CeEaoe7u7t754y5tXD/zANOyaBVKKaBSCw6GacEYCCFYFvnR44DgpQ0NsDSpWBwGA75890rHi/b01y/fOl2perJfVlLJmui6diBIA5XRnDmtXcTBRWnKIOaMIVRZm2XDWTDgh5nZjlcwJ+cJaZqkh5UyuptIql2DS9XD2kaiFNay4chQgMyCKMsUFQgNygUYDKrF2SUPsNzFuHYNkQk12PVXVlfneVGU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",
    "16800": "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",
    "16801": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC91BMVEVHcEzy8vLr7Oj19fSUmpT19vXt7e3r7Ov+//zR087U19Hf49339vXy8/D29vXo6efO0Mz39/b3+Pb6+vv5+vji5ODx8e7o6ea5vLn5+fmqrqb5+fn6+vr9/f3z8/Pq6ujEysLT2NOboZ3R1sqtt6j7+vvv8e3b3tvM08zt7+nf49/m6OTh4967wLSnrJ+Tl47P186ztq7O08fU2NDs7en09fHk5OPR1dKoq6L09PCFhn/y8e/m5uTg4t6ns6DEyLjExriaopD+/fz+/v7////7+Pn8+/37+/v29vT//v74+Pfz8vL6+fru7+z08/SmuKjy9PHy8u/39/bw7+/19fXv8e7q6+nz8/Lr7Ory8vDj5+L49/jq7en29vbv7+35+fjk5eP19fPq6uju7u7n5+bx8fLh4d/x8fD09PTm5uX8/Pzm5+Pe39zj4+La3dbh493o6+jt7ezk5d/i4+C2ubHQ19Lo5+nU1tPDxr+jtaT7/Prt7ujd4Nns7uvg4tzs7ezm6OXn6OfZ2tjQ0825vbXq6+XN1M3o6ufw8e/Z29Tr6+zW2dPv8Ozx8u/Hz8fO1dDBysHS1dD6+vqpuqvBy8Xa3Nnd3tvMz8bFyMCnsqW9v7ru8Onm6OHs7efh4trV29f5+Pmgr6DP0sqlqqLFzMXd493c3dvX3trf4N/h5d+zvrKksaKpraPg4Nni5eKqtqnKz8nJzcSwvLDJy8itsaaZnZaxtqvCyLvc3tbp6uWntqfU2tXb3dnb4d3X3dbV18/MzcvX2Navs6yztq+TnIq9wbjn6eLg5ODb4NrJ0cy9xr3GycS4wbi8wLXBw7/O0MyprKeuua2bqpqRlJCmrJmzuq/IzL+fsqLS2tK1wLXM0crAw7utsqCco5G/xsK+wrmeopmiqZyssqm0uqios6eIi4aYpZWepZb19fidrZvLz7+ttqnX29ChpJ/R09LAxbPT1cqxtqS4vq2FhYKZnp2Pk4mttrN7hXqepaZ+iodkZmNMXGGHj3e5SiuaAAAAQnRSTlMAHDg9DUYFDA0MJpzVmoj4FlZqmqzd6WZZdW3F5bUrcT/fVLqr7b5w7+bDo+9+NetWkHyczury0+XvrqXfuseulajLHdJaAAAMR0lEQVR42pWXd1Qb+bXHsR17Ny67a2d7zb5Ne+kvecmreUk08zyKZMEyI6ZIkVABZjQSEoOoiyQkEBICiTKmFzMUg6imNxtjmk2xwd3GuJe1vcXr7Wl/vJ9INsS7ic/br3SOjs7R/fzuvXN/+v5+YY+EPUSbnli37olND/vFI/8QsPmZ7333qe8/bm19/Omt39r2zOYvB/j6lqc0Xo0jx2g1ZgQiaTVF6LduWf/3AY9+Me9vv9p0RONyWWqqcxQZlJSmCa2YGLFZn9qx6f8DeOU7JZfnjiRaLYnVAVmtn6AJCtX6cxwmiXHkP575/K8f/XwJG78pbZpvGnMOmy21uXRGRhSVKyYINCfRokMtPrTm1fUPz+C/4N8EL5eUHHGaE3MycmU51TRNiRkisjYnh7SZixUj2eYtDwR89QHAy//slBoK5gDAO2zJycjIqfVTFKHNFUf6I3MIX3Ztd5ep3PjqugcAX1378k/3akfoYLKnpMkic/gsh0dGQgAtVR1NUepEtbk1o8KZmG1KJjb8bQlfWYv/6PeXSSx+LHkurTQKt/k6QRXVuRRBUSiNjoyM2My+7izHhaMetuzZtQzWAM9OHj/1ScuRsv3JdQU+MsHh6zxcW1tdTTNisSRUBmXx5dd11RUW1PlLjv74ixlsJIi+idSS2eQ6T2GTL0rhG94DADnVFKMVaylxrfHwYUfdWN3cXMtY4eUjrV//PGDz47T8Dbi0JHlsrKCo6KC3y+zr3JN4eCSnmiBoWpthttjMSwWFnv1jzbOFXdGt33nic4CtKPsbOOtyS0tL8nxB0/69TqfNNzzcWVOTU+2vjjQOmxWOhoq+uQNiIibOjgcPnv/ug4DHlAKLwAs36wpT6y43XSje66xROIaH9yTWJO6pqa3pNI/bTD3zyS06hJIEZws9ew/OPve3m2mDgKp4BIYvF83ub/EUNYy3HKmpMVpsw517bHssNl9xec+CeX+3IpgHqbRZnpbk2YOzgZdXRxm8gF4QBJUSVsFdn4AWJc/1lJ8fU9gSD7faHA7HiCPflnzwYL5pf5fLqoQJCist3T+7t+v1J9dGeTsCQbzAK1k407MXzEFT00J5tqfc7LDZzB7P/i7DvVSFgY5xeVUwRMtYQ+H5VldCIGrjXwEvQLCIh1arcN2zJ3Qp9hYWNBWVdOfbbAc8854ETuNSCdBOlIV2oaQazZxoUXAJfv+3PtuN21lWxPIIJEKYnTCZ4IwKoIGEsaaConlP9oXkpjmNACrkMaUglSoZPFKpLAUpeGWBqA1/6cGTsIgV8SwMw6AIRKy3mpw6zmk6X3K0pKnYkxClkerlNCqXKqVSVM7RMHzAM6tQ4AH/tj+XsE6IhiAIYUEZPASxEkSijxu3cJhhrK7ovMIeZXLxDKaXAgaCqGi9FYNjUkmXAbf7n350FbCDl7AAoGQBAxLBiB7HOItLatdz3mDC63i8Qa5iMA4MigiSc35Gp0cgXTPpb92bGbV9dQ6elKAIDLECDzAiUIxcY5Vn6gmjV6D1Gm8cl8kwdGZQhcAsw3GUUsRLaaHU8Xqr1dq1ZXWMnuZ3otro1WAeAe1EVIgqhcP0BjUjZlLyaJKj9HqMYaNzST2DCLygp/32UieW6+36tzCgdQjCi94Ay7NACA8xJKzKI7m8+KAmhgyk6GkvnhsujZTZSR2BMCpOrpRLjUTQGOVVRGWHNsJGSgSBhyBBWRGCQLyWjCEwNekiSG/uiNOrcRpicK/Xak0gsVgGVcnVBGF3BJhupz0KZ8Z+CAA7RlAWIXgE5bVKXi5nXKSGxPJ0+lidmiE4ilLrDQad0+nMlNK5JJ5JJ3QZ7aitOyFKS+UGfhzaiEi0hFdq5XKZzEVzeEqmy2WQK3V4tNSg4bQqXpQXDI/FAjqn1+tVGHFvl10CL13vFmvtRzLRnwDAT6N2wiJxikGnIUlDSqYBN8RKpfydO3k0jOfLxUFXswGgDFiA4LhcAsMDIhF5paMbdc6CafwpAPyyPPH1XI4k9TH62My8lDu7wnGZNG78/tmz71ig5pViq05KxLhiueZSQ7hKGS7A2MKVnsEiRcKswngwZBKvvXW2wZyj3KmMjb2DKPU669Clix9c+tP7Nd7azsEqAwTH3pGnaGKW6+uPZh1o1ugnrnckDbWfOPjb2fOtBd8AgG+8dfatoWMN98vHO33j75y9+P6NwcEPrl3CYfiTTy91XOjLbuiZqUi7fi4iIv3c6OjutsGOwaSk3sozF8CGrQwBfn3xxtny8qEPbrx/8eLpSzfuy9BwjtOOX1dr3Z/q/NkVVxryGwZv1+/enX4uPT393M2VwWsdJ5Z7b95sa6u8/i8A8Kv+azfeu//We0PvvX/69LFYIVZAWWnevckDRl1xeW2MzhqfkhVMPdEesVw0OhoRsc+d1LGvbeZob9uJfW3uEOAnQ2/fPn364sXbp2+c1YWrGA6nrHEkFZ6FVf7eF3mHTlncfbLXcyY9vXc+Ij1i377+pLSpjqSZM8ttbe6k50OO5r5+amDgzWvT07e7M9FgSrg+WBbPccq8uInGeHvpofjeu92e+vrdEenpuyNGI96enBxMunrr1KnG3rakpJC/bM6vWizTTH48fXt6+vQHKxVp+RgvNmTJMQYOHq2aqpq/eyIufvncaAQoYDcooX+y42p/48enbg009k+t2sv3s3UyreNMx6Uz91f6L52enp6ZGay8eWwlbb7yTEzQffJu79xoPQgPCeTQ2Hi8I0mzcO3qrQ8H/j10Igp7zaTHnMVp+e4GDTYx2XdoarrxzImTb7755snRM8cqjk6uLDXtTl8NT08fTV9OPWQKajK7igcHPv7wP1fd+QcBrT0/1TrU717qmUojYw0Vrl3S5fqbdxc0qUv5RecGVtrqQ/mnn2w/l34yjY6hiAkDGnvo+JT7eQB4JOyHM9mm7PzixnePT/VXXCn2Oq2m0qLK9vbKiT4TR6cYiurbQw1o753PSq2sTDpEM9q+48VZEweyHJv/7Av/M3jsSnnH5GLj1cVg6VJf1UJzXNrNyvq2+I/ixRP3OBg+end0X/t0N4wdqGjIz8LVRuviu0l97qxfgL/1kLk+3+geuvpucbYxdyI1j9A0x5l0tLu+fpmoquLkvHGitP3uvvai8nyHL37YbCDIrCNOvTeYmqp75i/u/JUfDbzdWEqZZGWmCZOGpGTNpda0E+3L//u7U51llvjstB7Q0+KYBne5JCffqqOCOp2pOSac+e9Nn9n7D64NlAUING6iTKN3SAVUq+tecVf2uP/4uwr35MLiinGh8u1875W0htRDaRc0cpanddalPPbbIW8EbQylcOvDKQsqFXgRcBZkJ5tVlVZVVXW1vyK1tC8VL3bP+HzmsizSutRnnuAgGFHhxoWkpzaFvDEEAF2YGvjDKT+MIKgYFcsJnI62uxLGZ04NxMiVUk3qYtKiI+huDreaNDTGu3QMphXwhWfDPssA6LWG7OONfpE4Uo0idjUqiUZlUdaK40t2KaYvzZroWyw+oMmTSzkprlabGChcz0AvheJW5yCkzUPvVCd9dOs4CkdDKCpWqyVav06DirIqjBjBSPFDqTqJUoCQXQSHETTB6GJ+/sSD94Vne2bS3v203yHWEjzpxIhIgtET4XrcqpdyGJyLK7UxSpTlBRVpwIKkXicOnS7WegD0mCGx5n7PsWN7cHzEq41G/ZSawDheLQvnSJVSQAlCBNxTwIg8HmEESeiItdaDVW2pUbSO95xNJPwZ9Bs8xFNiCYpSXq8ATFVQcQSwTgGOzuUhQcRz28K+CAj7nsNBOSyEmrQTCAwzNE4jFKeVEiIIEdE0MD4IgUQ8iigR+GthXwQAbcOciWpajYklElSMERTKo5RWUAoiSFAC25ewECKETkPsavxaD9b0yogYERPRIpGYkGM0j6yejYDlI0oerA+xsAAcWCTaEfaPAGEbVIgEBaJogiZ2AbNn2dAbdC+0NosgwMC/uf5hd6ZNT6LR4EniUi1FqVCE50OtQ0KknTwLAwQK0n8YACSxVSsbkaEBHFMikCDAEPhAEZaFIDEqEm0Fyz8cALTxX+1wQOEiEBYGGfMqMYjfKYmGUeIFMD0PAaxp/dd+5sB5kYAiEBGpJRkwQgLy4raXv8zdef1jL70o0UZLaC2qFuAXX3psw5e9fAOt27j9leee27F949o97+ElfHkBwP8BGLTKAjE79B8AAAAASUVORK5CYII=",
    "16802": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAACbVBMVEX///9HcEz////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////r6+v////////////////////9/f319fXp6enq6uru7u7Kysr////8/Pzy8vLs7Ozt7e3X19fk5OT8/Pz////X19f////09PTx8fHr6+vn5+fm5ubl5eX////+/v7f39/b29vl5eX6+vrj4+Pg4ODv7+/w8PDs7Oz////7+/vz8/P29vbh4eHe3t7e3t7////39/f5+fn4+Pji4uLa2trt7e3////o6Ojc3NzZ2dnV1dXU1NTY2Nj////////////////T09P////W1tb////////19fXNzc3////l5eXj4+P////////i4uL////////h4eHd3d3t7e3S0tL4+PjPz8/////X19f09PTb29vS0tLz8/Pf39/9/f3x8fH////19fX////19fX////19fX////z8/PR0dH09PT////Q0NDs7Oz////y8vL////////8/Pz////////////////////8/Pz////////8/Pz////////////////////9/f3i4uLV1dX////////Z2dn////19fX19fX////x8fH////z8/P////09PT////29vb///////////////////////////////////////////////////////////////////////////////8nf9cfAAAAz3RSTlMNAAYUHBMpaZ3E2+z4/ffawpplJD2Y3/+UOHADcfPvZ0fq4aWZJubdHUs/DVxQWk1G//////86I////////+sWDc3//////8GH////////////eTv//////y/A//////+yVv///////0nHuar/Gv/tDmb/WAqonAvg0wIa/0f/bv9fjX6jlK6is6ixpqialYZ6a/9HKv8c8eUHu64Jf3IzunBi630P3gRoW74k/PIZXk6JpJepm5+SeGw/9jXWzzLOQueWLkC35eO1gzofQWpUiLV2AAAGdElEQVR4AZTMAxZD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",
    "16804": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC+lBMVEVHcEz////////X19d/f3+wnJz///////9VVVWJdXX////19fX///////+BgXn////////////x8fH///////9ydW////+hoaH///////////////////////////9zc3O7u75mZmbt7e1/f3lDQ0NSUk93eHGPjY2mpqT///+BgYH///9eXl65ubnNzcl5eXBRVE+lpaU/Qjyjpqb8+vz////////////////////Cwb2YmJtVVVV7e3uam5/29vRYWFlQVU97e3+Ojo/ExMTq6uqsrKympqZtbW1kZGS4uLf6+vrb29toaGhucGHFxcf////8/PyWlpeUlJOampudnZ65ubmRkZLs7OxdXleZmZlxcm6Pjo9aXFZycnLZ2dj39/eMjIzz8/ODgoHp6eiGhYV5eHezs7J7fHWEhHdoaGeIiIi+v76RkI91dnFsbWS3trV5enCvr6+ChHr+/v6YmZVnaGH5+fliY1tubmjf3t6AgH9ra2qRkoyoqKfd29vFxcXDw8OJiopRU053d2xtbW1+gHilpaOKiHvS0tCTk5Xh4ODY19Z2d3fBwMBjZV5tcGXw8PCKin53eHF+f3JzdW1+fXutraxlZmWrq6ubmIyhnpdfYFqTkoa7u7yMiohwcmdYXFJucGvm5uawsbF7e3rIyMh7fG+cnJiFhn+ioqCQjoJiYmFpa2OkpaZ0dGdUVk9maV1ISUepqqpLTEtfX11kW1dnX1qppZqioqPj4+OBgnTLysippqEyMzFOT0qxr6pPT05GRkSLiIZ0dHSPkIlVVVVsYl6NjH6mop+fn6CHh3lXWFPGxsV9fX6wq6ecmpWHh4OOjoU4OTg9Pj3V1NN+cm2gnZGYlIzDwb5wZ2O9ubXNzMuSkpDIw7/Pzs5vb293bWikn5ZBQkC3s66XmI6hoZ3Nzc5XWVqLjIN8d26HfXdXUU7CvLibmpPm5eNya2YtLi2alZNfU061r6uIgnxrb2CYi3yuqaInJyYAAABqaluonnmFc0yVO4yvAAAAUHRSTlMAOVoNAg0/DQwNaBzaBqHfmJ0n98JicUpIFIbs0LfpKnIZ/nY5ra+boa5N5HzqQ49qKKxte+9QTS/tvrGS3+qW8uC63q7H68cH8cel5s+NhtzZsQ0A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",
    "16808": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC91BMVEWsr69HcEyUjY28s7NnVlVENTGke3NbUU9zcnWpoJ2xrK7IvrvAtbNlZmxTVVxqbHWempyOjJFycnqFhYuvr7azsLZlWFd6eHykoaKTjIxaXGSel5fNxMK3rq5ycnmMio+CgYiWl52/t7eemp2LeXR7dniWkJB5dnqyq6ukmZfGvbyyqKiknp/BubqAf4Z1doCHhInbysWnoqOvqal8fIKQj5Sfm57h19NJMytLTVGak5SpqK7Iv76trLGztb07Mzy8tbWzrq65srGhoaizrrKlpKq7u8LKzdPJy9LGxMexq662sLGtpqbDvLzUy8nMz9hvU0WsoqHU2OBgQTBNMSOwsLeYgnhVNiWdfHG+sbSvr7W2sbW8vMR7ZFdCKyFUOC3Dw8tpSThhQTetrbStrbTFxs5gPy+ur7iys7i/u8BKLBs3IRhcPixmQy41IRlDJhgsFxEzFwsTCQOrrra0tbp7Xk4kEgsdDQfJyM2ws71xTTe+vsabnaW+vsi4uMG6usS7u8W8vMa9vcbCwsqtsLjFxcvDw8hcOSV1Uz8rEQW3t8C7ur65ucGrrrfAwMbBwsfAwMnHxsyUhoVtTjx7V0M9IBGqrbO/v8fGxct+bml6VT+AWUWdbmazs7vExMmba161tb22tr+DXkmWaFmfa1+caFuKZFCdaV+fj4YIAQGTe3NsRjCtr7hiPSceFRdaQz4pGhirm5ZjT0uhdGamk4qJb2HTpJrNo5nHlIXdsqjDj4KxsbvMpJuusbu0tsCnkIbOnpKztb+TeWyCZVWGaVnCl4nImo6fiX+bfXDAjoG7vseul4+mi4Ctk4qegnaQcmWih3ysd2fOrqq1uMG3ucPUtK7cu7e4u8S5u8anjYOyf3DUqaKrrrmrkYfLpp3TuLTPtbOsr7u3iHnFpqS+oJqwn6Gusr2qjoNzWVG0tsK1t8O2ucVzYl7i6/bx0cyxtMCztsL7//8qGxSGcm0AAAC0uMSusr7Dl4uytcIXBwPMm5XOmZCys72cDue9AAAA/XRSTlMNAAUZGg0tb6HE3ev4///+7NrCl2AkOZjg/////////////9ty3//9////////////av///////0fq/////z3//////////47/3VD/////////////////DUb///////////vJ///Bi////////3T///8qvv///7f///////////////////////////////////////+q//////+d///s/////1id/9P/////dP///1////////+K//+btaX/////////////////////////////////////////7f/5/+X/////Nv///////////////9//3v+kbNL/z8fmpzauWgAACTxJREFUeAGllwVcW1mbh59zIzd2bxMsAsEhk7q3zOfGUl9pPxh3n3V3d3f3HXd3q4y7MZNCFQiBxm6MEDm7TcJ4u/b8zk8i7//VK69AcGaEEIiK5MyYzZwBi/g0p/hivjiCVlFHSpnxCMHpkzLN/w8jEL21yPPOrCYySY+QqWW6EEI7ag+99flsFD6LdaCw6HBSrTicij0tvN6yk4wdEtWw1d73+RD4NFvEtMVXjAX0orLoOOypUlDIKF1mFU/aVl4nsoMHzhqBqh6vtOhtwWI6rdtzSlJb3ZJu9bhldFGmu22grrINn0WgxbHyjYzrWDKxaG7xxubs7lDL1HGvJVSxSFluTSahCGLEdCaBbSu36Bu/Gmj2KB73rGPlCvdKX6d9Bb6Cx6/I4MKqBW9CBbW4c8sXt7E5PJ/ri5NzJiW+2fZ2SnkHljTgyOoAvO7xCuEaXy6mXvqCNjZ/Y9aE00mBZues3z/hdGDPScVOYb47Xk40AeQAVolKB0sKP6DQYGwYbOTz2O3OnDaDEwCnfTIvm5Pdnr4E0I2Xtrz6Xw0OtX62Bi1TgF+Pks/ncTqX5XRjMoqYLAQMh5aGSRIk6ARzxOwAudNEjbuWBHYHIUSP0zCi0dMS82mTOTbp6E87ilE4dqwPEqaEQt6i5iFH5fJGCo0iXp0pNcOUpQREG7n2FaoKQBU4QWccaA2dcqdbBDF8Qvw5gKwLfEUGOYkt2n20h2NJ2qfxSFEBj1F25s8Zd8KCsZZjlYWW+dZQk2DK5DA6xR8Do2YANqXdd2lKOl4x3qBrEXMVHU6RSfUcFxx2yC6gdBRhB7Nv0bpIaw4sH8/BtkywNGvLh8dzVRtooMBEtUMJpZd9CNhSVoXaCLFRvBPOuTheDhkWy/6XYLQmcLnIo7tAFTddKISgdhbsIsIAHDs5tL/3JA06Hjm/KUaa0JTFl/i9Rg22ZUJ5dODI5psusyHE47Cp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",
    "16809": "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",
    "16810": "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",
    "16812": "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",
    "16813": "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",
    "16821": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAACW1BMVEX///9HcEz////////s7Oz19fX////////////////////////////////t7e3x8fH////////////////////////////9/f3////////9/f3+/v7y8vL19fX////////v7+/u7u77+/vs7Oz29vb6+vrv7+/////////o6Ojn5+f4+Pjk5OT09PT5+fnx8fH////////////////t7e3w8PDm5ubp6en39/f////////////////////z8/P////////////l5eX////o6Ojq6urg4ODr6+v8/Pz////z8/Po6Oj////////h4eH////////i4uL////////////////////////////j4+P////////////////////////////f39/////u7u7////Pz8/V1dXa2trY2NjX19fNzc3x8fH////////e3t7////////////c3NzU1NT////////////Q0NDb29v////////////////////////////////////////////////////////////////////////////////////////6+vr////////T09PU1NT////Q0ND5+fn9/f3x8fH////9/f3r6+v////z8/P////////////////////////////////////////////S0tL9/f3////9/f37+/v////////////6+vr////4+Pj////7+/v8/Pz8/Pz5+fn7+/v8/Pz////////////////////////////////////////////////k5OT6+vpM0YlWAAAAyXRSTlMNAAYUHBwTKWmdxNvs+P3999rCmmUkPZjf//////+UOHD///////8DcfP////////vZ0fq///////hpZkm5v/dHUv/P1z/////UFr/TUb/OiP/6xbNwYd5O/8vwLJWSce5/6qdGv///////+0OZv9YCqj//5wL4P//0wJuX41+o66is7GmlYZ6ayoc8eUHu64Jf/9yMybHunBi6999cA/eBGhbvvzyGV5OiaSXqZufknhs9u81ndbPMknOQueWLkC347WDH0FaanHVyRlFAAAH+UlEQVR4AZTMw4FFAQBD0bHtPNu20X9R823fdXLOzs73dHF5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",
    "16864": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC+lBMVEX//f1HcEyvs6Xo6+Xf4NvU2c7a3Njo6Oj8/Pz2+Pf09fLy8vLs6+z19fX+/fz////////7/f3+/v/p6+jFxcTAv8LR0dHU1dba2tnu7e3m5ubo6Ojz8vL6+fr////f39/e3t7ExsbMzMvj4+Lv7+/q6ur+/v6xt5nu7PHj4+XY19e4urbOzs/x8PH39vqkro5kbmRMW0OSooDQ28Dg4ODc3NzKx8Tq6ue5urnJ0bWiqJq3w6q9zKzOzszNy8jV1dH59vXy8/Dm5uPU0cu6wq/EwLvRx87s5+Tx8fL08/fx7+3n4d/n5+nn6eXv8+nW2tLQ1cq+xLfJwNfb3+fn5+7i59zHzr+zuqqHk3x2bUKJbUp8dWWgsqGepX7d4diqsaejoofDyrmbopRqbV5balRwfWja39PM08Q3P0Kzp8OlpKiotZdxgF5BSyp7inCtrJ+QmYCwtLOuwZm3xafh6dbDtanw8vWWmZvU3MnKx8q+vqORmJDd4snBwLGJiY/39fCFjoGUe7yuoYzk3dnLxbX2/P+XknHd1dDu7OjNzLyEiHjm7fDq8OLm6uCZinl6VCuef2Do7/eOg1Knl4Tf6eV5gYR8jmarvpu2wcCmiW+7rJqpl3XV2+GqrpG0tZo1Oyrs8vzh4+qYm41VXF9wdnlqcHROVlm2lHCmqX+6u5tZSDcQGyMrMzc1PUE3P0M5QUU8REg/RkpETE9IT1NcZGVjam5NVlYqNDcABQoZIScpNjocKzWpfFHRtJUHERocJy0jKzElLTEtNTgzOz4xOT1RWV4dKS8TJDIvNzxGRD6fckjWwqwqMjcmLjMkMDQnMjZITE5qXE3KqH28kGUgMTMjMjUwPT+uhV23iFwvNjoeLjEmNDhZUklAR03Fm3UnLzIqMjVLU1W6oo0tNDooMTYjMTQrNDkoLzUpMDY2QUMiLzQ0QEYjLzIoMDMoMjY8PEosNDhDTE8mLzMhKi+csIfT4by5zqHH3quksIpRWFpocHN2f4GwmoaxxJkhH3e+AAAA/nRSTlMNAAsZDSlsm8Pe7fj////u25xjPuP////+////////4P////////9y/////////z7o/////////6n/////////3Uv//1f/OP/N////wYD//////////////////////////////////w3/////////////sv//////x//////////////8//////////////////////+c0f////////////+V/////////////////////////3id/////////////////46t////////////pv///////7H///////////////+Abl///04mHPL/4QXCO+v//5L//7PWqurn42n28kEAAArHSURBVHgBlNDVYqUwEIDhuiY9HphMSiOkwjJnDVkj1P39n2frrv8Nmi8yMTH5RlPTF0299cfMq8Ds3PzC4tIy4yud7kKvP/s5YDA/HIkoBs4kqtXksm5v8FFgZm5NgjbGGutSQCk9X782+h8CNuLNrUwrtF9MbjJQzEuHNL4iOv13ga/fvv/4WWyVBajYVGYkakXAPEqkq62sDd4Gfv3+/efvv58S5RZw2Rhrm9IrYnjxwl0caAJZ7w1gdpiLTEd5E4RocscpM6bN84LIS3+zDAHb068BOyn6y5ivvU91iUxtCRtFNpOeUs9SQL3rCgaDh8DM3X0/eRRp75CrIs/btmkdEL8wPBIpznceAq+MT1TstLwYxnTbiL0Q6V1kihOkWLR2/zmwkzyJokIjY0AkY9G08V4IWVlmkQj2wNjDO2Dq5vycvGy33t09qtE5J12xuwXALiLCrG3CXtuGqgrVXtSIPNyc5MTtCo4RPaJEvjoen5ycXlhepQwYegYARL4UIexVtjo4yMqzunTnj7fwn4aq4E4ciePnCpziyTwkSQVZwy11XuA20otUQ8NCUkXq7u7u/kk3tXk69reffCYRhIAxQkOpSWiatlqcKOLFPCj6HECDIAjqwxNxNYrNZ3MxGEZ8ftHrSwtNzf9rWI4XOG1La1t7R2e7SGiRTJeEq4REUJQgzOqCILMVrSSw7JdcXqaUT88C7X6p4D99T09vX/9AAXUVAza1UafJ4Si1trZkpDIOoUo0ylf5/U6bzUdHBwv5lsLHj33RoecKngM0BIez+rLLb9D760eqgbMSrTe6q21+FMdN+spRm0hnx0xV6oHTLY1L/LgsMbQQKb57HuJTCxOyvhf4IOD0ufhJBZhFrYADgxARpr5I5HQ9UTczO1s/l06Zk0mc4Uh+3gPIai0aekOh1tizMEvrHfHe8uISI4NGBtRTWldLrtBfkOnS8sry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",
    "16871": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC8VBMVEXy7/9HcEz////m5u/s5+nq6vPz8vj08fj49Pr18/r18vjx7/Xy7/bw7vTw7vb08Pfv7PLw7vb08ffw7/bv7fTs6/Pr6fD18vjt7fXu7PLd3eTs6/Px7vTu7PTq6fLp6PDm5O3n5u/k4+3f3uni4ev18/r49Pjs6vDe3ejk4+vg4OnNzd3i4end3Ofc2+XNzdva2uTY2OPT1ODy8ffa2ebV1eHQz9zu7PLX1+LU1ODS0t/S0t7Q0N379vv9+v7//f/OztvJydjIyNbS0t/////m4uTPyszf293My9mQjI5ybGzq5+rr6e7o5uz08POloaLa1NZJQUJMTEmXkZC1sbXExtXBw9O9wNH//P6IhISdlZREPkQeIhg7OicuNCNTWkdsY1yuqq6/uLbBwc40NCo9PDEpLSQXGxQPDg5OSTrDwMLY198EAwYTEhckKSIYGx0dICKfmp1qYVGFfn/Lxsg6Nzs1OywtJSQ5NTK4u86vpqQWDBQhFxk1LC4wKi/d3OS2uMxVTEI6NDo8NT0+NDw8MjpANj46MTg5MDJKNi05Ly0VCQlIPDzp6vkqJik4MzlAOEBDOkE6MDdDODhLOTc/NTQyJiZ4c3Q2LjE9NDq3tbr19v46NDtYUVRPRUR+dna9ur48NzU4LzdlWlkoHyBeV1g5MDfTz9MqISF8cHAAAAE2LTUbEBAlGx5kXmPw7O728vQ8MjEuJilVTU4KBg1kUk9ANzQ6Lzk+NTMzKChsY2UyJyarpqkyLzouKzY2Mz9eTkBgRDBVQTDNy9JPPz9lWU2GbU2DWjaLYj9xSipmQB5UMxdHLh1CLyVKODnXx7i5ppjEtavVvqm5m4GujXGjgmdZR0N7blp+en+oo6e7raSLemF8bF6VgWRaSDy6pppmUEGuoZSonZiZlpa1sbGbkpN4a1WRgHWci3qkoKKypJtAQi4BAABGTSteWEBTVDZjXEJaUz5oX0WDdVmJd1t4bU5wZ0tiWUOBdlx9clNmXUixg3t+AAAA+3RSTlMNAAYUHSdlocTd7P//9uvdmz3////cdf///w3/UOH/////////////////U////zv//+vN//+9jv//ef//////////sv////////////////////////7/pv////////////+d//////////////////8NqP//+////wzg/////9Mb////////////////RP///////////3H///+R/////6b/////uv+q/P///4P/////WP///y7x5Qb/Df////9u/////1/d/////////9/+/////////+j/////////aP++/055pP///5f///b///9B2f//////vDeci1JhuBQAAAp/SURBVHgBlNEFgoNADAXQuiVFhiBpcOf+F9y/7vZxmTeS1Wr9Qzbb3W67+emP1bfA/nA8nS/EdPX8U3DY/w8IA5+ZiZ3jKHIkFHEchH8FNsk5dY5IsiwTXERUM5yy+PAVcPv4Krmyc47R0gBAuD+rqSDe4dcR5B4JwvIQDAIKBH0IyCL8GTiyo9IECyCIonlZlpapGp5glVUdvGtwezeFvXc/+EiUniahZveACS6Ga9m0XR/vvgNyHrDy6cgm9FQDuZ860TQ1TVVqhks3txJ+DeRCqXucuU0TWkaMYchDzCYF1vTN0i1NnX8F5FPVVCJ3ZJKFQiwhGIVv97U76N2F2QEHBWWctH3/J/Jgxzcd5/spLjghlAqDmrO11fswIXk6MCJKUVFw9GP+UbBMmSkhL61URgHGDCOzWR4CyhglBAWEYMoWnBh38Cx4nIXv/wkvS87wQ+Ws1FJKqIxQJUUeD0ZwoYSS2nnLhDv8+k5w9Hdtl6PMLpfShcpnYgxWqdIo6zJWa5fvgpWF9sdvBScrf0Feb2gzVxqOEOBxhZLW+ZR8SDH5FOsYgg3eh3j6WrA82ZxsrgCso5VNmLIjl5TaSotcjCk1bds0TR3zTZuC//5K8Kvr+n7optMOTDc3N9eIkIyVQujc5uAjaMaz87FOEDTtWNfNxYtgrxsur65vLoehBzBgPVDAGabdVXD4SlexaW9vG8TzdcQ+fxb8QvKORrJadxsGgnAZL8t8GAyqXJTD8RcwuyTncJiZOXn1rgJzv//uzoym6UYkCowgY/hfHb0yrR1BsHY5TOABLIpY9q4Es2Em9ccW8D5iO7/033/+/tPso0gkCALE0bG1w4ncDoeI7IPXJRF998ryd6+qKAp1EzSsft4AziLG+cXl1fXNdTKZSmcCgGCPPLXgfnQiYjARzCMSkmQAyKsTAEFpdg24F4if/8nl87lC4apYLJUr8WAkcASOPt/hIDD8TSII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",
    "16873": "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",
    "16875": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC8VBMVEX///9HcEyxsbH///////////////////////////////////////////+qr7epr7ujqbWxtsK7wMq1u8eus8CutMCxt8OkqriorrqepLKhp7Wssr6rsb6or7qlq7eqr7qyuMWwtsOvtcGts7+wtcGws7+pr7uqsLyss76eoq6zucWssbyus8CutMOnrbmusr2vt7+rr7qrsLyqr7u2vcmutMCts8Grr7uoq7ehprOttMCttL+us8G6x9S9ytnBztx/hY6FhIqXlqCYmaSVkJuRhZCLfIeAcXl5eX+NjpSPkZiJipGLjpaGh46FhYqBgIZoZmhXP0BXMTlZLDNeMzp8fIEiISBQTkt5eHx7en9/fYN5eHxhQkhcPENiPEVlRkxjSk5eP0ZjP0lpRk5nQ0uAhZA2NTYpKChnZmuDg4mCg4eDgoiBgYd/f4WAgIZ7dXhrT1NxW1p0ZmCYnas+OzcuLi1ubHGCgIV0aW1mUFBrWVVFQkEyMjJzcXWHh4p1dHplX153a2JmVVFrXlWAeXB6cmZxZVyjo67M2uiaoK1KSEY6OjiHhoRaQEReTEhiV01eRkhtY1hmWlFWOT9HKS6osL9cWFJrZlxOTEV4dnyCgYF4dn1VQkBhUUtva2BwaltNODhnXlR8e3uRkY6EhoteWVN1cGFiYGVeW1iCfnJCQTxWU0xcU1N/fn2NjYxJTlFmY1h5dGxtaGJiXVB8enaFhHyFgXZ1c2pvbWp4dnVwbm6AfndlY2h7d3BoZGNfXmJ9eGqCgHt2dHFqaW5zcW9zb2h0cnc+Pj9UTkaLh3lsaWeHjZl0c3h3YWuSmaZbWE1ub3RjXllqZlOdo7FXT1JgXmF2c3eLkJySlqJ8dnNfX2NhX2STmql2dXp2c3Kcoq+OlKAvIiWVm6dgXmNta2t+go14fYdaW2BtaGCDiZRwdoCGhoydpLCHi5aVnKmZoKtqZ21yc3iho7J2dXuepbOgprOTman///////////////9ZnLIZAAAA+3RSTlMNAAUYJGmdw9vs+9qaZQ08leD//3D//////////95p7v///////////0f//6H///8g/0tZ/83/vXkxwK7H/v//DGz/////////////////XA2m////////////neD//////////////////////9Me//////////9H////////O3b///////////////+R/////////////////4L//////////5av//////////////////////////////////////////+m/////////////2D//y7t////6Lv///+u//8N/8e7////3///4v//i++q1s/Ox+W1QVlxQKc8VV8AAAo2SURBVHgBjMyDEUNBEADQz7Pt67/KcBy+wXqXZf1i22+2bxvLxwfHCSDC5AZTyPjx8YF415ZKG2OteXokWsl3m+LNg81pH2JMMZdS4k3JJZZYWx/bPw/cvBJKH8iV2zAYgCcH2Kr5ac4AGxOARCjkSrKeX9y9vdz/RsFL7/urF36sVIpARWAgGqHTBOLqhvn8+28CP5yDs7UUQCiAT6bWQc4E6j2/evb/wOvqi/qqTRSlKaxvFApzpXGi2utZfv4/wMWLsmQ2ylmLmjQBEUQFQLYyTtb3s7W+uvgv4GCdBWt2dk+DIBU41EzEqPIYju/r6nt99u/AJQl4TrauViZqg0gRBbmNSd3p5OR177Xm/fBvwOW6doVpEa+0OYYhITWQQVNiUkIaObt7rT2EfwCHkNeMVlIrvLqRHBukiQEYldjIxqlzVM827+uzvwMXnYnYnVILgeJBSyslJY1Yj8fR7ASslXrf9/OnfwN+tKvlyrieuZTWhmTOCCE4QDG7tWJuoOq07adc/xV47pmurq7IjHxOZRiaRl3SWkoFmmYvDUZGzLBt23z3fvNn4BmvToSI6gJGKm0ovubUTAoC9TRuxMTep61PPde677d/Au6uGGrLIoKlFVWbNYhUK1JrOoE22DSCuk/TRlvfc3Ti/g/gksiMIKI/nyJg1nZsBtHUJAlkHFVnd1Ddeu+nPvTD78ADuRNLWRSa4lgWMwPI1CigBEIYM1FUnnOdve959v36N+BgxnSFZVl0FIFpHBD4mitDpQy6QlTNyKa9z87U9zrPuz/7Fbi/YjbVE7DELaliSWoRIkmlDMUlSTwFHfs406kv4zy//gW4eHzz+PjmzZu3p7x5c7p9jGIi0e+kx7fH43EYjkOKVZUCKi0k5m6w86cBvPvu/YePHz58+HTK51O+fPn66U2RpEv05eXLn0goi8SEgSiANleo246ueoDucHd3iNswP7g71EsPzZ/kjbt8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",
    "16918": "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",
    "16997": "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"
  };

  // lib/anim/CircleSpriteB64Textured.js
  var CircleSprite = class {
    constructor(parent, i, userdata, normalTexture, hoverTexture) {
      this.i = i;
      this.enabled = true;
      this.enabledSize = 0.1;
      this.normalTexture = normalTexture;
      this.hoverTexture = hoverTexture;
      this.x = 0;
      this.y = 0;
      this.z = 0;
      this.o = 0;
      this.r = 0;
      this.tx = 0;
      this.ty = 0;
      this.tz = 0;
      this.to = 0;
      this.tr = 0;
      this.material = new SpriteMaterial({
        map: normalTexture,
        transparent: true,
        depthTest: false,
        depthWrite: false,
        color: 16777215
      });
      this.makeTexture(userdata.id);
      this.el = new Sprite(this.material);
      this.el.userData.i = this.i;
      this.el.userData.data = userdata;
      parent.add(this.el);
      setTimeout(() => {
        this.to = 1;
        this.setTarget({x: this.tx, y: this.ty, z: this.tz, o: this.to, r: this.tr});
      }, 500);
    }
    makeTexture(id) {
      const b64s = CIRCLEIMAGESB64[id];
      const canvas = document.createElement("canvas");
      const size = 64;
      canvas.width = size;
      canvas.height = size;
      const c = canvas.getContext("2d");
      const image = new Image();
      image.onload = (res) => {
        c.drawImage(image, 0, 0);
        const texture = new Texture(canvas);
        texture.needsUpdate = true;
        this.material.map = texture;
      };
      image.src = "data:image/png;base64," + CIRCLEIMAGESB64[id];
    }
    setTarget(obj) {
      const {x = this.x, y = this.y, z = this.z, o, r} = obj;
      this.tx = x;
      this.ty = y;
      this.tz = z;
      this.to = o ? o : this.enabled ? 1 : 0;
      this.tr = r ? r : this.enabled ? this.enabledSize : 0;
    }
    normal() {
      this.enabled = true;
      this.material.color.set("#fff");
      this.setTarget({x: this.x, y: this.y, z: this.z, o: 1, r: this.enabledSize});
      this.material.map = this.normalTexture;
    }
    hide() {
      this.enabled = false;
      this.material.color.set("#fff");
      this.setTarget({x: this.x, y: this.y, z: this.z, o: 0, r: 0});
      this.material.map = this.normalTexture;
    }
    focus() {
      this.enabled = true;
      this.setTarget({x: 0, y: 0, z: 0, o: 1, r: 3});
      this.material.map = this.normalTexture;
    }
    hover() {
      this.material.map = this.hoverTexture;
      this.tr = this.enabledSize * 1.5;
      this.tz = -0.05;
    }
    unhover() {
      this.material.map = this.normalTexture;
      this.tr = this.enabledSize;
      this.tz = 0;
    }
    setEnabled(bool) {
      this.enabled = bool;
      if (this.enabled) {
        this.normal();
      } else {
        this.hide();
      }
    }
    update() {
      this.x = this.tx - (this.tx - this.x) * 0.9;
      this.y = this.ty - (this.ty - this.y) * 0.9;
      this.z = this.tz - (this.tz - this.z) * 0.9;
      this.o = this.to - (this.to - this.o) * 0.9;
      this.r = this.tr - (this.tr - this.r) * 0.9;
      if (window.app.mode === "free") {
        const v = 0.1 + Math.abs(Math.min(this.x, this.y));
        this.r = Math.sin(v * 0.1);
      }
      this.el.scale.set(this.r, this.r, 1);
      this.el.position.set(this.x, this.y, this.z);
      this.material.opacity = this.o;
    }
  };

  // app/data/students.js
  var DATA_STUDENTS = [
    {
      id: "16777",
      studio: "2A",
      name: "Alexander Fagerholt",
      theme: "3",
      title: "In between typologies // The future challenges at Refshale\xF8en",
      email: "4003465@stud.aarch.dk",
      mobile: "+4541296962",
      stub: "alexander-fagerholt"
    },
    {
      id: "16789",
      studio: "3",
      name: "Charlotte Lyberth Jensen",
      theme: "1",
      title: "FRA V\xC6RESTED TIL M\xD8DESTED - a new frontier for socially vulnerable in Aarhus",
      email: "charlottelyberth@hotmail.com",
      mobile: "+4560583664",
      stub: "charlotte-lyberth-jensen"
    },
    {
      id: "16790",
      studio: "1A",
      name: "Christine Steffensen",
      theme: "5",
      title: "Det stille LANDSKAB - Jammerbugten",
      email: "christinebergsteffensen@outlook.com",
      mobile: "+4528431201",
      stub: "christine-steffensen"
    },
    {
      id: "16875",
      studio: "2C",
      name: "Clara Lange",
      theme: "3",
      title: "Nyholm i forandring- Tradition, kultur og uddannelse",
      email: "clara@holm-lange.dk",
      mobile: "+4528933986",
      stub: "clara-lange"
    },
    {
      id: "16810",
      studio: "2C",
      name: "Daniel Nielsen",
      theme: "1",
      title: "Shared Forest Allotment",
      email: "dandollerup@hotmail.com",
      mobile: "+4550414245",
      stub: "daniel-nielsen"
    },
    {
      id: "16768",
      studio: "1A",
      name: "Eleanor Margot Gibson",
      theme: "5",
      title: "Reimagining the Company Town:  A Model for Future Landscapes of Coexistence",
      email: "egibson@live.com.au",
      mobile: "+4531270480",
      stub: "eleanor-margot-gibson"
    },
    {
      id: "16723",
      studio: "2B",
      name: "Elias Hamann",
      theme: "7",
      title: "RSDO-1-29 ENVISIONING THE RECONSTRUCTION OF SPACE DEBRIS IN ORBIT TO A SPACE HABITAT",
      email: "eliasjohanhamann@gmail.com",
      mobile: "+4522270143",
      stub: "elias-hamann"
    },
    {
      id: "16764",
      studio: "2C",
      name: "Helena Feld",
      theme: "1",
      title: "Veteranernes Hjem - naturens heling af krigens s\xE5r",
      email: "helenafeld@hotmail.com",
      mobile: "+4522905638",
      stub: "helena-feld"
    },
    {
      id: "16801",
      studio: "1A",
      name: "Huiru Huang",
      theme: "5",
      title: "Architecturalize Greenland, Re-Envisioning Marmorilik Mining Landscape",
      email: "vianahuiruhuang@gmail.com",
      mobile: "+4550320293",
      stub: "huiru-huang"
    },
    {
      id: "16791",
      studio: "1C",
      name: "Jacob Mikkelsen",
      theme: "3",
      title: "Ankomsten til Aarhus fra \xD8st - Omdannelse af silokompleks til terminal for skibsturisme",
      email: "jacobhaugaardmikkelsen@gmail.com",
      mobile: "+4525533006",
      stub: "jacob-mikkelsen"
    },
    {
      id: "16772",
      studio: "2B",
      name: "Jens Toft Madsen",
      theme: "2",
      title: "New arrivals -  Establishing a connection between sea & city",
      email: "Jensmadsen1@yahoo.dk",
      mobile: "+4541406830",
      stub: "jens-toft-madsen"
    },
    {
      id: "16804",
      studio: "2B",
      name: "Jesper Asferg Scheel",
      theme: "2",
      title: "\u2018ROUND AND ROUND WE GO\u2019 - The velodrome imagined as an homage to the legacy, sounds and emotions of cycling",
      email: "jesper.scheel@gmail.com",
      mobile: "+4530290401",
      stub: "jesper-asferg-scheel"
    },
    {
      id: "16802",
      studio: "2B",
      name: "J\xF8rgen Steen Holst",
      theme: "4",
      title: "Disappearing Snow - The Norwegian Ski Culture in a Changing Climate",
      email: "jorgen.sh@gmail.com",
      mobile: "+4790063843",
      stub: "jorgen-steen-holst"
    },
    {
      id: "16873",
      studio: "2A",
      name: "Julie Holk",
      theme: "1",
      title: "Interaktion til Motivation - Et ressourcest\xE6rkt f\xE6llesskab",
      email: "julieholk@live.dk",
      mobile: "+4540820961",
      stub: "julie-holk"
    },
    {
      id: "16800",
      studio: "3",
      name: "Karl Henrik Kobbeltvedt",
      theme: "1",
      title: "Knubben- The rehabilitation of an old essential",
      email: "4004118@stud.aarch.dk",
      mobile: "+4560166904",
      stub: "karl-henrik-kobbeltvedt"
    },
    {
      id: "16786",
      studio: "1C",
      name: "Kathrine Grundahl Hansen",
      theme: "2",
      title: "ET MARITIMT CENTER - En transformation af siloerne ved Lilleb\xE6lt",
      email: "kathrineghansen@icloud.com",
      mobile: "+4560628667",
      stub: "kathrine-grundahl-hansen"
    },
    {
      id: "16781",
      studio: "2C",
      name: "Khadar Yusuf Awil",
      theme: "2",
      title: "Livet mellem reolerne: et lokalbibliotek i Aalborg Vestby",
      email: "khadaryawil@gmail.com",
      mobile: "+4531160731",
      stub: "khadar-yusuf-awil"
    },
    {
      id: "16773",
      studio: "2B",
      name: "Kristoffer Holmgaard Gade",
      theme: "7",
      title: "AN UNWELCOME GUEST - A PARASITIC HABITAT FOR A NUCLEAR REACTOR",
      email: "kristoffergade@hotmail.com",
      mobile: "+4551364317",
      stub: "kristoffer-holmgaard-gade"
    },
    {
      id: "16758",
      studio: "1B",
      name: "Lisa Sippli",
      theme: "5",
      title: "ZECHE GNEISENAU",
      email: "lisa.sippli@gmail.com",
      mobile: "+4553806080",
      stub: "lisa-sippli"
    },
    {
      id: "16787",
      studio: "2A",
      name: "Lucas Edwards",
      theme: "2",
      title: "Song to Song",
      email: "lucas.e@protonmail.com",
      mobile: "+4553624123",
      stub: "lucas-edwards"
    },
    {
      id: "16779",
      studio: "3",
      name: "Malene J\xF8rs Nielsen",
      theme: "4",
      title: "Night Tide",
      email: "malenejorsnielsen@gmail.com",
      mobile: "+4528910408",
      stub: "malene-jors-nielsen"
    },
    {
      id: "16760",
      studio: "3",
      name: "Marlene Hindsted",
      theme: "4",
      title: "A Production To the Seabed",
      email: "4003711@stud.aarch.dk",
      mobile: "+4526118224",
      stub: "marlene-hindsted"
    },
    {
      id: "16784",
      studio: "2A",
      name: "Mathilde Ballegaard Lehrmann",
      theme: "1",
      title: "In between life & death: Spaces of Transition",
      email: "mathilde.b.lehrmann@gmail.com",
      mobile: "+4528555112",
      stub: "mathilde-ballegaard-lehrmann"
    },
    {
      id: "16864",
      studio: "3",
      name: "Michelle Skov Justesen",
      theme: "3",
      title: "Rebirth and transformation of Randers harbour",
      email: "michelle_justesen@hotmail.com",
      mobile: "+4520696502",
      stub: "michelle-skov-justesen"
    },
    {
      id: "16808",
      studio: "2A",
      name: "Michelle Rosenvinge",
      theme: "1",
      title: "Perception in the absence of vision  \xB7  Rehabilitation for the visually impaired",
      email: "m.rosenvinge@icloud.com",
      mobile: "+4529277008",
      stub: "michelle-rosenvinge"
    },
    {
      id: "16766",
      studio: "2C",
      name: "Morten Aggerholm Andersen",
      theme: "1",
      title: "EN MENINGSGIVENDE FUSIONERING AF TO KOMMUNALE INSTITUTIONER",
      email: "morten_aggerholm@hotmail.com",
      mobile: "+4524433931",
      stub: "morten-aggerholm-andersen"
    },
    {
      id: "16769",
      studio: "1C",
      name: "Nora Dyrvik",
      theme: "2",
      title: "Fra musem til mat- og musikkhus. En radikal transformasjon av Munchmuseet",
      email: "norarsund@hotmail.com",
      mobile: "+4791822829",
      stub: "nora-dyrvik"
    },
    {
      id: "16782",
      studio: "1C",
      name: "Patrick Bunke",
      theme: "3",
      title: "Immervad - Et Klimatorium i \xC5dalen",
      email: "4003780@stud.aarch.dk",
      mobile: "+4522464872",
      stub: "patrick-bunke"
    },
    {
      id: "16754",
      studio: "2A",
      name: "Rosa Prichard",
      theme: "5",
      title: "Decentering the Visitor, A Critical Reframing of Bornholm's Extracted Landscapes",
      email: "rosaprich@gmail.com",
      mobile: "+4550188279",
      stub: "rosa-prichard"
    },
    {
      id: "16780",
      studio: "2C",
      name: "Sarah Ghobadi",
      theme: "1",
      title: "Den N\xE6re Arbejdsplads: Et Bokoncept til Fremme af Hjemmearbejde & Lokalmilj\xF8",
      email: "Sarahghobadi@hotmail.com",
      mobile: "+4560527247",
      stub: "sarah-ghobadi"
    },
    {
      id: "16728",
      studio: "1A",
      name: "Sebastian Yeoman",
      theme: "3",
      title: "En Bydel Forankret i Historien",
      email: "Yeoman_66@hotmail.com",
      mobile: "+4553633954",
      stub: "sebastian-yeoman"
    },
    {
      id: "16809",
      studio: "1C",
      name: "Silja Nordv\xE5g",
      theme: "2",
      title: "Alfheim satellittuniversitet - En radikal transformasjon av en senmodernistisk sv\xF8mmehall",
      email: "siljanordvag@gmail.com",
      mobile: "+4793214265",
      stub: "silja-nordvag"
    },
    {
      id: "16788",
      studio: "2C",
      name: "Simon Smedsmo",
      theme: "2",
      title: "Sport og naturfaciliteter i s\xF8omr\xE5de i Holstebro",
      email: "simonsmedsmo@hotmail.com",
      mobile: "+4530661262",
      stub: "simon-smedsmo"
    },
    {
      id: "16778",
      studio: "1C",
      name: "Simon Rode Gregersen",
      theme: "2",
      title: "Krigens lag - transformation af Field Station Berlin",
      email: "simonrodegregersen@gmail.com",
      mobile: "+4526374616",
      stub: "simon-rode-gregersen"
    },
    {
      id: "16765",
      studio: "1A",
      name: "Simone Stell\xF4 Stels\xF8 Lauridsen",
      theme: "5",
      title: "LAND & VAND - landskabet p\xE5 MOLS",
      email: "simone.stelsoe@gmail.com",
      mobile: "+4560110460",
      stub: "simone-stello-stelso-lauridsen"
    },
    {
      id: "16813",
      studio: "1B",
      name: "Solveig Paulsen",
      theme: "6",
      title: "Deichmanske Bibliotek",
      email: "solveig.paulsen@hotmail.com",
      mobile: "+4527630027",
      stub: "solveig-paulsen"
    },
    {
      id: "16737",
      studio: "3",
      name: "Stine Skovbjerg",
      theme: "1",
      title: "The New Old Way - A School for Self-sustainable Farming",
      email: "stineskovbjerg92@hotmail.com",
      mobile: "+4561318779",
      stub: "stine-skovbjerg"
    },
    {
      id: "16762",
      studio: "2C",
      name: "Tanja Haugstrup Hansen",
      theme: "1",
      title: "3 generationer under samme tag - p\xE5 kanten af by og land",
      email: "haugstrup24@gmail.com",
      mobile: "+4560678768",
      stub: "tanja-haugstrup-hansen"
    },
    {
      id: "16785",
      studio: "2C",
      name: "Tanja Tofte Thomsen",
      theme: "2",
      title: "Et naturvandrerhjem p\xE5 R\xF8sn\xE6s",
      email: "tanja-tt@hotmail.com",
      mobile: "+4525332117",
      stub: "tanja-tofte-thomsen"
    },
    {
      id: "16783",
      studio: "1C",
      name: "Thomas Maagaard",
      theme: "3",
      title: "Immervad - Et Klimatorium i \xC5dalen",
      email: "thomasmaagaard@hotmail.com",
      mobile: "+4528432906",
      stub: "thomas-maagaard"
    },
    {
      id: "16997",
      studio: "1A",
      name: "Thorbj\xF8rn Klitgaard",
      theme: "3",
      title: "Kystsikring og byudvikling i Kerteminde",
      email: "f.t.c.klitgaard@gmail.com",
      mobile: "+4542309760",
      stub: "thorbjorn-klitgaard"
    },
    {
      id: "16793",
      studio: "2C",
      name: "Thorlak Solberg",
      theme: "1",
      title: "T\xE6ttere p\xE5 naturen: H\xF8jskolen som m\xF8dested og mulighedsrum",
      email: "thorlakk@gmail.com",
      mobile: "+4551512563",
      stub: "thorlak-solberg"
    },
    {
      id: "16918",
      studio: "1C",
      name: "Tonje Madsen",
      theme: "2",
      title: "'Arkopolis-h\xF8yden' - En radikal transformasjon av et kulturelt landemerke i Stavanger",
      email: "tonjemadsenb@gmail.com",
      mobile: "+4527606545",
      stub: "tonje-madsen"
    },
    {
      id: "16812",
      studio: "1B",
      name: "Tora Walseng",
      theme: "6",
      title: "Deichmanske Bibliotek",
      email: "torawalseng@gmail.com",
      mobile: "+4745868872",
      stub: "tora-walseng"
    },
    {
      id: "16871",
      studio: "1B",
      name: "Vibeke Vildbrad Kristiansen",
      theme: "6",
      title: "Restaurering af Klingeb\xE6kg\xE5rd",
      email: "vibekevildbrad@hotmail.com",
      mobile: "+4522818216",
      stub: "vibeke-vildbrad-kristiansen"
    }
  ];

  // app/data.js
  function compare(a, b) {
    if (a.name < b.name) {
      return -1;
    }
    if (a.name > b.name) {
      return 1;
    }
    return 0;
  }
  DATA_STUDENTS.sort(compare);

  // app/data/paths.js
  var PATHS = {
    airplane: "M17.2,2.3L2.5,8.4C2.1,8.5,2.2,9.1,2.5,9.1l6.8,1.5l1.5,6.8c0.1,0.4,0.6,0.4,0.7,0.1l6.1-14.7C17.9,2.5,17.5,2.1,17.2,2.3",
    circle: "M10,0.6c-5.2,0-9.4,4.2-9.4,9.4s4.2,9.4,9.4,9.4s9.4-4.2,9.4-9.4C19.4,4.8,15.2,0.6,10,0.6",
    cloud: "M16.9,8.6c0-0.1,0-0.2,0-0.4c0-2.9-2.3-5.2-5.2-5.2c-2,0-3.7,1.1-4.6,2.8c-0.3-0.1-0.7-0.2-1-0.2 c-1.7,0-3,1.3-3,3c0,0.2,0,0.4,0.1,0.6c-1.5,0.5-2.6,2-2.6,3.7c0,2.1,1.7,3.9,3.9,3.9h10.8c2.4,0,4.3-1.9,4.3-4.3 C19.5,10.8,18.4,9.3,16.9,8.6",
    heart: "M9.7,17.1l-6.6-6.5C2.9,10.3,2.7,10,2.5,9.7C1.4,7.9,1.7,5.6,3.2,4.1c0.9-0.9,2-1.3,3.2-1.3c1.9,0,3.1,1.1,3.6,1.8 c0.5-0.6,1.7-1.8,3.6-1.8c1.2,0,2.4,0.5,3.2,1.3c1.5,1.5,1.8,3.8,0.7,5.5c-0.2,0.3-0.4,0.6-0.7,0.9l-6.6,6.5 C10.1,17.2,9.9,17.2,9.7,17.1",
    star: "M17.7,7.9l-5.1-0.7l-2.2-4.7c-0.1-0.3-0.5-0.3-0.7,0L7.4,7.3L2.3,7.9C2,8,1.9,8.3,2.1,8.5l3.8,3.6l-0.9,5.1 c-0.1,0.3,0.3,0.5,0.5,0.4l4.5-2.5l4.5,2.5c0.3,0.2,0.6-0.1,0.5-0.4l-0.9-5.1l3.8-3.6C18.1,8.3,18,8,17.7,7.9",
    tpl: "M15.898,4.045c-0.271-0.272-0.713-0.272-0.986,0l-4.71,4.711L5.493,4.045c-0.272-0.272-0.714-0.272-0.986,0s-0.272,0.714,0,0.986l4.709,4.711l-4.71,4.711c-0.272,0.271-0.272,0.713,0,0.986c0.136,0.136,0.314,0.203,0.492,0.203c0.179,0,0.357-0.067,0.493-0.203l4.711-4.711l4.71,4.711c0.137,0.136,0.314,0.203,0.494,0.203c0.178,0,0.355-0.067,0.492-0.203c0.273-0.273,0.273-0.715,0-0.986l-4.711-4.711l4.711-4.711C16.172,4.759,16.172,4.317,15.898,4.045z",
    x: "M15.898,4.045c-0.271-0.272-0.713-0.272-0.986,0l-4.71,4.711L5.493,4.045c-0.272-0.272-0.714-0.272-0.986,0s-0.272,0.714,0,0.986l4.709,4.711l-4.71,4.711c-0.272,0.271-0.272,0.713,0,0.986c0.136,0.136,0.314,0.203,0.492,0.203c0.179,0,0.357-0.067,0.493-0.203l4.711-4.711l4.71,4.711c0.137,0.136,0.314,0.203,0.494,0.203c0.178,0,0.355-0.067,0.492-0.203c0.273-0.273,0.273-0.715,0-0.986l-4.711-4.711l4.711-4.711C16.172,4.759,16.172,4.317,15.898,4.045z",
    x2: "M15.9,4c-0.3-0.3-0.7-0.3-1,0c0,0-3.4,2.7-4.7,2.7C8.8,6.8,5.5,4,5.5,4c-0.3-0.3-0.7-0.3-1,0s-0.3,0.7,0,1 c0,0,2.7,3.4,2.7,4.7c0,1.4-2.7,4.7-2.7,4.7c-0.3,0.3-0.3,0.7,0,1c0.1,0.1,0.3,0.2,0.5,0.2c0.2,0,0.4-0.1,0.5-0.2 c0,0,3.4-2.7,4.7-2.7c1.4,0,4.7,2.7,4.7,2.7c0.1,0.1,0.3,0.2,0.5,0.2c0.2,0,0.4-0.1,0.5-0.2c0.3-0.3,0.3-0.7,0-1 c0,0-2.7-3.4-2.7-4.7S15.9,5,15.9,5C16.2,4.8,16.2,4.3,15.9,4z",
    x3: "M6.1,6.6C4.7,5.4,3.7,4.2,4,3.4c0.6-1.5,6.1-1.5,7.1,0.4c1.1,2.2-4.7,5.2-3.8,8.7c0.6,2.5,4.6,4.8,7,3.5 c2.1-1.1,3-4.7,1.5-6.4c-1.1-1.2-3.1-1.1-4.5-0.6c-2.7,1-4.4,4.6-4.1,9",
    x4: "M5.6,6.4C5.5,6.5,3.1,8.5,1.9,7.7C0.7,7,0.9,3.5,2.8,2.3c1.9-1.3,5,0.1,5.8,1.9c0.7,1.7-1.1,2.8-0.8,6 c0,0.4,0.4,3.7,2.5,4.5c1,0.4,2.5,0.1,3.2-0.8c0.9-1.2,0.3-3.2-0.7-4.2c-1.6-1.6-4.7-1-6.3,0.6c-0.2,0.2-1.4,1.5-1.2,3.3 c0.3,2.4,2.9,3.5,3.5,3.8c3,1.3,7.9,0.9,9.6-2.4c1.9-3.5-0.9-8.5-4.7-10C9.9,3.7,6.4,5.8,6,6.1",
    x5: "M0.7,10.9c0.8-6,1.6-10,2.2-10C4.1,1,3.7,19.2,4.6,19.3c0.9,0,1.9-18.6,2.9-18.6c1,0,1,18.7,2,18.7 c1,0,1.9-18.7,2.7-18.7c0.8,0,0.7,18.4,1.5,18.4c0.8,0,1.9-18.3,2.6-18.3c0.7,0,0.2,17.9,1.2,18c0.4,0,1.1-3.9,1.8-10.1"
  };

  // app/fallback.js
  var checkWebGL = () => {
    const c = document.createElement("canvas");
    const gl = c.getContext("webgl") || c.getContext("experimental-webgl");
    return gl && gl instanceof WebGLRenderingContext;
  };

  // index.banner.js
  /*! 
  
   *******************************************************************************
   * Hi!                                                                         *
   * Drop js@dearstudio.dk an email if you want access to the un-minified source *
   * (CC BY-NC-SA 4.0)                                                           *
   *******************************************************************************
   
  */
  console.log("PATHS:", PATHS);
  var balls = [];
  var numballs = DATA_STUDENTS.length || 20;
  var camera;
  var renderer2;
  var scene;
  var clock;
  var group;
  var eraser;
  var targetQuat;
  var originQuat;
  var timeout = null;
  var speeds = [
    0.1 + Math.random() * 0.4,
    0.1 + Math.random() * 0.4,
    0.1 + Math.random() * 0.4
  ];
  var TITLEB64 = "";
  var main = (selector) => {
    document.querySelector("#title").style.backgroundImage = `url(data:image/png;base64,${TITLEB64})`;
    if (checkWebGL()) {
      initAnimation(selector);
    } else {
      document.querySelector("#fallback").style.display = "block";
    }
  };
  var initAnimation = (selector) => {
    es6_tween2.autoPlay(true);
    init_scene(selector);
    init_balls();
    update();
    timeout = setInterval(() => {
      randomize();
    }, 14e3);
    randomize();
  };
  var init_scene = (selector) => {
    window.app = {mode: "free"};
    window.addEventListener("resize", OnWindowResize, false);
    document.querySelector(selector).addEventListener("click", randomize);
    document.querySelector(selector).addEventListener("touchend", randomize);
    clock = new Clock();
    renderer2 = new WebGLRenderer({preserveDrawingBuffer: true, antialias: true});
    renderer2.setPixelRatio(window.devicePixelRatio);
    renderer2.setSize(window.innerWidth, window.innerHeight);
    window.renderer = renderer2;
    renderer2.autoClearColor = false;
    renderer2.domElement.id = "three";
    document.querySelector(selector).appendChild(renderer2.domElement);
    scene = new Scene();
    group = new Group();
    group.rotation.set(0, Math.PI, Math.PI);
    scene.add(group);
    camera = new PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1e-3, 1e3);
    scene.add(camera);
    camera.position.set(0, 0, 4);
    camera.lookAt(group.position);
    eraser = new Eraser();
    scene.add(eraser.el);
    targetQuat = new Quaternion().setFromEuler(group.rotation);
    originQuat = new Quaternion().setFromEuler(group.rotation);
  };
  var init_balls = () => {
    const normalTexture = GenerateTexture("#eee", "#fff", 10);
    const hoverTexture = GenerateTexture("#fff", "#000", 20);
    for (let i = 0; i < numballs; i++) {
      balls.push(new CircleSprite(group, i, DATA_STUDENTS[i], normalTexture, hoverTexture));
    }
  };
  var randomize = () => {
    _moveto_random_path();
  };
  window.randomize = randomize;
  var _moveto_random_path = () => {
    console.log("_moveto_random_path()");
    const pathKeys = Object.keys(PATHS);
    const index = Math.floor(Math.random() * pathKeys.length);
    const p = PATHS[pathKeys[index]];
    console.log("using index", index, "key:", pathKeys[index], "p:", p);
    const parser = new DOMParser();
    const doc = parser.parseFromString(`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="${p}" /></svg>`, "image/svg+xml");
    const S = 30;
    const path = doc.querySelector("path");
    const length = path.getTotalLength();
    const inc = length / numballs;
    const positions = [];
    for (let i = 0; i < numballs; i++) {
      const p2 = path.getPointAtLength(inc * i);
      const x = -1 + 2 * (p2.x / S);
      const y = -1 + 2 * (p2.y / S);
      const z = 0;
      positions.push({x, y, z});
    }
    applyPositions(positions);
  };
  var applyPositions = (positions, blendMax = null, blendMin = null, hideTrailsFor = 100, clearTrails = true) => {
    if (clearTrails)
      eraser.clearScreen();
    let delay = 0;
    for (let i = 0; i < numballs; i++) {
      delay = i * 10;
      setTimeout(() => {
        balls[i].setTarget({x: 0, y: 0, z: 0});
        setTimeout(() => {
          balls[i].setTarget(positions[i]);
        }, 100);
      }, delay);
    }
    setTimeout(() => {
      eraser.blendDown(blendMin);
    }, delay + hideTrailsFor + 100);
  };
  var update = () => {
    requestAnimationFrame(update);
    balls.forEach((b) => b.update());
    eraser.update();
    const speed = 0.33;
    const elapsedTime = clock.getElapsedTime();
    group.rotation.y = elapsedTime * speeds[0];
    group.rotation.x = elapsedTime * speeds[1];
    group.rotation.z = elapsedTime * speeds[2];
    targetQuat = targetQuat.setFromEuler(group.rotation);
    group.quaternion.slerp(targetQuat, 0.01);
    renderer2.render(scene, camera);
  };
  var OnWindowResize = () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer2.setSize(window.innerWidth, window.innerHeight);
  };
  main("#animation");
})();
